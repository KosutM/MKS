
cv05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e6c  08004e6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004e6c  08004e6c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e6c  08004e6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e6c  08004e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001dc  08005050  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08005050  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a894  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c64  00000000  00000000  0002aa98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0002c700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d6c4  00000000  00000000  0002d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008dc4  00000000  00000000  0003b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00046fa8  00000000  00000000  00043e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008ae18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb4  00000000  00000000  0008ae94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bbc 	.word	0x08004bbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08004bbc 	.word	0x08004bbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_write>:
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char const *buf, int n)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	b29a      	uxth	r2, r3
 8000230:	2301      	movs	r3, #1
 8000232:	425b      	negs	r3, r3
 8000234:	68b9      	ldr	r1, [r7, #8]
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <_write+0x28>)
 8000238:	f002 fe6e 	bl	8002f18 <HAL_UART_Transmit>
	return n;
 800023c:	687b      	ldr	r3, [r7, #4]
}
 800023e:	0018      	movs	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000318 	.word	0x20000318

0800024c <uart_process_command>:

static void uart_process_command(char *cmd)						//process command coming to uart
{
 800024c:	b5b0      	push	{r4, r5, r7, lr}
 800024e:	b08e      	sub	sp, #56	; 0x38
 8000250:	af04      	add	r7, sp, #16
 8000252:	6078      	str	r0, [r7, #4]
	//printf("prijato: '%s'\n", cmd);

	char *token;
	token = strtok(cmd, " ");
 8000254:	4ab8      	ldr	r2, [pc, #736]	; (8000538 <uart_process_command+0x2ec>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	0011      	movs	r1, r2
 800025a:	0018      	movs	r0, r3
 800025c:	f003 fc56 	bl	8003b0c <strtok>
 8000260:	0003      	movs	r3, r0
 8000262:	623b      	str	r3, [r7, #32]

	if (strcasecmp(token, "HELLO") == 0)
 8000264:	4ab5      	ldr	r2, [pc, #724]	; (800053c <uart_process_command+0x2f0>)
 8000266:	6a3b      	ldr	r3, [r7, #32]
 8000268:	0011      	movs	r1, r2
 800026a:	0018      	movs	r0, r3
 800026c:	f003 fc30 	bl	8003ad0 <strcasecmp>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d104      	bne.n	800027e <uart_process_command+0x32>
	{
		printf("Komunikace OK\n");
 8000274:	4bb2      	ldr	r3, [pc, #712]	; (8000540 <uart_process_command+0x2f4>)
 8000276:	0018      	movs	r0, r3
 8000278:	f003 fc20 	bl	8003abc <puts>
	else
	{
		printf("Neznamy prikaz\n");
	}

}
 800027c:	e157      	b.n	800052e <uart_process_command+0x2e2>
	else if (strcasecmp(token, "LED1") == 0)								//set LED1 ON/OFF
 800027e:	4ab1      	ldr	r2, [pc, #708]	; (8000544 <uart_process_command+0x2f8>)
 8000280:	6a3b      	ldr	r3, [r7, #32]
 8000282:	0011      	movs	r1, r2
 8000284:	0018      	movs	r0, r3
 8000286:	f003 fc23 	bl	8003ad0 <strcasecmp>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d12a      	bne.n	80002e4 <uart_process_command+0x98>
		token = strtok(NULL, " ");
 800028e:	4baa      	ldr	r3, [pc, #680]	; (8000538 <uart_process_command+0x2ec>)
 8000290:	0019      	movs	r1, r3
 8000292:	2000      	movs	r0, #0
 8000294:	f003 fc3a 	bl	8003b0c <strtok>
 8000298:	0003      	movs	r3, r0
 800029a:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0)
 800029c:	4aaa      	ldr	r2, [pc, #680]	; (8000548 <uart_process_command+0x2fc>)
 800029e:	6a3b      	ldr	r3, [r7, #32]
 80002a0:	0011      	movs	r1, r2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f003 fc14 	bl	8003ad0 <strcasecmp>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d107      	bne.n	80002bc <uart_process_command+0x70>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80002ac:	2390      	movs	r3, #144	; 0x90
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	2201      	movs	r2, #1
 80002b2:	2110      	movs	r1, #16
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 f99a 	bl	80015ee <HAL_GPIO_WritePin>
 80002ba:	e00e      	b.n	80002da <uart_process_command+0x8e>
		else if (strcasecmp(token, "OFF") == 0)
 80002bc:	4aa3      	ldr	r2, [pc, #652]	; (800054c <uart_process_command+0x300>)
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	0011      	movs	r1, r2
 80002c2:	0018      	movs	r0, r3
 80002c4:	f003 fc04 	bl	8003ad0 <strcasecmp>
 80002c8:	1e03      	subs	r3, r0, #0
 80002ca:	d106      	bne.n	80002da <uart_process_command+0x8e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80002cc:	2390      	movs	r3, #144	; 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2200      	movs	r2, #0
 80002d2:	2110      	movs	r1, #16
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 f98a 	bl	80015ee <HAL_GPIO_WritePin>
		printf("OK\n");
 80002da:	4b9d      	ldr	r3, [pc, #628]	; (8000550 <uart_process_command+0x304>)
 80002dc:	0018      	movs	r0, r3
 80002de:	f003 fbed 	bl	8003abc <puts>
}
 80002e2:	e124      	b.n	800052e <uart_process_command+0x2e2>
	else if (strcasecmp(token, "LED2") == 0)								//set LED2 ON/OFF
 80002e4:	4a9b      	ldr	r2, [pc, #620]	; (8000554 <uart_process_command+0x308>)
 80002e6:	6a3b      	ldr	r3, [r7, #32]
 80002e8:	0011      	movs	r1, r2
 80002ea:	0018      	movs	r0, r3
 80002ec:	f003 fbf0 	bl	8003ad0 <strcasecmp>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d128      	bne.n	8000346 <uart_process_command+0xfa>
		token = strtok(NULL, " ");
 80002f4:	4b90      	ldr	r3, [pc, #576]	; (8000538 <uart_process_command+0x2ec>)
 80002f6:	0019      	movs	r1, r3
 80002f8:	2000      	movs	r0, #0
 80002fa:	f003 fc07 	bl	8003b0c <strtok>
 80002fe:	0003      	movs	r3, r0
 8000300:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0)
 8000302:	4a91      	ldr	r2, [pc, #580]	; (8000548 <uart_process_command+0x2fc>)
 8000304:	6a3b      	ldr	r3, [r7, #32]
 8000306:	0011      	movs	r1, r2
 8000308:	0018      	movs	r0, r3
 800030a:	f003 fbe1 	bl	8003ad0 <strcasecmp>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d106      	bne.n	8000320 <uart_process_command+0xd4>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000312:	4b91      	ldr	r3, [pc, #580]	; (8000558 <uart_process_command+0x30c>)
 8000314:	2201      	movs	r2, #1
 8000316:	2101      	movs	r1, #1
 8000318:	0018      	movs	r0, r3
 800031a:	f001 f968 	bl	80015ee <HAL_GPIO_WritePin>
 800031e:	e00d      	b.n	800033c <uart_process_command+0xf0>
		else if (strcasecmp(token, "OFF") == 0)
 8000320:	4a8a      	ldr	r2, [pc, #552]	; (800054c <uart_process_command+0x300>)
 8000322:	6a3b      	ldr	r3, [r7, #32]
 8000324:	0011      	movs	r1, r2
 8000326:	0018      	movs	r0, r3
 8000328:	f003 fbd2 	bl	8003ad0 <strcasecmp>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d105      	bne.n	800033c <uart_process_command+0xf0>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000330:	4b89      	ldr	r3, [pc, #548]	; (8000558 <uart_process_command+0x30c>)
 8000332:	2200      	movs	r2, #0
 8000334:	2101      	movs	r1, #1
 8000336:	0018      	movs	r0, r3
 8000338:	f001 f959 	bl	80015ee <HAL_GPIO_WritePin>
		printf("OK\n");
 800033c:	4b84      	ldr	r3, [pc, #528]	; (8000550 <uart_process_command+0x304>)
 800033e:	0018      	movs	r0, r3
 8000340:	f003 fbbc 	bl	8003abc <puts>
}
 8000344:	e0f3      	b.n	800052e <uart_process_command+0x2e2>
	else if (strcasecmp(token, "STATUS") == 0)								//get LED1 and LED2 current status (ON/OFF)
 8000346:	4a85      	ldr	r2, [pc, #532]	; (800055c <uart_process_command+0x310>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	0011      	movs	r1, r2
 800034c:	0018      	movs	r0, r3
 800034e:	f003 fbbf 	bl	8003ad0 <strcasecmp>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d125      	bne.n	80003a2 <uart_process_command+0x156>
		printf("Stav: ");
 8000356:	4b82      	ldr	r3, [pc, #520]	; (8000560 <uart_process_command+0x314>)
 8000358:	0018      	movs	r0, r3
 800035a:	f003 fb21 	bl	80039a0 <iprintf>
		if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == 0)
 800035e:	2390      	movs	r3, #144	; 0x90
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	2110      	movs	r1, #16
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f925 	bl	80015b4 <HAL_GPIO_ReadPin>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d104      	bne.n	8000378 <uart_process_command+0x12c>
			printf("LED1=OFF, ");
 800036e:	4b7d      	ldr	r3, [pc, #500]	; (8000564 <uart_process_command+0x318>)
 8000370:	0018      	movs	r0, r3
 8000372:	f003 fb15 	bl	80039a0 <iprintf>
 8000376:	e003      	b.n	8000380 <uart_process_command+0x134>
			printf("LED1=ON, ");
 8000378:	4b7b      	ldr	r3, [pc, #492]	; (8000568 <uart_process_command+0x31c>)
 800037a:	0018      	movs	r0, r3
 800037c:	f003 fb10 	bl	80039a0 <iprintf>
		if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) == 0)
 8000380:	4b75      	ldr	r3, [pc, #468]	; (8000558 <uart_process_command+0x30c>)
 8000382:	2101      	movs	r1, #1
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f915 	bl	80015b4 <HAL_GPIO_ReadPin>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d104      	bne.n	8000398 <uart_process_command+0x14c>
			printf("LED2=OFF\n");
 800038e:	4b77      	ldr	r3, [pc, #476]	; (800056c <uart_process_command+0x320>)
 8000390:	0018      	movs	r0, r3
 8000392:	f003 fb93 	bl	8003abc <puts>
}
 8000396:	e0ca      	b.n	800052e <uart_process_command+0x2e2>
			printf("LED2=ON\n");
 8000398:	4b75      	ldr	r3, [pc, #468]	; (8000570 <uart_process_command+0x324>)
 800039a:	0018      	movs	r0, r3
 800039c:	f003 fb8e 	bl	8003abc <puts>
}
 80003a0:	e0c5      	b.n	800052e <uart_process_command+0x2e2>
	else if (strcasecmp(token, "READ") == 0)								//read 1B from I2C EEPROM (e.g. read 0 - read value from address 0)
 80003a2:	4a74      	ldr	r2, [pc, #464]	; (8000574 <uart_process_command+0x328>)
 80003a4:	6a3b      	ldr	r3, [r7, #32]
 80003a6:	0011      	movs	r1, r2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f003 fb91 	bl	8003ad0 <strcasecmp>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d127      	bne.n	8000402 <uart_process_command+0x1b6>
		token = strtok(NULL, " ");
 80003b2:	4b61      	ldr	r3, [pc, #388]	; (8000538 <uart_process_command+0x2ec>)
 80003b4:	0019      	movs	r1, r3
 80003b6:	2000      	movs	r0, #0
 80003b8:	f003 fba8 	bl	8003b0c <strtok>
 80003bc:	0003      	movs	r3, r0
 80003be:	623b      	str	r3, [r7, #32]
		uint16_t addr = atoi(token);
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	0018      	movs	r0, r3
 80003c4:	f003 fab4 	bl	8003930 <atoi>
 80003c8:	0002      	movs	r2, r0
 80003ca:	241a      	movs	r4, #26
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	881a      	ldrh	r2, [r3, #0]
 80003d4:	4868      	ldr	r0, [pc, #416]	; (8000578 <uart_process_command+0x32c>)
 80003d6:	23fa      	movs	r3, #250	; 0xfa
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	9302      	str	r3, [sp, #8]
 80003dc:	2301      	movs	r3, #1
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	2519      	movs	r5, #25
 80003e2:	197b      	adds	r3, r7, r5
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2302      	movs	r3, #2
 80003e8:	21a0      	movs	r1, #160	; 0xa0
 80003ea:	f001 fae1 	bl	80019b0 <HAL_I2C_Mem_Read>
		printf("Adresa 0x%04X = 0x%02X\n",addr, value);
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	8819      	ldrh	r1, [r3, #0]
 80003f2:	197b      	adds	r3, r7, r5
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	001a      	movs	r2, r3
 80003f8:	4b60      	ldr	r3, [pc, #384]	; (800057c <uart_process_command+0x330>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f003 fad0 	bl	80039a0 <iprintf>
}
 8000400:	e095      	b.n	800052e <uart_process_command+0x2e2>
	else if (strcasecmp(token, "WRITE") == 0)								//write 1B to I2C EEPROM (e.g. write 0 2 - write 0x02 to address 0)
 8000402:	4a5f      	ldr	r2, [pc, #380]	; (8000580 <uart_process_command+0x334>)
 8000404:	6a3b      	ldr	r3, [r7, #32]
 8000406:	0011      	movs	r1, r2
 8000408:	0018      	movs	r0, r3
 800040a:	f003 fb61 	bl	8003ad0 <strcasecmp>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d13e      	bne.n	8000490 <uart_process_command+0x244>
		token = strtok(NULL, " ");
 8000412:	4b49      	ldr	r3, [pc, #292]	; (8000538 <uart_process_command+0x2ec>)
 8000414:	0019      	movs	r1, r3
 8000416:	2000      	movs	r0, #0
 8000418:	f003 fb78 	bl	8003b0c <strtok>
 800041c:	0003      	movs	r3, r0
 800041e:	623b      	str	r3, [r7, #32]
		uint16_t addr = atoi(token);
 8000420:	6a3b      	ldr	r3, [r7, #32]
 8000422:	0018      	movs	r0, r3
 8000424:	f003 fa84 	bl	8003930 <atoi>
 8000428:	0002      	movs	r2, r0
 800042a:	241c      	movs	r4, #28
 800042c:	193b      	adds	r3, r7, r4
 800042e:	801a      	strh	r2, [r3, #0]
		token = strtok(NULL, " ");
 8000430:	4b41      	ldr	r3, [pc, #260]	; (8000538 <uart_process_command+0x2ec>)
 8000432:	0019      	movs	r1, r3
 8000434:	2000      	movs	r0, #0
 8000436:	f003 fb69 	bl	8003b0c <strtok>
 800043a:	0003      	movs	r3, r0
 800043c:	623b      	str	r3, [r7, #32]
		uint8_t value = atoi(token);
 800043e:	6a3b      	ldr	r3, [r7, #32]
 8000440:	0018      	movs	r0, r3
 8000442:	f003 fa75 	bl	8003930 <atoi>
 8000446:	0003      	movs	r3, r0
 8000448:	b2da      	uxtb	r2, r3
 800044a:	2118      	movs	r1, #24
 800044c:	187b      	adds	r3, r7, r1
 800044e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 8000450:	193b      	adds	r3, r7, r4
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4848      	ldr	r0, [pc, #288]	; (8000578 <uart_process_command+0x32c>)
 8000456:	23fa      	movs	r3, #250	; 0xfa
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	9302      	str	r3, [sp, #8]
 800045c:	2301      	movs	r3, #1
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	187b      	adds	r3, r7, r1
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2302      	movs	r3, #2
 8000466:	21a0      	movs	r1, #160	; 0xa0
 8000468:	f001 f974 	bl	8001754 <HAL_I2C_Mem_Write>
		while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDR, 300, 1000) == HAL_TIMEOUT) {}	// Check if the EEPROM is ready for a new operation
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	23fa      	movs	r3, #250	; 0xfa
 8000470:	0099      	lsls	r1, r3, #2
 8000472:	2396      	movs	r3, #150	; 0x96
 8000474:	005a      	lsls	r2, r3, #1
 8000476:	4840      	ldr	r0, [pc, #256]	; (8000578 <uart_process_command+0x32c>)
 8000478:	000b      	movs	r3, r1
 800047a:	21a0      	movs	r1, #160	; 0xa0
 800047c:	f001 fbcc 	bl	8001c18 <HAL_I2C_IsDeviceReady>
 8000480:	0003      	movs	r3, r0
 8000482:	2b03      	cmp	r3, #3
 8000484:	d0f3      	beq.n	800046e <uart_process_command+0x222>
		printf("OK\n");
 8000486:	4b32      	ldr	r3, [pc, #200]	; (8000550 <uart_process_command+0x304>)
 8000488:	0018      	movs	r0, r3
 800048a:	f003 fb17 	bl	8003abc <puts>
}
 800048e:	e04e      	b.n	800052e <uart_process_command+0x2e2>
	else if (strcasecmp(token, "DUMP") == 0)								//read all data from address 0x0000 to 0x000F
 8000490:	4a3c      	ldr	r2, [pc, #240]	; (8000584 <uart_process_command+0x338>)
 8000492:	6a3b      	ldr	r3, [r7, #32]
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f003 fb1a 	bl	8003ad0 <strcasecmp>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d142      	bne.n	8000526 <uart_process_command+0x2da>
		uint8_t addr = 0x0000;
 80004a0:	211f      	movs	r1, #31
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 16, 1000);
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	b29a      	uxth	r2, r3
 80004ae:	4832      	ldr	r0, [pc, #200]	; (8000578 <uart_process_command+0x32c>)
 80004b0:	23fa      	movs	r3, #250	; 0xfa
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	9302      	str	r3, [sp, #8]
 80004b6:	2310      	movs	r3, #16
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2308      	movs	r3, #8
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2302      	movs	r3, #2
 80004c2:	21a0      	movs	r1, #160	; 0xa0
 80004c4:	f001 fa74 	bl	80019b0 <HAL_I2C_Mem_Read>
		for (uint8_t i = 0; i < 16; i++)
 80004c8:	2327      	movs	r3, #39	; 0x27
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	e020      	b.n	8000514 <uart_process_command+0x2c8>
			if (i % 8 == 0 && i != 0)
 80004d2:	2327      	movs	r3, #39	; 0x27
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2207      	movs	r2, #7
 80004da:	4013      	ands	r3, r2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d107      	bne.n	80004f2 <uart_process_command+0x2a6>
 80004e2:	2327      	movs	r3, #39	; 0x27
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <uart_process_command+0x2a6>
				printf("\n");
 80004ec:	200a      	movs	r0, #10
 80004ee:	f003 fa71 	bl	80039d4 <putchar>
			printf("%02X ",value[i]);
 80004f2:	2427      	movs	r4, #39	; 0x27
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2208      	movs	r2, #8
 80004fa:	18ba      	adds	r2, r7, r2
 80004fc:	5cd3      	ldrb	r3, [r2, r3]
 80004fe:	001a      	movs	r2, r3
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <uart_process_command+0x33c>)
 8000502:	0011      	movs	r1, r2
 8000504:	0018      	movs	r0, r3
 8000506:	f003 fa4b 	bl	80039a0 <iprintf>
		for (uint8_t i = 0; i < 16; i++)
 800050a:	193b      	adds	r3, r7, r4
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	193b      	adds	r3, r7, r4
 8000510:	3201      	adds	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	2327      	movs	r3, #39	; 0x27
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b0f      	cmp	r3, #15
 800051c:	d9d9      	bls.n	80004d2 <uart_process_command+0x286>
		printf("\n");
 800051e:	200a      	movs	r0, #10
 8000520:	f003 fa58 	bl	80039d4 <putchar>
}
 8000524:	e003      	b.n	800052e <uart_process_command+0x2e2>
		printf("Neznamy prikaz\n");
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <uart_process_command+0x340>)
 8000528:	0018      	movs	r0, r3
 800052a:	f003 fac7 	bl	8003abc <puts>
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b00a      	add	sp, #40	; 0x28
 8000534:	bdb0      	pop	{r4, r5, r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	08004bd4 	.word	0x08004bd4
 800053c:	08004bd8 	.word	0x08004bd8
 8000540:	08004be0 	.word	0x08004be0
 8000544:	08004bf0 	.word	0x08004bf0
 8000548:	08004bf8 	.word	0x08004bf8
 800054c:	08004bfc 	.word	0x08004bfc
 8000550:	08004c00 	.word	0x08004c00
 8000554:	08004c04 	.word	0x08004c04
 8000558:	48000400 	.word	0x48000400
 800055c:	08004c0c 	.word	0x08004c0c
 8000560:	08004c14 	.word	0x08004c14
 8000564:	08004c1c 	.word	0x08004c1c
 8000568:	08004c28 	.word	0x08004c28
 800056c:	08004c34 	.word	0x08004c34
 8000570:	08004c40 	.word	0x08004c40
 8000574:	08004c48 	.word	0x08004c48
 8000578:	200002cc 	.word	0x200002cc
 800057c:	08004c50 	.word	0x08004c50
 8000580:	08004c68 	.word	0x08004c68
 8000584:	08004c70 	.word	0x08004c70
 8000588:	08004c78 	.word	0x08004c78
 800058c:	08004c80 	.word	0x08004c80

08000590 <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	0002      	movs	r2, r0
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126)
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <uart_byte_available+0x74>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	2b3f      	cmp	r3, #63	; 0x3f
 80005a2:	d812      	bhi.n	80005ca <uart_byte_available+0x3a>
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b1f      	cmp	r3, #31
 80005aa:	d90e      	bls.n	80005ca <uart_byte_available+0x3a>
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b7e      	cmp	r3, #126	; 0x7e
 80005b2:	d80a      	bhi.n	80005ca <uart_byte_available+0x3a>
		data[cnt++] = c;
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <uart_byte_available+0x74>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	b291      	uxth	r1, r2
 80005bc:	4a11      	ldr	r2, [pc, #68]	; (8000604 <uart_byte_available+0x74>)
 80005be:	8011      	strh	r1, [r2, #0]
 80005c0:	0019      	movs	r1, r3
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <uart_byte_available+0x78>)
 80005c4:	1dfa      	adds	r2, r7, #7
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0)
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b0a      	cmp	r3, #10
 80005d0:	d003      	beq.n	80005da <uart_byte_available+0x4a>
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b0d      	cmp	r3, #13
 80005d8:	d110      	bne.n	80005fc <uart_byte_available+0x6c>
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <uart_byte_available+0x74>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d00c      	beq.n	80005fc <uart_byte_available+0x6c>
	{
		data[cnt] = '\0';
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <uart_byte_available+0x74>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	001a      	movs	r2, r3
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <uart_byte_available+0x78>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <uart_byte_available+0x78>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f7ff fe2b 	bl	800024c <uart_process_command>
		cnt = 0;
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <uart_byte_available+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	801a      	strh	r2, [r3, #0]
	}
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000023a 	.word	0x2000023a
 8000608:	2000023c 	.word	0x2000023c

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fb85 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f83d 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f92b 	bl	8000874 <MX_GPIO_Init>
  MX_DMA_Init();
 800061e:	f000 f90b 	bl	8000838 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f8d9 	bl	80007d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000626:	f000 f897 	bl	8000758 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 800062a:	4916      	ldr	r1, [pc, #88]	; (8000684 <main+0x78>)
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <main+0x7c>)
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fd19 	bl	8003068 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while (uart_rx_read_ptr != uart_rx_write_ptr)
 8000636:	e019      	b.n	800066c <main+0x60>
		{
			uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <main+0x80>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	b29b      	uxth	r3, r3
 800063e:	0019      	movs	r1, r3
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <main+0x78>)
 8000644:	5c52      	ldrb	r2, [r2, r1]
 8000646:	701a      	strb	r2, [r3, #0]
			if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <main+0x80>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b29b      	uxth	r3, r3
 800064e:	3301      	adds	r3, #1
 8000650:	b29b      	uxth	r3, r3
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <main+0x80>)
 8000654:	1c19      	adds	r1, r3, #0
 8000656:	8011      	strh	r1, [r2, #0]
 8000658:	2b3f      	cmp	r3, #63	; 0x3f
 800065a:	d902      	bls.n	8000662 <main+0x56>
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <main+0x80>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
			uart_byte_available(b); // process every received byte with the RX state machine
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff ff92 	bl	8000590 <uart_byte_available>
		while (uart_rx_read_ptr != uart_rx_write_ptr)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <main+0x80>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	0019      	movs	r1, r3
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <main+0x84>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	2240      	movs	r2, #64	; 0x40
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	4299      	cmp	r1, r3
 8000680:	d1da      	bne.n	8000638 <main+0x2c>
 8000682:	e7f3      	b.n	800066c <main+0x60>
 8000684:	200001f8 	.word	0x200001f8
 8000688:	20000318 	.word	0x20000318
 800068c:	20000238 	.word	0x20000238
 8000690:	20000288 	.word	0x20000288

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b095      	sub	sp, #84	; 0x54
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2420      	movs	r4, #32
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2330      	movs	r3, #48	; 0x30
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 f973 	bl	8003990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	2310      	movs	r3, #16
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	0018      	movs	r0, r3
 80006b0:	2310      	movs	r3, #16
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f003 f96b 	bl	8003990 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ba:	003b      	movs	r3, r7
 80006bc:	0018      	movs	r0, r3
 80006be:	2310      	movs	r3, #16
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f003 f964 	bl	8003990 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2202      	movs	r2, #2
 80006ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2201      	movs	r2, #1
 80006d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2210      	movs	r2, #16
 80006da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2202      	movs	r2, #2
 80006e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	22a0      	movs	r2, #160	; 0xa0
 80006ec:	0392      	lsls	r2, r2, #14
 80006ee:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fe7d 	bl	80023f8 <HAL_RCC_OscConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000702:	f000 f949 	bl	8000998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	2110      	movs	r1, #16
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2207      	movs	r2, #7
 800070c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2202      	movs	r2, #2
 8000712:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2101      	movs	r1, #1
 8000724:	0018      	movs	r0, r3
 8000726:	f002 f983 	bl	8002a30 <HAL_RCC_ClockConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 f933 	bl	8000998 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000732:	003b      	movs	r3, r7
 8000734:	2220      	movs	r2, #32
 8000736:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000738:	003b      	movs	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073e:	003b      	movs	r3, r7
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fac7 	bl	8002cd4 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800074a:	f000 f925 	bl	8000998 <Error_Handler>
  }
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b015      	add	sp, #84	; 0x54
 8000754:	bd90      	pop	{r4, r7, pc}
	...

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_I2C1_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_I2C1_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_I2C1_Init+0x74>)
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_I2C1_Init+0x7c>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_I2C1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_I2C1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2C1_Init+0x74>)
 8000794:	0018      	movs	r0, r3
 8000796:	f000 ff47 	bl	8001628 <HAL_I2C_Init>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800079e:	f000 f8fb 	bl	8000998 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2C1_Init+0x74>)
 80007a4:	2100      	movs	r1, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 fd8e 	bl	80022c8 <HAL_I2CEx_ConfigAnalogFilter>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b0:	f000 f8f2 	bl	8000998 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_I2C1_Init+0x74>)
 80007b6:	2100      	movs	r1, #0
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 fdd1 	bl	8002360 <HAL_I2CEx_ConfigDigitalFilter>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007c2:	f000 f8e9 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200002cc 	.word	0x200002cc
 80007d0:	40005400 	.word	0x40005400
 80007d4:	2000090e 	.word	0x2000090e

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	2296      	movs	r2, #150	; 0x96
 80007e6:	0212      	lsls	r2, r2, #8
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	0018      	movs	r0, r3
 800081e:	f002 fb27 	bl	8002e70 <HAL_UART_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f8b7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000318 	.word	0x20000318
 8000834:	40004400 	.word	0x40004400

08000838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_DMA_Init+0x38>)
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_DMA_Init+0x38>)
 8000844:	2101      	movs	r1, #1
 8000846:	430a      	orrs	r2, r1
 8000848:	615a      	str	r2, [r3, #20]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_DMA_Init+0x38>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	2201      	movs	r2, #1
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	200b      	movs	r0, #11
 800085c:	f000 fb70 	bl	8000f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000860:	200b      	movs	r0, #11
 8000862:	f000 fb82 	bl	8000f6a <HAL_NVIC_EnableIRQ>

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	2414      	movs	r4, #20
 800087c:	193b      	adds	r3, r7, r4
 800087e:	0018      	movs	r0, r3
 8000880:	2314      	movs	r3, #20
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f003 f883 	bl	8003990 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <MX_GPIO_Init+0x114>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	4b3e      	ldr	r3, [pc, #248]	; (8000988 <MX_GPIO_Init+0x114>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0309      	lsls	r1, r1, #12
 8000894:	430a      	orrs	r2, r1
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <MX_GPIO_Init+0x114>)
 800089a:	695a      	ldr	r2, [r3, #20]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	031b      	lsls	r3, r3, #12
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <MX_GPIO_Init+0x114>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b37      	ldr	r3, [pc, #220]	; (8000988 <MX_GPIO_Init+0x114>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	03c9      	lsls	r1, r1, #15
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <MX_GPIO_Init+0x114>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	03db      	lsls	r3, r3, #15
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b31      	ldr	r3, [pc, #196]	; (8000988 <MX_GPIO_Init+0x114>)
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_GPIO_Init+0x114>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0289      	lsls	r1, r1, #10
 80008cc:	430a      	orrs	r2, r1
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_GPIO_Init+0x114>)
 80008d2:	695a      	ldr	r2, [r3, #20]
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	029b      	lsls	r3, r3, #10
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_GPIO_Init+0x114>)
 80008e0:	695a      	ldr	r2, [r3, #20]
 80008e2:	4b29      	ldr	r3, [pc, #164]	; (8000988 <MX_GPIO_Init+0x114>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	02c9      	lsls	r1, r1, #11
 80008e8:	430a      	orrs	r2, r1
 80008ea:	615a      	str	r2, [r3, #20]
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_GPIO_Init+0x114>)
 80008ee:	695a      	ldr	r2, [r3, #20]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	02db      	lsls	r3, r3, #11
 80008f4:	4013      	ands	r3, r2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2390      	movs	r3, #144	; 0x90
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2200      	movs	r2, #0
 8000900:	2130      	movs	r1, #48	; 0x30
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fe73 	bl	80015ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_GPIO_Init+0x118>)
 800090a:	2200      	movs	r2, #0
 800090c:	2101      	movs	r1, #1
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fe6d 	bl	80015ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	0192      	lsls	r2, r2, #6
 800091a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <MX_GPIO_Init+0x11c>)
 8000920:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000928:	193b      	adds	r3, r7, r4
 800092a:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <MX_GPIO_Init+0x120>)
 800092c:	0019      	movs	r1, r3
 800092e:	0010      	movs	r0, r2
 8000930:	f000 fcd0 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2201      	movs	r2, #1
 800093e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	193a      	adds	r2, r7, r4
 800094e:	2390      	movs	r3, #144	; 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fcbd 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800095a:	0021      	movs	r1, r4
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2201      	movs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <MX_GPIO_Init+0x118>)
 8000978:	0019      	movs	r1, r3
 800097a:	0010      	movs	r0, r2
 800097c:	f000 fcaa 	bl	80012d4 <HAL_GPIO_Init>

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b00b      	add	sp, #44	; 0x2c
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	48000400 	.word	0x48000400
 8000990:	10210000 	.word	0x10210000
 8000994:	48000800 	.word	0x48000800

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x44>)
 80009ac:	699a      	ldr	r2, [r3, #24]
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_MspInit+0x44>)
 80009b0:	2101      	movs	r1, #1
 80009b2:	430a      	orrs	r2, r1
 80009b4:	619a      	str	r2, [r3, #24]
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x44>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4013      	ands	r3, r2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x44>)
 80009c4:	69da      	ldr	r2, [r3, #28]
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_MspInit+0x44>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0549      	lsls	r1, r1, #21
 80009cc:	430a      	orrs	r2, r1
 80009ce:	61da      	str	r2, [r3, #28]
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_MspInit+0x44>)
 80009d2:	69da      	ldr	r2, [r3, #28]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	055b      	lsls	r3, r3, #21
 80009d8:	4013      	ands	r3, r2
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	2314      	movs	r3, #20
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	0018      	movs	r0, r3
 80009fa:	2314      	movs	r3, #20
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f002 ffc6 	bl	8003990 <memset>
  if(hi2c->Instance==I2C1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_I2C_MspInit+0x90>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d132      	bne.n	8000a74 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_I2C_MspInit+0x94>)
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_I2C_MspInit+0x94>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	02c9      	lsls	r1, r1, #11
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_I2C_MspInit+0x94>)
 8000a1e:	695a      	ldr	r2, [r3, #20]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	02db      	lsls	r3, r3, #11
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a2a:	2114      	movs	r1, #20
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	22c0      	movs	r2, #192	; 0xc0
 8000a30:	0092      	lsls	r2, r2, #2
 8000a32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2212      	movs	r2, #18
 8000a38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2203      	movs	r2, #3
 8000a44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2201      	movs	r2, #1
 8000a4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <HAL_I2C_MspInit+0x98>)
 8000a50:	0019      	movs	r1, r3
 8000a52:	0010      	movs	r0, r2
 8000a54:	f000 fc3e 	bl	80012d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_I2C_MspInit+0x94>)
 8000a5a:	69da      	ldr	r2, [r3, #28]
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_I2C_MspInit+0x94>)
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0389      	lsls	r1, r1, #14
 8000a62:	430a      	orrs	r2, r1
 8000a64:	61da      	str	r2, [r3, #28]
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_I2C_MspInit+0x94>)
 8000a68:	69da      	ldr	r2, [r3, #28]
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	039b      	lsls	r3, r3, #14
 8000a6e:	4013      	ands	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00a      	add	sp, #40	; 0x28
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	2314      	movs	r3, #20
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	0018      	movs	r0, r3
 8000a96:	2314      	movs	r3, #20
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f002 ff78 	bl	8003990 <memset>
  if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <HAL_UART_MspInit+0xdc>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d158      	bne.n	8000b5c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <HAL_UART_MspInit+0xe0>)
 8000aac:	69da      	ldr	r2, [r3, #28]
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <HAL_UART_MspInit+0xe0>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0289      	lsls	r1, r1, #10
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	61da      	str	r2, [r3, #28]
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <HAL_UART_MspInit+0xe0>)
 8000aba:	69da      	ldr	r2, [r3, #28]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	029b      	lsls	r3, r3, #10
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <HAL_UART_MspInit+0xe0>)
 8000ac8:	695a      	ldr	r2, [r3, #20]
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <HAL_UART_MspInit+0xe0>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	0289      	lsls	r1, r1, #10
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_UART_MspInit+0xe0>)
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	029b      	lsls	r3, r3, #10
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae2:	2114      	movs	r1, #20
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2201      	movs	r2, #1
 8000b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	187a      	adds	r2, r7, r1
 8000b04:	2390      	movs	r3, #144	; 0x90
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fbe2 	bl	80012d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0xe8>)
 8000b14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b36:	2220      	movs	r2, #32
 8000b38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fa2e 	bl	8000fa4 <HAL_DMA_Init>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000b4c:	f7ff ff24 	bl	8000998 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b54:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0xe4>)
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b00a      	add	sp, #40	; 0x28
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	20000288 	.word	0x20000288
 8000b70:	40020058 	.word	0x40020058

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f908 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <DMA1_Channel4_5_IRQHandler+0x14>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 faa6 	bl	8001100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000288 	.word	0x20000288

08000bc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bd2:	e000      	b.n	8000bd6 <_read+0x16>
 8000bd4:	bf00      	nop
 8000bd6:	0001      	movs	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
	}

return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b006      	add	sp, #24
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	return -1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	425b      	negs	r3, r3
}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	0192      	lsls	r2, r2, #6
 8000c1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	return 0;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f002 fe5a 	bl	800393c <__errno>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	425b      	negs	r3, r3
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	18d2      	adds	r2, r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b006      	add	sp, #24
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20002000 	.word	0x20002000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	2000027c 	.word	0x2000027c
 8000cbc:	200003a0 	.word	0x200003a0

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd2:	490e      	ldr	r1, [pc, #56]	; (8000d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <LoopForever+0xe>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce8:	4c0b      	ldr	r4, [pc, #44]	; (8000d18 <LoopForever+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cf6:	f7ff ffe3 	bl	8000cc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cfa:	f002 fe25 	bl	8003948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfe:	f7ff fc85 	bl	800060c <main>

08000d02 <LoopForever>:

LoopForever:
    b LoopForever
 8000d02:	e7fe      	b.n	8000d02 <LoopForever>
  ldr   r0, =_estack
 8000d04:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000d10:	08004e74 	.word	0x08004e74
  ldr r2, =_sbss
 8000d14:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000d18:	200003a0 	.word	0x200003a0

08000d1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_IRQHandler>
	...

08000d20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_Init+0x24>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_Init+0x24>)
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f809 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d36:	f7ff fe35 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d52:	681c      	ldr	r4, [r3, #0]
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_InitTick+0x60>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	0019      	movs	r1, r3
 8000d5a:	23fa      	movs	r3, #250	; 0xfa
 8000d5c:	0098      	lsls	r0, r3, #2
 8000d5e:	f7ff f9d3 	bl	8000108 <__udivsi3>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0019      	movs	r1, r3
 8000d66:	0020      	movs	r0, r4
 8000d68:	f7ff f9ce 	bl	8000108 <__udivsi3>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 f90b 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e00f      	b.n	8000d9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d80b      	bhi.n	8000d9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	2301      	movs	r3, #1
 8000d86:	425b      	negs	r3, r3
 8000d88:	2200      	movs	r2, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 f8d8 	bl	8000f40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_InitTick+0x64>)
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b003      	add	sp, #12
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x1c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	001a      	movs	r2, r3
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x20>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	18d2      	adds	r2, r2, r3
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_IncTick+0x20>)
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000398 	.word	0x20000398

08000dd4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <HAL_GetTick+0x10>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	20000398 	.word	0x20000398

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	0002      	movs	r2, r0
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfa:	d809      	bhi.n	8000e10 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	001a      	movs	r2, r3
 8000e02:	231f      	movs	r3, #31
 8000e04:	401a      	ands	r2, r3
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_EnableIRQ+0x30>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	000a      	movs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
  }
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b002      	add	sp, #8
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	0002      	movs	r2, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e30:	d828      	bhi.n	8000e84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e32:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <__NVIC_SetPriority+0xd4>)
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	33c0      	adds	r3, #192	; 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	589b      	ldr	r3, [r3, r2]
 8000e42:	1dfa      	adds	r2, r7, #7
 8000e44:	7812      	ldrb	r2, [r2, #0]
 8000e46:	0011      	movs	r1, r2
 8000e48:	2203      	movs	r2, #3
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	00d2      	lsls	r2, r2, #3
 8000e4e:	21ff      	movs	r1, #255	; 0xff
 8000e50:	4091      	lsls	r1, r2
 8000e52:	000a      	movs	r2, r1
 8000e54:	43d2      	mvns	r2, r2
 8000e56:	401a      	ands	r2, r3
 8000e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	019b      	lsls	r3, r3, #6
 8000e5e:	22ff      	movs	r2, #255	; 0xff
 8000e60:	401a      	ands	r2, r3
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	0018      	movs	r0, r3
 8000e68:	2303      	movs	r3, #3
 8000e6a:	4003      	ands	r3, r0
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e70:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <__NVIC_SetPriority+0xd4>)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	33c0      	adds	r3, #192	; 0xc0
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e82:	e031      	b.n	8000ee8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <__NVIC_SetPriority+0xd8>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	400b      	ands	r3, r1
 8000e90:	3b08      	subs	r3, #8
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3306      	adds	r3, #6
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	1dfa      	adds	r2, r7, #7
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	400a      	ands	r2, r1
 8000ea8:	00d2      	lsls	r2, r2, #3
 8000eaa:	21ff      	movs	r1, #255	; 0xff
 8000eac:	4091      	lsls	r1, r2
 8000eae:	000a      	movs	r2, r1
 8000eb0:	43d2      	mvns	r2, r2
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	019b      	lsls	r3, r3, #6
 8000eba:	22ff      	movs	r2, #255	; 0xff
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	4003      	ands	r3, r0
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <__NVIC_SetPriority+0xd8>)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	001c      	movs	r4, r3
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	4023      	ands	r3, r4
 8000ed8:	3b08      	subs	r3, #8
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	430a      	orrs	r2, r1
 8000ede:	3306      	adds	r3, #6
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	18c3      	adds	r3, r0, r3
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b003      	add	sp, #12
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <SysTick_Config+0x40>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d901      	bls.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e010      	b.n	8000f30 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <SysTick_Config+0x44>)
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	3a01      	subs	r2, #1
 8000f14:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	2301      	movs	r3, #1
 8000f18:	425b      	negs	r3, r3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff7d 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SysTick_Config+0x44>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x44>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	00ffffff 	.word	0x00ffffff
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	1c02      	adds	r2, r0, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff ff5d 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	0002      	movs	r2, r0
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff ff33 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ffaf 	bl	8000ef8 <SysTick_Config>
 8000f9a:	0003      	movs	r3, r0
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e036      	b.n	8001028 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2221      	movs	r2, #33	; 0x21
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4a18      	ldr	r2, [pc, #96]	; (8001030 <HAL_DMA_Init+0x8c>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	0018      	movs	r0, r3
 800100c:	f000 f946 	bl	800129c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2221      	movs	r2, #33	; 0x21
 800101a:	2101      	movs	r1, #1
 800101c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2220      	movs	r2, #32
 8001022:	2100      	movs	r1, #0
 8001024:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}  
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b004      	add	sp, #16
 800102e:	bd80      	pop	{r7, pc}
 8001030:	ffffc00f 	.word	0xffffc00f

08001034 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001042:	2317      	movs	r3, #23
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2220      	movs	r2, #32
 800104e:	5c9b      	ldrb	r3, [r3, r2]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <HAL_DMA_Start_IT+0x24>
 8001054:	2302      	movs	r3, #2
 8001056:	e04f      	b.n	80010f8 <HAL_DMA_Start_IT+0xc4>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2220      	movs	r2, #32
 800105c:	2101      	movs	r1, #1
 800105e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2221      	movs	r2, #33	; 0x21
 8001064:	5c9b      	ldrb	r3, [r3, r2]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d13a      	bne.n	80010e2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2221      	movs	r2, #33	; 0x21
 8001070:	2102      	movs	r1, #2
 8001072:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	438a      	bics	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f000 f8d7 	bl	8001244 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	210e      	movs	r1, #14
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e00f      	b.n	80010d0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	210a      	movs	r1, #10
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2104      	movs	r1, #4
 80010cc:	438a      	bics	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2101      	movs	r1, #1
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e007      	b.n	80010f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80010ea:	2317      	movs	r3, #23
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	2202      	movs	r2, #2
 80010f0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80010f2:	2317      	movs	r3, #23
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	781b      	ldrb	r3, [r3, #0]
} 
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b006      	add	sp, #24
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	2204      	movs	r2, #4
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	d024      	beq.n	8001172 <HAL_DMA_IRQHandler+0x72>
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2204      	movs	r2, #4
 800112c:	4013      	ands	r3, r2
 800112e:	d020      	beq.n	8001172 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2220      	movs	r2, #32
 8001138:	4013      	ands	r3, r2
 800113a:	d107      	bne.n	800114c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2104      	movs	r1, #4
 8001148:	438a      	bics	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001154:	2104      	movs	r1, #4
 8001156:	4091      	lsls	r1, r2
 8001158:	000a      	movs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d100      	bne.n	8001166 <HAL_DMA_IRQHandler+0x66>
 8001164:	e06a      	b.n	800123c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	0010      	movs	r0, r2
 800116e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001170:	e064      	b.n	800123c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2202      	movs	r2, #2
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_DMA_IRQHandler+0xda>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	2202      	movs	r2, #2
 8001186:	4013      	ands	r3, r2
 8001188:	d027      	beq.n	80011da <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2220      	movs	r2, #32
 8001192:	4013      	ands	r3, r2
 8001194:	d10b      	bne.n	80011ae <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	210a      	movs	r1, #10
 80011a2:	438a      	bics	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2221      	movs	r2, #33	; 0x21
 80011aa:	2101      	movs	r1, #1
 80011ac:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b6:	2102      	movs	r1, #2
 80011b8:	4091      	lsls	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2220      	movs	r2, #32
 80011c2:	2100      	movs	r1, #0
 80011c4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d036      	beq.n	800123c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	0010      	movs	r0, r2
 80011d6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80011d8:	e030      	b.n	800123c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	2208      	movs	r2, #8
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	d028      	beq.n	800123c <HAL_DMA_IRQHandler+0x13c>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2208      	movs	r2, #8
 80011ee:	4013      	ands	r3, r2
 80011f0:	d024      	beq.n	800123c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	210e      	movs	r1, #14
 80011fe:	438a      	bics	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120a:	2101      	movs	r1, #1
 800120c:	4091      	lsls	r1, r2
 800120e:	000a      	movs	r2, r1
 8001210:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2221      	movs	r2, #33	; 0x21
 800121c:	2101      	movs	r1, #1
 800121e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2220      	movs	r2, #32
 8001224:	2100      	movs	r1, #0
 8001226:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	0010      	movs	r0, r2
 8001238:	4798      	blx	r3
    }
   }
}  
 800123a:	e7ff      	b.n	800123c <HAL_DMA_IRQHandler+0x13c>
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b004      	add	sp, #16
 8001242:	bd80      	pop	{r7, pc}

08001244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125a:	2101      	movs	r1, #1
 800125c:	4091      	lsls	r1, r2
 800125e:	000a      	movs	r2, r1
 8001260:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b10      	cmp	r3, #16
 8001270:	d108      	bne.n	8001284 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001282:	e007      	b.n	8001294 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}

0800129c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a08      	ldr	r2, [pc, #32]	; (80012cc <DMA_CalcBaseAndBitshift+0x30>)
 80012aa:	4694      	mov	ip, r2
 80012ac:	4463      	add	r3, ip
 80012ae:	2114      	movs	r1, #20
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7fe ff29 	bl	8000108 <__udivsi3>
 80012b6:	0003      	movs	r3, r0
 80012b8:	009a      	lsls	r2, r3, #2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <DMA_CalcBaseAndBitshift+0x34>)
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	bffdfff8 	.word	0xbffdfff8
 80012d0:	40020000 	.word	0x40020000

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e14f      	b.n	8001584 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4091      	lsls	r1, r2
 80012ee:	000a      	movs	r2, r1
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d100      	bne.n	80012fc <HAL_GPIO_Init+0x28>
 80012fa:	e140      	b.n	800157e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d00b      	beq.n	800131c <HAL_GPIO_Init+0x48>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001310:	2b11      	cmp	r3, #17
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b12      	cmp	r3, #18
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	409a      	lsls	r2, r3
 800132a:	0013      	movs	r3, r2
 800132c:	43da      	mvns	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	2201      	movs	r2, #1
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	43da      	mvns	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0xea>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d123      	bne.n	8001406 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	58d3      	ldr	r3, [r2, r3]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2207      	movs	r2, #7
 80013d0:	4013      	ands	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2107      	movs	r1, #7
 80013ea:	400b      	ands	r3, r1
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	409a      	lsls	r2, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	6939      	ldr	r1, [r7, #16]
 8001404:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2203      	movs	r2, #3
 8001424:	401a      	ands	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	055b      	lsls	r3, r3, #21
 8001442:	4013      	ands	r3, r2
 8001444:	d100      	bne.n	8001448 <HAL_GPIO_Init+0x174>
 8001446:	e09a      	b.n	800157e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001448:	4b54      	ldr	r3, [pc, #336]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800144a:	699a      	ldr	r2, [r3, #24]
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	4b51      	ldr	r3, [pc, #324]	; (800159c <HAL_GPIO_Init+0x2c8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001460:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <HAL_GPIO_Init+0x2cc>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	589b      	ldr	r3, [r3, r2]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2203      	movs	r2, #3
 8001472:	4013      	ands	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	409a      	lsls	r2, r3
 800147a:	0013      	movs	r3, r2
 800147c:	43da      	mvns	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	2390      	movs	r3, #144	; 0x90
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	429a      	cmp	r2, r3
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x1e2>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a44      	ldr	r2, [pc, #272]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x1de>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a43      	ldr	r2, [pc, #268]	; (80015a8 <HAL_GPIO_Init+0x2d4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x1da>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a42      	ldr	r2, [pc, #264]	; (80015ac <HAL_GPIO_Init+0x2d8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x1d6>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x1e4>
 80014aa:	2305      	movs	r3, #5
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x1e4>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x1e4>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x1e4>
 80014b6:	2300      	movs	r3, #0
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	2103      	movs	r1, #3
 80014bc:	400a      	ands	r2, r1
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c8:	4935      	ldr	r1, [pc, #212]	; (80015a0 <HAL_GPIO_Init+0x2cc>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	4013      	ands	r3, r2
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43da      	mvns	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	029b      	lsls	r3, r3, #10
 8001518:	4013      	ands	r3, r2
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43da      	mvns	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	035b      	lsls	r3, r3, #13
 8001542:	4013      	ands	r3, r2
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43da      	mvns	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	039b      	lsls	r3, r3, #14
 800156c:	4013      	ands	r3, r2
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	40da      	lsrs	r2, r3
 800158c:	1e13      	subs	r3, r2, #0
 800158e:	d000      	beq.n	8001592 <HAL_GPIO_Init+0x2be>
 8001590:	e6a8      	b.n	80012e4 <HAL_GPIO_Init+0x10>
  } 
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b006      	add	sp, #24
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48000c00 	.word	0x48000c00
 80015b0:	40010400 	.word	0x40010400

080015b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	000a      	movs	r2, r1
 80015be:	1cbb      	adds	r3, r7, #2
 80015c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	1cba      	adds	r2, r7, #2
 80015c8:	8812      	ldrh	r2, [r2, #0]
 80015ca:	4013      	ands	r3, r2
 80015cc:	d004      	beq.n	80015d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015ce:	230f      	movs	r3, #15
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	e003      	b.n	80015e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d8:	230f      	movs	r3, #15
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015e0:	230f      	movs	r3, #15
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	781b      	ldrb	r3, [r3, #0]
  }
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b004      	add	sp, #16
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	0008      	movs	r0, r1
 80015f8:	0011      	movs	r1, r2
 80015fa:	1cbb      	adds	r3, r7, #2
 80015fc:	1c02      	adds	r2, r0, #0
 80015fe:	801a      	strh	r2, [r3, #0]
 8001600:	1c7b      	adds	r3, r7, #1
 8001602:	1c0a      	adds	r2, r1, #0
 8001604:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001606:	1c7b      	adds	r3, r7, #1
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160e:	1cbb      	adds	r3, r7, #2
 8001610:	881a      	ldrh	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001616:	e003      	b.n	8001620 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001618:	1cbb      	adds	r3, r7, #2
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e082      	b.n	8001740 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2241      	movs	r2, #65	; 0x41
 800163e:	5c9b      	ldrb	r3, [r3, r2]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2240      	movs	r2, #64	; 0x40
 800164a:	2100      	movs	r1, #0
 800164c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff f9cb 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2241      	movs	r2, #65	; 0x41
 800165a:	2124      	movs	r1, #36	; 0x24
 800165c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2101      	movs	r1, #1
 800166a:	438a      	bics	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4934      	ldr	r1, [pc, #208]	; (8001748 <HAL_I2C_Init+0x120>)
 8001678:	400a      	ands	r2, r1
 800167a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4931      	ldr	r1, [pc, #196]	; (800174c <HAL_I2C_Init+0x124>)
 8001688:	400a      	ands	r2, r1
 800168a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d108      	bne.n	80016a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0209      	lsls	r1, r1, #8
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	e007      	b.n	80016b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2184      	movs	r1, #132	; 0x84
 80016b0:	0209      	lsls	r1, r1, #8
 80016b2:	430a      	orrs	r2, r1
 80016b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d104      	bne.n	80016c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	491f      	ldr	r1, [pc, #124]	; (8001750 <HAL_I2C_Init+0x128>)
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	491a      	ldr	r1, [pc, #104]	; (800174c <HAL_I2C_Init+0x124>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	0011      	movs	r1, r2
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	021a      	lsls	r2, r3, #8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69d9      	ldr	r1, [r3, #28]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1a      	ldr	r2, [r3, #32]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2101      	movs	r1, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2241      	movs	r2, #65	; 0x41
 800172c:	2120      	movs	r1, #32
 800172e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2242      	movs	r2, #66	; 0x42
 800173a:	2100      	movs	r1, #0
 800173c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}
 8001748:	f0ffffff 	.word	0xf0ffffff
 800174c:	ffff7fff 	.word	0xffff7fff
 8001750:	02008000 	.word	0x02008000

08001754 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af02      	add	r7, sp, #8
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	000c      	movs	r4, r1
 800175e:	0010      	movs	r0, r2
 8001760:	0019      	movs	r1, r3
 8001762:	230a      	movs	r3, #10
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	1c22      	adds	r2, r4, #0
 8001768:	801a      	strh	r2, [r3, #0]
 800176a:	2308      	movs	r3, #8
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	1c02      	adds	r2, r0, #0
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	1dbb      	adds	r3, r7, #6
 8001774:	1c0a      	adds	r2, r1, #0
 8001776:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2241      	movs	r2, #65	; 0x41
 800177c:	5c9b      	ldrb	r3, [r3, r2]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b20      	cmp	r3, #32
 8001782:	d000      	beq.n	8001786 <HAL_I2C_Mem_Write+0x32>
 8001784:	e10c      	b.n	80019a0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d004      	beq.n	8001796 <HAL_I2C_Mem_Write+0x42>
 800178c:	232c      	movs	r3, #44	; 0x2c
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0ff      	b.n	80019a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	5c9b      	ldrb	r3, [r3, r2]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_I2C_Mem_Write+0x5c>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e0f8      	b.n	80019a2 <HAL_I2C_Mem_Write+0x24e>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	2101      	movs	r1, #1
 80017b6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017b8:	f7ff fb0c 	bl	8000dd4 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	0219      	lsls	r1, r3, #8
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2319      	movs	r3, #25
 80017cc:	2201      	movs	r2, #1
 80017ce:	f000 fc25 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0e3      	b.n	80019a2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2241      	movs	r2, #65	; 0x41
 80017de:	2121      	movs	r1, #33	; 0x21
 80017e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2242      	movs	r2, #66	; 0x42
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	222c      	movs	r2, #44	; 0x2c
 80017fa:	18ba      	adds	r2, r7, r2
 80017fc:	8812      	ldrh	r2, [r2, #0]
 80017fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001806:	1dbb      	adds	r3, r7, #6
 8001808:	881c      	ldrh	r4, [r3, #0]
 800180a:	2308      	movs	r3, #8
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	230a      	movs	r3, #10
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	8819      	ldrh	r1, [r3, #0]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	0023      	movs	r3, r4
 8001822:	f000 fb13 	bl	8001e4c <I2C_RequestMemoryWrite>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d005      	beq.n	8001836 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2240      	movs	r2, #64	; 0x40
 800182e:	2100      	movs	r1, #0
 8001830:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0b5      	b.n	80019a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	2bff      	cmp	r3, #255	; 0xff
 800183e:	d911      	bls.n	8001864 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	22ff      	movs	r2, #255	; 0xff
 8001844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	b2da      	uxtb	r2, r3
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	045c      	lsls	r4, r3, #17
 8001850:	230a      	movs	r3, #10
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	8819      	ldrh	r1, [r3, #0]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	0023      	movs	r3, r4
 800185e:	f000 fcfd 	bl	800225c <I2C_TransferConfig>
 8001862:	e012      	b.n	800188a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	b2da      	uxtb	r2, r3
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	049c      	lsls	r4, r3, #18
 8001878:	230a      	movs	r3, #10
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	8819      	ldrh	r1, [r3, #0]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	0023      	movs	r3, r4
 8001886:	f000 fce9 	bl	800225c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 fc02 	bl	800209a <I2C_WaitOnTXISFlagUntilTimeout>
 8001896:	1e03      	subs	r3, r0, #0
 8001898:	d001      	beq.n	800189e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e081      	b.n	80019a2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d03a      	beq.n	800194e <HAL_I2C_Mem_Write+0x1fa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d136      	bne.n	800194e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	0013      	movs	r3, r2
 80018ea:	2200      	movs	r2, #0
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	f000 fb95 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e053      	b.n	80019a2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2bff      	cmp	r3, #255	; 0xff
 8001902:	d911      	bls.n	8001928 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	22ff      	movs	r2, #255	; 0xff
 8001908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190e:	b2da      	uxtb	r2, r3
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	045c      	lsls	r4, r3, #17
 8001914:	230a      	movs	r3, #10
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	8819      	ldrh	r1, [r3, #0]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	0023      	movs	r3, r4
 8001922:	f000 fc9b 	bl	800225c <I2C_TransferConfig>
 8001926:	e012      	b.n	800194e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	b2da      	uxtb	r2, r3
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	049c      	lsls	r4, r3, #18
 800193c:	230a      	movs	r3, #10
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	8819      	ldrh	r1, [r3, #0]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	0023      	movs	r3, r4
 800194a:	f000 fc87 	bl	800225c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29b      	uxth	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d198      	bne.n	800188a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fbda 	bl	8002118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001964:	1e03      	subs	r3, r0, #0
 8001966:	d001      	beq.n	800196c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e01a      	b.n	80019a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2220      	movs	r2, #32
 8001972:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	490b      	ldr	r1, [pc, #44]	; (80019ac <HAL_I2C_Mem_Write+0x258>)
 8001980:	400a      	ands	r2, r1
 8001982:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2241      	movs	r2, #65	; 0x41
 8001988:	2120      	movs	r1, #32
 800198a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2242      	movs	r2, #66	; 0x42
 8001990:	2100      	movs	r1, #0
 8001992:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	2100      	movs	r1, #0
 800199a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
  }
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b007      	add	sp, #28
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	fe00e800 	.word	0xfe00e800

080019b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	000c      	movs	r4, r1
 80019ba:	0010      	movs	r0, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	230a      	movs	r3, #10
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	1c22      	adds	r2, r4, #0
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	2308      	movs	r3, #8
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	1c02      	adds	r2, r0, #0
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	1dbb      	adds	r3, r7, #6
 80019d0:	1c0a      	adds	r2, r1, #0
 80019d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2241      	movs	r2, #65	; 0x41
 80019d8:	5c9b      	ldrb	r3, [r3, r2]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d000      	beq.n	80019e2 <HAL_I2C_Mem_Read+0x32>
 80019e0:	e110      	b.n	8001c04 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <HAL_I2C_Mem_Read+0x42>
 80019e8:	232c      	movs	r3, #44	; 0x2c
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e103      	b.n	8001c06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	5c9b      	ldrb	r3, [r3, r2]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_I2C_Mem_Read+0x5c>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e0fc      	b.n	8001c06 <HAL_I2C_Mem_Read+0x256>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	2101      	movs	r1, #1
 8001a12:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a14:	f7ff f9de 	bl	8000dd4 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	0219      	lsls	r1, r3, #8
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2319      	movs	r3, #25
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f000 faf7 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0e7      	b.n	8001c06 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2241      	movs	r2, #65	; 0x41
 8001a3a:	2122      	movs	r1, #34	; 0x22
 8001a3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2242      	movs	r2, #66	; 0x42
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	222c      	movs	r2, #44	; 0x2c
 8001a56:	18ba      	adds	r2, r7, r2
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a62:	1dbb      	adds	r3, r7, #6
 8001a64:	881c      	ldrh	r4, [r3, #0]
 8001a66:	2308      	movs	r3, #8
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	881a      	ldrh	r2, [r3, #0]
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	8819      	ldrh	r1, [r3, #0]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	0023      	movs	r3, r4
 8001a7e:	f000 fa49 	bl	8001f14 <I2C_RequestMemoryRead>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2240      	movs	r2, #64	; 0x40
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0b9      	b.n	8001c06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2bff      	cmp	r3, #255	; 0xff
 8001a9a:	d911      	bls.n	8001ac0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	22ff      	movs	r2, #255	; 0xff
 8001aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	045c      	lsls	r4, r3, #17
 8001aac:	230a      	movs	r3, #10
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	8819      	ldrh	r1, [r3, #0]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <HAL_I2C_Mem_Read+0x260>)
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	0023      	movs	r3, r4
 8001aba:	f000 fbcf 	bl	800225c <I2C_TransferConfig>
 8001abe:	e012      	b.n	8001ae6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	049c      	lsls	r4, r3, #18
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	8819      	ldrh	r1, [r3, #0]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_I2C_Mem_Read+0x260>)
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	0023      	movs	r3, r4
 8001ae2:	f000 fbbb 	bl	800225c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	0013      	movs	r3, r2
 8001af0:	2200      	movs	r2, #0
 8001af2:	2104      	movs	r1, #4
 8001af4:	f000 fa92 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 8001af8:	1e03      	subs	r3, r0, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e082      	b.n	8001c06 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d03a      	beq.n	8001bb2 <HAL_I2C_Mem_Read+0x202>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d136      	bne.n	8001bb2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	f000 fa63 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e053      	b.n	8001c06 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	2bff      	cmp	r3, #255	; 0xff
 8001b66:	d911      	bls.n	8001b8c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	22ff      	movs	r2, #255	; 0xff
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	045c      	lsls	r4, r3, #17
 8001b78:	230a      	movs	r3, #10
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	8819      	ldrh	r1, [r3, #0]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	0023      	movs	r3, r4
 8001b86:	f000 fb69 	bl	800225c <I2C_TransferConfig>
 8001b8a:	e012      	b.n	8001bb2 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	049c      	lsls	r4, r3, #18
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	8819      	ldrh	r1, [r3, #0]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	0023      	movs	r3, r4
 8001bae:	f000 fb55 	bl	800225c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d194      	bne.n	8001ae6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 faa8 	bl	8002118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e01a      	b.n	8001c06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	490c      	ldr	r1, [pc, #48]	; (8001c14 <HAL_I2C_Mem_Read+0x264>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2241      	movs	r2, #65	; 0x41
 8001bec:	2120      	movs	r1, #32
 8001bee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2242      	movs	r2, #66	; 0x42
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	0018      	movs	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b007      	add	sp, #28
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	80002400 	.word	0x80002400
 8001c14:	fe00e800 	.word	0xfe00e800

08001c18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	230a      	movs	r3, #10
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	1c0a      	adds	r2, r1, #0
 8001c2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2241      	movs	r2, #65	; 0x41
 8001c34:	5c9b      	ldrb	r3, [r3, r2]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d000      	beq.n	8001c3e <HAL_I2C_IsDeviceReady+0x26>
 8001c3c:	e0fe      	b.n	8001e3c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	401a      	ands	r2, r3
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d101      	bne.n	8001c56 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0f3      	b.n	8001e3e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	5c9b      	ldrb	r3, [r3, r2]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2C_IsDeviceReady+0x4c>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0ec      	b.n	8001e3e <HAL_I2C_IsDeviceReady+0x226>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	2101      	movs	r1, #1
 8001c6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2241      	movs	r2, #65	; 0x41
 8001c70:	2124      	movs	r1, #36	; 0x24
 8001c72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <HAL_I2C_IsDeviceReady+0x7a>
 8001c82:	230a      	movs	r3, #10
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	059b      	lsls	r3, r3, #22
 8001c8a:	0d9b      	lsrs	r3, r3, #22
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_I2C_IsDeviceReady+0x230>)
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	e007      	b.n	8001ca2 <HAL_I2C_IsDeviceReady+0x8a>
 8001c92:	230a      	movs	r3, #10
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	059b      	lsls	r3, r3, #22
 8001c9a:	0d9b      	lsrs	r3, r3, #22
 8001c9c:	22a0      	movs	r2, #160	; 0xa0
 8001c9e:	0192      	lsls	r2, r2, #6
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f894 	bl	8000dd4 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	4013      	ands	r3, r2
 8001cba:	3b20      	subs	r3, #32
 8001cbc:	425a      	negs	r2, r3
 8001cbe:	4153      	adcs	r3, r2
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	231f      	movs	r3, #31
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2210      	movs	r2, #16
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	3b10      	subs	r3, #16
 8001cd4:	425a      	negs	r2, r3
 8001cd6:	4153      	adcs	r3, r2
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	231e      	movs	r3, #30
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ce0:	e035      	b.n	8001d4e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	d01a      	beq.n	8001d1e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ce8:	f7ff f874 	bl	8000dd4 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d302      	bcc.n	8001cfe <HAL_I2C_IsDeviceReady+0xe6>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10f      	bne.n	8001d1e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2241      	movs	r2, #65	; 0x41
 8001d02:	2120      	movs	r1, #32
 8001d04:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2240      	movs	r2, #64	; 0x40
 8001d16:	2100      	movs	r1, #0
 8001d18:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e08f      	b.n	8001e3e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2220      	movs	r2, #32
 8001d26:	4013      	ands	r3, r2
 8001d28:	3b20      	subs	r3, #32
 8001d2a:	425a      	negs	r2, r3
 8001d2c:	4153      	adcs	r3, r2
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	231f      	movs	r3, #31
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	4013      	ands	r3, r2
 8001d40:	3b10      	subs	r3, #16
 8001d42:	425a      	negs	r2, r3
 8001d44:	4153      	adcs	r3, r2
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	231e      	movs	r3, #30
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d4e:	231f      	movs	r3, #31
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_I2C_IsDeviceReady+0x14a>
 8001d58:	231e      	movs	r3, #30
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0bf      	beq.n	8001ce2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d01a      	beq.n	8001da6 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	0013      	movs	r3, r2
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	f000 f94d 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 8001d82:	1e03      	subs	r3, r0, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e059      	b.n	8001e3e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2241      	movs	r2, #65	; 0x41
 8001d96:	2120      	movs	r1, #32
 8001d98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2240      	movs	r2, #64	; 0x40
 8001d9e:	2100      	movs	r1, #0
 8001da0:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e04b      	b.n	8001e3e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	0013      	movs	r3, r2
 8001db0:	2200      	movs	r2, #0
 8001db2:	2120      	movs	r1, #32
 8001db4:	f000 f932 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e03e      	b.n	8001e3e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d119      	bne.n	8001e0c <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	01c9      	lsls	r1, r1, #7
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	0013      	movs	r3, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	2120      	movs	r1, #32
 8001df8:	f000 f910 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e01c      	b.n	8001e3e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d900      	bls.n	8001e1c <HAL_I2C_IsDeviceReady+0x204>
 8001e1a:	e72e      	b.n	8001c7a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2241      	movs	r2, #65	; 0x41
 8001e20:	2120      	movs	r1, #32
 8001e22:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	2220      	movs	r2, #32
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2240      	movs	r2, #64	; 0x40
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001e3c:	2302      	movs	r3, #2
  }
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b008      	add	sp, #32
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	02002000 	.word	0x02002000

08001e4c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	000c      	movs	r4, r1
 8001e56:	0010      	movs	r0, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	250a      	movs	r5, #10
 8001e5c:	197b      	adds	r3, r7, r5
 8001e5e:	1c22      	adds	r2, r4, #0
 8001e60:	801a      	strh	r2, [r3, #0]
 8001e62:	2308      	movs	r3, #8
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	1c02      	adds	r2, r0, #0
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	1c0a      	adds	r2, r1, #0
 8001e6e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e70:	1dbb      	adds	r3, r7, #6
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	045c      	lsls	r4, r3, #17
 8001e7a:	197b      	adds	r3, r7, r5
 8001e7c:	8819      	ldrh	r1, [r3, #0]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <I2C_RequestMemoryWrite+0xc4>)
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	0023      	movs	r3, r4
 8001e86:	f000 f9e9 	bl	800225c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 f902 	bl	800209a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d001      	beq.n	8001e9e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e033      	b.n	8001f06 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e9e:	1dbb      	adds	r3, r7, #6
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb4:	e019      	b.n	8001eea <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eca:	6a39      	ldr	r1, [r7, #32]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f8e3 	bl	800209a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e014      	b.n	8001f06 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001edc:	2308      	movs	r3, #8
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001eea:	6a3a      	ldr	r2, [r7, #32]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	f000 f890 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d001      	beq.n	8001f04 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	80002000 	.word	0x80002000

08001f14 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	000c      	movs	r4, r1
 8001f1e:	0010      	movs	r0, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	250a      	movs	r5, #10
 8001f24:	197b      	adds	r3, r7, r5
 8001f26:	1c22      	adds	r2, r4, #0
 8001f28:	801a      	strh	r2, [r3, #0]
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	1c02      	adds	r2, r0, #0
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	1dbb      	adds	r3, r7, #6
 8001f34:	1c0a      	adds	r2, r1, #0
 8001f36:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	197b      	adds	r3, r7, r5
 8001f40:	8819      	ldrh	r1, [r3, #0]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <I2C_RequestMemoryRead+0xc0>)
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f000 f987 	bl	800225c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	6a39      	ldr	r1, [r7, #32]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f000 f8a0 	bl	800209a <I2C_WaitOnTXISFlagUntilTimeout>
 8001f5a:	1e03      	subs	r3, r0, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e033      	b.n	8001fca <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f62:	1dbb      	adds	r3, r7, #6
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
 8001f78:	e019      	b.n	8001fae <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	6a39      	ldr	r1, [r7, #32]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 f881 	bl	800209a <I2C_WaitOnTXISFlagUntilTimeout>
 8001f98:	1e03      	subs	r3, r0, #0
 8001f9a:	d001      	beq.n	8001fa0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e014      	b.n	8001fca <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2140      	movs	r1, #64	; 0x40
 8001fbc:	f000 f82e 	bl	800201c <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	1e03      	subs	r3, r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	80002000 	.word	0x80002000

08001fd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d103      	bne.n	8001ff6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b01      	cmp	r3, #1
 8002002:	d007      	beq.n	8002014 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	430a      	orrs	r2, r1
 8002012:	619a      	str	r2, [r3, #24]
  }
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	1dfb      	adds	r3, r7, #7
 800202a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800202c:	e021      	b.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	d01e      	beq.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002034:	f7fe fece 	bl	8000dd4 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d302      	bcc.n	800204a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d113      	bne.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	2220      	movs	r2, #32
 8002050:	431a      	orrs	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2241      	movs	r2, #65	; 0x41
 800205a:	2120      	movs	r1, #32
 800205c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2242      	movs	r2, #66	; 0x42
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2240      	movs	r2, #64	; 0x40
 800206a:	2100      	movs	r1, #0
 800206c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	4013      	ands	r3, r2
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	425a      	negs	r2, r3
 8002082:	4153      	adcs	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	001a      	movs	r2, r3
 8002088:	1dfb      	adds	r3, r7, #7
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d0ce      	beq.n	800202e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b004      	add	sp, #16
 8002098:	bd80      	pop	{r7, pc}

0800209a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020a6:	e02b      	b.n	8002100 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 f86e 	bl	8002190 <I2C_IsAcknowledgeFailed>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d001      	beq.n	80020bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e029      	b.n	8002110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	3301      	adds	r3, #1
 80020c0:	d01e      	beq.n	8002100 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7fe fe87 	bl	8000dd4 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d113      	bne.n	8002100 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	2220      	movs	r2, #32
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2241      	movs	r2, #65	; 0x41
 80020e8:	2120      	movs	r1, #32
 80020ea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2242      	movs	r2, #66	; 0x42
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	2100      	movs	r1, #0
 80020fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e007      	b.n	8002110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d1cc      	bne.n	80020a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002124:	e028      	b.n	8002178 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	0018      	movs	r0, r3
 800212e:	f000 f82f 	bl	8002190 <I2C_IsAcknowledgeFailed>
 8002132:	1e03      	subs	r3, r0, #0
 8002134:	d001      	beq.n	800213a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e026      	b.n	8002188 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7fe fe4b 	bl	8000dd4 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d113      	bne.n	8002178 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	2220      	movs	r2, #32
 8002156:	431a      	orrs	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2241      	movs	r2, #65	; 0x41
 8002160:	2120      	movs	r1, #32
 8002162:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2242      	movs	r2, #66	; 0x42
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e007      	b.n	8002188 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2220      	movs	r2, #32
 8002180:	4013      	ands	r3, r2
 8002182:	2b20      	cmp	r3, #32
 8002184:	d1cf      	bne.n	8002126 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b004      	add	sp, #16
 800218e:	bd80      	pop	{r7, pc}

08002190 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2210      	movs	r2, #16
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d151      	bne.n	800224e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021aa:	e021      	b.n	80021f0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	3301      	adds	r3, #1
 80021b0:	d01e      	beq.n	80021f0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7fe fe0f 	bl	8000dd4 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_IsAcknowledgeFailed+0x38>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d113      	bne.n	80021f0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	2220      	movs	r2, #32
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2241      	movs	r2, #65	; 0x41
 80021d8:	2120      	movs	r1, #32
 80021da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2242      	movs	r2, #66	; 0x42
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e02f      	b.n	8002250 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2220      	movs	r2, #32
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d1d6      	bne.n	80021ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2210      	movs	r2, #16
 8002204:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2220      	movs	r2, #32
 800220c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0018      	movs	r0, r3
 8002212:	f7ff fee1 	bl	8001fd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	490d      	ldr	r1, [pc, #52]	; (8002258 <I2C_IsAcknowledgeFailed+0xc8>)
 8002222:	400a      	ands	r2, r1
 8002224:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	2204      	movs	r2, #4
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2241      	movs	r2, #65	; 0x41
 8002236:	2120      	movs	r1, #32
 8002238:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2242      	movs	r2, #66	; 0x42
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	2100      	movs	r1, #0
 8002248:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}
 8002258:	fe00e800 	.word	0xfe00e800

0800225c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	0008      	movs	r0, r1
 8002266:	0011      	movs	r1, r2
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	240a      	movs	r4, #10
 800226c:	193b      	adds	r3, r7, r4
 800226e:	1c02      	adds	r2, r0, #0
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	2009      	movs	r0, #9
 8002274:	183b      	adds	r3, r7, r0
 8002276:	1c0a      	adds	r2, r1, #0
 8002278:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	6a3a      	ldr	r2, [r7, #32]
 8002282:	0d51      	lsrs	r1, r2, #21
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	00d2      	lsls	r2, r2, #3
 8002288:	400a      	ands	r2, r1
 800228a:	490e      	ldr	r1, [pc, #56]	; (80022c4 <I2C_TransferConfig+0x68>)
 800228c:	430a      	orrs	r2, r1
 800228e:	43d2      	mvns	r2, r2
 8002290:	401a      	ands	r2, r3
 8002292:	0011      	movs	r1, r2
 8002294:	193b      	adds	r3, r7, r4
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	059b      	lsls	r3, r3, #22
 800229a:	0d9a      	lsrs	r2, r3, #22
 800229c:	183b      	adds	r3, r7, r0
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	0418      	lsls	r0, r3, #16
 80022a2:	23ff      	movs	r3, #255	; 0xff
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	4003      	ands	r3, r0
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b005      	add	sp, #20
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	03ff63ff 	.word	0x03ff63ff

080022c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2241      	movs	r2, #65	; 0x41
 80022d6:	5c9b      	ldrb	r3, [r3, r2]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	d138      	bne.n	8002350 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e032      	b.n	8002352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	2101      	movs	r1, #1
 80022f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2241      	movs	r2, #65	; 0x41
 80022f8:	2124      	movs	r1, #36	; 0x24
 80022fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	438a      	bics	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4911      	ldr	r1, [pc, #68]	; (800235c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2101      	movs	r1, #1
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2241      	movs	r2, #65	; 0x41
 8002340:	2120      	movs	r1, #32
 8002342:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	2100      	movs	r1, #0
 800234a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	ffffefff 	.word	0xffffefff

08002360 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	; 0x41
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b20      	cmp	r3, #32
 8002374:	d139      	bne.n	80023ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2240      	movs	r2, #64	; 0x40
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002380:	2302      	movs	r3, #2
 8002382:	e033      	b.n	80023ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	2101      	movs	r1, #1
 800238a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2241      	movs	r2, #65	; 0x41
 8002390:	2124      	movs	r1, #36	; 0x24
 8002392:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	438a      	bics	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2241      	movs	r2, #65	; 0x41
 80023da:	2120      	movs	r1, #32
 80023dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2240      	movs	r2, #64	; 0x40
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
  }
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	fffff0ff 	.word	0xfffff0ff

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e303      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d100      	bne.n	8002416 <HAL_RCC_OscConfig+0x1e>
 8002414:	e08d      	b.n	8002532 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002416:	4bc4      	ldr	r3, [pc, #784]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	220c      	movs	r2, #12
 800241c:	4013      	ands	r3, r2
 800241e:	2b04      	cmp	r3, #4
 8002420:	d00e      	beq.n	8002440 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002422:	4bc1      	ldr	r3, [pc, #772]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	220c      	movs	r2, #12
 8002428:	4013      	ands	r3, r2
 800242a:	2b08      	cmp	r3, #8
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x64>
 800242e:	4bbe      	ldr	r3, [pc, #760]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	401a      	ands	r2, r3
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	025b      	lsls	r3, r3, #9
 800243c:	429a      	cmp	r2, r3
 800243e:	d10d      	bne.n	800245c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	4bb9      	ldr	r3, [pc, #740]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	4013      	ands	r3, r2
 800244a:	d100      	bne.n	800244e <HAL_RCC_OscConfig+0x56>
 800244c:	e070      	b.n	8002530 <HAL_RCC_OscConfig+0x138>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d000      	beq.n	8002458 <HAL_RCC_OscConfig+0x60>
 8002456:	e06b      	b.n	8002530 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e2da      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d107      	bne.n	8002474 <HAL_RCC_OscConfig+0x7c>
 8002464:	4bb0      	ldr	r3, [pc, #704]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4baf      	ldr	r3, [pc, #700]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	0249      	lsls	r1, r1, #9
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e02f      	b.n	80024d4 <HAL_RCC_OscConfig+0xdc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x9e>
 800247c:	4baa      	ldr	r3, [pc, #680]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4ba9      	ldr	r3, [pc, #676]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002482:	49aa      	ldr	r1, [pc, #680]	; (800272c <HAL_RCC_OscConfig+0x334>)
 8002484:	400a      	ands	r2, r1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	4ba7      	ldr	r3, [pc, #668]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4ba6      	ldr	r3, [pc, #664]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800248e:	49a8      	ldr	r1, [pc, #672]	; (8002730 <HAL_RCC_OscConfig+0x338>)
 8002490:	400a      	ands	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e01e      	b.n	80024d4 <HAL_RCC_OscConfig+0xdc>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d10e      	bne.n	80024bc <HAL_RCC_OscConfig+0xc4>
 800249e:	4ba2      	ldr	r3, [pc, #648]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4ba1      	ldr	r3, [pc, #644]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	02c9      	lsls	r1, r1, #11
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b9d      	ldr	r3, [pc, #628]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0249      	lsls	r1, r1, #9
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xdc>
 80024bc:	4b9a      	ldr	r3, [pc, #616]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b99      	ldr	r3, [pc, #612]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024c2:	499a      	ldr	r1, [pc, #616]	; (800272c <HAL_RCC_OscConfig+0x334>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	4b97      	ldr	r3, [pc, #604]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b96      	ldr	r3, [pc, #600]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024ce:	4998      	ldr	r1, [pc, #608]	; (8002730 <HAL_RCC_OscConfig+0x338>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d014      	beq.n	8002506 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fc7a 	bl	8000dd4 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e6:	f7fe fc75 	bl	8000dd4 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b64      	cmp	r3, #100	; 0x64
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e28c      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f8:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	029b      	lsls	r3, r3, #10
 8002500:	4013      	ands	r3, r2
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0xee>
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe fc65 	bl	8000dd4 <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe fc60 	bl	8000dd4 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e277      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b81      	ldr	r3, [pc, #516]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	029b      	lsls	r3, r3, #10
 800252a:	4013      	ands	r3, r2
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x118>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2202      	movs	r2, #2
 8002538:	4013      	ands	r3, r2
 800253a:	d100      	bne.n	800253e <HAL_RCC_OscConfig+0x146>
 800253c:	e069      	b.n	8002612 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800253e:	4b7a      	ldr	r3, [pc, #488]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	220c      	movs	r2, #12
 8002544:	4013      	ands	r3, r2
 8002546:	d00b      	beq.n	8002560 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002548:	4b77      	ldr	r3, [pc, #476]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	220c      	movs	r2, #12
 800254e:	4013      	ands	r3, r2
 8002550:	2b08      	cmp	r3, #8
 8002552:	d11c      	bne.n	800258e <HAL_RCC_OscConfig+0x196>
 8002554:	4b74      	ldr	r3, [pc, #464]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4013      	ands	r3, r2
 800255e:	d116      	bne.n	800258e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002560:	4b71      	ldr	r3, [pc, #452]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2202      	movs	r2, #2
 8002566:	4013      	ands	r3, r2
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e24d      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	22f8      	movs	r2, #248	; 0xf8
 800257c:	4393      	bics	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00da      	lsls	r2, r3, #3
 8002586:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258c:	e041      	b.n	8002612 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d024      	beq.n	80025e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002596:	4b64      	ldr	r3, [pc, #400]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800259c:	2101      	movs	r1, #1
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fc17 	bl	8000dd4 <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ac:	f7fe fc12 	bl	8000dd4 <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e229      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2202      	movs	r2, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	d0f1      	beq.n	80025ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	22f8      	movs	r2, #248	; 0xf8
 80025ce:	4393      	bics	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00da      	lsls	r2, r3, #3
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e018      	b.n	8002612 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e0:	4b51      	ldr	r3, [pc, #324]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80025e6:	2101      	movs	r1, #1
 80025e8:	438a      	bics	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fbf2 	bl	8000dd4 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe fbed 	bl	8000dd4 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e204      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	d1f1      	bne.n	80025f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2208      	movs	r2, #8
 8002618:	4013      	ands	r3, r2
 800261a:	d036      	beq.n	800268a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d019      	beq.n	8002658 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002624:	4b40      	ldr	r3, [pc, #256]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002628:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800262a:	2101      	movs	r1, #1
 800262c:	430a      	orrs	r2, r1
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7fe fbd0 	bl	8000dd4 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263a:	f7fe fbcb 	bl	8000dd4 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1e2      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264c:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2202      	movs	r2, #2
 8002652:	4013      	ands	r3, r2
 8002654:	d0f1      	beq.n	800263a <HAL_RCC_OscConfig+0x242>
 8002656:	e018      	b.n	800268a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002658:	4b33      	ldr	r3, [pc, #204]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800265a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800265e:	2101      	movs	r1, #1
 8002660:	438a      	bics	r2, r1
 8002662:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7fe fbb6 	bl	8000dd4 <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266e:	f7fe fbb1 	bl	8000dd4 <HAL_GetTick>
 8002672:	0002      	movs	r2, r0
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1c8      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2202      	movs	r2, #2
 8002686:	4013      	ands	r3, r2
 8002688:	d1f1      	bne.n	800266e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2204      	movs	r2, #4
 8002690:	4013      	ands	r3, r2
 8002692:	d100      	bne.n	8002696 <HAL_RCC_OscConfig+0x29e>
 8002694:	e0b6      	b.n	8002804 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	231f      	movs	r3, #31
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	055b      	lsls	r3, r3, #21
 80026a6:	4013      	ands	r3, r2
 80026a8:	d111      	bne.n	80026ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0549      	lsls	r1, r1, #21
 80026b4:	430a      	orrs	r2, r1
 80026b6:	61da      	str	r2, [r3, #28]
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	055b      	lsls	r3, r3, #21
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026c6:	231f      	movs	r3, #31
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_OscConfig+0x33c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4013      	ands	r3, r2
 80026d8:	d11a      	bne.n	8002710 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <HAL_RCC_OscConfig+0x33c>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_RCC_OscConfig+0x33c>)
 80026e0:	2180      	movs	r1, #128	; 0x80
 80026e2:	0049      	lsls	r1, r1, #1
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fb74 	bl	8000dd4 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f2:	f7fe fb6f 	bl	8000dd4 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e186      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x33c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4013      	ands	r3, r2
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10f      	bne.n	8002738 <HAL_RCC_OscConfig+0x340>
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <HAL_RCC_OscConfig+0x330>)
 800271e:	2101      	movs	r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	621a      	str	r2, [r3, #32]
 8002724:	e036      	b.n	8002794 <HAL_RCC_OscConfig+0x39c>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	40021000 	.word	0x40021000
 800272c:	fffeffff 	.word	0xfffeffff
 8002730:	fffbffff 	.word	0xfffbffff
 8002734:	40007000 	.word	0x40007000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x362>
 8002740:	4bb6      	ldr	r3, [pc, #728]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	4bb5      	ldr	r3, [pc, #724]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002746:	2101      	movs	r1, #1
 8002748:	438a      	bics	r2, r1
 800274a:	621a      	str	r2, [r3, #32]
 800274c:	4bb3      	ldr	r3, [pc, #716]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	4bb2      	ldr	r3, [pc, #712]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002752:	2104      	movs	r1, #4
 8002754:	438a      	bics	r2, r1
 8002756:	621a      	str	r2, [r3, #32]
 8002758:	e01c      	b.n	8002794 <HAL_RCC_OscConfig+0x39c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x384>
 8002762:	4bae      	ldr	r3, [pc, #696]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	4bad      	ldr	r3, [pc, #692]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002768:	2104      	movs	r1, #4
 800276a:	430a      	orrs	r2, r1
 800276c:	621a      	str	r2, [r3, #32]
 800276e:	4bab      	ldr	r3, [pc, #684]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	4baa      	ldr	r3, [pc, #680]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	621a      	str	r2, [r3, #32]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x39c>
 800277c:	4ba7      	ldr	r3, [pc, #668]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	4ba6      	ldr	r3, [pc, #664]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002782:	2101      	movs	r1, #1
 8002784:	438a      	bics	r2, r1
 8002786:	621a      	str	r2, [r3, #32]
 8002788:	4ba4      	ldr	r3, [pc, #656]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	4ba3      	ldr	r3, [pc, #652]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800278e:	2104      	movs	r1, #4
 8002790:	438a      	bics	r2, r1
 8002792:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d014      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe fb1a 	bl	8000dd4 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	e009      	b.n	80027ba <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fb15 	bl	8000dd4 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	4a9b      	ldr	r2, [pc, #620]	; (8002a20 <HAL_RCC_OscConfig+0x628>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e12b      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	4b98      	ldr	r3, [pc, #608]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	2202      	movs	r2, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x3ae>
 80027c4:	e013      	b.n	80027ee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fb05 	bl	8000dd4 <HAL_GetTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	e009      	b.n	80027e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fb00 	bl	8000dd4 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	4a91      	ldr	r2, [pc, #580]	; (8002a20 <HAL_RCC_OscConfig+0x628>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e116      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	4b8d      	ldr	r3, [pc, #564]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	2202      	movs	r2, #2
 80027ea:	4013      	ands	r3, r2
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ee:	231f      	movs	r3, #31
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	4b87      	ldr	r3, [pc, #540]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80027fe:	4989      	ldr	r1, [pc, #548]	; (8002a24 <HAL_RCC_OscConfig+0x62c>)
 8002800:	400a      	ands	r2, r1
 8002802:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2210      	movs	r2, #16
 800280a:	4013      	ands	r3, r2
 800280c:	d063      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d12a      	bne.n	800286c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002816:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281a:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800281c:	2104      	movs	r1, #4
 800281e:	430a      	orrs	r2, r1
 8002820:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002822:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002826:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002828:	2101      	movs	r1, #1
 800282a:	430a      	orrs	r2, r1
 800282c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fad1 	bl	8000dd4 <HAL_GetTick>
 8002832:	0003      	movs	r3, r0
 8002834:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002838:	f7fe facc 	bl	8000dd4 <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0e3      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800284a:	4b74      	ldr	r3, [pc, #464]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	2202      	movs	r2, #2
 8002850:	4013      	ands	r3, r2
 8002852:	d0f1      	beq.n	8002838 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002854:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	22f8      	movs	r2, #248	; 0xf8
 800285a:	4393      	bics	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	00da      	lsls	r2, r3, #3
 8002864:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002866:	430a      	orrs	r2, r1
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
 800286a:	e034      	b.n	80028d6 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	3305      	adds	r3, #5
 8002872:	d111      	bne.n	8002898 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002874:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800287a:	2104      	movs	r1, #4
 800287c:	438a      	bics	r2, r1
 800287e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002880:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	22f8      	movs	r2, #248	; 0xf8
 8002886:	4393      	bics	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	00da      	lsls	r2, r3, #3
 8002890:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002892:	430a      	orrs	r2, r1
 8002894:	635a      	str	r2, [r3, #52]	; 0x34
 8002896:	e01e      	b.n	80028d6 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800289a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289c:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800289e:	2104      	movs	r1, #4
 80028a0:	430a      	orrs	r2, r1
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028a4:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80028a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a8:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	438a      	bics	r2, r1
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe fa90 	bl	8000dd4 <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028ba:	f7fe fa8b 	bl	8000dd4 <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0a2      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d1f1      	bne.n	80028ba <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d100      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4e8>
 80028de:	e097      	b.n	8002a10 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e0:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	220c      	movs	r2, #12
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d100      	bne.n	80028ee <HAL_RCC_OscConfig+0x4f6>
 80028ec:	e06b      	b.n	80029c6 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d14c      	bne.n	8002990 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80028fc:	494a      	ldr	r1, [pc, #296]	; (8002a28 <HAL_RCC_OscConfig+0x630>)
 80028fe:	400a      	ands	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe fa67 	bl	8000dd4 <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fa62 	bl	8000dd4 <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e079      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	049b      	lsls	r3, r3, #18
 8002926:	4013      	ands	r3, r2
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292a:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	220f      	movs	r2, #15
 8002930:	4393      	bics	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
 800293e:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_RCC_OscConfig+0x634>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	431a      	orrs	r2, r3
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	0449      	lsls	r1, r1, #17
 8002962:	430a      	orrs	r2, r1
 8002964:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe fa35 	bl	8000dd4 <HAL_GetTick>
 800296a:	0003      	movs	r3, r0
 800296c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe fa30 	bl	8000dd4 <HAL_GetTick>
 8002974:	0002      	movs	r2, r0
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e047      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	049b      	lsls	r3, r3, #18
 800298a:	4013      	ands	r3, r2
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x578>
 800298e:	e03f      	b.n	8002a10 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 8002996:	4924      	ldr	r1, [pc, #144]	; (8002a28 <HAL_RCC_OscConfig+0x630>)
 8002998:	400a      	ands	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe fa1a 	bl	8000dd4 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe fa15 	bl	8000dd4 <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e02c      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	049b      	lsls	r3, r3, #18
 80029c0:	4013      	ands	r3, r2
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5ae>
 80029c4:	e024      	b.n	8002a10 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01f      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_RCC_OscConfig+0x624>)
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	025b      	lsls	r3, r3, #9
 80029e4:	401a      	ands	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d10e      	bne.n	8002a0c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	220f      	movs	r2, #15
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	23f0      	movs	r3, #240	; 0xf0
 8002a00:	039b      	lsls	r3, r3, #14
 8002a02:	401a      	ands	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b008      	add	sp, #32
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	00001388 	.word	0x00001388
 8002a24:	efffffff 	.word	0xefffffff
 8002a28:	feffffff 	.word	0xfeffffff
 8002a2c:	ffc2ffff 	.word	0xffc2ffff

08002a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0b3      	b.n	8002bac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b5b      	ldr	r3, [pc, #364]	; (8002bb4 <HAL_RCC_ClockConfig+0x184>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d911      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b58      	ldr	r3, [pc, #352]	; (8002bb4 <HAL_RCC_ClockConfig+0x184>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	4393      	bics	r3, r2
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <HAL_RCC_ClockConfig+0x184>)
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x184>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e09a      	b.n	8002bac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d015      	beq.n	8002aac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2204      	movs	r2, #4
 8002a86:	4013      	ands	r3, r2
 8002a88:	d006      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002a90:	21e0      	movs	r1, #224	; 0xe0
 8002a92:	00c9      	lsls	r1, r1, #3
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	22f0      	movs	r2, #240	; 0xf0
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d040      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	029b      	lsls	r3, r3, #10
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d114      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06e      	b.n	8002bac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b38      	ldr	r3, [pc, #224]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	049b      	lsls	r3, r3, #18
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e062      	b.n	8002bac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e05b      	b.n	8002bac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af4:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2203      	movs	r2, #3
 8002afa:	4393      	bics	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fe f964 	bl	8000dd4 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b10:	e009      	b.n	8002b26 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b12:	f7fe f95f 	bl	8000dd4 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <HAL_RCC_ClockConfig+0x18c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e042      	b.n	8002bac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1ec      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCC_ClockConfig+0x184>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	4013      	ands	r3, r2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d211      	bcs.n	8002b6a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_ClockConfig+0x184>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_RCC_ClockConfig+0x184>)
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_RCC_ClockConfig+0x184>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e020      	b.n	8002bac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	4013      	ands	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_RCC_ClockConfig+0x190>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b88:	f000 f820 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b8c:	0001      	movs	r1, r0
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x188>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	220f      	movs	r2, #15
 8002b96:	4013      	ands	r3, r2
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x194>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	000a      	movs	r2, r1
 8002b9e:	40da      	lsrs	r2, r3
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x198>)
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fe f8cf 	bl	8000d48 <HAL_InitTick>
  
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b004      	add	sp, #16
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	00001388 	.word	0x00001388
 8002bc0:	fffff8ff 	.word	0xfffff8ff
 8002bc4:	08004cb0 	.word	0x08004cb0
 8002bc8:	20000000 	.word	0x20000000

08002bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b08f      	sub	sp, #60	; 0x3c
 8002bd0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002bd2:	2314      	movs	r3, #20
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bda:	c313      	stmia	r3!, {r0, r1, r4}
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002be4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002be6:	c313      	stmia	r3!, {r0, r1, r4}
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	220c      	movs	r2, #12
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d002      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x4a>
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d003      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x50>
 8002c14:	e02d      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c1a:	e02d      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	0c9b      	lsrs	r3, r3, #18
 8002c20:	220f      	movs	r2, #15
 8002c22:	4013      	ands	r3, r2
 8002c24:	2214      	movs	r2, #20
 8002c26:	18ba      	adds	r2, r7, r2
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	220f      	movs	r2, #15
 8002c32:	4013      	ands	r3, r2
 8002c34:	1d3a      	adds	r2, r7, #4
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	025b      	lsls	r3, r3, #9
 8002c40:	4013      	ands	r3, r2
 8002c42:	d009      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c46:	4812      	ldr	r0, [pc, #72]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c48:	f7fd fa5e 	bl	8000108 <__udivsi3>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	001a      	movs	r2, r3
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	4353      	muls	r3, r2
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
 8002c56:	e009      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c5a:	000a      	movs	r2, r1
 8002c5c:	0152      	lsls	r2, r2, #5
 8002c5e:	1a52      	subs	r2, r2, r1
 8002c60:	0193      	lsls	r3, r2, #6
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	185b      	adds	r3, r3, r1
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c70:	e002      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c76:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b00f      	add	sp, #60	; 0x3c
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	08004c90 	.word	0x08004c90
 8002c88:	08004ca0 	.word	0x08004ca0
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	007a1200 	.word	0x007a1200

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002cac:	f7ff fff2 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb0:	0001      	movs	r1, r0
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	2207      	movs	r2, #7
 8002cba:	4013      	ands	r3, r2
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	40d9      	lsrs	r1, r3
 8002cc2:	000b      	movs	r3, r1
}    
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08004cc0 	.word	0x08004cc0

08002cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	025b      	lsls	r3, r3, #9
 8002cec:	4013      	ands	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cf0:	e08f      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2317      	movs	r3, #23
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	055b      	lsls	r3, r3, #21
 8002d02:	4013      	ands	r3, r2
 8002d04:	d111      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	0549      	lsls	r1, r1, #21
 8002d10:	430a      	orrs	r2, r1
 8002d12:	61da      	str	r2, [r3, #28]
 8002d14:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	055b      	lsls	r3, r3, #21
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d22:	2317      	movs	r3, #23
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	d11a      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0049      	lsls	r1, r1, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d44:	f7fe f846 	bl	8000dd4 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fe f841 	bl	8000dd4 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e077      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d6c:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d034      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	23c0      	movs	r3, #192	; 0xc0
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4013      	ands	r3, r2
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d02c      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d8e:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a33      	ldr	r2, [pc, #204]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	0249      	lsls	r1, r1, #9
 8002da2:	430a      	orrs	r2, r1
 8002da4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da6:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dac:	492d      	ldr	r1, [pc, #180]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002db2:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f808 	bl	8000dd4 <HAL_GetTick>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	e009      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fe f803 	bl	8000dd4 <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e038      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dfc:	2317      	movs	r3, #23
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e0c:	4917      	ldr	r1, [pc, #92]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002e0e:	400a      	ands	r2, r1
 8002e10:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	2203      	movs	r2, #3
 8002e22:	4393      	bics	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2220      	movs	r2, #32
 8002e36:	4013      	ands	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	2210      	movs	r2, #16
 8002e40:	4393      	bics	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b006      	add	sp, #24
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	fffffcff 	.word	0xfffffcff
 8002e64:	fffeffff 	.word	0xfffeffff
 8002e68:	00001388 	.word	0x00001388
 8002e6c:	efffffff 	.word	0xefffffff

08002e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e044      	b.n	8002f0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2270      	movs	r2, #112	; 0x70
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7fd fdf7 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2224      	movs	r2, #36	; 0x24
 8002e9e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	438a      	bics	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 f988 	bl	80031c8 <UART_SetConfig>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e024      	b.n	8002f0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 fb01 	bl	80034d4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	490d      	ldr	r1, [pc, #52]	; (8002f14 <HAL_UART_Init+0xa4>)
 8002ede:	400a      	ands	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2108      	movs	r1, #8
 8002eee:	438a      	bics	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f000 fb99 	bl	800363c <UART_CheckIdleState>
 8002f0a:	0003      	movs	r3, r0
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	fffff7ff 	.word	0xfffff7ff

08002f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	1dbb      	adds	r3, r7, #6
 8002f26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d000      	beq.n	8002f32 <HAL_UART_Transmit+0x1a>
 8002f30:	e095      	b.n	800305e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_UART_Transmit+0x28>
 8002f38:	1dbb      	adds	r3, r7, #6
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e08d      	b.n	8003060 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	015b      	lsls	r3, r3, #5
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d109      	bne.n	8002f64 <HAL_UART_Transmit+0x4c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e07d      	b.n	8003060 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2270      	movs	r2, #112	; 0x70
 8002f68:	5c9b      	ldrb	r3, [r3, r2]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Transmit+0x5a>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e076      	b.n	8003060 <HAL_UART_Transmit+0x148>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2270      	movs	r2, #112	; 0x70
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2221      	movs	r2, #33	; 0x21
 8002f84:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f86:	f7fd ff25 	bl	8000dd4 <HAL_GetTick>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1dba      	adds	r2, r7, #6
 8002f92:	2150      	movs	r1, #80	; 0x50
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1dba      	adds	r2, r7, #6
 8002f9c:	2152      	movs	r1, #82	; 0x52
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	015b      	lsls	r3, r3, #5
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d108      	bne.n	8002fc0 <HAL_UART_Transmit+0xa8>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d104      	bne.n	8002fc0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	e003      	b.n	8002fc8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc8:	e02d      	b.n	8003026 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	f000 fb76 	bl	80036c8 <UART_WaitOnFlagUntilTimeout>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e03d      	b.n	8003060 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	05d2      	lsls	r2, r2, #23
 8002ff4:	0dd2      	lsrs	r2, r2, #23
 8002ff6:	b292      	uxth	r2, r2
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e008      	b.n	8003014 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	b292      	uxth	r2, r2
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2252      	movs	r2, #82	; 0x52
 8003018:	5a9b      	ldrh	r3, [r3, r2]
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b299      	uxth	r1, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2252      	movs	r2, #82	; 0x52
 8003024:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2252      	movs	r2, #82	; 0x52
 800302a:	5a9b      	ldrh	r3, [r3, r2]
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1cb      	bne.n	8002fca <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	0013      	movs	r3, r2
 800303c:	2200      	movs	r2, #0
 800303e:	2140      	movs	r1, #64	; 0x40
 8003040:	f000 fb42 	bl	80036c8 <UART_WaitOnFlagUntilTimeout>
 8003044:	1e03      	subs	r3, r0, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e009      	b.n	8003060 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2270      	movs	r2, #112	; 0x70
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e000      	b.n	8003060 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
  }
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b008      	add	sp, #32
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	1dbb      	adds	r3, r7, #6
 8003074:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307a:	2b20      	cmp	r3, #32
 800307c:	d000      	beq.n	8003080 <HAL_UART_Receive_DMA+0x18>
 800307e:	e07f      	b.n	8003180 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_Receive_DMA+0x26>
 8003086:	1dbb      	adds	r3, r7, #6
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e077      	b.n	8003182 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	015b      	lsls	r3, r3, #5
 800309a:	429a      	cmp	r2, r3
 800309c:	d109      	bne.n	80030b2 <HAL_UART_Receive_DMA+0x4a>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	d001      	beq.n	80030b2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e067      	b.n	8003182 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2270      	movs	r2, #112	; 0x70
 80030b6:	5c9b      	ldrb	r3, [r3, r2]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Receive_DMA+0x58>
 80030bc:	2302      	movs	r3, #2
 80030be:	e060      	b.n	8003182 <HAL_UART_Receive_DMA+0x11a>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2270      	movs	r2, #112	; 0x70
 80030c4:	2101      	movs	r1, #1
 80030c6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1dba      	adds	r2, r7, #6
 80030d2:	2158      	movs	r1, #88	; 0x58
 80030d4:	8812      	ldrh	r2, [r2, #0]
 80030d6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2222      	movs	r2, #34	; 0x22
 80030e2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d02a      	beq.n	8003142 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f0:	4a26      	ldr	r2, [pc, #152]	; (800318c <HAL_UART_Receive_DMA+0x124>)
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f8:	4a25      	ldr	r2, [pc, #148]	; (8003190 <HAL_UART_Receive_DMA+0x128>)
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003100:	4a24      	ldr	r2, [pc, #144]	; (8003194 <HAL_UART_Receive_DMA+0x12c>)
 8003102:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003108:	2200      	movs	r2, #0
 800310a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3324      	adds	r3, #36	; 0x24
 8003116:	0019      	movs	r1, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	001a      	movs	r2, r3
 800311e:	1dbb      	adds	r3, r7, #6
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f7fd ff87 	bl	8001034 <HAL_DMA_Start_IT>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d00b      	beq.n	8003142 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2210      	movs	r2, #16
 800312e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2270      	movs	r2, #112	; 0x70
 8003134:	2100      	movs	r1, #0
 8003136:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e01f      	b.n	8003182 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2270      	movs	r2, #112	; 0x70
 8003146:	2100      	movs	r1, #0
 8003148:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0049      	lsls	r1, r1, #1
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	430a      	orrs	r2, r1
 800316a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e000      	b.n	8003182 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
  }
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b004      	add	sp, #16
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	0800382d 	.word	0x0800382d
 8003190:	08003895 	.word	0x08003895
 8003194:	080038b3 	.word	0x080038b3

08003198 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031d4:	2317      	movs	r3, #23
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4aad      	ldr	r2, [pc, #692]	; (80034b0 <UART_SetConfig+0x2e8>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4aa8      	ldr	r2, [pc, #672]	; (80034b4 <UART_SetConfig+0x2ec>)
 8003212:	4013      	ands	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a9f      	ldr	r2, [pc, #636]	; (80034b8 <UART_SetConfig+0x2f0>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a9b      	ldr	r2, [pc, #620]	; (80034bc <UART_SetConfig+0x2f4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d125      	bne.n	800329e <UART_SetConfig+0xd6>
 8003252:	4b9b      	ldr	r3, [pc, #620]	; (80034c0 <UART_SetConfig+0x2f8>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	2203      	movs	r2, #3
 8003258:	4013      	ands	r3, r2
 800325a:	2b01      	cmp	r3, #1
 800325c:	d00f      	beq.n	800327e <UART_SetConfig+0xb6>
 800325e:	d304      	bcc.n	800326a <UART_SetConfig+0xa2>
 8003260:	2b02      	cmp	r3, #2
 8003262:	d011      	beq.n	8003288 <UART_SetConfig+0xc0>
 8003264:	2b03      	cmp	r3, #3
 8003266:	d005      	beq.n	8003274 <UART_SetConfig+0xac>
 8003268:	e013      	b.n	8003292 <UART_SetConfig+0xca>
 800326a:	231f      	movs	r3, #31
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e022      	b.n	80032ba <UART_SetConfig+0xf2>
 8003274:	231f      	movs	r3, #31
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	2202      	movs	r2, #2
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e01d      	b.n	80032ba <UART_SetConfig+0xf2>
 800327e:	231f      	movs	r3, #31
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2204      	movs	r2, #4
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e018      	b.n	80032ba <UART_SetConfig+0xf2>
 8003288:	231f      	movs	r3, #31
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2208      	movs	r2, #8
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e013      	b.n	80032ba <UART_SetConfig+0xf2>
 8003292:	231f      	movs	r3, #31
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2210      	movs	r2, #16
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	e00d      	b.n	80032ba <UART_SetConfig+0xf2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a88      	ldr	r2, [pc, #544]	; (80034c4 <UART_SetConfig+0x2fc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d104      	bne.n	80032b2 <UART_SetConfig+0xea>
 80032a8:	231f      	movs	r3, #31
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	e003      	b.n	80032ba <UART_SetConfig+0xf2>
 80032b2:	231f      	movs	r3, #31
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2210      	movs	r2, #16
 80032b8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d000      	beq.n	80032c8 <UART_SetConfig+0x100>
 80032c6:	e07d      	b.n	80033c4 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 80032c8:	231f      	movs	r3, #31
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d01c      	beq.n	800330c <UART_SetConfig+0x144>
 80032d2:	dc02      	bgt.n	80032da <UART_SetConfig+0x112>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <UART_SetConfig+0x11c>
 80032d8:	e04b      	b.n	8003372 <UART_SetConfig+0x1aa>
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d025      	beq.n	800332a <UART_SetConfig+0x162>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d037      	beq.n	8003352 <UART_SetConfig+0x18a>
 80032e2:	e046      	b.n	8003372 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7ff fce0 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 80032e8:	0003      	movs	r3, r0
 80032ea:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	005a      	lsls	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	18d2      	adds	r2, r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0019      	movs	r1, r3
 80032fe:	0010      	movs	r0, r2
 8003300:	f7fc ff02 	bl	8000108 <__udivsi3>
 8003304:	0003      	movs	r3, r0
 8003306:	b29b      	uxth	r3, r3
 8003308:	61bb      	str	r3, [r7, #24]
        break;
 800330a:	e037      	b.n	800337c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	4a6d      	ldr	r2, [pc, #436]	; (80034c8 <UART_SetConfig+0x300>)
 8003314:	189a      	adds	r2, r3, r2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	0019      	movs	r1, r3
 800331c:	0010      	movs	r0, r2
 800331e:	f7fc fef3 	bl	8000108 <__udivsi3>
 8003322:	0003      	movs	r3, r0
 8003324:	b29b      	uxth	r3, r3
 8003326:	61bb      	str	r3, [r7, #24]
        break;
 8003328:	e028      	b.n	800337c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7ff fc4f 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 800332e:	0003      	movs	r3, r0
 8003330:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	005a      	lsls	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	18d2      	adds	r2, r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0019      	movs	r1, r3
 8003344:	0010      	movs	r0, r2
 8003346:	f7fc fedf 	bl	8000108 <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	b29b      	uxth	r3, r3
 800334e:	61bb      	str	r3, [r7, #24]
        break;
 8003350:	e014      	b.n	800337c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	0252      	lsls	r2, r2, #9
 800335c:	189a      	adds	r2, r3, r2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	0019      	movs	r1, r3
 8003364:	0010      	movs	r0, r2
 8003366:	f7fc fecf 	bl	8000108 <__udivsi3>
 800336a:	0003      	movs	r3, r0
 800336c:	b29b      	uxth	r3, r3
 800336e:	61bb      	str	r3, [r7, #24]
        break;
 8003370:	e004      	b.n	800337c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003372:	2317      	movs	r3, #23
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
        break;
 800337a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	d91b      	bls.n	80033ba <UART_SetConfig+0x1f2>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4a51      	ldr	r2, [pc, #324]	; (80034cc <UART_SetConfig+0x304>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d817      	bhi.n	80033ba <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	b29a      	uxth	r2, r3
 800338e:	200a      	movs	r0, #10
 8003390:	183b      	adds	r3, r7, r0
 8003392:	210f      	movs	r1, #15
 8003394:	438a      	bics	r2, r1
 8003396:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	2207      	movs	r2, #7
 80033a0:	4013      	ands	r3, r2
 80033a2:	b299      	uxth	r1, r3
 80033a4:	183b      	adds	r3, r7, r0
 80033a6:	183a      	adds	r2, r7, r0
 80033a8:	8812      	ldrh	r2, [r2, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	183a      	adds	r2, r7, r0
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	e06c      	b.n	8003494 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80033ba:	2317      	movs	r3, #23
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e067      	b.n	8003494 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80033c4:	231f      	movs	r3, #31
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d01b      	beq.n	8003406 <UART_SetConfig+0x23e>
 80033ce:	dc02      	bgt.n	80033d6 <UART_SetConfig+0x20e>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <UART_SetConfig+0x218>
 80033d4:	e049      	b.n	800346a <UART_SetConfig+0x2a2>
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d024      	beq.n	8003424 <UART_SetConfig+0x25c>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d035      	beq.n	800344a <UART_SetConfig+0x282>
 80033de:	e044      	b.n	800346a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e0:	f7ff fc62 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 80033e4:	0003      	movs	r3, r0
 80033e6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	085a      	lsrs	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	18d2      	adds	r2, r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	0019      	movs	r1, r3
 80033f8:	0010      	movs	r0, r2
 80033fa:	f7fc fe85 	bl	8000108 <__udivsi3>
 80033fe:	0003      	movs	r3, r0
 8003400:	b29b      	uxth	r3, r3
 8003402:	61bb      	str	r3, [r7, #24]
        break;
 8003404:	e036      	b.n	8003474 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	4a30      	ldr	r2, [pc, #192]	; (80034d0 <UART_SetConfig+0x308>)
 800340e:	189a      	adds	r2, r3, r2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	0019      	movs	r1, r3
 8003416:	0010      	movs	r0, r2
 8003418:	f7fc fe76 	bl	8000108 <__udivsi3>
 800341c:	0003      	movs	r3, r0
 800341e:	b29b      	uxth	r3, r3
 8003420:	61bb      	str	r3, [r7, #24]
        break;
 8003422:	e027      	b.n	8003474 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003424:	f7ff fbd2 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8003428:	0003      	movs	r3, r0
 800342a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	085a      	lsrs	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	18d2      	adds	r2, r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	0019      	movs	r1, r3
 800343c:	0010      	movs	r0, r2
 800343e:	f7fc fe63 	bl	8000108 <__udivsi3>
 8003442:	0003      	movs	r3, r0
 8003444:	b29b      	uxth	r3, r3
 8003446:	61bb      	str	r3, [r7, #24]
        break;
 8003448:	e014      	b.n	8003474 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	0212      	lsls	r2, r2, #8
 8003454:	189a      	adds	r2, r3, r2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	0019      	movs	r1, r3
 800345c:	0010      	movs	r0, r2
 800345e:	f7fc fe53 	bl	8000108 <__udivsi3>
 8003462:	0003      	movs	r3, r0
 8003464:	b29b      	uxth	r3, r3
 8003466:	61bb      	str	r3, [r7, #24]
        break;
 8003468:	e004      	b.n	8003474 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800346a:	2317      	movs	r3, #23
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
        break;
 8003472:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	d908      	bls.n	800348c <UART_SetConfig+0x2c4>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <UART_SetConfig+0x304>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d804      	bhi.n	800348c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	e003      	b.n	8003494 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800348c:	2317      	movs	r3, #23
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034a0:	2317      	movs	r3, #23
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	781b      	ldrb	r3, [r3, #0]
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b008      	add	sp, #32
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	ffff69f3 	.word	0xffff69f3
 80034b4:	ffffcfff 	.word	0xffffcfff
 80034b8:	fffff4ff 	.word	0xfffff4ff
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40004400 	.word	0x40004400
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	0000ffff 	.word	0x0000ffff
 80034d0:	007a1200 	.word	0x007a1200

080034d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2201      	movs	r2, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	d00b      	beq.n	80034fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a4a      	ldr	r2, [pc, #296]	; (8003618 <UART_AdvFeatureConfig+0x144>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2202      	movs	r2, #2
 8003504:	4013      	ands	r3, r2
 8003506:	d00b      	beq.n	8003520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a43      	ldr	r2, [pc, #268]	; (800361c <UART_AdvFeatureConfig+0x148>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2204      	movs	r2, #4
 8003526:	4013      	ands	r3, r2
 8003528:	d00b      	beq.n	8003542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <UART_AdvFeatureConfig+0x14c>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2208      	movs	r2, #8
 8003548:	4013      	ands	r3, r2
 800354a:	d00b      	beq.n	8003564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a34      	ldr	r2, [pc, #208]	; (8003624 <UART_AdvFeatureConfig+0x150>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2210      	movs	r2, #16
 800356a:	4013      	ands	r3, r2
 800356c:	d00b      	beq.n	8003586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a2c      	ldr	r2, [pc, #176]	; (8003628 <UART_AdvFeatureConfig+0x154>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	2220      	movs	r2, #32
 800358c:	4013      	ands	r3, r2
 800358e:	d00b      	beq.n	80035a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4a25      	ldr	r2, [pc, #148]	; (800362c <UART_AdvFeatureConfig+0x158>)
 8003598:	4013      	ands	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2240      	movs	r2, #64	; 0x40
 80035ae:	4013      	ands	r3, r2
 80035b0:	d01d      	beq.n	80035ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <UART_AdvFeatureConfig+0x15c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	035b      	lsls	r3, r3, #13
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10b      	bne.n	80035ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <UART_AdvFeatureConfig+0x160>)
 80035de:	4013      	ands	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	4013      	ands	r3, r2
 80035f6:	d00b      	beq.n	8003610 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <UART_AdvFeatureConfig+0x164>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}
 8003618:	fffdffff 	.word	0xfffdffff
 800361c:	fffeffff 	.word	0xfffeffff
 8003620:	fffbffff 	.word	0xfffbffff
 8003624:	ffff7fff 	.word	0xffff7fff
 8003628:	ffffefff 	.word	0xffffefff
 800362c:	ffffdfff 	.word	0xffffdfff
 8003630:	ffefffff 	.word	0xffefffff
 8003634:	ff9fffff 	.word	0xff9fffff
 8003638:	fff7ffff 	.word	0xfff7ffff

0800363c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800364a:	f7fd fbc3 	bl	8000dd4 <HAL_GetTick>
 800364e:	0003      	movs	r3, r0
 8003650:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2208      	movs	r2, #8
 800365a:	4013      	ands	r3, r2
 800365c:	2b08      	cmp	r3, #8
 800365e:	d10d      	bne.n	800367c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	0399      	lsls	r1, r3, #14
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <UART_CheckIdleState+0x88>)
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	0013      	movs	r3, r2
 800366e:	2200      	movs	r2, #0
 8003670:	f000 f82a 	bl	80036c8 <UART_WaitOnFlagUntilTimeout>
 8003674:	1e03      	subs	r3, r0, #0
 8003676:	d001      	beq.n	800367c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e01f      	b.n	80036bc <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2204      	movs	r2, #4
 8003684:	4013      	ands	r3, r2
 8003686:	2b04      	cmp	r3, #4
 8003688:	d10d      	bne.n	80036a6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	03d9      	lsls	r1, r3, #15
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <UART_CheckIdleState+0x88>)
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	0013      	movs	r3, r2
 8003698:	2200      	movs	r2, #0
 800369a:	f000 f815 	bl	80036c8 <UART_WaitOnFlagUntilTimeout>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e00a      	b.n	80036bc <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2270      	movs	r2, #112	; 0x70
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	01ffffff 	.word	0x01ffffff

080036c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	1dfb      	adds	r3, r7, #7
 80036d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d8:	e05d      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3301      	adds	r3, #1
 80036de:	d05a      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fd fb78 	bl	8000dd4 <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11b      	bne.n	800372e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	492f      	ldr	r1, [pc, #188]	; (80037c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003702:	400a      	ands	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	438a      	bics	r2, r1
 8003714:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2270      	movs	r2, #112	; 0x70
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e043      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2204      	movs	r2, #4
 8003736:	4013      	ands	r3, r2
 8003738:	d02d      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	401a      	ands	r2, r3
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	429a      	cmp	r2, r3
 800374c:	d123      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4917      	ldr	r1, [pc, #92]	; (80037c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003764:	400a      	ands	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2101      	movs	r1, #1
 8003774:	438a      	bics	r2, r1
 8003776:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2270      	movs	r2, #112	; 0x70
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e00f      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	425a      	negs	r2, r3
 80037a6:	4153      	adcs	r3, r2
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	001a      	movs	r2, r3
 80037ac:	1dfb      	adds	r3, r7, #7
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d092      	beq.n	80036da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	0018      	movs	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b004      	add	sp, #16
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	fffffe5f 	.word	0xfffffe5f

080037c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	21c0      	movs	r1, #192	; 0xc0
 80037d8:	438a      	bics	r2, r1
 80037da:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b002      	add	sp, #8
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	490a      	ldr	r1, [pc, #40]	; (8003828 <UART_EndRxTransfer+0x3c>)
 8003800:	400a      	ands	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2101      	movs	r1, #1
 8003810:	438a      	bics	r2, r1
 8003812:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}
 8003828:	fffffedf 	.word	0xfffffedf

0800382c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b20      	cmp	r3, #32
 8003840:	d01e      	beq.n	8003880 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	225a      	movs	r2, #90	; 0x5a
 8003846:	2100      	movs	r1, #0
 8003848:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	490e      	ldr	r1, [pc, #56]	; (8003890 <UART_DMAReceiveCplt+0x64>)
 8003856:	400a      	ands	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	438a      	bics	r2, r1
 8003868:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	438a      	bics	r2, r1
 8003878:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	0018      	movs	r0, r3
 8003884:	f7ff fc88 	bl	8003198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b004      	add	sp, #16
 800388e:	bd80      	pop	{r7, pc}
 8003890:	fffffeff 	.word	0xfffffeff

08003894 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7ff fc7f 	bl	80031a8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d10a      	bne.n	80038f0 <UART_DMAError+0x3e>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b21      	cmp	r3, #33	; 0x21
 80038de:	d107      	bne.n	80038f0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2252      	movs	r2, #82	; 0x52
 80038e4:	2100      	movs	r1, #0
 80038e6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff ff6a 	bl	80037c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2240      	movs	r2, #64	; 0x40
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d10a      	bne.n	8003914 <UART_DMAError+0x62>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b22      	cmp	r3, #34	; 0x22
 8003902:	d107      	bne.n	8003914 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	225a      	movs	r2, #90	; 0x5a
 8003908:	2100      	movs	r1, #0
 800390a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	0018      	movs	r0, r3
 8003910:	f7ff ff6c 	bl	80037ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	2210      	movs	r2, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	0018      	movs	r0, r3
 8003924:	f7ff fc48 	bl	80031b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b006      	add	sp, #24
 800392e:	bd80      	pop	{r7, pc}

08003930 <atoi>:
 8003930:	b510      	push	{r4, lr}
 8003932:	220a      	movs	r2, #10
 8003934:	2100      	movs	r1, #0
 8003936:	f000 f9c1 	bl	8003cbc <strtol>
 800393a:	bd10      	pop	{r4, pc}

0800393c <__errno>:
 800393c:	4b01      	ldr	r3, [pc, #4]	; (8003944 <__errno+0x8>)
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	4770      	bx	lr
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	2000000c 	.word	0x2000000c

08003948 <__libc_init_array>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	2600      	movs	r6, #0
 800394c:	4d0c      	ldr	r5, [pc, #48]	; (8003980 <__libc_init_array+0x38>)
 800394e:	4c0d      	ldr	r4, [pc, #52]	; (8003984 <__libc_init_array+0x3c>)
 8003950:	1b64      	subs	r4, r4, r5
 8003952:	10a4      	asrs	r4, r4, #2
 8003954:	42a6      	cmp	r6, r4
 8003956:	d109      	bne.n	800396c <__libc_init_array+0x24>
 8003958:	2600      	movs	r6, #0
 800395a:	f001 f92f 	bl	8004bbc <_init>
 800395e:	4d0a      	ldr	r5, [pc, #40]	; (8003988 <__libc_init_array+0x40>)
 8003960:	4c0a      	ldr	r4, [pc, #40]	; (800398c <__libc_init_array+0x44>)
 8003962:	1b64      	subs	r4, r4, r5
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	42a6      	cmp	r6, r4
 8003968:	d105      	bne.n	8003976 <__libc_init_array+0x2e>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	00b3      	lsls	r3, r6, #2
 800396e:	58eb      	ldr	r3, [r5, r3]
 8003970:	4798      	blx	r3
 8003972:	3601      	adds	r6, #1
 8003974:	e7ee      	b.n	8003954 <__libc_init_array+0xc>
 8003976:	00b3      	lsls	r3, r6, #2
 8003978:	58eb      	ldr	r3, [r5, r3]
 800397a:	4798      	blx	r3
 800397c:	3601      	adds	r6, #1
 800397e:	e7f2      	b.n	8003966 <__libc_init_array+0x1e>
 8003980:	08004e6c 	.word	0x08004e6c
 8003984:	08004e6c 	.word	0x08004e6c
 8003988:	08004e6c 	.word	0x08004e6c
 800398c:	08004e70 	.word	0x08004e70

08003990 <memset>:
 8003990:	0003      	movs	r3, r0
 8003992:	1812      	adds	r2, r2, r0
 8003994:	4293      	cmp	r3, r2
 8003996:	d100      	bne.n	800399a <memset+0xa>
 8003998:	4770      	bx	lr
 800399a:	7019      	strb	r1, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	e7f9      	b.n	8003994 <memset+0x4>

080039a0 <iprintf>:
 80039a0:	b40f      	push	{r0, r1, r2, r3}
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <iprintf+0x30>)
 80039a4:	b513      	push	{r0, r1, r4, lr}
 80039a6:	681c      	ldr	r4, [r3, #0]
 80039a8:	2c00      	cmp	r4, #0
 80039aa:	d005      	beq.n	80039b8 <iprintf+0x18>
 80039ac:	69a3      	ldr	r3, [r4, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <iprintf+0x18>
 80039b2:	0020      	movs	r0, r4
 80039b4:	f000 fb5a 	bl	800406c <__sinit>
 80039b8:	ab05      	add	r3, sp, #20
 80039ba:	9a04      	ldr	r2, [sp, #16]
 80039bc:	68a1      	ldr	r1, [r4, #8]
 80039be:	0020      	movs	r0, r4
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	f000 fd4f 	bl	8004464 <_vfiprintf_r>
 80039c6:	bc16      	pop	{r1, r2, r4}
 80039c8:	bc08      	pop	{r3}
 80039ca:	b004      	add	sp, #16
 80039cc:	4718      	bx	r3
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	2000000c 	.word	0x2000000c

080039d4 <putchar>:
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <putchar+0x24>)
 80039d6:	b570      	push	{r4, r5, r6, lr}
 80039d8:	681c      	ldr	r4, [r3, #0]
 80039da:	0005      	movs	r5, r0
 80039dc:	2c00      	cmp	r4, #0
 80039de:	d005      	beq.n	80039ec <putchar+0x18>
 80039e0:	69a3      	ldr	r3, [r4, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <putchar+0x18>
 80039e6:	0020      	movs	r0, r4
 80039e8:	f000 fb40 	bl	800406c <__sinit>
 80039ec:	0029      	movs	r1, r5
 80039ee:	68a2      	ldr	r2, [r4, #8]
 80039f0:	0020      	movs	r0, r4
 80039f2:	f000 ffc3 	bl	800497c <_putc_r>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	2000000c 	.word	0x2000000c

080039fc <_puts_r>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	0005      	movs	r5, r0
 8003a00:	000e      	movs	r6, r1
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d004      	beq.n	8003a10 <_puts_r+0x14>
 8003a06:	6983      	ldr	r3, [r0, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <_puts_r+0x14>
 8003a0c:	f000 fb2e 	bl	800406c <__sinit>
 8003a10:	69ab      	ldr	r3, [r5, #24]
 8003a12:	68ac      	ldr	r4, [r5, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <_puts_r+0x22>
 8003a18:	0028      	movs	r0, r5
 8003a1a:	f000 fb27 	bl	800406c <__sinit>
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <_puts_r+0xb4>)
 8003a20:	429c      	cmp	r4, r3
 8003a22:	d10f      	bne.n	8003a44 <_puts_r+0x48>
 8003a24:	686c      	ldr	r4, [r5, #4]
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	071b      	lsls	r3, r3, #28
 8003a2a:	d502      	bpl.n	8003a32 <_puts_r+0x36>
 8003a2c:	6923      	ldr	r3, [r4, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11f      	bne.n	8003a72 <_puts_r+0x76>
 8003a32:	0021      	movs	r1, r4
 8003a34:	0028      	movs	r0, r5
 8003a36:	f000 f9ab 	bl	8003d90 <__swsetup_r>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d019      	beq.n	8003a72 <_puts_r+0x76>
 8003a3e:	2001      	movs	r0, #1
 8003a40:	4240      	negs	r0, r0
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <_puts_r+0xb8>)
 8003a46:	429c      	cmp	r4, r3
 8003a48:	d101      	bne.n	8003a4e <_puts_r+0x52>
 8003a4a:	68ac      	ldr	r4, [r5, #8]
 8003a4c:	e7eb      	b.n	8003a26 <_puts_r+0x2a>
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <_puts_r+0xbc>)
 8003a50:	429c      	cmp	r4, r3
 8003a52:	d1e8      	bne.n	8003a26 <_puts_r+0x2a>
 8003a54:	68ec      	ldr	r4, [r5, #12]
 8003a56:	e7e6      	b.n	8003a26 <_puts_r+0x2a>
 8003a58:	3601      	adds	r6, #1
 8003a5a:	60a3      	str	r3, [r4, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	da04      	bge.n	8003a6a <_puts_r+0x6e>
 8003a60:	69a2      	ldr	r2, [r4, #24]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	dc16      	bgt.n	8003a94 <_puts_r+0x98>
 8003a66:	290a      	cmp	r1, #10
 8003a68:	d014      	beq.n	8003a94 <_puts_r+0x98>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	6022      	str	r2, [r4, #0]
 8003a70:	7019      	strb	r1, [r3, #0]
 8003a72:	68a3      	ldr	r3, [r4, #8]
 8003a74:	7831      	ldrb	r1, [r6, #0]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	d1ed      	bne.n	8003a58 <_puts_r+0x5c>
 8003a7c:	60a3      	str	r3, [r4, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da0f      	bge.n	8003aa2 <_puts_r+0xa6>
 8003a82:	0022      	movs	r2, r4
 8003a84:	310a      	adds	r1, #10
 8003a86:	0028      	movs	r0, r5
 8003a88:	f000 f92c 	bl	8003ce4 <__swbuf_r>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d0d6      	beq.n	8003a3e <_puts_r+0x42>
 8003a90:	200a      	movs	r0, #10
 8003a92:	e7d6      	b.n	8003a42 <_puts_r+0x46>
 8003a94:	0022      	movs	r2, r4
 8003a96:	0028      	movs	r0, r5
 8003a98:	f000 f924 	bl	8003ce4 <__swbuf_r>
 8003a9c:	1c43      	adds	r3, r0, #1
 8003a9e:	d1e8      	bne.n	8003a72 <_puts_r+0x76>
 8003aa0:	e7cd      	b.n	8003a3e <_puts_r+0x42>
 8003aa2:	200a      	movs	r0, #10
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	6022      	str	r2, [r4, #0]
 8003aaa:	7018      	strb	r0, [r3, #0]
 8003aac:	e7c9      	b.n	8003a42 <_puts_r+0x46>
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	08004cec 	.word	0x08004cec
 8003ab4:	08004d0c 	.word	0x08004d0c
 8003ab8:	08004ccc 	.word	0x08004ccc

08003abc <puts>:
 8003abc:	b510      	push	{r4, lr}
 8003abe:	4b03      	ldr	r3, [pc, #12]	; (8003acc <puts+0x10>)
 8003ac0:	0001      	movs	r1, r0
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	f7ff ff9a 	bl	80039fc <_puts_r>
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	2000000c 	.word	0x2000000c

08003ad0 <strcasecmp>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	0007      	movs	r7, r0
 8003ad4:	000e      	movs	r6, r1
 8003ad6:	783c      	ldrb	r4, [r7, #0]
 8003ad8:	f000 fb5e 	bl	8004198 <__locale_ctype_ptr>
 8003adc:	2203      	movs	r2, #3
 8003ade:	1900      	adds	r0, r0, r4
 8003ae0:	7843      	ldrb	r3, [r0, #1]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d100      	bne.n	8003aea <strcasecmp+0x1a>
 8003ae8:	3420      	adds	r4, #32
 8003aea:	7835      	ldrb	r5, [r6, #0]
 8003aec:	f000 fb54 	bl	8004198 <__locale_ctype_ptr>
 8003af0:	2203      	movs	r2, #3
 8003af2:	1940      	adds	r0, r0, r5
 8003af4:	7843      	ldrb	r3, [r0, #1]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d100      	bne.n	8003afe <strcasecmp+0x2e>
 8003afc:	3520      	adds	r5, #32
 8003afe:	1b60      	subs	r0, r4, r5
 8003b00:	d103      	bne.n	8003b0a <strcasecmp+0x3a>
 8003b02:	3701      	adds	r7, #1
 8003b04:	3601      	adds	r6, #1
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	d1e5      	bne.n	8003ad6 <strcasecmp+0x6>
 8003b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b0c <strtok>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <strtok+0x4c>)
 8003b10:	0006      	movs	r6, r0
 8003b12:	681d      	ldr	r5, [r3, #0]
 8003b14:	000f      	movs	r7, r1
 8003b16:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003b18:	2c00      	cmp	r4, #0
 8003b1a:	d116      	bne.n	8003b4a <strtok+0x3e>
 8003b1c:	2050      	movs	r0, #80	; 0x50
 8003b1e:	f000 fbb5 	bl	800428c <malloc>
 8003b22:	65a8      	str	r0, [r5, #88]	; 0x58
 8003b24:	6004      	str	r4, [r0, #0]
 8003b26:	6044      	str	r4, [r0, #4]
 8003b28:	6084      	str	r4, [r0, #8]
 8003b2a:	60c4      	str	r4, [r0, #12]
 8003b2c:	6104      	str	r4, [r0, #16]
 8003b2e:	6144      	str	r4, [r0, #20]
 8003b30:	6184      	str	r4, [r0, #24]
 8003b32:	6284      	str	r4, [r0, #40]	; 0x28
 8003b34:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003b36:	6304      	str	r4, [r0, #48]	; 0x30
 8003b38:	6344      	str	r4, [r0, #52]	; 0x34
 8003b3a:	6384      	str	r4, [r0, #56]	; 0x38
 8003b3c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003b3e:	6404      	str	r4, [r0, #64]	; 0x40
 8003b40:	6444      	str	r4, [r0, #68]	; 0x44
 8003b42:	6484      	str	r4, [r0, #72]	; 0x48
 8003b44:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003b46:	7704      	strb	r4, [r0, #28]
 8003b48:	6244      	str	r4, [r0, #36]	; 0x24
 8003b4a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003b4c:	0039      	movs	r1, r7
 8003b4e:	0030      	movs	r0, r6
 8003b50:	2301      	movs	r3, #1
 8003b52:	f000 f803 	bl	8003b5c <__strtok_r>
 8003b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <__strtok_r>:
 8003b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d104      	bne.n	8003b6c <__strtok_r+0x10>
 8003b62:	6810      	ldr	r0, [r2, #0]
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d101      	bne.n	8003b6c <__strtok_r+0x10>
 8003b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6a:	0020      	movs	r0, r4
 8003b6c:	000e      	movs	r6, r1
 8003b6e:	7805      	ldrb	r5, [r0, #0]
 8003b70:	1c44      	adds	r4, r0, #1
 8003b72:	7837      	ldrb	r7, [r6, #0]
 8003b74:	2f00      	cmp	r7, #0
 8003b76:	d104      	bne.n	8003b82 <__strtok_r+0x26>
 8003b78:	2d00      	cmp	r5, #0
 8003b7a:	d110      	bne.n	8003b9e <__strtok_r+0x42>
 8003b7c:	6015      	str	r5, [r2, #0]
 8003b7e:	0028      	movs	r0, r5
 8003b80:	e7f2      	b.n	8003b68 <__strtok_r+0xc>
 8003b82:	3601      	adds	r6, #1
 8003b84:	42bd      	cmp	r5, r7
 8003b86:	d1f4      	bne.n	8003b72 <__strtok_r+0x16>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ee      	bne.n	8003b6a <__strtok_r+0xe>
 8003b8c:	6014      	str	r4, [r2, #0]
 8003b8e:	7003      	strb	r3, [r0, #0]
 8003b90:	e7ea      	b.n	8003b68 <__strtok_r+0xc>
 8003b92:	0033      	movs	r3, r6
 8003b94:	e00d      	b.n	8003bb2 <__strtok_r+0x56>
 8003b96:	3501      	adds	r5, #1
 8003b98:	2f00      	cmp	r7, #0
 8003b9a:	d103      	bne.n	8003ba4 <__strtok_r+0x48>
 8003b9c:	001c      	movs	r4, r3
 8003b9e:	000d      	movs	r5, r1
 8003ba0:	7826      	ldrb	r6, [r4, #0]
 8003ba2:	1c63      	adds	r3, r4, #1
 8003ba4:	782f      	ldrb	r7, [r5, #0]
 8003ba6:	42be      	cmp	r6, r7
 8003ba8:	d1f5      	bne.n	8003b96 <__strtok_r+0x3a>
 8003baa:	2e00      	cmp	r6, #0
 8003bac:	d0f1      	beq.n	8003b92 <__strtok_r+0x36>
 8003bae:	2100      	movs	r1, #0
 8003bb0:	7021      	strb	r1, [r4, #0]
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	e7d8      	b.n	8003b68 <__strtok_r+0xc>
	...

08003bb8 <_strtol_l.isra.0>:
 8003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bba:	001f      	movs	r7, r3
 8003bbc:	000e      	movs	r6, r1
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	9005      	str	r0, [sp, #20]
 8003bc2:	9101      	str	r1, [sp, #4]
 8003bc4:	9202      	str	r2, [sp, #8]
 8003bc6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003bc8:	7834      	ldrb	r4, [r6, #0]
 8003bca:	f000 fae2 	bl	8004192 <__locale_ctype_ptr_l>
 8003bce:	2208      	movs	r2, #8
 8003bd0:	1900      	adds	r0, r0, r4
 8003bd2:	7843      	ldrb	r3, [r0, #1]
 8003bd4:	1c75      	adds	r5, r6, #1
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d136      	bne.n	8003c48 <_strtol_l.isra.0+0x90>
 8003bda:	2c2d      	cmp	r4, #45	; 0x2d
 8003bdc:	d136      	bne.n	8003c4c <_strtol_l.isra.0+0x94>
 8003bde:	1cb5      	adds	r5, r6, #2
 8003be0:	7874      	ldrb	r4, [r6, #1]
 8003be2:	2601      	movs	r6, #1
 8003be4:	2f00      	cmp	r7, #0
 8003be6:	d062      	beq.n	8003cae <_strtol_l.isra.0+0xf6>
 8003be8:	2f10      	cmp	r7, #16
 8003bea:	d109      	bne.n	8003c00 <_strtol_l.isra.0+0x48>
 8003bec:	2c30      	cmp	r4, #48	; 0x30
 8003bee:	d107      	bne.n	8003c00 <_strtol_l.isra.0+0x48>
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	782b      	ldrb	r3, [r5, #0]
 8003bf4:	4393      	bics	r3, r2
 8003bf6:	2b58      	cmp	r3, #88	; 0x58
 8003bf8:	d154      	bne.n	8003ca4 <_strtol_l.isra.0+0xec>
 8003bfa:	2710      	movs	r7, #16
 8003bfc:	786c      	ldrb	r4, [r5, #1]
 8003bfe:	3502      	adds	r5, #2
 8003c00:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <_strtol_l.isra.0+0x100>)
 8003c02:	0039      	movs	r1, r7
 8003c04:	18f3      	adds	r3, r6, r3
 8003c06:	0018      	movs	r0, r3
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	f7fc fb03 	bl	8000214 <__aeabi_uidivmod>
 8003c0e:	9104      	str	r1, [sp, #16]
 8003c10:	2101      	movs	r1, #1
 8003c12:	2300      	movs	r3, #0
 8003c14:	4249      	negs	r1, r1
 8003c16:	0002      	movs	r2, r0
 8003c18:	468c      	mov	ip, r1
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	0021      	movs	r1, r4
 8003c1e:	3930      	subs	r1, #48	; 0x30
 8003c20:	2909      	cmp	r1, #9
 8003c22:	d81a      	bhi.n	8003c5a <_strtol_l.isra.0+0xa2>
 8003c24:	000c      	movs	r4, r1
 8003c26:	42a7      	cmp	r7, r4
 8003c28:	dd23      	ble.n	8003c72 <_strtol_l.isra.0+0xba>
 8003c2a:	1c59      	adds	r1, r3, #1
 8003c2c:	d009      	beq.n	8003c42 <_strtol_l.isra.0+0x8a>
 8003c2e:	4663      	mov	r3, ip
 8003c30:	4282      	cmp	r2, r0
 8003c32:	d306      	bcc.n	8003c42 <_strtol_l.isra.0+0x8a>
 8003c34:	d102      	bne.n	8003c3c <_strtol_l.isra.0+0x84>
 8003c36:	9904      	ldr	r1, [sp, #16]
 8003c38:	42a1      	cmp	r1, r4
 8003c3a:	db02      	blt.n	8003c42 <_strtol_l.isra.0+0x8a>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	4378      	muls	r0, r7
 8003c40:	1820      	adds	r0, r4, r0
 8003c42:	782c      	ldrb	r4, [r5, #0]
 8003c44:	3501      	adds	r5, #1
 8003c46:	e7e9      	b.n	8003c1c <_strtol_l.isra.0+0x64>
 8003c48:	002e      	movs	r6, r5
 8003c4a:	e7bc      	b.n	8003bc6 <_strtol_l.isra.0+0xe>
 8003c4c:	2c2b      	cmp	r4, #43	; 0x2b
 8003c4e:	d001      	beq.n	8003c54 <_strtol_l.isra.0+0x9c>
 8003c50:	001e      	movs	r6, r3
 8003c52:	e7c7      	b.n	8003be4 <_strtol_l.isra.0+0x2c>
 8003c54:	1cb5      	adds	r5, r6, #2
 8003c56:	7874      	ldrb	r4, [r6, #1]
 8003c58:	e7fa      	b.n	8003c50 <_strtol_l.isra.0+0x98>
 8003c5a:	0021      	movs	r1, r4
 8003c5c:	3941      	subs	r1, #65	; 0x41
 8003c5e:	2919      	cmp	r1, #25
 8003c60:	d801      	bhi.n	8003c66 <_strtol_l.isra.0+0xae>
 8003c62:	3c37      	subs	r4, #55	; 0x37
 8003c64:	e7df      	b.n	8003c26 <_strtol_l.isra.0+0x6e>
 8003c66:	0021      	movs	r1, r4
 8003c68:	3961      	subs	r1, #97	; 0x61
 8003c6a:	2919      	cmp	r1, #25
 8003c6c:	d801      	bhi.n	8003c72 <_strtol_l.isra.0+0xba>
 8003c6e:	3c57      	subs	r4, #87	; 0x57
 8003c70:	e7d9      	b.n	8003c26 <_strtol_l.isra.0+0x6e>
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	d108      	bne.n	8003c88 <_strtol_l.isra.0+0xd0>
 8003c76:	9a05      	ldr	r2, [sp, #20]
 8003c78:	3323      	adds	r3, #35	; 0x23
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	9b02      	ldr	r3, [sp, #8]
 8003c7e:	9803      	ldr	r0, [sp, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <_strtol_l.isra.0+0xe0>
 8003c84:	b007      	add	sp, #28
 8003c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c88:	2e00      	cmp	r6, #0
 8003c8a:	d000      	beq.n	8003c8e <_strtol_l.isra.0+0xd6>
 8003c8c:	4240      	negs	r0, r0
 8003c8e:	9a02      	ldr	r2, [sp, #8]
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	d0f7      	beq.n	8003c84 <_strtol_l.isra.0+0xcc>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <_strtol_l.isra.0+0xe4>
 8003c98:	1e6b      	subs	r3, r5, #1
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	9b02      	ldr	r3, [sp, #8]
 8003c9e:	9a01      	ldr	r2, [sp, #4]
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e7ef      	b.n	8003c84 <_strtol_l.isra.0+0xcc>
 8003ca4:	2430      	movs	r4, #48	; 0x30
 8003ca6:	2f00      	cmp	r7, #0
 8003ca8:	d1aa      	bne.n	8003c00 <_strtol_l.isra.0+0x48>
 8003caa:	2708      	movs	r7, #8
 8003cac:	e7a8      	b.n	8003c00 <_strtol_l.isra.0+0x48>
 8003cae:	2c30      	cmp	r4, #48	; 0x30
 8003cb0:	d09e      	beq.n	8003bf0 <_strtol_l.isra.0+0x38>
 8003cb2:	270a      	movs	r7, #10
 8003cb4:	e7a4      	b.n	8003c00 <_strtol_l.isra.0+0x48>
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	7fffffff 	.word	0x7fffffff

08003cbc <strtol>:
 8003cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cbe:	0013      	movs	r3, r2
 8003cc0:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <strtol+0x20>)
 8003cc2:	0005      	movs	r5, r0
 8003cc4:	6810      	ldr	r0, [r2, #0]
 8003cc6:	6a04      	ldr	r4, [r0, #32]
 8003cc8:	2c00      	cmp	r4, #0
 8003cca:	d100      	bne.n	8003cce <strtol+0x12>
 8003ccc:	4c04      	ldr	r4, [pc, #16]	; (8003ce0 <strtol+0x24>)
 8003cce:	000a      	movs	r2, r1
 8003cd0:	9400      	str	r4, [sp, #0]
 8003cd2:	0029      	movs	r1, r5
 8003cd4:	f7ff ff70 	bl	8003bb8 <_strtol_l.isra.0>
 8003cd8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	2000000c 	.word	0x2000000c
 8003ce0:	20000070 	.word	0x20000070

08003ce4 <__swbuf_r>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	0005      	movs	r5, r0
 8003ce8:	000e      	movs	r6, r1
 8003cea:	0014      	movs	r4, r2
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d004      	beq.n	8003cfa <__swbuf_r+0x16>
 8003cf0:	6983      	ldr	r3, [r0, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <__swbuf_r+0x16>
 8003cf6:	f000 f9b9 	bl	800406c <__sinit>
 8003cfa:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <__swbuf_r+0xa0>)
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d12d      	bne.n	8003d5c <__swbuf_r+0x78>
 8003d00:	686c      	ldr	r4, [r5, #4]
 8003d02:	69a3      	ldr	r3, [r4, #24]
 8003d04:	60a3      	str	r3, [r4, #8]
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	d531      	bpl.n	8003d70 <__swbuf_r+0x8c>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d02e      	beq.n	8003d70 <__swbuf_r+0x8c>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	6922      	ldr	r2, [r4, #16]
 8003d16:	b2f7      	uxtb	r7, r6
 8003d18:	1a98      	subs	r0, r3, r2
 8003d1a:	6963      	ldr	r3, [r4, #20]
 8003d1c:	b2f6      	uxtb	r6, r6
 8003d1e:	4283      	cmp	r3, r0
 8003d20:	dc05      	bgt.n	8003d2e <__swbuf_r+0x4a>
 8003d22:	0021      	movs	r1, r4
 8003d24:	0028      	movs	r0, r5
 8003d26:	f000 f933 	bl	8003f90 <_fflush_r>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d126      	bne.n	8003d7c <__swbuf_r+0x98>
 8003d2e:	68a3      	ldr	r3, [r4, #8]
 8003d30:	3001      	adds	r0, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	60a3      	str	r3, [r4, #8]
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	6022      	str	r2, [r4, #0]
 8003d3c:	701f      	strb	r7, [r3, #0]
 8003d3e:	6963      	ldr	r3, [r4, #20]
 8003d40:	4283      	cmp	r3, r0
 8003d42:	d004      	beq.n	8003d4e <__swbuf_r+0x6a>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	07db      	lsls	r3, r3, #31
 8003d48:	d51a      	bpl.n	8003d80 <__swbuf_r+0x9c>
 8003d4a:	2e0a      	cmp	r6, #10
 8003d4c:	d118      	bne.n	8003d80 <__swbuf_r+0x9c>
 8003d4e:	0021      	movs	r1, r4
 8003d50:	0028      	movs	r0, r5
 8003d52:	f000 f91d 	bl	8003f90 <_fflush_r>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d012      	beq.n	8003d80 <__swbuf_r+0x9c>
 8003d5a:	e00f      	b.n	8003d7c <__swbuf_r+0x98>
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <__swbuf_r+0xa4>)
 8003d5e:	429c      	cmp	r4, r3
 8003d60:	d101      	bne.n	8003d66 <__swbuf_r+0x82>
 8003d62:	68ac      	ldr	r4, [r5, #8]
 8003d64:	e7cd      	b.n	8003d02 <__swbuf_r+0x1e>
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <__swbuf_r+0xa8>)
 8003d68:	429c      	cmp	r4, r3
 8003d6a:	d1ca      	bne.n	8003d02 <__swbuf_r+0x1e>
 8003d6c:	68ec      	ldr	r4, [r5, #12]
 8003d6e:	e7c8      	b.n	8003d02 <__swbuf_r+0x1e>
 8003d70:	0021      	movs	r1, r4
 8003d72:	0028      	movs	r0, r5
 8003d74:	f000 f80c 	bl	8003d90 <__swsetup_r>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d0ca      	beq.n	8003d12 <__swbuf_r+0x2e>
 8003d7c:	2601      	movs	r6, #1
 8003d7e:	4276      	negs	r6, r6
 8003d80:	0030      	movs	r0, r6
 8003d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d84:	08004cec 	.word	0x08004cec
 8003d88:	08004d0c 	.word	0x08004d0c
 8003d8c:	08004ccc 	.word	0x08004ccc

08003d90 <__swsetup_r>:
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <__swsetup_r+0xdc>)
 8003d92:	b570      	push	{r4, r5, r6, lr}
 8003d94:	681d      	ldr	r5, [r3, #0]
 8003d96:	0006      	movs	r6, r0
 8003d98:	000c      	movs	r4, r1
 8003d9a:	2d00      	cmp	r5, #0
 8003d9c:	d005      	beq.n	8003daa <__swsetup_r+0x1a>
 8003d9e:	69ab      	ldr	r3, [r5, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <__swsetup_r+0x1a>
 8003da4:	0028      	movs	r0, r5
 8003da6:	f000 f961 	bl	800406c <__sinit>
 8003daa:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <__swsetup_r+0xe0>)
 8003dac:	429c      	cmp	r4, r3
 8003dae:	d10f      	bne.n	8003dd0 <__swsetup_r+0x40>
 8003db0:	686c      	ldr	r4, [r5, #4]
 8003db2:	230c      	movs	r3, #12
 8003db4:	5ee2      	ldrsh	r2, [r4, r3]
 8003db6:	b293      	uxth	r3, r2
 8003db8:	0719      	lsls	r1, r3, #28
 8003dba:	d42d      	bmi.n	8003e18 <__swsetup_r+0x88>
 8003dbc:	06d9      	lsls	r1, r3, #27
 8003dbe:	d411      	bmi.n	8003de4 <__swsetup_r+0x54>
 8003dc0:	2309      	movs	r3, #9
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	6033      	str	r3, [r6, #0]
 8003dc6:	3337      	adds	r3, #55	; 0x37
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	4240      	negs	r0, r0
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <__swsetup_r+0xe4>)
 8003dd2:	429c      	cmp	r4, r3
 8003dd4:	d101      	bne.n	8003dda <__swsetup_r+0x4a>
 8003dd6:	68ac      	ldr	r4, [r5, #8]
 8003dd8:	e7eb      	b.n	8003db2 <__swsetup_r+0x22>
 8003dda:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <__swsetup_r+0xe8>)
 8003ddc:	429c      	cmp	r4, r3
 8003dde:	d1e8      	bne.n	8003db2 <__swsetup_r+0x22>
 8003de0:	68ec      	ldr	r4, [r5, #12]
 8003de2:	e7e6      	b.n	8003db2 <__swsetup_r+0x22>
 8003de4:	075b      	lsls	r3, r3, #29
 8003de6:	d513      	bpl.n	8003e10 <__swsetup_r+0x80>
 8003de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dea:	2900      	cmp	r1, #0
 8003dec:	d008      	beq.n	8003e00 <__swsetup_r+0x70>
 8003dee:	0023      	movs	r3, r4
 8003df0:	3344      	adds	r3, #68	; 0x44
 8003df2:	4299      	cmp	r1, r3
 8003df4:	d002      	beq.n	8003dfc <__swsetup_r+0x6c>
 8003df6:	0030      	movs	r0, r6
 8003df8:	f000 fa64 	bl	80042c4 <_free_r>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	6363      	str	r3, [r4, #52]	; 0x34
 8003e00:	2224      	movs	r2, #36	; 0x24
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	4393      	bics	r3, r2
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6063      	str	r3, [r4, #4]
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	6023      	str	r3, [r4, #0]
 8003e10:	2308      	movs	r3, #8
 8003e12:	89a2      	ldrh	r2, [r4, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	6923      	ldr	r3, [r4, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <__swsetup_r+0xa6>
 8003e1e:	21a0      	movs	r1, #160	; 0xa0
 8003e20:	2280      	movs	r2, #128	; 0x80
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	0089      	lsls	r1, r1, #2
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	400b      	ands	r3, r1
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <__swsetup_r+0xa6>
 8003e2e:	0021      	movs	r1, r4
 8003e30:	0030      	movs	r0, r6
 8003e32:	f000 f9e7 	bl	8004204 <__smakebuf_r>
 8003e36:	2301      	movs	r3, #1
 8003e38:	89a2      	ldrh	r2, [r4, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d011      	beq.n	8003e62 <__swsetup_r+0xd2>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60a3      	str	r3, [r4, #8]
 8003e42:	6963      	ldr	r3, [r4, #20]
 8003e44:	425b      	negs	r3, r3
 8003e46:	61a3      	str	r3, [r4, #24]
 8003e48:	2000      	movs	r0, #0
 8003e4a:	6923      	ldr	r3, [r4, #16]
 8003e4c:	4283      	cmp	r3, r0
 8003e4e:	d1be      	bne.n	8003dce <__swsetup_r+0x3e>
 8003e50:	230c      	movs	r3, #12
 8003e52:	5ee2      	ldrsh	r2, [r4, r3]
 8003e54:	0613      	lsls	r3, r2, #24
 8003e56:	d5ba      	bpl.n	8003dce <__swsetup_r+0x3e>
 8003e58:	2340      	movs	r3, #64	; 0x40
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	3801      	subs	r0, #1
 8003e60:	e7b5      	b.n	8003dce <__swsetup_r+0x3e>
 8003e62:	0792      	lsls	r2, r2, #30
 8003e64:	d400      	bmi.n	8003e68 <__swsetup_r+0xd8>
 8003e66:	6963      	ldr	r3, [r4, #20]
 8003e68:	60a3      	str	r3, [r4, #8]
 8003e6a:	e7ed      	b.n	8003e48 <__swsetup_r+0xb8>
 8003e6c:	2000000c 	.word	0x2000000c
 8003e70:	08004cec 	.word	0x08004cec
 8003e74:	08004d0c 	.word	0x08004d0c
 8003e78:	08004ccc 	.word	0x08004ccc

08003e7c <__sflush_r>:
 8003e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7e:	898a      	ldrh	r2, [r1, #12]
 8003e80:	0005      	movs	r5, r0
 8003e82:	000c      	movs	r4, r1
 8003e84:	0713      	lsls	r3, r2, #28
 8003e86:	d460      	bmi.n	8003f4a <__sflush_r+0xce>
 8003e88:	684b      	ldr	r3, [r1, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	dc04      	bgt.n	8003e98 <__sflush_r+0x1c>
 8003e8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	dc01      	bgt.n	8003e98 <__sflush_r+0x1c>
 8003e94:	2000      	movs	r0, #0
 8003e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e98:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e9a:	2f00      	cmp	r7, #0
 8003e9c:	d0fa      	beq.n	8003e94 <__sflush_r+0x18>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	682e      	ldr	r6, [r5, #0]
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	015b      	lsls	r3, r3, #5
 8003ea8:	6a21      	ldr	r1, [r4, #32]
 8003eaa:	401a      	ands	r2, r3
 8003eac:	d034      	beq.n	8003f18 <__sflush_r+0x9c>
 8003eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	075b      	lsls	r3, r3, #29
 8003eb4:	d506      	bpl.n	8003ec4 <__sflush_r+0x48>
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	1ac0      	subs	r0, r0, r3
 8003eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <__sflush_r+0x48>
 8003ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ec2:	1ac0      	subs	r0, r0, r3
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	6a21      	ldr	r1, [r4, #32]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	0028      	movs	r0, r5
 8003ecc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003ece:	47b8      	blx	r7
 8003ed0:	89a1      	ldrh	r1, [r4, #12]
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	d106      	bne.n	8003ee4 <__sflush_r+0x68>
 8003ed6:	682b      	ldr	r3, [r5, #0]
 8003ed8:	2b1d      	cmp	r3, #29
 8003eda:	d830      	bhi.n	8003f3e <__sflush_r+0xc2>
 8003edc:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <__sflush_r+0x110>)
 8003ede:	40da      	lsrs	r2, r3
 8003ee0:	07d3      	lsls	r3, r2, #31
 8003ee2:	d52c      	bpl.n	8003f3e <__sflush_r+0xc2>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	6063      	str	r3, [r4, #4]
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	04cb      	lsls	r3, r1, #19
 8003eee:	d505      	bpl.n	8003efc <__sflush_r+0x80>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <__sflush_r+0x7e>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d100      	bne.n	8003efc <__sflush_r+0x80>
 8003efa:	6560      	str	r0, [r4, #84]	; 0x54
 8003efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efe:	602e      	str	r6, [r5, #0]
 8003f00:	2900      	cmp	r1, #0
 8003f02:	d0c7      	beq.n	8003e94 <__sflush_r+0x18>
 8003f04:	0023      	movs	r3, r4
 8003f06:	3344      	adds	r3, #68	; 0x44
 8003f08:	4299      	cmp	r1, r3
 8003f0a:	d002      	beq.n	8003f12 <__sflush_r+0x96>
 8003f0c:	0028      	movs	r0, r5
 8003f0e:	f000 f9d9 	bl	80042c4 <_free_r>
 8003f12:	2000      	movs	r0, #0
 8003f14:	6360      	str	r0, [r4, #52]	; 0x34
 8003f16:	e7be      	b.n	8003e96 <__sflush_r+0x1a>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	0028      	movs	r0, r5
 8003f1c:	47b8      	blx	r7
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	d1c6      	bne.n	8003eb0 <__sflush_r+0x34>
 8003f22:	682b      	ldr	r3, [r5, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0c3      	beq.n	8003eb0 <__sflush_r+0x34>
 8003f28:	2b1d      	cmp	r3, #29
 8003f2a:	d001      	beq.n	8003f30 <__sflush_r+0xb4>
 8003f2c:	2b16      	cmp	r3, #22
 8003f2e:	d101      	bne.n	8003f34 <__sflush_r+0xb8>
 8003f30:	602e      	str	r6, [r5, #0]
 8003f32:	e7af      	b.n	8003e94 <__sflush_r+0x18>
 8003f34:	2340      	movs	r3, #64	; 0x40
 8003f36:	89a2      	ldrh	r2, [r4, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	81a3      	strh	r3, [r4, #12]
 8003f3c:	e7ab      	b.n	8003e96 <__sflush_r+0x1a>
 8003f3e:	2340      	movs	r3, #64	; 0x40
 8003f40:	430b      	orrs	r3, r1
 8003f42:	2001      	movs	r0, #1
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	4240      	negs	r0, r0
 8003f48:	e7a5      	b.n	8003e96 <__sflush_r+0x1a>
 8003f4a:	690f      	ldr	r7, [r1, #16]
 8003f4c:	2f00      	cmp	r7, #0
 8003f4e:	d0a1      	beq.n	8003e94 <__sflush_r+0x18>
 8003f50:	680b      	ldr	r3, [r1, #0]
 8003f52:	600f      	str	r7, [r1, #0]
 8003f54:	1bdb      	subs	r3, r3, r7
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	0792      	lsls	r2, r2, #30
 8003f5c:	d100      	bne.n	8003f60 <__sflush_r+0xe4>
 8003f5e:	694b      	ldr	r3, [r1, #20]
 8003f60:	60a3      	str	r3, [r4, #8]
 8003f62:	9b01      	ldr	r3, [sp, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dc00      	bgt.n	8003f6a <__sflush_r+0xee>
 8003f68:	e794      	b.n	8003e94 <__sflush_r+0x18>
 8003f6a:	9b01      	ldr	r3, [sp, #4]
 8003f6c:	003a      	movs	r2, r7
 8003f6e:	6a21      	ldr	r1, [r4, #32]
 8003f70:	0028      	movs	r0, r5
 8003f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f74:	47b0      	blx	r6
 8003f76:	2800      	cmp	r0, #0
 8003f78:	dc03      	bgt.n	8003f82 <__sflush_r+0x106>
 8003f7a:	2340      	movs	r3, #64	; 0x40
 8003f7c:	89a2      	ldrh	r2, [r4, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	e7df      	b.n	8003f42 <__sflush_r+0xc6>
 8003f82:	9b01      	ldr	r3, [sp, #4]
 8003f84:	183f      	adds	r7, r7, r0
 8003f86:	1a1b      	subs	r3, r3, r0
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	e7ea      	b.n	8003f62 <__sflush_r+0xe6>
 8003f8c:	20400001 	.word	0x20400001

08003f90 <_fflush_r>:
 8003f90:	690b      	ldr	r3, [r1, #16]
 8003f92:	b570      	push	{r4, r5, r6, lr}
 8003f94:	0005      	movs	r5, r0
 8003f96:	000c      	movs	r4, r1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <_fflush_r+0x10>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d004      	beq.n	8003fae <_fflush_r+0x1e>
 8003fa4:	6983      	ldr	r3, [r0, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <_fflush_r+0x1e>
 8003faa:	f000 f85f 	bl	800406c <__sinit>
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <_fflush_r+0x4c>)
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d109      	bne.n	8003fc8 <_fflush_r+0x38>
 8003fb4:	686c      	ldr	r4, [r5, #4]
 8003fb6:	220c      	movs	r2, #12
 8003fb8:	5ea3      	ldrsh	r3, [r4, r2]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0ee      	beq.n	8003f9c <_fflush_r+0xc>
 8003fbe:	0021      	movs	r1, r4
 8003fc0:	0028      	movs	r0, r5
 8003fc2:	f7ff ff5b 	bl	8003e7c <__sflush_r>
 8003fc6:	e7ea      	b.n	8003f9e <_fflush_r+0xe>
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <_fflush_r+0x50>)
 8003fca:	429c      	cmp	r4, r3
 8003fcc:	d101      	bne.n	8003fd2 <_fflush_r+0x42>
 8003fce:	68ac      	ldr	r4, [r5, #8]
 8003fd0:	e7f1      	b.n	8003fb6 <_fflush_r+0x26>
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <_fflush_r+0x54>)
 8003fd4:	429c      	cmp	r4, r3
 8003fd6:	d1ee      	bne.n	8003fb6 <_fflush_r+0x26>
 8003fd8:	68ec      	ldr	r4, [r5, #12]
 8003fda:	e7ec      	b.n	8003fb6 <_fflush_r+0x26>
 8003fdc:	08004cec 	.word	0x08004cec
 8003fe0:	08004d0c 	.word	0x08004d0c
 8003fe4:	08004ccc 	.word	0x08004ccc

08003fe8 <std>:
 8003fe8:	2300      	movs	r3, #0
 8003fea:	b510      	push	{r4, lr}
 8003fec:	0004      	movs	r4, r0
 8003fee:	6003      	str	r3, [r0, #0]
 8003ff0:	6043      	str	r3, [r0, #4]
 8003ff2:	6083      	str	r3, [r0, #8]
 8003ff4:	8181      	strh	r1, [r0, #12]
 8003ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ff8:	81c2      	strh	r2, [r0, #14]
 8003ffa:	6103      	str	r3, [r0, #16]
 8003ffc:	6143      	str	r3, [r0, #20]
 8003ffe:	6183      	str	r3, [r0, #24]
 8004000:	0019      	movs	r1, r3
 8004002:	2208      	movs	r2, #8
 8004004:	305c      	adds	r0, #92	; 0x5c
 8004006:	f7ff fcc3 	bl	8003990 <memset>
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <std+0x38>)
 800400c:	6224      	str	r4, [r4, #32]
 800400e:	6263      	str	r3, [r4, #36]	; 0x24
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <std+0x3c>)
 8004012:	62a3      	str	r3, [r4, #40]	; 0x28
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <std+0x40>)
 8004016:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <std+0x44>)
 800401a:	6323      	str	r3, [r4, #48]	; 0x30
 800401c:	bd10      	pop	{r4, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	08004a0d 	.word	0x08004a0d
 8004024:	08004a35 	.word	0x08004a35
 8004028:	08004a6d 	.word	0x08004a6d
 800402c:	08004a99 	.word	0x08004a99

08004030 <_cleanup_r>:
 8004030:	b510      	push	{r4, lr}
 8004032:	4902      	ldr	r1, [pc, #8]	; (800403c <_cleanup_r+0xc>)
 8004034:	f000 f88c 	bl	8004150 <_fwalk_reent>
 8004038:	bd10      	pop	{r4, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	08003f91 	.word	0x08003f91

08004040 <__sfmoreglue>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	2568      	movs	r5, #104	; 0x68
 8004044:	1e4a      	subs	r2, r1, #1
 8004046:	4355      	muls	r5, r2
 8004048:	000e      	movs	r6, r1
 800404a:	0029      	movs	r1, r5
 800404c:	3174      	adds	r1, #116	; 0x74
 800404e:	f000 f983 	bl	8004358 <_malloc_r>
 8004052:	1e04      	subs	r4, r0, #0
 8004054:	d008      	beq.n	8004068 <__sfmoreglue+0x28>
 8004056:	2100      	movs	r1, #0
 8004058:	002a      	movs	r2, r5
 800405a:	6001      	str	r1, [r0, #0]
 800405c:	6046      	str	r6, [r0, #4]
 800405e:	300c      	adds	r0, #12
 8004060:	60a0      	str	r0, [r4, #8]
 8004062:	3268      	adds	r2, #104	; 0x68
 8004064:	f7ff fc94 	bl	8003990 <memset>
 8004068:	0020      	movs	r0, r4
 800406a:	bd70      	pop	{r4, r5, r6, pc}

0800406c <__sinit>:
 800406c:	6983      	ldr	r3, [r0, #24]
 800406e:	b513      	push	{r0, r1, r4, lr}
 8004070:	0004      	movs	r4, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d128      	bne.n	80040c8 <__sinit+0x5c>
 8004076:	6483      	str	r3, [r0, #72]	; 0x48
 8004078:	64c3      	str	r3, [r0, #76]	; 0x4c
 800407a:	6503      	str	r3, [r0, #80]	; 0x50
 800407c:	4b13      	ldr	r3, [pc, #76]	; (80040cc <__sinit+0x60>)
 800407e:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <__sinit+0x64>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6282      	str	r2, [r0, #40]	; 0x28
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	4298      	cmp	r0, r3
 8004088:	d101      	bne.n	800408e <__sinit+0x22>
 800408a:	2301      	movs	r3, #1
 800408c:	6183      	str	r3, [r0, #24]
 800408e:	0020      	movs	r0, r4
 8004090:	f000 f820 	bl	80040d4 <__sfp>
 8004094:	6060      	str	r0, [r4, #4]
 8004096:	0020      	movs	r0, r4
 8004098:	f000 f81c 	bl	80040d4 <__sfp>
 800409c:	60a0      	str	r0, [r4, #8]
 800409e:	0020      	movs	r0, r4
 80040a0:	f000 f818 	bl	80040d4 <__sfp>
 80040a4:	2200      	movs	r2, #0
 80040a6:	60e0      	str	r0, [r4, #12]
 80040a8:	2104      	movs	r1, #4
 80040aa:	6860      	ldr	r0, [r4, #4]
 80040ac:	f7ff ff9c 	bl	8003fe8 <std>
 80040b0:	2201      	movs	r2, #1
 80040b2:	2109      	movs	r1, #9
 80040b4:	68a0      	ldr	r0, [r4, #8]
 80040b6:	f7ff ff97 	bl	8003fe8 <std>
 80040ba:	2202      	movs	r2, #2
 80040bc:	2112      	movs	r1, #18
 80040be:	68e0      	ldr	r0, [r4, #12]
 80040c0:	f7ff ff92 	bl	8003fe8 <std>
 80040c4:	2301      	movs	r3, #1
 80040c6:	61a3      	str	r3, [r4, #24]
 80040c8:	bd13      	pop	{r0, r1, r4, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	08004cc8 	.word	0x08004cc8
 80040d0:	08004031 	.word	0x08004031

080040d4 <__sfp>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <__sfp+0x74>)
 80040d8:	0007      	movs	r7, r0
 80040da:	681e      	ldr	r6, [r3, #0]
 80040dc:	69b3      	ldr	r3, [r6, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <__sfp+0x14>
 80040e2:	0030      	movs	r0, r6
 80040e4:	f7ff ffc2 	bl	800406c <__sinit>
 80040e8:	3648      	adds	r6, #72	; 0x48
 80040ea:	68b4      	ldr	r4, [r6, #8]
 80040ec:	6873      	ldr	r3, [r6, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	d504      	bpl.n	80040fc <__sfp+0x28>
 80040f2:	6833      	ldr	r3, [r6, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <__sfp+0x34>
 80040f8:	6836      	ldr	r6, [r6, #0]
 80040fa:	e7f6      	b.n	80040ea <__sfp+0x16>
 80040fc:	220c      	movs	r2, #12
 80040fe:	5ea5      	ldrsh	r5, [r4, r2]
 8004100:	2d00      	cmp	r5, #0
 8004102:	d00d      	beq.n	8004120 <__sfp+0x4c>
 8004104:	3468      	adds	r4, #104	; 0x68
 8004106:	e7f2      	b.n	80040ee <__sfp+0x1a>
 8004108:	2104      	movs	r1, #4
 800410a:	0038      	movs	r0, r7
 800410c:	f7ff ff98 	bl	8004040 <__sfmoreglue>
 8004110:	6030      	str	r0, [r6, #0]
 8004112:	2800      	cmp	r0, #0
 8004114:	d1f0      	bne.n	80040f8 <__sfp+0x24>
 8004116:	230c      	movs	r3, #12
 8004118:	0004      	movs	r4, r0
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	0020      	movs	r0, r4
 800411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004120:	0020      	movs	r0, r4
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <__sfp+0x78>)
 8004124:	6665      	str	r5, [r4, #100]	; 0x64
 8004126:	6025      	str	r5, [r4, #0]
 8004128:	6065      	str	r5, [r4, #4]
 800412a:	60a5      	str	r5, [r4, #8]
 800412c:	60e3      	str	r3, [r4, #12]
 800412e:	6125      	str	r5, [r4, #16]
 8004130:	6165      	str	r5, [r4, #20]
 8004132:	61a5      	str	r5, [r4, #24]
 8004134:	2208      	movs	r2, #8
 8004136:	0029      	movs	r1, r5
 8004138:	305c      	adds	r0, #92	; 0x5c
 800413a:	f7ff fc29 	bl	8003990 <memset>
 800413e:	6365      	str	r5, [r4, #52]	; 0x34
 8004140:	63a5      	str	r5, [r4, #56]	; 0x38
 8004142:	64a5      	str	r5, [r4, #72]	; 0x48
 8004144:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004146:	e7e9      	b.n	800411c <__sfp+0x48>
 8004148:	08004cc8 	.word	0x08004cc8
 800414c:	ffff0001 	.word	0xffff0001

08004150 <_fwalk_reent>:
 8004150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004152:	0004      	movs	r4, r0
 8004154:	0007      	movs	r7, r0
 8004156:	2600      	movs	r6, #0
 8004158:	9101      	str	r1, [sp, #4]
 800415a:	3448      	adds	r4, #72	; 0x48
 800415c:	2c00      	cmp	r4, #0
 800415e:	d101      	bne.n	8004164 <_fwalk_reent+0x14>
 8004160:	0030      	movs	r0, r6
 8004162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	68a5      	ldr	r5, [r4, #8]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	9b00      	ldr	r3, [sp, #0]
 800416c:	3b01      	subs	r3, #1
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	d501      	bpl.n	8004176 <_fwalk_reent+0x26>
 8004172:	6824      	ldr	r4, [r4, #0]
 8004174:	e7f2      	b.n	800415c <_fwalk_reent+0xc>
 8004176:	89ab      	ldrh	r3, [r5, #12]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d908      	bls.n	800418e <_fwalk_reent+0x3e>
 800417c:	220e      	movs	r2, #14
 800417e:	5eab      	ldrsh	r3, [r5, r2]
 8004180:	3301      	adds	r3, #1
 8004182:	d004      	beq.n	800418e <_fwalk_reent+0x3e>
 8004184:	0029      	movs	r1, r5
 8004186:	0038      	movs	r0, r7
 8004188:	9b01      	ldr	r3, [sp, #4]
 800418a:	4798      	blx	r3
 800418c:	4306      	orrs	r6, r0
 800418e:	3568      	adds	r5, #104	; 0x68
 8004190:	e7eb      	b.n	800416a <_fwalk_reent+0x1a>

08004192 <__locale_ctype_ptr_l>:
 8004192:	30ec      	adds	r0, #236	; 0xec
 8004194:	6800      	ldr	r0, [r0, #0]
 8004196:	4770      	bx	lr

08004198 <__locale_ctype_ptr>:
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__locale_ctype_ptr+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d100      	bne.n	80041a4 <__locale_ctype_ptr+0xc>
 80041a2:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <__locale_ctype_ptr+0x18>)
 80041a4:	33ec      	adds	r3, #236	; 0xec
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	4770      	bx	lr
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	2000000c 	.word	0x2000000c
 80041b0:	20000070 	.word	0x20000070

080041b4 <__swhatbuf_r>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	000e      	movs	r6, r1
 80041b8:	001d      	movs	r5, r3
 80041ba:	230e      	movs	r3, #14
 80041bc:	5ec9      	ldrsh	r1, [r1, r3]
 80041be:	b096      	sub	sp, #88	; 0x58
 80041c0:	0014      	movs	r4, r2
 80041c2:	2900      	cmp	r1, #0
 80041c4:	da07      	bge.n	80041d6 <__swhatbuf_r+0x22>
 80041c6:	2300      	movs	r3, #0
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	89b3      	ldrh	r3, [r6, #12]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	d411      	bmi.n	80041f4 <__swhatbuf_r+0x40>
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	e00f      	b.n	80041f6 <__swhatbuf_r+0x42>
 80041d6:	466a      	mov	r2, sp
 80041d8:	f000 fc96 	bl	8004b08 <_fstat_r>
 80041dc:	2800      	cmp	r0, #0
 80041de:	dbf2      	blt.n	80041c6 <__swhatbuf_r+0x12>
 80041e0:	22f0      	movs	r2, #240	; 0xf0
 80041e2:	9b01      	ldr	r3, [sp, #4]
 80041e4:	0212      	lsls	r2, r2, #8
 80041e6:	4013      	ands	r3, r2
 80041e8:	4a05      	ldr	r2, [pc, #20]	; (8004200 <__swhatbuf_r+0x4c>)
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	425a      	negs	r2, r3
 80041ee:	4153      	adcs	r3, r2
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	e7ed      	b.n	80041d0 <__swhatbuf_r+0x1c>
 80041f4:	2340      	movs	r3, #64	; 0x40
 80041f6:	2000      	movs	r0, #0
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	b016      	add	sp, #88	; 0x58
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	ffffe000 	.word	0xffffe000

08004204 <__smakebuf_r>:
 8004204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004206:	2602      	movs	r6, #2
 8004208:	898b      	ldrh	r3, [r1, #12]
 800420a:	0005      	movs	r5, r0
 800420c:	000c      	movs	r4, r1
 800420e:	4233      	tst	r3, r6
 8004210:	d006      	beq.n	8004220 <__smakebuf_r+0x1c>
 8004212:	0023      	movs	r3, r4
 8004214:	3347      	adds	r3, #71	; 0x47
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	2301      	movs	r3, #1
 800421c:	6163      	str	r3, [r4, #20]
 800421e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004220:	ab01      	add	r3, sp, #4
 8004222:	466a      	mov	r2, sp
 8004224:	f7ff ffc6 	bl	80041b4 <__swhatbuf_r>
 8004228:	9900      	ldr	r1, [sp, #0]
 800422a:	0007      	movs	r7, r0
 800422c:	0028      	movs	r0, r5
 800422e:	f000 f893 	bl	8004358 <_malloc_r>
 8004232:	2800      	cmp	r0, #0
 8004234:	d108      	bne.n	8004248 <__smakebuf_r+0x44>
 8004236:	220c      	movs	r2, #12
 8004238:	5ea3      	ldrsh	r3, [r4, r2]
 800423a:	059a      	lsls	r2, r3, #22
 800423c:	d4ef      	bmi.n	800421e <__smakebuf_r+0x1a>
 800423e:	2203      	movs	r2, #3
 8004240:	4393      	bics	r3, r2
 8004242:	431e      	orrs	r6, r3
 8004244:	81a6      	strh	r6, [r4, #12]
 8004246:	e7e4      	b.n	8004212 <__smakebuf_r+0xe>
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <__smakebuf_r+0x84>)
 800424a:	62ab      	str	r3, [r5, #40]	; 0x28
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	89a2      	ldrh	r2, [r4, #12]
 8004250:	6020      	str	r0, [r4, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	81a3      	strh	r3, [r4, #12]
 8004256:	9b00      	ldr	r3, [sp, #0]
 8004258:	6120      	str	r0, [r4, #16]
 800425a:	6163      	str	r3, [r4, #20]
 800425c:	9b01      	ldr	r3, [sp, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <__smakebuf_r+0x7a>
 8004262:	230e      	movs	r3, #14
 8004264:	5ee1      	ldrsh	r1, [r4, r3]
 8004266:	0028      	movs	r0, r5
 8004268:	f000 fc60 	bl	8004b2c <_isatty_r>
 800426c:	2800      	cmp	r0, #0
 800426e:	d006      	beq.n	800427e <__smakebuf_r+0x7a>
 8004270:	2203      	movs	r2, #3
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	4393      	bics	r3, r2
 8004276:	001a      	movs	r2, r3
 8004278:	2301      	movs	r3, #1
 800427a:	4313      	orrs	r3, r2
 800427c:	81a3      	strh	r3, [r4, #12]
 800427e:	89a0      	ldrh	r0, [r4, #12]
 8004280:	4338      	orrs	r0, r7
 8004282:	81a0      	strh	r0, [r4, #12]
 8004284:	e7cb      	b.n	800421e <__smakebuf_r+0x1a>
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	08004031 	.word	0x08004031

0800428c <malloc>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4b03      	ldr	r3, [pc, #12]	; (800429c <malloc+0x10>)
 8004290:	0001      	movs	r1, r0
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	f000 f860 	bl	8004358 <_malloc_r>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	2000000c 	.word	0x2000000c

080042a0 <__ascii_mbtowc>:
 80042a0:	b082      	sub	sp, #8
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d100      	bne.n	80042a8 <__ascii_mbtowc+0x8>
 80042a6:	a901      	add	r1, sp, #4
 80042a8:	1e10      	subs	r0, r2, #0
 80042aa:	d006      	beq.n	80042ba <__ascii_mbtowc+0x1a>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <__ascii_mbtowc+0x1e>
 80042b0:	7813      	ldrb	r3, [r2, #0]
 80042b2:	600b      	str	r3, [r1, #0]
 80042b4:	7810      	ldrb	r0, [r2, #0]
 80042b6:	1e43      	subs	r3, r0, #1
 80042b8:	4198      	sbcs	r0, r3
 80042ba:	b002      	add	sp, #8
 80042bc:	4770      	bx	lr
 80042be:	2002      	movs	r0, #2
 80042c0:	4240      	negs	r0, r0
 80042c2:	e7fa      	b.n	80042ba <__ascii_mbtowc+0x1a>

080042c4 <_free_r>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	0005      	movs	r5, r0
 80042c8:	2900      	cmp	r1, #0
 80042ca:	d010      	beq.n	80042ee <_free_r+0x2a>
 80042cc:	1f0c      	subs	r4, r1, #4
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	da00      	bge.n	80042d6 <_free_r+0x12>
 80042d4:	18e4      	adds	r4, r4, r3
 80042d6:	0028      	movs	r0, r5
 80042d8:	f000 fc59 	bl	8004b8e <__malloc_lock>
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <_free_r+0x90>)
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <_free_r+0x2c>
 80042e4:	6063      	str	r3, [r4, #4]
 80042e6:	6014      	str	r4, [r2, #0]
 80042e8:	0028      	movs	r0, r5
 80042ea:	f000 fc51 	bl	8004b90 <__malloc_unlock>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	d909      	bls.n	8004308 <_free_r+0x44>
 80042f4:	6821      	ldr	r1, [r4, #0]
 80042f6:	1860      	adds	r0, r4, r1
 80042f8:	4283      	cmp	r3, r0
 80042fa:	d1f3      	bne.n	80042e4 <_free_r+0x20>
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	1841      	adds	r1, r0, r1
 8004302:	6021      	str	r1, [r4, #0]
 8004304:	e7ee      	b.n	80042e4 <_free_r+0x20>
 8004306:	0013      	movs	r3, r2
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	2a00      	cmp	r2, #0
 800430c:	d001      	beq.n	8004312 <_free_r+0x4e>
 800430e:	42a2      	cmp	r2, r4
 8004310:	d9f9      	bls.n	8004306 <_free_r+0x42>
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	1858      	adds	r0, r3, r1
 8004316:	42a0      	cmp	r0, r4
 8004318:	d10b      	bne.n	8004332 <_free_r+0x6e>
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	1809      	adds	r1, r1, r0
 800431e:	1858      	adds	r0, r3, r1
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	4282      	cmp	r2, r0
 8004324:	d1e0      	bne.n	80042e8 <_free_r+0x24>
 8004326:	6810      	ldr	r0, [r2, #0]
 8004328:	6852      	ldr	r2, [r2, #4]
 800432a:	1841      	adds	r1, r0, r1
 800432c:	6019      	str	r1, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	e7da      	b.n	80042e8 <_free_r+0x24>
 8004332:	42a0      	cmp	r0, r4
 8004334:	d902      	bls.n	800433c <_free_r+0x78>
 8004336:	230c      	movs	r3, #12
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	e7d5      	b.n	80042e8 <_free_r+0x24>
 800433c:	6821      	ldr	r1, [r4, #0]
 800433e:	1860      	adds	r0, r4, r1
 8004340:	4282      	cmp	r2, r0
 8004342:	d103      	bne.n	800434c <_free_r+0x88>
 8004344:	6810      	ldr	r0, [r2, #0]
 8004346:	6852      	ldr	r2, [r2, #4]
 8004348:	1841      	adds	r1, r0, r1
 800434a:	6021      	str	r1, [r4, #0]
 800434c:	6062      	str	r2, [r4, #4]
 800434e:	605c      	str	r4, [r3, #4]
 8004350:	e7ca      	b.n	80042e8 <_free_r+0x24>
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	20000280 	.word	0x20000280

08004358 <_malloc_r>:
 8004358:	2303      	movs	r3, #3
 800435a:	b570      	push	{r4, r5, r6, lr}
 800435c:	1ccd      	adds	r5, r1, #3
 800435e:	439d      	bics	r5, r3
 8004360:	3508      	adds	r5, #8
 8004362:	0006      	movs	r6, r0
 8004364:	2d0c      	cmp	r5, #12
 8004366:	d21e      	bcs.n	80043a6 <_malloc_r+0x4e>
 8004368:	250c      	movs	r5, #12
 800436a:	42a9      	cmp	r1, r5
 800436c:	d81d      	bhi.n	80043aa <_malloc_r+0x52>
 800436e:	0030      	movs	r0, r6
 8004370:	f000 fc0d 	bl	8004b8e <__malloc_lock>
 8004374:	4a25      	ldr	r2, [pc, #148]	; (800440c <_malloc_r+0xb4>)
 8004376:	6814      	ldr	r4, [r2, #0]
 8004378:	0021      	movs	r1, r4
 800437a:	2900      	cmp	r1, #0
 800437c:	d119      	bne.n	80043b2 <_malloc_r+0x5a>
 800437e:	4c24      	ldr	r4, [pc, #144]	; (8004410 <_malloc_r+0xb8>)
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <_malloc_r+0x36>
 8004386:	0030      	movs	r0, r6
 8004388:	f000 fb2e 	bl	80049e8 <_sbrk_r>
 800438c:	6020      	str	r0, [r4, #0]
 800438e:	0029      	movs	r1, r5
 8004390:	0030      	movs	r0, r6
 8004392:	f000 fb29 	bl	80049e8 <_sbrk_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d12b      	bne.n	80043f2 <_malloc_r+0x9a>
 800439a:	230c      	movs	r3, #12
 800439c:	0030      	movs	r0, r6
 800439e:	6033      	str	r3, [r6, #0]
 80043a0:	f000 fbf6 	bl	8004b90 <__malloc_unlock>
 80043a4:	e003      	b.n	80043ae <_malloc_r+0x56>
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	dadf      	bge.n	800436a <_malloc_r+0x12>
 80043aa:	230c      	movs	r3, #12
 80043ac:	6033      	str	r3, [r6, #0]
 80043ae:	2000      	movs	r0, #0
 80043b0:	bd70      	pop	{r4, r5, r6, pc}
 80043b2:	680b      	ldr	r3, [r1, #0]
 80043b4:	1b5b      	subs	r3, r3, r5
 80043b6:	d419      	bmi.n	80043ec <_malloc_r+0x94>
 80043b8:	2b0b      	cmp	r3, #11
 80043ba:	d903      	bls.n	80043c4 <_malloc_r+0x6c>
 80043bc:	600b      	str	r3, [r1, #0]
 80043be:	18cc      	adds	r4, r1, r3
 80043c0:	6025      	str	r5, [r4, #0]
 80043c2:	e003      	b.n	80043cc <_malloc_r+0x74>
 80043c4:	684b      	ldr	r3, [r1, #4]
 80043c6:	428c      	cmp	r4, r1
 80043c8:	d10d      	bne.n	80043e6 <_malloc_r+0x8e>
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	0030      	movs	r0, r6
 80043ce:	f000 fbdf 	bl	8004b90 <__malloc_unlock>
 80043d2:	0020      	movs	r0, r4
 80043d4:	2207      	movs	r2, #7
 80043d6:	300b      	adds	r0, #11
 80043d8:	1d23      	adds	r3, r4, #4
 80043da:	4390      	bics	r0, r2
 80043dc:	1ac3      	subs	r3, r0, r3
 80043de:	d0e7      	beq.n	80043b0 <_malloc_r+0x58>
 80043e0:	425a      	negs	r2, r3
 80043e2:	50e2      	str	r2, [r4, r3]
 80043e4:	e7e4      	b.n	80043b0 <_malloc_r+0x58>
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	000c      	movs	r4, r1
 80043ea:	e7ef      	b.n	80043cc <_malloc_r+0x74>
 80043ec:	000c      	movs	r4, r1
 80043ee:	6849      	ldr	r1, [r1, #4]
 80043f0:	e7c3      	b.n	800437a <_malloc_r+0x22>
 80043f2:	2303      	movs	r3, #3
 80043f4:	1cc4      	adds	r4, r0, #3
 80043f6:	439c      	bics	r4, r3
 80043f8:	42a0      	cmp	r0, r4
 80043fa:	d0e1      	beq.n	80043c0 <_malloc_r+0x68>
 80043fc:	1a21      	subs	r1, r4, r0
 80043fe:	0030      	movs	r0, r6
 8004400:	f000 faf2 	bl	80049e8 <_sbrk_r>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d1db      	bne.n	80043c0 <_malloc_r+0x68>
 8004408:	e7c7      	b.n	800439a <_malloc_r+0x42>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	20000280 	.word	0x20000280
 8004410:	20000284 	.word	0x20000284

08004414 <__sfputc_r>:
 8004414:	6893      	ldr	r3, [r2, #8]
 8004416:	b510      	push	{r4, lr}
 8004418:	3b01      	subs	r3, #1
 800441a:	6093      	str	r3, [r2, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da04      	bge.n	800442a <__sfputc_r+0x16>
 8004420:	6994      	ldr	r4, [r2, #24]
 8004422:	42a3      	cmp	r3, r4
 8004424:	db07      	blt.n	8004436 <__sfputc_r+0x22>
 8004426:	290a      	cmp	r1, #10
 8004428:	d005      	beq.n	8004436 <__sfputc_r+0x22>
 800442a:	6813      	ldr	r3, [r2, #0]
 800442c:	1c58      	adds	r0, r3, #1
 800442e:	6010      	str	r0, [r2, #0]
 8004430:	7019      	strb	r1, [r3, #0]
 8004432:	0008      	movs	r0, r1
 8004434:	bd10      	pop	{r4, pc}
 8004436:	f7ff fc55 	bl	8003ce4 <__swbuf_r>
 800443a:	0001      	movs	r1, r0
 800443c:	e7f9      	b.n	8004432 <__sfputc_r+0x1e>

0800443e <__sfputs_r>:
 800443e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004440:	0006      	movs	r6, r0
 8004442:	000f      	movs	r7, r1
 8004444:	0014      	movs	r4, r2
 8004446:	18d5      	adds	r5, r2, r3
 8004448:	42ac      	cmp	r4, r5
 800444a:	d101      	bne.n	8004450 <__sfputs_r+0x12>
 800444c:	2000      	movs	r0, #0
 800444e:	e007      	b.n	8004460 <__sfputs_r+0x22>
 8004450:	7821      	ldrb	r1, [r4, #0]
 8004452:	003a      	movs	r2, r7
 8004454:	0030      	movs	r0, r6
 8004456:	f7ff ffdd 	bl	8004414 <__sfputc_r>
 800445a:	3401      	adds	r4, #1
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d1f3      	bne.n	8004448 <__sfputs_r+0xa>
 8004460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004464 <_vfiprintf_r>:
 8004464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004466:	b0a1      	sub	sp, #132	; 0x84
 8004468:	9003      	str	r0, [sp, #12]
 800446a:	000f      	movs	r7, r1
 800446c:	0016      	movs	r6, r2
 800446e:	001d      	movs	r5, r3
 8004470:	2800      	cmp	r0, #0
 8004472:	d005      	beq.n	8004480 <_vfiprintf_r+0x1c>
 8004474:	6983      	ldr	r3, [r0, #24]
 8004476:	9305      	str	r3, [sp, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <_vfiprintf_r+0x1c>
 800447c:	f7ff fdf6 	bl	800406c <__sinit>
 8004480:	4b7b      	ldr	r3, [pc, #492]	; (8004670 <_vfiprintf_r+0x20c>)
 8004482:	429f      	cmp	r7, r3
 8004484:	d15c      	bne.n	8004540 <_vfiprintf_r+0xdc>
 8004486:	9b03      	ldr	r3, [sp, #12]
 8004488:	685f      	ldr	r7, [r3, #4]
 800448a:	89bb      	ldrh	r3, [r7, #12]
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	d563      	bpl.n	8004558 <_vfiprintf_r+0xf4>
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d060      	beq.n	8004558 <_vfiprintf_r+0xf4>
 8004496:	2300      	movs	r3, #0
 8004498:	ac08      	add	r4, sp, #32
 800449a:	6163      	str	r3, [r4, #20]
 800449c:	3320      	adds	r3, #32
 800449e:	7663      	strb	r3, [r4, #25]
 80044a0:	3310      	adds	r3, #16
 80044a2:	76a3      	strb	r3, [r4, #26]
 80044a4:	9507      	str	r5, [sp, #28]
 80044a6:	0035      	movs	r5, r6
 80044a8:	782b      	ldrb	r3, [r5, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <_vfiprintf_r+0x4e>
 80044ae:	2b25      	cmp	r3, #37	; 0x25
 80044b0:	d15c      	bne.n	800456c <_vfiprintf_r+0x108>
 80044b2:	1bab      	subs	r3, r5, r6
 80044b4:	9305      	str	r3, [sp, #20]
 80044b6:	d00c      	beq.n	80044d2 <_vfiprintf_r+0x6e>
 80044b8:	0032      	movs	r2, r6
 80044ba:	0039      	movs	r1, r7
 80044bc:	9803      	ldr	r0, [sp, #12]
 80044be:	f7ff ffbe 	bl	800443e <__sfputs_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d100      	bne.n	80044c8 <_vfiprintf_r+0x64>
 80044c6:	e0c4      	b.n	8004652 <_vfiprintf_r+0x1ee>
 80044c8:	6962      	ldr	r2, [r4, #20]
 80044ca:	9b05      	ldr	r3, [sp, #20]
 80044cc:	4694      	mov	ip, r2
 80044ce:	4463      	add	r3, ip
 80044d0:	6163      	str	r3, [r4, #20]
 80044d2:	782b      	ldrb	r3, [r5, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d100      	bne.n	80044da <_vfiprintf_r+0x76>
 80044d8:	e0bb      	b.n	8004652 <_vfiprintf_r+0x1ee>
 80044da:	2201      	movs	r2, #1
 80044dc:	2300      	movs	r3, #0
 80044de:	4252      	negs	r2, r2
 80044e0:	6062      	str	r2, [r4, #4]
 80044e2:	a904      	add	r1, sp, #16
 80044e4:	3254      	adds	r2, #84	; 0x54
 80044e6:	1852      	adds	r2, r2, r1
 80044e8:	1c6e      	adds	r6, r5, #1
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	60e3      	str	r3, [r4, #12]
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	7013      	strb	r3, [r2, #0]
 80044f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80044f4:	7831      	ldrb	r1, [r6, #0]
 80044f6:	2205      	movs	r2, #5
 80044f8:	485e      	ldr	r0, [pc, #376]	; (8004674 <_vfiprintf_r+0x210>)
 80044fa:	f000 fb3d 	bl	8004b78 <memchr>
 80044fe:	1c75      	adds	r5, r6, #1
 8004500:	2800      	cmp	r0, #0
 8004502:	d135      	bne.n	8004570 <_vfiprintf_r+0x10c>
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	06d3      	lsls	r3, r2, #27
 8004508:	d504      	bpl.n	8004514 <_vfiprintf_r+0xb0>
 800450a:	2353      	movs	r3, #83	; 0x53
 800450c:	a904      	add	r1, sp, #16
 800450e:	185b      	adds	r3, r3, r1
 8004510:	2120      	movs	r1, #32
 8004512:	7019      	strb	r1, [r3, #0]
 8004514:	0713      	lsls	r3, r2, #28
 8004516:	d504      	bpl.n	8004522 <_vfiprintf_r+0xbe>
 8004518:	2353      	movs	r3, #83	; 0x53
 800451a:	a904      	add	r1, sp, #16
 800451c:	185b      	adds	r3, r3, r1
 800451e:	212b      	movs	r1, #43	; 0x2b
 8004520:	7019      	strb	r1, [r3, #0]
 8004522:	7833      	ldrb	r3, [r6, #0]
 8004524:	2b2a      	cmp	r3, #42	; 0x2a
 8004526:	d02c      	beq.n	8004582 <_vfiprintf_r+0x11e>
 8004528:	0035      	movs	r5, r6
 800452a:	2100      	movs	r1, #0
 800452c:	200a      	movs	r0, #10
 800452e:	68e3      	ldr	r3, [r4, #12]
 8004530:	782a      	ldrb	r2, [r5, #0]
 8004532:	1c6e      	adds	r6, r5, #1
 8004534:	3a30      	subs	r2, #48	; 0x30
 8004536:	2a09      	cmp	r2, #9
 8004538:	d964      	bls.n	8004604 <_vfiprintf_r+0x1a0>
 800453a:	2900      	cmp	r1, #0
 800453c:	d02e      	beq.n	800459c <_vfiprintf_r+0x138>
 800453e:	e026      	b.n	800458e <_vfiprintf_r+0x12a>
 8004540:	4b4d      	ldr	r3, [pc, #308]	; (8004678 <_vfiprintf_r+0x214>)
 8004542:	429f      	cmp	r7, r3
 8004544:	d102      	bne.n	800454c <_vfiprintf_r+0xe8>
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	689f      	ldr	r7, [r3, #8]
 800454a:	e79e      	b.n	800448a <_vfiprintf_r+0x26>
 800454c:	4b4b      	ldr	r3, [pc, #300]	; (800467c <_vfiprintf_r+0x218>)
 800454e:	429f      	cmp	r7, r3
 8004550:	d19b      	bne.n	800448a <_vfiprintf_r+0x26>
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	68df      	ldr	r7, [r3, #12]
 8004556:	e798      	b.n	800448a <_vfiprintf_r+0x26>
 8004558:	0039      	movs	r1, r7
 800455a:	9803      	ldr	r0, [sp, #12]
 800455c:	f7ff fc18 	bl	8003d90 <__swsetup_r>
 8004560:	2800      	cmp	r0, #0
 8004562:	d098      	beq.n	8004496 <_vfiprintf_r+0x32>
 8004564:	2001      	movs	r0, #1
 8004566:	4240      	negs	r0, r0
 8004568:	b021      	add	sp, #132	; 0x84
 800456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800456c:	3501      	adds	r5, #1
 800456e:	e79b      	b.n	80044a8 <_vfiprintf_r+0x44>
 8004570:	4b40      	ldr	r3, [pc, #256]	; (8004674 <_vfiprintf_r+0x210>)
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	1ac0      	subs	r0, r0, r3
 8004576:	2301      	movs	r3, #1
 8004578:	4083      	lsls	r3, r0
 800457a:	4313      	orrs	r3, r2
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	002e      	movs	r6, r5
 8004580:	e7b8      	b.n	80044f4 <_vfiprintf_r+0x90>
 8004582:	9b07      	ldr	r3, [sp, #28]
 8004584:	1d19      	adds	r1, r3, #4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	9107      	str	r1, [sp, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	db01      	blt.n	8004592 <_vfiprintf_r+0x12e>
 800458e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004590:	e004      	b.n	800459c <_vfiprintf_r+0x138>
 8004592:	425b      	negs	r3, r3
 8004594:	60e3      	str	r3, [r4, #12]
 8004596:	2302      	movs	r3, #2
 8004598:	4313      	orrs	r3, r2
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	782b      	ldrb	r3, [r5, #0]
 800459e:	2b2e      	cmp	r3, #46	; 0x2e
 80045a0:	d10a      	bne.n	80045b8 <_vfiprintf_r+0x154>
 80045a2:	786b      	ldrb	r3, [r5, #1]
 80045a4:	2b2a      	cmp	r3, #42	; 0x2a
 80045a6:	d135      	bne.n	8004614 <_vfiprintf_r+0x1b0>
 80045a8:	9b07      	ldr	r3, [sp, #28]
 80045aa:	3502      	adds	r5, #2
 80045ac:	1d1a      	adds	r2, r3, #4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	9207      	str	r2, [sp, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db2b      	blt.n	800460e <_vfiprintf_r+0x1aa>
 80045b6:	9309      	str	r3, [sp, #36]	; 0x24
 80045b8:	4e31      	ldr	r6, [pc, #196]	; (8004680 <_vfiprintf_r+0x21c>)
 80045ba:	7829      	ldrb	r1, [r5, #0]
 80045bc:	2203      	movs	r2, #3
 80045be:	0030      	movs	r0, r6
 80045c0:	f000 fada 	bl	8004b78 <memchr>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d006      	beq.n	80045d6 <_vfiprintf_r+0x172>
 80045c8:	2340      	movs	r3, #64	; 0x40
 80045ca:	1b80      	subs	r0, r0, r6
 80045cc:	4083      	lsls	r3, r0
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	3501      	adds	r5, #1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	7829      	ldrb	r1, [r5, #0]
 80045d8:	2206      	movs	r2, #6
 80045da:	482a      	ldr	r0, [pc, #168]	; (8004684 <_vfiprintf_r+0x220>)
 80045dc:	1c6e      	adds	r6, r5, #1
 80045de:	7621      	strb	r1, [r4, #24]
 80045e0:	f000 faca 	bl	8004b78 <memchr>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d03a      	beq.n	800465e <_vfiprintf_r+0x1fa>
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <_vfiprintf_r+0x224>)
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d125      	bne.n	800463a <_vfiprintf_r+0x1d6>
 80045ee:	2207      	movs	r2, #7
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	3307      	adds	r3, #7
 80045f4:	4393      	bics	r3, r2
 80045f6:	3308      	adds	r3, #8
 80045f8:	9307      	str	r3, [sp, #28]
 80045fa:	6963      	ldr	r3, [r4, #20]
 80045fc:	9a04      	ldr	r2, [sp, #16]
 80045fe:	189b      	adds	r3, r3, r2
 8004600:	6163      	str	r3, [r4, #20]
 8004602:	e750      	b.n	80044a6 <_vfiprintf_r+0x42>
 8004604:	4343      	muls	r3, r0
 8004606:	2101      	movs	r1, #1
 8004608:	189b      	adds	r3, r3, r2
 800460a:	0035      	movs	r5, r6
 800460c:	e790      	b.n	8004530 <_vfiprintf_r+0xcc>
 800460e:	2301      	movs	r3, #1
 8004610:	425b      	negs	r3, r3
 8004612:	e7d0      	b.n	80045b6 <_vfiprintf_r+0x152>
 8004614:	2300      	movs	r3, #0
 8004616:	200a      	movs	r0, #10
 8004618:	001a      	movs	r2, r3
 800461a:	3501      	adds	r5, #1
 800461c:	6063      	str	r3, [r4, #4]
 800461e:	7829      	ldrb	r1, [r5, #0]
 8004620:	1c6e      	adds	r6, r5, #1
 8004622:	3930      	subs	r1, #48	; 0x30
 8004624:	2909      	cmp	r1, #9
 8004626:	d903      	bls.n	8004630 <_vfiprintf_r+0x1cc>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0c5      	beq.n	80045b8 <_vfiprintf_r+0x154>
 800462c:	9209      	str	r2, [sp, #36]	; 0x24
 800462e:	e7c3      	b.n	80045b8 <_vfiprintf_r+0x154>
 8004630:	4342      	muls	r2, r0
 8004632:	2301      	movs	r3, #1
 8004634:	1852      	adds	r2, r2, r1
 8004636:	0035      	movs	r5, r6
 8004638:	e7f1      	b.n	800461e <_vfiprintf_r+0x1ba>
 800463a:	ab07      	add	r3, sp, #28
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	003a      	movs	r2, r7
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <_vfiprintf_r+0x228>)
 8004642:	0021      	movs	r1, r4
 8004644:	9803      	ldr	r0, [sp, #12]
 8004646:	e000      	b.n	800464a <_vfiprintf_r+0x1e6>
 8004648:	bf00      	nop
 800464a:	9004      	str	r0, [sp, #16]
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	3301      	adds	r3, #1
 8004650:	d1d3      	bne.n	80045fa <_vfiprintf_r+0x196>
 8004652:	89bb      	ldrh	r3, [r7, #12]
 8004654:	065b      	lsls	r3, r3, #25
 8004656:	d500      	bpl.n	800465a <_vfiprintf_r+0x1f6>
 8004658:	e784      	b.n	8004564 <_vfiprintf_r+0x100>
 800465a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800465c:	e784      	b.n	8004568 <_vfiprintf_r+0x104>
 800465e:	ab07      	add	r3, sp, #28
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	003a      	movs	r2, r7
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <_vfiprintf_r+0x228>)
 8004666:	0021      	movs	r1, r4
 8004668:	9803      	ldr	r0, [sp, #12]
 800466a:	f000 f87f 	bl	800476c <_printf_i>
 800466e:	e7ec      	b.n	800464a <_vfiprintf_r+0x1e6>
 8004670:	08004cec 	.word	0x08004cec
 8004674:	08004d36 	.word	0x08004d36
 8004678:	08004d0c 	.word	0x08004d0c
 800467c:	08004ccc 	.word	0x08004ccc
 8004680:	08004d3c 	.word	0x08004d3c
 8004684:	08004d40 	.word	0x08004d40
 8004688:	00000000 	.word	0x00000000
 800468c:	0800443f 	.word	0x0800443f

08004690 <_printf_common>:
 8004690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004692:	0015      	movs	r5, r2
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	688a      	ldr	r2, [r1, #8]
 8004698:	690b      	ldr	r3, [r1, #16]
 800469a:	9000      	str	r0, [sp, #0]
 800469c:	000c      	movs	r4, r1
 800469e:	4293      	cmp	r3, r2
 80046a0:	da00      	bge.n	80046a4 <_printf_common+0x14>
 80046a2:	0013      	movs	r3, r2
 80046a4:	0022      	movs	r2, r4
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	3243      	adds	r2, #67	; 0x43
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	2a00      	cmp	r2, #0
 80046ae:	d001      	beq.n	80046b4 <_printf_common+0x24>
 80046b0:	3301      	adds	r3, #1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	069b      	lsls	r3, r3, #26
 80046b8:	d502      	bpl.n	80046c0 <_printf_common+0x30>
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	3302      	adds	r3, #2
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	2706      	movs	r7, #6
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	401f      	ands	r7, r3
 80046c6:	d027      	beq.n	8004718 <_printf_common+0x88>
 80046c8:	0023      	movs	r3, r4
 80046ca:	3343      	adds	r3, #67	; 0x43
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	4193      	sbcs	r3, r2
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	0692      	lsls	r2, r2, #26
 80046d6:	d430      	bmi.n	800473a <_printf_common+0xaa>
 80046d8:	0022      	movs	r2, r4
 80046da:	9901      	ldr	r1, [sp, #4]
 80046dc:	3243      	adds	r2, #67	; 0x43
 80046de:	9800      	ldr	r0, [sp, #0]
 80046e0:	9e08      	ldr	r6, [sp, #32]
 80046e2:	47b0      	blx	r6
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d025      	beq.n	8004734 <_printf_common+0xa4>
 80046e8:	2306      	movs	r3, #6
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	682a      	ldr	r2, [r5, #0]
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	4003      	ands	r3, r0
 80046f2:	2500      	movs	r5, #0
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d103      	bne.n	8004700 <_printf_common+0x70>
 80046f8:	1a8d      	subs	r5, r1, r2
 80046fa:	43eb      	mvns	r3, r5
 80046fc:	17db      	asrs	r3, r3, #31
 80046fe:	401d      	ands	r5, r3
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	6922      	ldr	r2, [r4, #16]
 8004704:	4293      	cmp	r3, r2
 8004706:	dd01      	ble.n	800470c <_printf_common+0x7c>
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	18ed      	adds	r5, r5, r3
 800470c:	2700      	movs	r7, #0
 800470e:	42bd      	cmp	r5, r7
 8004710:	d120      	bne.n	8004754 <_printf_common+0xc4>
 8004712:	2000      	movs	r0, #0
 8004714:	e010      	b.n	8004738 <_printf_common+0xa8>
 8004716:	3701      	adds	r7, #1
 8004718:	68e3      	ldr	r3, [r4, #12]
 800471a:	682a      	ldr	r2, [r5, #0]
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	42bb      	cmp	r3, r7
 8004720:	ddd2      	ble.n	80046c8 <_printf_common+0x38>
 8004722:	0022      	movs	r2, r4
 8004724:	2301      	movs	r3, #1
 8004726:	3219      	adds	r2, #25
 8004728:	9901      	ldr	r1, [sp, #4]
 800472a:	9800      	ldr	r0, [sp, #0]
 800472c:	9e08      	ldr	r6, [sp, #32]
 800472e:	47b0      	blx	r6
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d1f0      	bne.n	8004716 <_printf_common+0x86>
 8004734:	2001      	movs	r0, #1
 8004736:	4240      	negs	r0, r0
 8004738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800473a:	2030      	movs	r0, #48	; 0x30
 800473c:	18e1      	adds	r1, r4, r3
 800473e:	3143      	adds	r1, #67	; 0x43
 8004740:	7008      	strb	r0, [r1, #0]
 8004742:	0021      	movs	r1, r4
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	3145      	adds	r1, #69	; 0x45
 8004748:	7809      	ldrb	r1, [r1, #0]
 800474a:	18a2      	adds	r2, r4, r2
 800474c:	3243      	adds	r2, #67	; 0x43
 800474e:	3302      	adds	r3, #2
 8004750:	7011      	strb	r1, [r2, #0]
 8004752:	e7c1      	b.n	80046d8 <_printf_common+0x48>
 8004754:	0022      	movs	r2, r4
 8004756:	2301      	movs	r3, #1
 8004758:	321a      	adds	r2, #26
 800475a:	9901      	ldr	r1, [sp, #4]
 800475c:	9800      	ldr	r0, [sp, #0]
 800475e:	9e08      	ldr	r6, [sp, #32]
 8004760:	47b0      	blx	r6
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	d0e6      	beq.n	8004734 <_printf_common+0xa4>
 8004766:	3701      	adds	r7, #1
 8004768:	e7d1      	b.n	800470e <_printf_common+0x7e>
	...

0800476c <_printf_i>:
 800476c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	9204      	str	r2, [sp, #16]
 8004772:	000a      	movs	r2, r1
 8004774:	3243      	adds	r2, #67	; 0x43
 8004776:	9305      	str	r3, [sp, #20]
 8004778:	9003      	str	r0, [sp, #12]
 800477a:	9202      	str	r2, [sp, #8]
 800477c:	7e0a      	ldrb	r2, [r1, #24]
 800477e:	000c      	movs	r4, r1
 8004780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004782:	2a6e      	cmp	r2, #110	; 0x6e
 8004784:	d100      	bne.n	8004788 <_printf_i+0x1c>
 8004786:	e086      	b.n	8004896 <_printf_i+0x12a>
 8004788:	d81f      	bhi.n	80047ca <_printf_i+0x5e>
 800478a:	2a63      	cmp	r2, #99	; 0x63
 800478c:	d033      	beq.n	80047f6 <_printf_i+0x8a>
 800478e:	d808      	bhi.n	80047a2 <_printf_i+0x36>
 8004790:	2a00      	cmp	r2, #0
 8004792:	d100      	bne.n	8004796 <_printf_i+0x2a>
 8004794:	e08c      	b.n	80048b0 <_printf_i+0x144>
 8004796:	2a58      	cmp	r2, #88	; 0x58
 8004798:	d04d      	beq.n	8004836 <_printf_i+0xca>
 800479a:	0025      	movs	r5, r4
 800479c:	3542      	adds	r5, #66	; 0x42
 800479e:	702a      	strb	r2, [r5, #0]
 80047a0:	e030      	b.n	8004804 <_printf_i+0x98>
 80047a2:	2a64      	cmp	r2, #100	; 0x64
 80047a4:	d001      	beq.n	80047aa <_printf_i+0x3e>
 80047a6:	2a69      	cmp	r2, #105	; 0x69
 80047a8:	d1f7      	bne.n	800479a <_printf_i+0x2e>
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	6825      	ldr	r5, [r4, #0]
 80047ae:	1d0a      	adds	r2, r1, #4
 80047b0:	0628      	lsls	r0, r5, #24
 80047b2:	d529      	bpl.n	8004808 <_printf_i+0x9c>
 80047b4:	6808      	ldr	r0, [r1, #0]
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	2800      	cmp	r0, #0
 80047ba:	da03      	bge.n	80047c4 <_printf_i+0x58>
 80047bc:	232d      	movs	r3, #45	; 0x2d
 80047be:	9a02      	ldr	r2, [sp, #8]
 80047c0:	4240      	negs	r0, r0
 80047c2:	7013      	strb	r3, [r2, #0]
 80047c4:	4e6b      	ldr	r6, [pc, #428]	; (8004974 <_printf_i+0x208>)
 80047c6:	270a      	movs	r7, #10
 80047c8:	e04f      	b.n	800486a <_printf_i+0xfe>
 80047ca:	2a73      	cmp	r2, #115	; 0x73
 80047cc:	d074      	beq.n	80048b8 <_printf_i+0x14c>
 80047ce:	d808      	bhi.n	80047e2 <_printf_i+0x76>
 80047d0:	2a6f      	cmp	r2, #111	; 0x6f
 80047d2:	d01f      	beq.n	8004814 <_printf_i+0xa8>
 80047d4:	2a70      	cmp	r2, #112	; 0x70
 80047d6:	d1e0      	bne.n	800479a <_printf_i+0x2e>
 80047d8:	2220      	movs	r2, #32
 80047da:	6809      	ldr	r1, [r1, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	6022      	str	r2, [r4, #0]
 80047e0:	e003      	b.n	80047ea <_printf_i+0x7e>
 80047e2:	2a75      	cmp	r2, #117	; 0x75
 80047e4:	d016      	beq.n	8004814 <_printf_i+0xa8>
 80047e6:	2a78      	cmp	r2, #120	; 0x78
 80047e8:	d1d7      	bne.n	800479a <_printf_i+0x2e>
 80047ea:	0022      	movs	r2, r4
 80047ec:	2178      	movs	r1, #120	; 0x78
 80047ee:	3245      	adds	r2, #69	; 0x45
 80047f0:	7011      	strb	r1, [r2, #0]
 80047f2:	4e61      	ldr	r6, [pc, #388]	; (8004978 <_printf_i+0x20c>)
 80047f4:	e022      	b.n	800483c <_printf_i+0xd0>
 80047f6:	0025      	movs	r5, r4
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	3542      	adds	r5, #66	; 0x42
 80047fc:	1d11      	adds	r1, r2, #4
 80047fe:	6019      	str	r1, [r3, #0]
 8004800:	6813      	ldr	r3, [r2, #0]
 8004802:	702b      	strb	r3, [r5, #0]
 8004804:	2301      	movs	r3, #1
 8004806:	e065      	b.n	80048d4 <_printf_i+0x168>
 8004808:	6808      	ldr	r0, [r1, #0]
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	0669      	lsls	r1, r5, #25
 800480e:	d5d3      	bpl.n	80047b8 <_printf_i+0x4c>
 8004810:	b200      	sxth	r0, r0
 8004812:	e7d1      	b.n	80047b8 <_printf_i+0x4c>
 8004814:	6819      	ldr	r1, [r3, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	1d08      	adds	r0, r1, #4
 800481a:	6018      	str	r0, [r3, #0]
 800481c:	6808      	ldr	r0, [r1, #0]
 800481e:	062e      	lsls	r6, r5, #24
 8004820:	d505      	bpl.n	800482e <_printf_i+0xc2>
 8004822:	4e54      	ldr	r6, [pc, #336]	; (8004974 <_printf_i+0x208>)
 8004824:	2708      	movs	r7, #8
 8004826:	2a6f      	cmp	r2, #111	; 0x6f
 8004828:	d01b      	beq.n	8004862 <_printf_i+0xf6>
 800482a:	270a      	movs	r7, #10
 800482c:	e019      	b.n	8004862 <_printf_i+0xf6>
 800482e:	066d      	lsls	r5, r5, #25
 8004830:	d5f7      	bpl.n	8004822 <_printf_i+0xb6>
 8004832:	b280      	uxth	r0, r0
 8004834:	e7f5      	b.n	8004822 <_printf_i+0xb6>
 8004836:	3145      	adds	r1, #69	; 0x45
 8004838:	4e4e      	ldr	r6, [pc, #312]	; (8004974 <_printf_i+0x208>)
 800483a:	700a      	strb	r2, [r1, #0]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	1d01      	adds	r1, r0, #4
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	6019      	str	r1, [r3, #0]
 8004846:	0615      	lsls	r5, r2, #24
 8004848:	d521      	bpl.n	800488e <_printf_i+0x122>
 800484a:	07d3      	lsls	r3, r2, #31
 800484c:	d502      	bpl.n	8004854 <_printf_i+0xe8>
 800484e:	2320      	movs	r3, #32
 8004850:	431a      	orrs	r2, r3
 8004852:	6022      	str	r2, [r4, #0]
 8004854:	2710      	movs	r7, #16
 8004856:	2800      	cmp	r0, #0
 8004858:	d103      	bne.n	8004862 <_printf_i+0xf6>
 800485a:	2320      	movs	r3, #32
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	439a      	bics	r2, r3
 8004860:	6022      	str	r2, [r4, #0]
 8004862:	0023      	movs	r3, r4
 8004864:	2200      	movs	r2, #0
 8004866:	3343      	adds	r3, #67	; 0x43
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	60a3      	str	r3, [r4, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	db58      	blt.n	8004924 <_printf_i+0x1b8>
 8004872:	2204      	movs	r2, #4
 8004874:	6821      	ldr	r1, [r4, #0]
 8004876:	4391      	bics	r1, r2
 8004878:	6021      	str	r1, [r4, #0]
 800487a:	2800      	cmp	r0, #0
 800487c:	d154      	bne.n	8004928 <_printf_i+0x1bc>
 800487e:	9d02      	ldr	r5, [sp, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05a      	beq.n	800493a <_printf_i+0x1ce>
 8004884:	0025      	movs	r5, r4
 8004886:	7833      	ldrb	r3, [r6, #0]
 8004888:	3542      	adds	r5, #66	; 0x42
 800488a:	702b      	strb	r3, [r5, #0]
 800488c:	e055      	b.n	800493a <_printf_i+0x1ce>
 800488e:	0655      	lsls	r5, r2, #25
 8004890:	d5db      	bpl.n	800484a <_printf_i+0xde>
 8004892:	b280      	uxth	r0, r0
 8004894:	e7d9      	b.n	800484a <_printf_i+0xde>
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	680d      	ldr	r5, [r1, #0]
 800489a:	1d10      	adds	r0, r2, #4
 800489c:	6949      	ldr	r1, [r1, #20]
 800489e:	6018      	str	r0, [r3, #0]
 80048a0:	6813      	ldr	r3, [r2, #0]
 80048a2:	062e      	lsls	r6, r5, #24
 80048a4:	d501      	bpl.n	80048aa <_printf_i+0x13e>
 80048a6:	6019      	str	r1, [r3, #0]
 80048a8:	e002      	b.n	80048b0 <_printf_i+0x144>
 80048aa:	066d      	lsls	r5, r5, #25
 80048ac:	d5fb      	bpl.n	80048a6 <_printf_i+0x13a>
 80048ae:	8019      	strh	r1, [r3, #0]
 80048b0:	2300      	movs	r3, #0
 80048b2:	9d02      	ldr	r5, [sp, #8]
 80048b4:	6123      	str	r3, [r4, #16]
 80048b6:	e04f      	b.n	8004958 <_printf_i+0x1ec>
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	1d11      	adds	r1, r2, #4
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	6815      	ldr	r5, [r2, #0]
 80048c0:	2100      	movs	r1, #0
 80048c2:	6862      	ldr	r2, [r4, #4]
 80048c4:	0028      	movs	r0, r5
 80048c6:	f000 f957 	bl	8004b78 <memchr>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d001      	beq.n	80048d2 <_printf_i+0x166>
 80048ce:	1b40      	subs	r0, r0, r5
 80048d0:	6060      	str	r0, [r4, #4]
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	6123      	str	r3, [r4, #16]
 80048d6:	2300      	movs	r3, #0
 80048d8:	9a02      	ldr	r2, [sp, #8]
 80048da:	7013      	strb	r3, [r2, #0]
 80048dc:	e03c      	b.n	8004958 <_printf_i+0x1ec>
 80048de:	6923      	ldr	r3, [r4, #16]
 80048e0:	002a      	movs	r2, r5
 80048e2:	9904      	ldr	r1, [sp, #16]
 80048e4:	9803      	ldr	r0, [sp, #12]
 80048e6:	9d05      	ldr	r5, [sp, #20]
 80048e8:	47a8      	blx	r5
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	d03e      	beq.n	800496c <_printf_i+0x200>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	079b      	lsls	r3, r3, #30
 80048f2:	d415      	bmi.n	8004920 <_printf_i+0x1b4>
 80048f4:	9b07      	ldr	r3, [sp, #28]
 80048f6:	68e0      	ldr	r0, [r4, #12]
 80048f8:	4298      	cmp	r0, r3
 80048fa:	da39      	bge.n	8004970 <_printf_i+0x204>
 80048fc:	0018      	movs	r0, r3
 80048fe:	e037      	b.n	8004970 <_printf_i+0x204>
 8004900:	0022      	movs	r2, r4
 8004902:	2301      	movs	r3, #1
 8004904:	3219      	adds	r2, #25
 8004906:	9904      	ldr	r1, [sp, #16]
 8004908:	9803      	ldr	r0, [sp, #12]
 800490a:	9e05      	ldr	r6, [sp, #20]
 800490c:	47b0      	blx	r6
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	d02c      	beq.n	800496c <_printf_i+0x200>
 8004912:	3501      	adds	r5, #1
 8004914:	68e3      	ldr	r3, [r4, #12]
 8004916:	9a07      	ldr	r2, [sp, #28]
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	42ab      	cmp	r3, r5
 800491c:	dcf0      	bgt.n	8004900 <_printf_i+0x194>
 800491e:	e7e9      	b.n	80048f4 <_printf_i+0x188>
 8004920:	2500      	movs	r5, #0
 8004922:	e7f7      	b.n	8004914 <_printf_i+0x1a8>
 8004924:	2800      	cmp	r0, #0
 8004926:	d0ad      	beq.n	8004884 <_printf_i+0x118>
 8004928:	9d02      	ldr	r5, [sp, #8]
 800492a:	0039      	movs	r1, r7
 800492c:	f7fb fc72 	bl	8000214 <__aeabi_uidivmod>
 8004930:	5c73      	ldrb	r3, [r6, r1]
 8004932:	3d01      	subs	r5, #1
 8004934:	702b      	strb	r3, [r5, #0]
 8004936:	2800      	cmp	r0, #0
 8004938:	d1f7      	bne.n	800492a <_printf_i+0x1be>
 800493a:	2f08      	cmp	r7, #8
 800493c:	d109      	bne.n	8004952 <_printf_i+0x1e6>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	07db      	lsls	r3, r3, #31
 8004942:	d506      	bpl.n	8004952 <_printf_i+0x1e6>
 8004944:	6863      	ldr	r3, [r4, #4]
 8004946:	6922      	ldr	r2, [r4, #16]
 8004948:	4293      	cmp	r3, r2
 800494a:	dc02      	bgt.n	8004952 <_printf_i+0x1e6>
 800494c:	2330      	movs	r3, #48	; 0x30
 800494e:	3d01      	subs	r5, #1
 8004950:	702b      	strb	r3, [r5, #0]
 8004952:	9b02      	ldr	r3, [sp, #8]
 8004954:	1b5b      	subs	r3, r3, r5
 8004956:	6123      	str	r3, [r4, #16]
 8004958:	9b05      	ldr	r3, [sp, #20]
 800495a:	aa07      	add	r2, sp, #28
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	0021      	movs	r1, r4
 8004960:	9b04      	ldr	r3, [sp, #16]
 8004962:	9803      	ldr	r0, [sp, #12]
 8004964:	f7ff fe94 	bl	8004690 <_printf_common>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d1b8      	bne.n	80048de <_printf_i+0x172>
 800496c:	2001      	movs	r0, #1
 800496e:	4240      	negs	r0, r0
 8004970:	b009      	add	sp, #36	; 0x24
 8004972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004974:	08004d47 	.word	0x08004d47
 8004978:	08004d58 	.word	0x08004d58

0800497c <_putc_r>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	0006      	movs	r6, r0
 8004980:	000d      	movs	r5, r1
 8004982:	0014      	movs	r4, r2
 8004984:	2800      	cmp	r0, #0
 8004986:	d004      	beq.n	8004992 <_putc_r+0x16>
 8004988:	6983      	ldr	r3, [r0, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <_putc_r+0x16>
 800498e:	f7ff fb6d 	bl	800406c <__sinit>
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <_putc_r+0x60>)
 8004994:	429c      	cmp	r4, r3
 8004996:	d111      	bne.n	80049bc <_putc_r+0x40>
 8004998:	6874      	ldr	r4, [r6, #4]
 800499a:	68a3      	ldr	r3, [r4, #8]
 800499c:	3b01      	subs	r3, #1
 800499e:	60a3      	str	r3, [r4, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	da05      	bge.n	80049b0 <_putc_r+0x34>
 80049a4:	69a2      	ldr	r2, [r4, #24]
 80049a6:	4293      	cmp	r3, r2
 80049a8:	db12      	blt.n	80049d0 <_putc_r+0x54>
 80049aa:	b2eb      	uxtb	r3, r5
 80049ac:	2b0a      	cmp	r3, #10
 80049ae:	d00f      	beq.n	80049d0 <_putc_r+0x54>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	b2e8      	uxtb	r0, r5
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	6022      	str	r2, [r4, #0]
 80049b8:	701d      	strb	r5, [r3, #0]
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <_putc_r+0x64>)
 80049be:	429c      	cmp	r4, r3
 80049c0:	d101      	bne.n	80049c6 <_putc_r+0x4a>
 80049c2:	68b4      	ldr	r4, [r6, #8]
 80049c4:	e7e9      	b.n	800499a <_putc_r+0x1e>
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <_putc_r+0x68>)
 80049c8:	429c      	cmp	r4, r3
 80049ca:	d1e6      	bne.n	800499a <_putc_r+0x1e>
 80049cc:	68f4      	ldr	r4, [r6, #12]
 80049ce:	e7e4      	b.n	800499a <_putc_r+0x1e>
 80049d0:	0022      	movs	r2, r4
 80049d2:	0029      	movs	r1, r5
 80049d4:	0030      	movs	r0, r6
 80049d6:	f7ff f985 	bl	8003ce4 <__swbuf_r>
 80049da:	e7ee      	b.n	80049ba <_putc_r+0x3e>
 80049dc:	08004cec 	.word	0x08004cec
 80049e0:	08004d0c 	.word	0x08004d0c
 80049e4:	08004ccc 	.word	0x08004ccc

080049e8 <_sbrk_r>:
 80049e8:	2300      	movs	r3, #0
 80049ea:	b570      	push	{r4, r5, r6, lr}
 80049ec:	4c06      	ldr	r4, [pc, #24]	; (8004a08 <_sbrk_r+0x20>)
 80049ee:	0005      	movs	r5, r0
 80049f0:	0008      	movs	r0, r1
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	f7fc f92e 	bl	8000c54 <_sbrk>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d103      	bne.n	8004a04 <_sbrk_r+0x1c>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d000      	beq.n	8004a04 <_sbrk_r+0x1c>
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	2000039c 	.word	0x2000039c

08004a0c <__sread>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	000c      	movs	r4, r1
 8004a10:	250e      	movs	r5, #14
 8004a12:	5f49      	ldrsh	r1, [r1, r5]
 8004a14:	f000 f8be 	bl	8004b94 <_read_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	db03      	blt.n	8004a24 <__sread+0x18>
 8004a1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a1e:	181b      	adds	r3, r3, r0
 8004a20:	6563      	str	r3, [r4, #84]	; 0x54
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	4a02      	ldr	r2, [pc, #8]	; (8004a30 <__sread+0x24>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	81a3      	strh	r3, [r4, #12]
 8004a2c:	e7f9      	b.n	8004a22 <__sread+0x16>
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	ffffefff 	.word	0xffffefff

08004a34 <__swrite>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	001f      	movs	r7, r3
 8004a38:	898b      	ldrh	r3, [r1, #12]
 8004a3a:	0005      	movs	r5, r0
 8004a3c:	000c      	movs	r4, r1
 8004a3e:	0016      	movs	r6, r2
 8004a40:	05db      	lsls	r3, r3, #23
 8004a42:	d505      	bpl.n	8004a50 <__swrite+0x1c>
 8004a44:	230e      	movs	r3, #14
 8004a46:	5ec9      	ldrsh	r1, [r1, r3]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	f000 f880 	bl	8004b50 <_lseek_r>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	4a05      	ldr	r2, [pc, #20]	; (8004a68 <__swrite+0x34>)
 8004a54:	0028      	movs	r0, r5
 8004a56:	4013      	ands	r3, r2
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	0032      	movs	r2, r6
 8004a5c:	230e      	movs	r3, #14
 8004a5e:	5ee1      	ldrsh	r1, [r4, r3]
 8004a60:	003b      	movs	r3, r7
 8004a62:	f000 f82b 	bl	8004abc <_write_r>
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a68:	ffffefff 	.word	0xffffefff

08004a6c <__sseek>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	000c      	movs	r4, r1
 8004a70:	250e      	movs	r5, #14
 8004a72:	5f49      	ldrsh	r1, [r1, r5]
 8004a74:	f000 f86c 	bl	8004b50 <_lseek_r>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	1c42      	adds	r2, r0, #1
 8004a7c:	d103      	bne.n	8004a86 <__sseek+0x1a>
 8004a7e:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <__sseek+0x28>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	0152      	lsls	r2, r2, #5
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a90:	e7f8      	b.n	8004a84 <__sseek+0x18>
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	ffffefff 	.word	0xffffefff

08004a98 <__sclose>:
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	230e      	movs	r3, #14
 8004a9c:	5ec9      	ldrsh	r1, [r1, r3]
 8004a9e:	f000 f821 	bl	8004ae4 <_close_r>
 8004aa2:	bd10      	pop	{r4, pc}

08004aa4 <__ascii_wctomb>:
 8004aa4:	1e0b      	subs	r3, r1, #0
 8004aa6:	d004      	beq.n	8004ab2 <__ascii_wctomb+0xe>
 8004aa8:	2aff      	cmp	r2, #255	; 0xff
 8004aaa:	d904      	bls.n	8004ab6 <__ascii_wctomb+0x12>
 8004aac:	238a      	movs	r3, #138	; 0x8a
 8004aae:	6003      	str	r3, [r0, #0]
 8004ab0:	3b8b      	subs	r3, #139	; 0x8b
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	4770      	bx	lr
 8004ab6:	700a      	strb	r2, [r1, #0]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e7fa      	b.n	8004ab2 <__ascii_wctomb+0xe>

08004abc <_write_r>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	0005      	movs	r5, r0
 8004ac0:	0008      	movs	r0, r1
 8004ac2:	0011      	movs	r1, r2
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4c06      	ldr	r4, [pc, #24]	; (8004ae0 <_write_r+0x24>)
 8004ac8:	6022      	str	r2, [r4, #0]
 8004aca:	001a      	movs	r2, r3
 8004acc:	f7fb fba8 	bl	8000220 <_write>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d103      	bne.n	8004adc <_write_r+0x20>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d000      	beq.n	8004adc <_write_r+0x20>
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	2000039c 	.word	0x2000039c

08004ae4 <_close_r>:
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	b570      	push	{r4, r5, r6, lr}
 8004ae8:	4c06      	ldr	r4, [pc, #24]	; (8004b04 <_close_r+0x20>)
 8004aea:	0005      	movs	r5, r0
 8004aec:	0008      	movs	r0, r1
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	f7fc f883 	bl	8000bfa <_close>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d103      	bne.n	8004b00 <_close_r+0x1c>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d000      	beq.n	8004b00 <_close_r+0x1c>
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	2000039c 	.word	0x2000039c

08004b08 <_fstat_r>:
 8004b08:	2300      	movs	r3, #0
 8004b0a:	b570      	push	{r4, r5, r6, lr}
 8004b0c:	4c06      	ldr	r4, [pc, #24]	; (8004b28 <_fstat_r+0x20>)
 8004b0e:	0005      	movs	r5, r0
 8004b10:	0008      	movs	r0, r1
 8004b12:	0011      	movs	r1, r2
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	f7fc f87a 	bl	8000c0e <_fstat>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d103      	bne.n	8004b26 <_fstat_r+0x1e>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d000      	beq.n	8004b26 <_fstat_r+0x1e>
 8004b24:	602b      	str	r3, [r5, #0]
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	2000039c 	.word	0x2000039c

08004b2c <_isatty_r>:
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	b570      	push	{r4, r5, r6, lr}
 8004b30:	4c06      	ldr	r4, [pc, #24]	; (8004b4c <_isatty_r+0x20>)
 8004b32:	0005      	movs	r5, r0
 8004b34:	0008      	movs	r0, r1
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	f7fc f877 	bl	8000c2a <_isatty>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d103      	bne.n	8004b48 <_isatty_r+0x1c>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d000      	beq.n	8004b48 <_isatty_r+0x1c>
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	2000039c 	.word	0x2000039c

08004b50 <_lseek_r>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	0005      	movs	r5, r0
 8004b54:	0008      	movs	r0, r1
 8004b56:	0011      	movs	r1, r2
 8004b58:	2200      	movs	r2, #0
 8004b5a:	4c06      	ldr	r4, [pc, #24]	; (8004b74 <_lseek_r+0x24>)
 8004b5c:	6022      	str	r2, [r4, #0]
 8004b5e:	001a      	movs	r2, r3
 8004b60:	f7fc f86c 	bl	8000c3c <_lseek>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d103      	bne.n	8004b70 <_lseek_r+0x20>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d000      	beq.n	8004b70 <_lseek_r+0x20>
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	bd70      	pop	{r4, r5, r6, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	2000039c 	.word	0x2000039c

08004b78 <memchr>:
 8004b78:	b2c9      	uxtb	r1, r1
 8004b7a:	1882      	adds	r2, r0, r2
 8004b7c:	4290      	cmp	r0, r2
 8004b7e:	d101      	bne.n	8004b84 <memchr+0xc>
 8004b80:	2000      	movs	r0, #0
 8004b82:	4770      	bx	lr
 8004b84:	7803      	ldrb	r3, [r0, #0]
 8004b86:	428b      	cmp	r3, r1
 8004b88:	d0fb      	beq.n	8004b82 <memchr+0xa>
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	e7f6      	b.n	8004b7c <memchr+0x4>

08004b8e <__malloc_lock>:
 8004b8e:	4770      	bx	lr

08004b90 <__malloc_unlock>:
 8004b90:	4770      	bx	lr
	...

08004b94 <_read_r>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	0005      	movs	r5, r0
 8004b98:	0008      	movs	r0, r1
 8004b9a:	0011      	movs	r1, r2
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	4c06      	ldr	r4, [pc, #24]	; (8004bb8 <_read_r+0x24>)
 8004ba0:	6022      	str	r2, [r4, #0]
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	f7fc f80c 	bl	8000bc0 <_read>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d103      	bne.n	8004bb4 <_read_r+0x20>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d000      	beq.n	8004bb4 <_read_r+0x20>
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	2000039c 	.word	0x2000039c

08004bbc <_init>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr

08004bc8 <_fini>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr
