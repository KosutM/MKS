
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b80  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e048  08018d30  08018d30  00028d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026d78  08026d78  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08026d78  08026d78  00036d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026d80  08026d80  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026d80  08026d80  00036d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026d84  08026d84  00036d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08026d88  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f370  200001f0  08026f78  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f560  08026f78  0004f560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045aae  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f8b  00000000  00000000  00085cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f0  00000000  00000000  0008dc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  0008ff50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036255  00000000  00000000  00092078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002d6d5  00000000  00000000  000c82cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffcd5  00000000  00000000  000f59a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f5677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009634  00000000  00000000  001f56f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018d18 	.word	0x08018d18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08018d18 	.word	0x08018d18

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000020c 	.word	0x2000020c
 80005f0:	20000260 	.word	0x20000260

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fdf3 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f81d 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8af 	bl	8000764 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f883 	bl	8000710 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x40>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fa1c 	bl	8004a5e <osThreadCreate>
 8000626:	4602      	mov	r2, r0
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <main+0x44>)
 800062a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f004 fa00 	bl	8004a30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x3c>
 8000632:	bf00      	nop
 8000634:	08018d3c 	.word	0x08018d3c
 8000638:	20008be0 	.word	0x20008be0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f017 fbc4 	bl	8017dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fa57 	bl	8002b74 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f93a 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fcb0 	bl	8003054 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f923 	bl	8000944 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART3_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000748:	f003 f8e6 	bl	8003918 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f8f7 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20008be4 	.word	0x20008be4
 8000760:	40004800 	.word	0x40004800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b5a      	ldr	r3, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a59      	ldr	r2, [pc, #356]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b57      	ldr	r3, [pc, #348]	; (80008e8 <MX_GPIO_Init+0x184>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b53      	ldr	r3, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x184>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a52      	ldr	r2, [pc, #328]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b4c      	ldr	r3, [pc, #304]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a4b      	ldr	r2, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b49      	ldr	r3, [pc, #292]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a44      	ldr	r2, [pc, #272]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x184>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a36      	ldr	r2, [pc, #216]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f244 0181 	movw	r1, #16513	; 0x4081
 8000828:	4830      	ldr	r0, [pc, #192]	; (80008ec <MX_GPIO_Init+0x188>)
 800082a:	f002 f989 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	482f      	ldr	r0, [pc, #188]	; (80008f0 <MX_GPIO_Init+0x18c>)
 8000834:	f002 f984 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_GPIO_Init+0x190>)
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <MX_GPIO_Init+0x194>)
 800084e:	f001 ffb5 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8000852:	f244 0381 	movw	r3, #16513	; 0x4081
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x188>)
 800086c:	f001 ffa6 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x18c>)
 8000888:	f001 ff98 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x18c>)
 80008a0:	f001 ff8c 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b6:	230a      	movs	r3, #10
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <MX_GPIO_Init+0x198>)
 80008c2:	f001 ff7b 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_GPIO_Init+0x198>)
 80008dc:	f001 ff6e 	bl	80027bc <HAL_GPIO_Init>

}
 80008e0:	bf00      	nop
 80008e2:	3730      	adds	r7, #48	; 0x30
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40021800 	.word	0x40021800
 80008f4:	10110000 	.word	0x10110000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020000 	.word	0x40020000

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f003 fbd0 	bl	80040ac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  tcpecho_init();
 800090c:	f000 fa36 	bl	8000d7c <tcpecho_init>
  telnet_init();
 8000910:	f000 fc2a 	bl	8001168 <telnet_init>
  httpd_init();
 8000914:	f00a f8fa 	bl	800ab0c <httpd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f004 f8ec 	bl	8004af6 <osDelay>
 800091e:	e7fb      	b.n	8000918 <StartDefaultTask+0x18>

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 fc79 	bl	8001228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40002000 	.word	0x40002000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a10:	2307      	movs	r3, #7
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1c:	f001 fece 	bl	80027bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	202d      	movs	r0, #45	; 0x2d
 8000a4a:	f000 fce7 	bl	800141c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a4e:	202d      	movs	r0, #45	; 0x2d
 8000a50:	f000 fd00 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fcdc 	bl	8003438 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a80:	f002 fcb2 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8000a84:	4603      	mov	r3, r0
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_InitTick+0xa8>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3b01      	subs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_InitTick+0xac>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_InitTick+0xb0>)
 8000a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aba:	f002 fcef 	bl	800349c <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ac6:	f002 fd1e 	bl	8003506 <HAL_TIM_Base_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	20008c24 	.word	0x20008c24
 8000ae4:	40002000 	.word	0x40002000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b22:	f002 fd14 	bl	800354e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20008c24 	.word	0x20008c24

08000b30 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <ETH_IRQHandler+0x10>)
 8000b36:	f001 f881 	bl	8001c3c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000a584 	.word	0x2000a584

08000b44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e00a      	b.n	8000b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b56:	f3af 8000 	nop.w
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf0      	blt.n	8000b56 <_read+0x12>
	}

return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
	}
	return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d205      	bcs.n	8000c5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x6c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	20030000 	.word	0x20030000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000460 	.word	0x20000460
 8000c88:	2000f560 	.word	0x2000f560
 8000c8c:	2000f558 	.word	0x2000f558

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SystemInit+0x28>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <SystemInit+0x28>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SystemInit+0x28>)
 8000ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000caa:	609a      	str	r2, [r3, #8]
#endif
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2010      	movs	r0, #16
 8000cca:	f006 fe3d 	bl	8007948 <netconn_new_with_proto_and_callback>
 8000cce:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d04e      	beq.n	8000d74 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	2100      	movs	r1, #0
 8000cda:	69f8      	ldr	r0, [r7, #28]
 8000cdc:	f006 feee 	bl	8007abc <netconn_bind>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000ce4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d13f      	bne.n	8000d6c <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000cec:	21ff      	movs	r1, #255	; 0xff
 8000cee:	69f8      	ldr	r0, [r7, #28]
 8000cf0:	f006 ff1c 	bl	8007b2c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	69f8      	ldr	r0, [r7, #28]
 8000cfc:	f006 ff42 	bl	8007b84 <netconn_accept>
 8000d00:	4603      	mov	r3, r0
 8000d02:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f3      	bne.n	8000cf4 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d0c:	e01b      	b.n	8000d46 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	f107 020a 	add.w	r2, r7, #10
 8000d14:	f107 010c 	add.w	r1, r7, #12
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f008 fecf 	bl	8009abc <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	68f9      	ldr	r1, [r7, #12]
 8000d22:	897b      	ldrh	r3, [r7, #10]
 8000d24:	461a      	mov	r2, r3
 8000d26:	2300      	movs	r3, #0
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f007 f9ac 	bl	8008088 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f008 ff0c 	bl	8009b50 <netbuf_next>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dae7      	bge.n	8000d0e <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f008 fe9b 	bl	8009a7c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f107 0210 	add.w	r2, r7, #16
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f007 f920 	bl	8007f94 <netconn_recv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0d9      	beq.n	8000d0e <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f007 fa95 	bl	800828c <netconn_close>
          netconn_delete(newconn);
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f006 fe8d 	bl	8007a84 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000d6a:	e7c3      	b.n	8000cf4 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f006 fe88 	bl	8007a84 <netconn_delete>
    }
  }
}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000d82:	2304      	movs	r3, #4
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <tcpecho_init+0x20>)
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <tcpecho_init+0x24>)
 8000d90:	f016 ff80 	bl	8017c94 <sys_thread_new>
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08000cbd 	.word	0x08000cbd
 8000da0:	08018d58 	.word	0x08018d58

08000da4 <telnet_process_command>:

#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 		64

static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b097      	sub	sp, #92	; 0x5c
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	char *token;

	//sprintf(s, "Prijato: %s\n", cmd);
	//netconn_write(conn, s, strlen(s), NETCONN_COPY);

	token = strtok_r(cmd, " ", &token);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	461a      	mov	r2, r3
 8000db4:	498b      	ldr	r1, [pc, #556]	; (8000fe4 <telnet_process_command+0x240>)
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f017 f8c9 	bl	8017f4e <strtok_r>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60fb      	str	r3, [r7, #12]

	if (strcasecmp(token, "HELLO") == 0)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4989      	ldr	r1, [pc, #548]	; (8000fe8 <telnet_process_command+0x244>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f017 f85b 	bl	8017e80 <strcasecmp>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10b      	bne.n	8000de8 <telnet_process_command+0x44>
	{
		sprintf(s, "Komunikace OK\n");
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4a85      	ldr	r2, [pc, #532]	; (8000fec <telnet_process_command+0x248>)
 8000dd6:	461c      	mov	r4, r3
 8000dd8:	4613      	mov	r3, r2
 8000dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ddc:	c407      	stmia	r4!, {r0, r1, r2}
 8000dde:	8023      	strh	r3, [r4, #0]
 8000de0:	3402      	adds	r4, #2
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	7023      	strb	r3, [r4, #0]
 8000de6:	e0ea      	b.n	8000fbe <telnet_process_command+0x21a>
	}
	else if (strcasecmp(token, "LED1") == 0)								//set LED1 ON/OFF
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4981      	ldr	r1, [pc, #516]	; (8000ff0 <telnet_process_command+0x24c>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f017 f847 	bl	8017e80 <strcasecmp>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d128      	bne.n	8000e4a <telnet_process_command+0xa6>
	{
		token = strtok_r(NULL, " ", &token);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4979      	ldr	r1, [pc, #484]	; (8000fe4 <telnet_process_command+0x240>)
 8000e00:	2000      	movs	r0, #0
 8000e02:	f017 f8a4 	bl	8017f4e <strtok_r>
 8000e06:	4603      	mov	r3, r0
 8000e08:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4979      	ldr	r1, [pc, #484]	; (8000ff4 <telnet_process_command+0x250>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f017 f836 	bl	8017e80 <strcasecmp>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <telnet_process_command+0x82>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4876      	ldr	r0, [pc, #472]	; (8000ff8 <telnet_process_command+0x254>)
 8000e20:	f001 fe8e 	bl	8002b40 <HAL_GPIO_WritePin>
 8000e24:	e00c      	b.n	8000e40 <telnet_process_command+0x9c>
		}
		else if (strcasecmp(token, "OFF") == 0)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4974      	ldr	r1, [pc, #464]	; (8000ffc <telnet_process_command+0x258>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f017 f828 	bl	8017e80 <strcasecmp>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d104      	bne.n	8000e40 <telnet_process_command+0x9c>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2101      	movs	r1, #1
 8000e3a:	486f      	ldr	r0, [pc, #444]	; (8000ff8 <telnet_process_command+0x254>)
 8000e3c:	f001 fe80 	bl	8002b40 <HAL_GPIO_WritePin>
		}
		sprintf(s, "OK\n");
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4a6e      	ldr	r2, [pc, #440]	; (8001000 <telnet_process_command+0x25c>)
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e0b9      	b.n	8000fbe <telnet_process_command+0x21a>
	}
	else if (strcasecmp(token, "LED2") == 0)								//set LED2 ON/OFF
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	496d      	ldr	r1, [pc, #436]	; (8001004 <telnet_process_command+0x260>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f017 f816 	bl	8017e80 <strcasecmp>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d128      	bne.n	8000eac <telnet_process_command+0x108>
	{
		token = strtok_r(NULL, " ", &token);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4960      	ldr	r1, [pc, #384]	; (8000fe4 <telnet_process_command+0x240>)
 8000e62:	2000      	movs	r0, #0
 8000e64:	f017 f873 	bl	8017f4e <strtok_r>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4961      	ldr	r1, [pc, #388]	; (8000ff4 <telnet_process_command+0x250>)
 8000e70:	4618      	mov	r0, r3
 8000e72:	f017 f805 	bl	8017e80 <strcasecmp>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <telnet_process_command+0xe4>
		{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	485d      	ldr	r0, [pc, #372]	; (8000ff8 <telnet_process_command+0x254>)
 8000e82:	f001 fe5d 	bl	8002b40 <HAL_GPIO_WritePin>
 8000e86:	e00c      	b.n	8000ea2 <telnet_process_command+0xfe>
		}
		else if (strcasecmp(token, "OFF") == 0)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	495c      	ldr	r1, [pc, #368]	; (8000ffc <telnet_process_command+0x258>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f016 fff7 	bl	8017e80 <strcasecmp>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d104      	bne.n	8000ea2 <telnet_process_command+0xfe>
		{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	4856      	ldr	r0, [pc, #344]	; (8000ff8 <telnet_process_command+0x254>)
 8000e9e:	f001 fe4f 	bl	8002b40 <HAL_GPIO_WritePin>
		}
		sprintf(s, "OK\n");
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4a56      	ldr	r2, [pc, #344]	; (8001000 <telnet_process_command+0x25c>)
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e088      	b.n	8000fbe <telnet_process_command+0x21a>
	}
	else if (strcasecmp(token, "LED3") == 0)								//set LED3 ON/OFF
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4956      	ldr	r1, [pc, #344]	; (8001008 <telnet_process_command+0x264>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f016 ffe5 	bl	8017e80 <strcasecmp>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d12a      	bne.n	8000f12 <telnet_process_command+0x16e>
	{
		token = strtok_r(NULL, " ", &token);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4948      	ldr	r1, [pc, #288]	; (8000fe4 <telnet_process_command+0x240>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f017 f842 	bl	8017f4e <strtok_r>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4948      	ldr	r1, [pc, #288]	; (8000ff4 <telnet_process_command+0x250>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f016 ffd4 	bl	8017e80 <strcasecmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <telnet_process_command+0x148>
		{
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee4:	4844      	ldr	r0, [pc, #272]	; (8000ff8 <telnet_process_command+0x254>)
 8000ee6:	f001 fe2b 	bl	8002b40 <HAL_GPIO_WritePin>
 8000eea:	e00d      	b.n	8000f08 <telnet_process_command+0x164>
		}
		else if (strcasecmp(token, "OFF") == 0)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4943      	ldr	r1, [pc, #268]	; (8000ffc <telnet_process_command+0x258>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f016 ffc5 	bl	8017e80 <strcasecmp>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d105      	bne.n	8000f08 <telnet_process_command+0x164>
		{
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f02:	483d      	ldr	r0, [pc, #244]	; (8000ff8 <telnet_process_command+0x254>)
 8000f04:	f001 fe1c 	bl	8002b40 <HAL_GPIO_WritePin>
		}
		sprintf(s, "OK\n");
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4a3c      	ldr	r2, [pc, #240]	; (8001000 <telnet_process_command+0x25c>)
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e055      	b.n	8000fbe <telnet_process_command+0x21a>
	}
	else if (strcasecmp(token, "STATUS") == 0)								//get LED1 and LED2 current status (ON/OFF)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	493d      	ldr	r1, [pc, #244]	; (800100c <telnet_process_command+0x268>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f016 ffb2 	bl	8017e80 <strcasecmp>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d14d      	bne.n	8000fbe <telnet_process_command+0x21a>
	{
		sprintf(s, "Stav: ");
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4a3a      	ldr	r2, [pc, #232]	; (8001010 <telnet_process_command+0x26c>)
 8000f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2c:	6018      	str	r0, [r3, #0]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	8019      	strh	r1, [r3, #0]
 8000f32:	3302      	adds	r3, #2
 8000f34:	0c0a      	lsrs	r2, r1, #16
 8000f36:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == 0)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	482f      	ldr	r0, [pc, #188]	; (8000ff8 <telnet_process_command+0x254>)
 8000f3c:	f001 fde8 	bl	8002b10 <HAL_GPIO_ReadPin>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d109      	bne.n	8000f5a <telnet_process_command+0x1b6>
			sprintf(s, "LED1=OFF, ");
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4a32      	ldr	r2, [pc, #200]	; (8001014 <telnet_process_command+0x270>)
 8000f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4e:	c303      	stmia	r3!, {r0, r1}
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	0c12      	lsrs	r2, r2, #16
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	e005      	b.n	8000f66 <telnet_process_command+0x1c2>
		else
			sprintf(s, "LED1=ON, ");
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <telnet_process_command+0x274>)
 8000f60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f62:	c303      	stmia	r3!, {r0, r1}
 8000f64:	801a      	strh	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) == 0)
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <telnet_process_command+0x254>)
 8000f6a:	f001 fdd1 	bl	8002b10 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <telnet_process_command+0x1e4>
			sprintf(s, "LED2=OFF, ");
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4a28      	ldr	r2, [pc, #160]	; (800101c <telnet_process_command+0x278>)
 8000f7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7c:	c303      	stmia	r3!, {r0, r1}
 8000f7e:	801a      	strh	r2, [r3, #0]
 8000f80:	3302      	adds	r3, #2
 8000f82:	0c12      	lsrs	r2, r2, #16
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e005      	b.n	8000f94 <telnet_process_command+0x1f0>
		else
			sprintf(s, "LED2=ON, ");
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4a24      	ldr	r2, [pc, #144]	; (8001020 <telnet_process_command+0x27c>)
 8000f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f90:	c303      	stmia	r3!, {r0, r1}
 8000f92:	801a      	strh	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin) == 0)
 8000f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f98:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <telnet_process_command+0x254>)
 8000f9a:	f001 fdb9 	bl	8002b10 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d106      	bne.n	8000fb2 <telnet_process_command+0x20e>
			sprintf(s, "LED3=OFF\n");
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <telnet_process_command+0x280>)
 8000faa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fac:	c303      	stmia	r3!, {r0, r1}
 8000fae:	801a      	strh	r2, [r3, #0]
 8000fb0:	e005      	b.n	8000fbe <telnet_process_command+0x21a>
		else
			sprintf(s, "LED3=ON\n");
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <telnet_process_command+0x284>)
 8000fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fba:	c303      	stmia	r3!, {r0, r1}
 8000fbc:	701a      	strb	r2, [r3, #0]
	}
	netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff f91e 	bl	8000204 <strlen>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f107 0110 	add.w	r1, r7, #16
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f007 f857 	bl	8008088 <netconn_write_partly>
}
 8000fda:	bf00      	nop
 8000fdc:	3754      	adds	r7, #84	; 0x54
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08018d68 	.word	0x08018d68
 8000fe8:	08018d6c 	.word	0x08018d6c
 8000fec:	08018d74 	.word	0x08018d74
 8000ff0:	08018d84 	.word	0x08018d84
 8000ff4:	08018d8c 	.word	0x08018d8c
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	08018d90 	.word	0x08018d90
 8001000:	000a4b4f 	.word	0x000a4b4f
 8001004:	08018d94 	.word	0x08018d94
 8001008:	08018d9c 	.word	0x08018d9c
 800100c:	08018da4 	.word	0x08018da4
 8001010:	08018dac 	.word	0x08018dac
 8001014:	08018db4 	.word	0x08018db4
 8001018:	08018dc0 	.word	0x08018dc0
 800101c:	08018dcc 	.word	0x08018dcc
 8001020:	08018dd8 	.word	0x08018dd8
 8001024:	08018de4 	.word	0x08018de4
 8001028:	08018df0 	.word	0x08018df0

0800102c <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];


	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127)
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <telnet_byte_available+0x64>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	2b3f      	cmp	r3, #63	; 0x3f
 800103e:	d810      	bhi.n	8001062 <telnet_byte_available+0x36>
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b1f      	cmp	r3, #31
 8001044:	d90d      	bls.n	8001062 <telnet_byte_available+0x36>
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db09      	blt.n	8001062 <telnet_byte_available+0x36>
		data[cnt++] = c;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <telnet_byte_available+0x64>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	b291      	uxth	r1, r2
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <telnet_byte_available+0x64>)
 8001058:	8011      	strh	r1, [r2, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <telnet_byte_available+0x68>)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r')
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b0a      	cmp	r3, #10
 8001066:	d002      	beq.n	800106e <telnet_byte_available+0x42>
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b0d      	cmp	r3, #13
 800106c:	d10c      	bne.n	8001088 <telnet_byte_available+0x5c>
	{
		data[cnt] = '\0';
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <telnet_byte_available+0x64>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <telnet_byte_available+0x68>)
 8001076:	2100      	movs	r1, #0
 8001078:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <telnet_byte_available+0x68>)
 800107e:	f7ff fe91 	bl	8000da4 <telnet_process_command>
		cnt = 0;
 8001082:	4b03      	ldr	r3, [pc, #12]	; (8001090 <telnet_byte_available+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]
	}


}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000464 	.word	0x20000464
 8001094:	20000468 	.word	0x20000468

08001098 <telnet_thread>:

/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2010      	movs	r0, #16
 80010a6:	f006 fc4f 	bl	8007948 <netconn_new_with_proto_and_callback>
 80010aa:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d055      	beq.n	800115e <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 23);
 80010b2:	2217      	movs	r2, #23
 80010b4:	2100      	movs	r1, #0
 80010b6:	69f8      	ldr	r0, [r7, #28]
 80010b8:	f006 fd00 	bl	8007abc <netconn_bind>
 80010bc:	4603      	mov	r3, r0
 80010be:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 80010c0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d146      	bne.n	8001156 <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 80010c8:	21ff      	movs	r1, #255	; 0xff
 80010ca:	69f8      	ldr	r0, [r7, #28]
 80010cc:	f006 fd2e 	bl	8007b2c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	69f8      	ldr	r0, [r7, #28]
 80010d8:	f006 fd54 	bl	8007b84 <netconn_accept>
 80010dc:	4603      	mov	r3, r0
 80010de:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 80010e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f3      	bne.n	80010d0 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 80010e8:	e022      	b.n	8001130 <telnet_thread+0x98>
          {
            do 
            {
              netbuf_data(buf, (void**)&data, &len);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f107 020a 	add.w	r2, r7, #10
 80010f0:	f107 010c 	add.w	r1, r7, #12
 80010f4:	4618      	mov	r0, r3
 80010f6:	f008 fce1 	bl	8009abc <netbuf_data>
              while (len--)
 80010fa:	e008      	b.n	800110e <telnet_thread+0x76>
            	  telnet_byte_available(*data++, newconn);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60fa      	str	r2, [r7, #12]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff8f 	bl	800102c <telnet_byte_available>
              while (len--)
 800110e:	897b      	ldrh	r3, [r7, #10]
 8001110:	1e5a      	subs	r2, r3, #1
 8001112:	b292      	uxth	r2, r2
 8001114:	817a      	strh	r2, [r7, #10]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <telnet_thread+0x64>
          
            } 
            while (netbuf_next(buf) >= 0);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4618      	mov	r0, r3
 800111e:	f008 fd17 	bl	8009b50 <netbuf_next>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	dae0      	bge.n	80010ea <telnet_thread+0x52>
          
            netbuf_delete(buf);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4618      	mov	r0, r3
 800112c:	f008 fca6 	bl	8009a7c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f107 0210 	add.w	r2, r7, #16
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f006 ff2b 	bl	8007f94 <netconn_recv>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0d2      	beq.n	80010ea <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	4618      	mov	r0, r3
 8001148:	f007 f8a0 	bl	800828c <netconn_close>
          netconn_delete(newconn);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	4618      	mov	r0, r3
 8001150:	f006 fc98 	bl	8007a84 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8001154:	e7bc      	b.n	80010d0 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4618      	mov	r0, r3
 800115a:	f006 fc93 	bl	8007a84 <netconn_delete>
    }
  }
}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 800116e:	2304      	movs	r3, #4
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001176:	2200      	movs	r2, #0
 8001178:	4903      	ldr	r1, [pc, #12]	; (8001188 <telnet_init+0x20>)
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <telnet_init+0x24>)
 800117c:	f016 fd8a 	bl	8017c94 <sys_thread_new>
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08001099 	.word	0x08001099
 800118c:	08018dfc 	.word	0x08018dfc

08001190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001196:	e003      	b.n	80011a0 <LoopCopyDataInit>

08001198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800119a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800119c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800119e:	3104      	adds	r1, #4

080011a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a8:	d3f6      	bcc.n	8001198 <CopyDataInit>
  ldr  r2, =_sbss
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011ac:	e002      	b.n	80011b4 <LoopFillZerobss>

080011ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011b0:	f842 3b04 	str.w	r3, [r2], #4

080011b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b8:	d3f9      	bcc.n	80011ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ba:	f7ff fd69 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011be:	f016 fdad 	bl	8017d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c2:	f7ff fa17 	bl	80005f4 <main>
  bx  lr    
 80011c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011c8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80011cc:	08026d88 	.word	0x08026d88
  ldr  r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011d4:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 80011d8:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80011dc:	2000f560 	.word	0x2000f560

080011e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_Init+0x40>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_Init+0x40>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x40>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 f8fa 	bl	8001406 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff fc0e 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fb9c 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20008c64 	.word	0x20008c64

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20008c64 	.word	0x20008c64

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_Delay+0x40>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000008 	.word	0x20000008

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	; (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff4c 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142e:	f7ff ff61 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001432:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f7ff ffb1 	bl	80013a0 <NVIC_EncodePriority>
 800143e:	4602      	mov	r2, r0
 8001440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff80 	bl	800134c <__NVIC_SetPriority>
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff54 	bl	8001310 <__NVIC_EnableIRQ>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001480:	4baa      	ldr	r3, [pc, #680]	; (800172c <HAL_ETH_Init+0x2bc>)
 8001482:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e185      	b.n	80017a2 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f002 fe6e 	bl	800418c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b9e      	ldr	r3, [pc, #632]	; (8001730 <HAL_ETH_Init+0x2c0>)
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	4a9d      	ldr	r2, [pc, #628]	; (8001730 <HAL_ETH_Init+0x2c0>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	6453      	str	r3, [r2, #68]	; 0x44
 80014c0:	4b9b      	ldr	r3, [pc, #620]	; (8001730 <HAL_ETH_Init+0x2c0>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014cc:	4b99      	ldr	r3, [pc, #612]	; (8001734 <HAL_ETH_Init+0x2c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a98      	ldr	r2, [pc, #608]	; (8001734 <HAL_ETH_Init+0x2c4>)
 80014d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014d6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014d8:	4b96      	ldr	r3, [pc, #600]	; (8001734 <HAL_ETH_Init+0x2c4>)
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4994      	ldr	r1, [pc, #592]	; (8001734 <HAL_ETH_Init+0x2c4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0201 	orr.w	r2, r2, #1
 80014f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014fe:	f7ff fea7 	bl	8001250 <HAL_GetTick>
 8001502:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001504:	e011      	b.n	800152a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001506:	f7ff fea3 	bl	8001250 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001514:	d909      	bls.n	800152a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e13b      	b.n	80017a2 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e4      	bne.n	8001506 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f023 031c 	bic.w	r3, r3, #28
 800154a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800154c:	f001 ff40 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8001550:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4a78      	ldr	r2, [pc, #480]	; (8001738 <HAL_ETH_Init+0x2c8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d908      	bls.n	800156c <HAL_ETH_Init+0xfc>
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4a77      	ldr	r2, [pc, #476]	; (800173c <HAL_ETH_Init+0x2cc>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d804      	bhi.n	800156c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e027      	b.n	80015bc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	4a73      	ldr	r2, [pc, #460]	; (800173c <HAL_ETH_Init+0x2cc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d908      	bls.n	8001586 <HAL_ETH_Init+0x116>
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	4a72      	ldr	r2, [pc, #456]	; (8001740 <HAL_ETH_Init+0x2d0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d804      	bhi.n	8001586 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f043 030c 	orr.w	r3, r3, #12
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	e01a      	b.n	80015bc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4a6d      	ldr	r2, [pc, #436]	; (8001740 <HAL_ETH_Init+0x2d0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d903      	bls.n	8001596 <HAL_ETH_Init+0x126>
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4a6c      	ldr	r2, [pc, #432]	; (8001744 <HAL_ETH_Init+0x2d4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d911      	bls.n	80015ba <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4a6a      	ldr	r2, [pc, #424]	; (8001744 <HAL_ETH_Init+0x2d4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d908      	bls.n	80015b0 <HAL_ETH_Init+0x140>
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4a69      	ldr	r2, [pc, #420]	; (8001748 <HAL_ETH_Init+0x2d8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d804      	bhi.n	80015b0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e005      	b.n	80015bc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	e000      	b.n	80015bc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80015ba:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80015c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c8:	2100      	movs	r1, #0
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fc19 	bl	8001e02 <HAL_ETH_WritePHYRegister>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80015da:	6939      	ldr	r1, [r7, #16]
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fdcf 	bl	8002180 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0d9      	b.n	80017a2 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80015ee:	20ff      	movs	r0, #255	; 0xff
 80015f0:	f7ff fe3a 	bl	8001268 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a7 	beq.w	800174c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015fe:	f7ff fe27 	bl	8001250 <HAL_GetTick>
 8001602:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	461a      	mov	r2, r3
 800160a:	2101      	movs	r1, #1
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fb90 	bl	8001d32 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001612:	f7ff fe1d 	bl	8001250 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d90f      	bls.n	8001644 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fda8 	bl	8002180 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e0ae      	b.n	80017a2 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0da      	beq.n	8001604 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800164e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001652:	2100      	movs	r1, #0
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fbd4 	bl	8001e02 <HAL_ETH_WritePHYRegister>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00b      	beq.n	8001678 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001664:	6939      	ldr	r1, [r7, #16]
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fd8a 	bl	8002180 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001674:	2301      	movs	r3, #1
 8001676:	e094      	b.n	80017a2 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff fdea 	bl	8001250 <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	461a      	mov	r2, r3
 8001684:	2101      	movs	r1, #1
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fb53 	bl	8001d32 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800168c:	f7ff fde0 	bl	8001250 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d90f      	bls.n	80016be <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016a2:	6939      	ldr	r1, [r7, #16]
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 fd6b 	bl	8002180 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e071      	b.n	80017a2 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0da      	beq.n	800167e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	461a      	mov	r2, r3
 80016ce:	211f      	movs	r1, #31
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fb2e 	bl	8001d32 <HAL_ETH_ReadPHYRegister>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00b      	beq.n	80016f4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016e0:	6939      	ldr	r1, [r7, #16]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fd4c 	bl	8002180 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016f0:	2301      	movs	r3, #1
 80016f2:	e056      	b.n	80017a2 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	e002      	b.n	800170e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	e037      	b.n	8001790 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	e032      	b.n	8001790 <HAL_ETH_Init+0x320>
 800172a:	bf00      	nop
 800172c:	03938700 	.word	0x03938700
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	01312cff 	.word	0x01312cff
 800173c:	02160ebf 	.word	0x02160ebf
 8001740:	039386ff 	.word	0x039386ff
 8001744:	05f5e0ff 	.word	0x05f5e0ff
 8001748:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800175c:	4313      	orrs	r3, r2
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fb4c 	bl	8001e02 <HAL_ETH_WritePHYRegister>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00b      	beq.n	8001788 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fd02 	bl	8002180 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00c      	b.n	80017a2 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001788:	f640 70ff 	movw	r0, #4095	; 0xfff
 800178c:	f7ff fd6c 	bl	8001268 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001790:	6939      	ldr	r1, [r7, #16]
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fcf4 	bl	8002180 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop

080017ac <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ETH_DMATxDescListInit+0x20>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e052      	b.n	8001872 <HAL_ETH_DMATxDescListInit+0xc6>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e030      	b.n	800184a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017f8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	461a      	mov	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d105      	bne.n	8001822 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	d208      	bcs.n	800183e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	4413      	add	r3, r2
 8001836:	461a      	mov	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	e002      	b.n	8001844 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3ca      	bcc.n	80017e8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185c:	3310      	adds	r3, #16
 800185e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800187e:	b480      	push	{r7}
 8001880:	b087      	sub	sp, #28
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_ETH_DMARxDescListInit+0x20>
 800189a:	2302      	movs	r3, #2
 800189c:	e056      	b.n	800194c <HAL_ETH_DMARxDescListInit+0xce>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e034      	b.n	8001924 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	4413      	add	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018ca:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018d2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	461a      	mov	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	429a      	cmp	r2, r3
 8001904:	d208      	bcs.n	8001918 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	015b      	lsls	r3, r3, #5
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	4413      	add	r3, r2
 8001910:	461a      	mov	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	e002      	b.n	800191e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d3c6      	bcc.n	80018ba <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001936:	330c      	adds	r3, #12
 8001938:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_ETH_TransmitFrame+0x24>
 8001978:	2302      	movs	r3, #2
 800197a:	e0cd      	b.n	8001b18 <HAL_ETH_TransmitFrame+0x1c0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0b8      	b.n	8001b18 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da09      	bge.n	80019c4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2212      	movs	r2, #18
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0a9      	b.n	8001b18 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d915      	bls.n	80019fa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	4a54      	ldr	r2, [pc, #336]	; (8001b24 <HAL_ETH_TransmitFrame+0x1cc>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <HAL_ETH_TransmitFrame+0x1cc>)
 80019de:	fba3 1302 	umull	r1, r3, r3, r2
 80019e2:	0a9b      	lsrs	r3, r3, #10
 80019e4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e001      	b.n	80019fe <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80019fa:	2301      	movs	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d11c      	bne.n	8001a3e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001a12:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a1e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a2e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a3c:	e04b      	b.n	8001ad6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	e044      	b.n	8001ace <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a52:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a68:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a72:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d116      	bne.n	8001aac <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a8c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a92:	fb02 f203 	mul.w	r2, r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a9e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001aaa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aba:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	3301      	adds	r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3b6      	bcc.n	8001a44 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ade:	3314      	adds	r3, #20
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00d      	beq.n	8001b06 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af2:	3314      	adds	r3, #20
 8001af4:	2204      	movs	r2, #4
 8001af6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b00:	3304      	adds	r3, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	ac02b00b 	.word	0xac02b00b
 8001b28:	fffffa0c 	.word	0xfffffa0c

08001b2c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e074      	b.n	8001c30 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2202      	movs	r2, #2
 8001b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b56:	e05a      	b.n	8001c0e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b6c:	d10d      	bne.n	8001b8a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
 8001b88:	e041      	b.n	8001c0e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
 8001bae:	e02e      	b.n	8001c0e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d103      	bne.n	8001bd2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bde:	1f1a      	subs	r2, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e010      	b.n	8001c30 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db02      	blt.n	8001c1e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d99c      	bls.n	8001b58 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	3314      	adds	r3, #20
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d112      	bne.n	8001c7e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f002 fb65 	bl	8004328 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c66:	3314      	adds	r3, #20
 8001c68:	2240      	movs	r2, #64	; 0x40
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c7c:	e01b      	b.n	8001cb6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c86:	3314      	adds	r3, #20
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d111      	bne.n	8001cb6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f839 	bl	8001d0a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	3314      	adds	r3, #20
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbe:	3314      	adds	r3, #20
 8001cc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cc4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	3314      	adds	r3, #20
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cda:	d112      	bne.n	8001d02 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f81e 	bl	8001d1e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cea:	3314      	adds	r3, #20
 8001cec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cf0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b82      	cmp	r3, #130	; 0x82
 8001d52:	d101      	bne.n	8001d58 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d54:	2302      	movs	r3, #2
 8001d56:	e050      	b.n	8001dfa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2282      	movs	r2, #130	; 0x82
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 031c 	and.w	r3, r3, #28
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8a1b      	ldrh	r3, [r3, #16]
 8001d74:	02db      	lsls	r3, r3, #11
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f023 0302 	bic.w	r3, r3, #2
 8001d92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001da4:	f7ff fa54 	bl	8001250 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001daa:	e015      	b.n	8001dd8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001dac:	f7ff fa50 	bl	8001250 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d309      	bcc.n	8001dd0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e014      	b.n	8001dfa <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e4      	bne.n	8001dac <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b42      	cmp	r3, #66	; 0x42
 8001e22:	d101      	bne.n	8001e28 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
 8001e26:	e04e      	b.n	8001ec6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2242      	movs	r2, #66	; 0x42
 8001e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 031c 	and.w	r3, r3, #28
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8a1b      	ldrh	r3, [r3, #16]
 8001e44:	02db      	lsls	r3, r3, #11
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e4e:	897b      	ldrh	r3, [r7, #10]
 8001e50:	019b      	lsls	r3, r3, #6
 8001e52:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f043 0302 	orr.w	r3, r3, #2
 8001e62:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7e:	f7ff f9e7 	bl	8001250 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e84:	e015      	b.n	8001eb2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e86:	f7ff f9e3 	bl	8001250 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d309      	bcc.n	8001eaa <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e00d      	b.n	8001ec6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e4      	bne.n	8001e86 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ETH_Start+0x16>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e01f      	b.n	8001f24 <HAL_ETH_Start+0x56>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fb45 	bl	8002584 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fb7c 	bl	80025f8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fc13 	bl	800272c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fbb0 	bl	800266c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fbdd 	bl	80026cc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_ETH_Stop+0x16>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e01f      	b.n	8001f82 <HAL_ETH_Stop+0x56>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fba2 	bl	800269c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fbcf 	bl	80026fc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fb67 	bl	8002632 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fbe1 	bl	800272c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fb27 	bl	80025be <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ETH_ConfigMAC+0x1c>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0e4      	b.n	8002172 <HAL_ETH_ConfigMAC+0x1e6>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80b1 	beq.w	8002122 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_ETH_ConfigMAC+0x1f0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fd8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001fde:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001fe4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001fea:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ff0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ff6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ffc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002002:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002008:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800200e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002014:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800201a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff f918 	bl	8001268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002048:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800204e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002054:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800205a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002060:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002066:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002072:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002074:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff f8f2 	bl	8001268 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002094:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800209e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020ae:	4013      	ands	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020bc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80020c2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80020c8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80020ce:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80020d4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff f8bb 	bl	8001268 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002112:	2001      	movs	r0, #1
 8002114:	f7ff f8a8 	bl	8001268 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	61da      	str	r2, [r3, #28]
 8002120:	e01e      	b.n	8002160 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002130:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002152:	2001      	movs	r0, #1
 8002154:	f7ff f888 	bl	8001268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	ff20810f 	.word	0xff20810f

08002180 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0b0      	sub	sp, #192	; 0xc0
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800219c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021ae:	2300      	movs	r3, #0
 80021b0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80021c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ca:	663b      	str	r3, [r7, #96]	; 0x60
 80021cc:	e001      	b.n	80021d2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80021d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021dc:	2300      	movs	r3, #0
 80021de:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80021ec:	2340      	movs	r3, #64	; 0x40
 80021ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002254:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002258:	4bac      	ldr	r3, [pc, #688]	; (800250c <ETH_MACDMAConfig+0x38c>)
 800225a:	4013      	ands	r3, r2
 800225c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002260:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002264:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002268:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800226a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800226c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002272:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002276:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800227a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002280:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002284:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002288:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800228a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800228c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800228e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002290:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002294:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002296:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b4:	2001      	movs	r0, #1
 80022b6:	f7fe ffd7 	bl	8001268 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80022c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022c8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80022ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80022cc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80022ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80022d2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80022d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80022d8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80022da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80022de:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80022e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80022e4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80022e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80022f0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022f2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022fe:	2001      	movs	r0, #1
 8002300:	f7fe ffb2 	bl	8001268 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800230c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002316:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002320:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800232c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002330:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002334:	4013      	ands	r3, r2
 8002336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800233a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800233e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002340:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002344:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800234a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800234c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002350:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002356:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800235c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800235e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002370:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800237c:	2001      	movs	r0, #1
 800237e:	f7fe ff73 	bl	8001268 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800238a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800238c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002390:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7fe ff5e 	bl	8001268 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023be:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80023c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023c8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80023da:	2304      	movs	r3, #4
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80023de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80023e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023fe:	2300      	movs	r3, #0
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240a:	3318      	adds	r3, #24
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002416:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <ETH_MACDMAConfig+0x390>)
 8002418:	4013      	ands	r3, r2
 800241a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800241e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002420:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002422:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002424:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002426:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002428:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800242a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800242c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800242e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002430:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002432:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002434:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002436:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800243a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800243e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002440:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	3318      	adds	r3, #24
 8002454:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002458:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	3318      	adds	r3, #24
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800246a:	2001      	movs	r0, #1
 800246c:	f7fe fefc 	bl	8001268 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002478:	3318      	adds	r3, #24
 800247a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800247e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002484:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002488:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800248c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800248e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002490:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002496:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800249a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f7fe fed5 	bl	8001268 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ca:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10f      	bne.n	80024f4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024dc:	331c      	adds	r3, #28
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f0:	331c      	adds	r3, #28
 80024f2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	461a      	mov	r2, r3
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f809 	bl	8002514 <ETH_MACAddressConfig>
}
 8002502:	bf00      	nop
 8002504:	37c0      	adds	r7, #192	; 0xc0
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	ff20810f 	.word	0xff20810f
 8002510:	f8de3f23 	.word	0xf8de3f23

08002514 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3305      	adds	r3, #5
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	3204      	adds	r2, #4
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <ETH_MACAddressConfig+0x68>)
 8002536:	4413      	add	r3, r2
 8002538:	461a      	mov	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3303      	adds	r3, #3
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	061a      	lsls	r2, r3, #24
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3302      	adds	r3, #2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3301      	adds	r3, #1
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	4313      	orrs	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <ETH_MACAddressConfig+0x6c>)
 8002566:	4413      	add	r3, r2
 8002568:	461a      	mov	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	6013      	str	r3, [r2, #0]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40028040 	.word	0x40028040
 8002580:	40028044 	.word	0x40028044

08002584 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0208 	orr.w	r2, r2, #8
 800259e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f000 f8e9 	bl	8002780 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0208 	bic.w	r2, r2, #8
 80025d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f000 f8cc 	bl	8002780 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0204 	orr.w	r2, r2, #4
 8002612:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800261c:	2001      	movs	r0, #1
 800261e:	f000 f8af 	bl	8002780 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	601a      	str	r2, [r3, #0]
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0204 	bic.w	r2, r2, #4
 800264c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002656:	2001      	movs	r0, #1
 8002658:	f000 f892 	bl	8002780 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267c:	3318      	adds	r3, #24
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268c:	3318      	adds	r3, #24
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ac:	3318      	adds	r3, #24
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026bc:	3318      	adds	r3, #24
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026dc:	3318      	adds	r3, #24
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0202 	orr.w	r2, r2, #2
 80026e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ec:	3318      	adds	r3, #24
 80026ee:	601a      	str	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270c:	3318      	adds	r3, #24
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0202 	bic.w	r2, r2, #2
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	3318      	adds	r3, #24
 800271e:	601a      	str	r2, [r3, #0]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002740:	3318      	adds	r3, #24
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800274c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002750:	3318      	adds	r3, #24
 8002752:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275c:	3318      	adds	r3, #24
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002762:	2001      	movs	r0, #1
 8002764:	f000 f80c 	bl	8002780 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002772:	3318      	adds	r3, #24
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <ETH_Delay+0x34>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <ETH_Delay+0x38>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a5b      	lsrs	r3, r3, #9
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800279c:	bf00      	nop
  } 
  while (Delay --);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	60fa      	str	r2, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f9      	bne.n	800279c <ETH_Delay+0x1c>
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	20000000 	.word	0x20000000
 80027b8:	10624dd3 	.word	0x10624dd3

080027bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e177      	b.n	8002ac8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	f040 8166 	bne.w	8002ac2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d00b      	beq.n	8002816 <HAL_GPIO_Init+0x5a>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800280a:	2b11      	cmp	r3, #17
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b12      	cmp	r3, #18
 8002814:	d130      	bne.n	8002878 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 0201 	and.w	r2, r3, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0xfc>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d123      	bne.n	8002900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	220f      	movs	r2, #15
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0203 	and.w	r2, r3, #3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80c0 	beq.w	8002ac2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_GPIO_Init+0x320>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4a64      	ldr	r2, [pc, #400]	; (8002adc <HAL_GPIO_Init+0x320>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	4b62      	ldr	r3, [pc, #392]	; (8002adc <HAL_GPIO_Init+0x320>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295e:	4a60      	ldr	r2, [pc, #384]	; (8002ae0 <HAL_GPIO_Init+0x324>)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3302      	adds	r3, #2
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_GPIO_Init+0x328>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d037      	beq.n	80029fa <HAL_GPIO_Init+0x23e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a56      	ldr	r2, [pc, #344]	; (8002ae8 <HAL_GPIO_Init+0x32c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d031      	beq.n	80029f6 <HAL_GPIO_Init+0x23a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a55      	ldr	r2, [pc, #340]	; (8002aec <HAL_GPIO_Init+0x330>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d02b      	beq.n	80029f2 <HAL_GPIO_Init+0x236>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_GPIO_Init+0x334>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d025      	beq.n	80029ee <HAL_GPIO_Init+0x232>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a53      	ldr	r2, [pc, #332]	; (8002af4 <HAL_GPIO_Init+0x338>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01f      	beq.n	80029ea <HAL_GPIO_Init+0x22e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_GPIO_Init+0x33c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d019      	beq.n	80029e6 <HAL_GPIO_Init+0x22a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a51      	ldr	r2, [pc, #324]	; (8002afc <HAL_GPIO_Init+0x340>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_GPIO_Init+0x226>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a50      	ldr	r2, [pc, #320]	; (8002b00 <HAL_GPIO_Init+0x344>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00d      	beq.n	80029de <HAL_GPIO_Init+0x222>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <HAL_GPIO_Init+0x348>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <HAL_GPIO_Init+0x21e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4e      	ldr	r2, [pc, #312]	; (8002b08 <HAL_GPIO_Init+0x34c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_GPIO_Init+0x21a>
 80029d2:	2309      	movs	r3, #9
 80029d4:	e012      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029d6:	230a      	movs	r3, #10
 80029d8:	e010      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029da:	2308      	movs	r3, #8
 80029dc:	e00e      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029de:	2307      	movs	r3, #7
 80029e0:	e00c      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029e2:	2306      	movs	r3, #6
 80029e4:	e00a      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029e6:	2305      	movs	r3, #5
 80029e8:	e008      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029ea:	2304      	movs	r3, #4
 80029ec:	e006      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029ee:	2303      	movs	r3, #3
 80029f0:	e004      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e002      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <HAL_GPIO_Init+0x240>
 80029fa:	2300      	movs	r3, #0
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	f002 0203 	and.w	r2, r2, #3
 8002a02:	0092      	lsls	r2, r2, #2
 8002a04:	4093      	lsls	r3, r2
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a0c:	4934      	ldr	r1, [pc, #208]	; (8002ae0 <HAL_GPIO_Init+0x324>)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3302      	adds	r3, #2
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1a:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_GPIO_Init+0x350>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3e:	4a33      	ldr	r2, [pc, #204]	; (8002b0c <HAL_GPIO_Init+0x350>)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a44:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_GPIO_Init+0x350>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a68:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_GPIO_Init+0x350>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6e:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_GPIO_Init+0x350>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a92:	4a1e      	ldr	r2, [pc, #120]	; (8002b0c <HAL_GPIO_Init+0x350>)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_GPIO_Init+0x350>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002abc:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <HAL_GPIO_Init+0x350>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b0f      	cmp	r3, #15
 8002acc:	f67f ae84 	bls.w	80027d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3724      	adds	r7, #36	; 0x24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40021400 	.word	0x40021400
 8002afc:	40021800 	.word	0x40021800
 8002b00:	40021c00 	.word	0x40021c00
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40022400 	.word	0x40022400
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e001      	b.n	8002b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b5c:	e003      	b.n	8002b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e25b      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d075      	beq.n	8002c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b92:	4ba3      	ldr	r3, [pc, #652]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4ba0      	ldr	r3, [pc, #640]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d112      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002baa:	4b9d      	ldr	r3, [pc, #628]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	4b99      	ldr	r3, [pc, #612]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d05b      	beq.n	8002c7c <HAL_RCC_OscConfig+0x108>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d157      	bne.n	8002c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e236      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d106      	bne.n	8002be8 <HAL_RCC_OscConfig+0x74>
 8002bda:	4b91      	ldr	r3, [pc, #580]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a90      	ldr	r2, [pc, #576]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xb0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x98>
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a8a      	ldr	r2, [pc, #552]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a87      	ldr	r2, [pc, #540]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xb0>
 8002c0c:	4b84      	ldr	r3, [pc, #528]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a83      	ldr	r2, [pc, #524]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b81      	ldr	r3, [pc, #516]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a80      	ldr	r2, [pc, #512]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fb10 	bl	8001250 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fb0c 	bl	8001250 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1fb      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b76      	ldr	r3, [pc, #472]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fafc 	bl	8001250 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe faf8 	bl	8001250 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1e7      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	4b6c      	ldr	r3, [pc, #432]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0xe8>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8a:	4b65      	ldr	r3, [pc, #404]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b62      	ldr	r3, [pc, #392]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d11c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b5f      	ldr	r3, [pc, #380]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	4b5c      	ldr	r3, [pc, #368]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x152>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e1bb      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	4b56      	ldr	r3, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4952      	ldr	r1, [pc, #328]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	e03a      	b.n	8002d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <HAL_RCC_OscConfig+0x2b0>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe fab1 	bl	8001250 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7fe faad 	bl	8001250 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e19c      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4940      	ldr	r1, [pc, #256]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
 8002d24:	e015      	b.n	8002d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_OscConfig+0x2b0>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fa90 	bl	8001250 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fe fa8c 	bl	8001250 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e17b      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d030      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_RCC_OscConfig+0x2b4>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6c:	f7fe fa70 	bl	8001250 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d74:	f7fe fa6c 	bl	8001250 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e15b      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x200>
 8002d92:	e015      	b.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCC_OscConfig+0x2b4>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fa59 	bl	8001250 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da2:	f7fe fa55 	bl	8001250 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e144      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a0 	beq.w	8002f0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x2b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d121      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_RCC_OscConfig+0x2b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <HAL_RCC_OscConfig+0x2b8>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fa1b 	bl	8001250 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	e011      	b.n	8002e42 <HAL_RCC_OscConfig+0x2ce>
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
 8002e2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7fe fa0e 	bl	8001250 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0fd      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b81      	ldr	r3, [pc, #516]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d106      	bne.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
 8002e56:	4b7d      	ldr	r3, [pc, #500]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a7c      	ldr	r2, [pc, #496]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	e01c      	b.n	8002e9e <HAL_RCC_OscConfig+0x32a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x312>
 8002e6c:	4b77      	ldr	r3, [pc, #476]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a76      	ldr	r2, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
 8002e78:	4b74      	ldr	r3, [pc, #464]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a73      	ldr	r2, [pc, #460]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	e00b      	b.n	8002e9e <HAL_RCC_OscConfig+0x32a>
 8002e86:	4b71      	ldr	r3, [pc, #452]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a70      	ldr	r2, [pc, #448]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	4b6e      	ldr	r3, [pc, #440]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a6d      	ldr	r2, [pc, #436]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d015      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f9d3 	bl	8001250 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe f9cf 	bl	8001250 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0bc      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ee      	beq.n	8002eae <HAL_RCC_OscConfig+0x33a>
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe f9bd 	bl	8001250 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe f9b9 	bl	8001250 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0a6      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	4b56      	ldr	r3, [pc, #344]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b52      	ldr	r3, [pc, #328]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a51      	ldr	r2, [pc, #324]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8092 	beq.w	800303c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f18:	4b4c      	ldr	r3, [pc, #304]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d05c      	beq.n	8002fde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d141      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b48      	ldr	r3, [pc, #288]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe f98d 	bl	8001250 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe f989 	bl	8001250 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e078      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	019b      	lsls	r3, r3, #6
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	3b01      	subs	r3, #1
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	4933      	ldr	r1, [pc, #204]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f82:	4b33      	ldr	r3, [pc, #204]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe f962 	bl	8001250 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe f95e 	bl	8001250 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04d      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x41c>
 8002fae:	e045      	b.n	800303c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe f94b 	bl	8001250 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe f947 	bl	8001250 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e036      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x44a>
 8002fdc:	e02e      	b.n	800303c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e029      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_RCC_OscConfig+0x4d8>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d115      	bne.n	8003038 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d10d      	bne.n	8003038 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d106      	bne.n	8003038 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40007000 	.word	0x40007000
 800304c:	40023800 	.word	0x40023800
 8003050:	42470060 	.word	0x42470060

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90c      	bls.n	8003090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a58      	ldr	r2, [pc, #352]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d044      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	2b03      	cmp	r3, #3
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e067      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4934      	ldr	r1, [pc, #208]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fe f884 	bl	8001250 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fe f880 	bl	8001250 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20c      	bcs.n	800319c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4601      	mov	r1, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	fa21 f303 	lsr.w	r3, r1, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd fc1a 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	0801c940 	.word	0x0801c940
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	2300      	movs	r3, #0
 8003230:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b04      	cmp	r3, #4
 8003240:	d007      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x32>
 8003242:	2b08      	cmp	r3, #8
 8003244:	d008      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x38>
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 80b4 	bne.w	80033b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b5e      	ldr	r3, [pc, #376]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800324e:	60bb      	str	r3, [r7, #8]
       break;
 8003250:	e0b3      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003252:	4b5e      	ldr	r3, [pc, #376]	; (80033cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003254:	60bb      	str	r3, [r7, #8]
      break;
 8003256:	e0b0      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003258:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003260:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003262:	4b58      	ldr	r3, [pc, #352]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04a      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	f04f 0400 	mov.w	r4, #0
 8003278:	f240 11ff 	movw	r1, #511	; 0x1ff
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	ea03 0501 	and.w	r5, r3, r1
 8003284:	ea04 0602 	and.w	r6, r4, r2
 8003288:	4629      	mov	r1, r5
 800328a:	4632      	mov	r2, r6
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	f04f 0400 	mov.w	r4, #0
 8003294:	0154      	lsls	r4, r2, #5
 8003296:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800329a:	014b      	lsls	r3, r1, #5
 800329c:	4619      	mov	r1, r3
 800329e:	4622      	mov	r2, r4
 80032a0:	1b49      	subs	r1, r1, r5
 80032a2:	eb62 0206 	sbc.w	r2, r2, r6
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f04f 0400 	mov.w	r4, #0
 80032ae:	0194      	lsls	r4, r2, #6
 80032b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032b4:	018b      	lsls	r3, r1, #6
 80032b6:	1a5b      	subs	r3, r3, r1
 80032b8:	eb64 0402 	sbc.w	r4, r4, r2
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	00e2      	lsls	r2, r4, #3
 80032c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032ca:	00d9      	lsls	r1, r3, #3
 80032cc:	460b      	mov	r3, r1
 80032ce:	4614      	mov	r4, r2
 80032d0:	195b      	adds	r3, r3, r5
 80032d2:	eb44 0406 	adc.w	r4, r4, r6
 80032d6:	f04f 0100 	mov.w	r1, #0
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	0262      	lsls	r2, r4, #9
 80032e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032e4:	0259      	lsls	r1, r3, #9
 80032e6:	460b      	mov	r3, r1
 80032e8:	4614      	mov	r4, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	4621      	mov	r1, r4
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f04f 0400 	mov.w	r4, #0
 80032f4:	461a      	mov	r2, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	f7fc ffe2 	bl	80002c0 <__aeabi_uldivmod>
 80032fc:	4603      	mov	r3, r0
 80032fe:	460c      	mov	r4, r1
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e049      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003304:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	f04f 0400 	mov.w	r4, #0
 800330e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	ea03 0501 	and.w	r5, r3, r1
 800331a:	ea04 0602 	and.w	r6, r4, r2
 800331e:	4629      	mov	r1, r5
 8003320:	4632      	mov	r2, r6
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f04f 0400 	mov.w	r4, #0
 800332a:	0154      	lsls	r4, r2, #5
 800332c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003330:	014b      	lsls	r3, r1, #5
 8003332:	4619      	mov	r1, r3
 8003334:	4622      	mov	r2, r4
 8003336:	1b49      	subs	r1, r1, r5
 8003338:	eb62 0206 	sbc.w	r2, r2, r6
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f04f 0400 	mov.w	r4, #0
 8003344:	0194      	lsls	r4, r2, #6
 8003346:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800334a:	018b      	lsls	r3, r1, #6
 800334c:	1a5b      	subs	r3, r3, r1
 800334e:	eb64 0402 	sbc.w	r4, r4, r2
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	00e2      	lsls	r2, r4, #3
 800335c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003360:	00d9      	lsls	r1, r3, #3
 8003362:	460b      	mov	r3, r1
 8003364:	4614      	mov	r4, r2
 8003366:	195b      	adds	r3, r3, r5
 8003368:	eb44 0406 	adc.w	r4, r4, r6
 800336c:	f04f 0100 	mov.w	r1, #0
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	02a2      	lsls	r2, r4, #10
 8003376:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800337a:	0299      	lsls	r1, r3, #10
 800337c:	460b      	mov	r3, r1
 800337e:	4614      	mov	r4, r2
 8003380:	4618      	mov	r0, r3
 8003382:	4621      	mov	r1, r4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f04f 0400 	mov.w	r4, #0
 800338a:	461a      	mov	r2, r3
 800338c:	4623      	mov	r3, r4
 800338e:	f7fc ff97 	bl	80002c0 <__aeabi_uldivmod>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	3301      	adds	r3, #1
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	60bb      	str	r3, [r7, #8]
      break;
 80033b2:	e002      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033b6:	60bb      	str	r3, [r7, #8]
      break;
 80033b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ba:	68bb      	ldr	r3, [r7, #8]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c4:	40023800 	.word	0x40023800
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	007a1200 	.word	0x007a1200

080033d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000000 	.word	0x20000000

080033e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80033f0:	4601      	mov	r1, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4a03      	ldr	r2, [pc, #12]	; (800340c <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	0801c950 	.word	0x0801c950

08003410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003414:	f7ff ffdc 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8003418:	4601      	mov	r1, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0b5b      	lsrs	r3, r3, #13
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	0801c950 	.word	0x0801c950

08003438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	220f      	movs	r2, #15
 8003446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_RCC_GetClockConfig+0x5c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0203 	and.w	r2, r3, #3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_RCC_GetClockConfig+0x5c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCC_GetClockConfig+0x5c>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCC_GetClockConfig+0x5c>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	08db      	lsrs	r3, r3, #3
 8003472:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800347a:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_RCC_GetClockConfig+0x60>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	601a      	str	r2, [r3, #0]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	40023c00 	.word	0x40023c00

0800349c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e01d      	b.n	80034ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f815 	bl	80034f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f000 f968 	bl	80037b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b06      	cmp	r3, #6
 800352e:	d007      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b02      	cmp	r3, #2
 8003562:	d122      	bne.n	80035aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d11b      	bne.n	80035aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f06f 0202 	mvn.w	r2, #2
 800357a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8ee 	bl	8003772 <HAL_TIM_IC_CaptureCallback>
 8003596:	e005      	b.n	80035a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8e0 	bl	800375e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f8f1 	bl	8003786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d122      	bne.n	80035fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d11b      	bne.n	80035fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0204 	mvn.w	r2, #4
 80035ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f8c4 	bl	8003772 <HAL_TIM_IC_CaptureCallback>
 80035ea:	e005      	b.n	80035f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8b6 	bl	800375e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8c7 	bl	8003786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d122      	bne.n	8003652 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b08      	cmp	r3, #8
 8003618:	d11b      	bne.n	8003652 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f06f 0208 	mvn.w	r2, #8
 8003622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f89a 	bl	8003772 <HAL_TIM_IC_CaptureCallback>
 800363e:	e005      	b.n	800364c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f88c 	bl	800375e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f89d 	bl	8003786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b10      	cmp	r3, #16
 800365e:	d122      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b10      	cmp	r3, #16
 800366c:	d11b      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f06f 0210 	mvn.w	r2, #16
 8003676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2208      	movs	r2, #8
 800367c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f870 	bl	8003772 <HAL_TIM_IC_CaptureCallback>
 8003692:	e005      	b.n	80036a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f862 	bl	800375e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f873 	bl	8003786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10e      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f06f 0201 	mvn.w	r2, #1
 80036ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7fd f927 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036dc:	2b80      	cmp	r3, #128	; 0x80
 80036de:	d10e      	bne.n	80036fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d107      	bne.n	80036fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f903 	bl	8003904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d10e      	bne.n	800372a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d107      	bne.n	800372a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f838 	bl	800379a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b20      	cmp	r3, #32
 8003736:	d10e      	bne.n	8003756 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b20      	cmp	r3, #32
 8003744:	d107      	bne.n	8003756 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f06f 0220 	mvn.w	r2, #32
 800374e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8cd 	bl	80038f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a40      	ldr	r2, [pc, #256]	; (80038c4 <TIM_Base_SetConfig+0x114>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d013      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d00f      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <TIM_Base_SetConfig+0x118>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a3c      	ldr	r2, [pc, #240]	; (80038cc <TIM_Base_SetConfig+0x11c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <TIM_Base_SetConfig+0x120>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a3a      	ldr	r2, [pc, #232]	; (80038d4 <TIM_Base_SetConfig+0x124>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d108      	bne.n	8003802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a2f      	ldr	r2, [pc, #188]	; (80038c4 <TIM_Base_SetConfig+0x114>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003810:	d027      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <TIM_Base_SetConfig+0x118>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d023      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <TIM_Base_SetConfig+0x11c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01f      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <TIM_Base_SetConfig+0x120>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <TIM_Base_SetConfig+0x124>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d017      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <TIM_Base_SetConfig+0x128>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a27      	ldr	r2, [pc, #156]	; (80038dc <TIM_Base_SetConfig+0x12c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00f      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <TIM_Base_SetConfig+0x130>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <TIM_Base_SetConfig+0x134>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <TIM_Base_SetConfig+0x138>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a23      	ldr	r2, [pc, #140]	; (80038ec <TIM_Base_SetConfig+0x13c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <TIM_Base_SetConfig+0x114>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_Base_SetConfig+0xf8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a0c      	ldr	r2, [pc, #48]	; (80038d4 <TIM_Base_SetConfig+0x124>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d103      	bne.n	80038b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	615a      	str	r2, [r3, #20]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800
 80038e4:	40001800 	.word	0x40001800
 80038e8:	40001c00 	.word	0x40001c00
 80038ec:	40002000 	.word	0x40002000

080038f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e03f      	b.n	80039aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd f830 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f829 	bl	80039b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039f6:	f023 030c 	bic.w	r3, r3, #12
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a22:	f040 818b 	bne.w	8003d3c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4ac1      	ldr	r2, [pc, #772]	; (8003d30 <UART_SetConfig+0x37c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d005      	beq.n	8003a3c <UART_SetConfig+0x88>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4abf      	ldr	r2, [pc, #764]	; (8003d34 <UART_SetConfig+0x380>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	f040 80bd 	bne.w	8003bb6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7ff fce8 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 8003a40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	461d      	mov	r5, r3
 8003a46:	f04f 0600 	mov.w	r6, #0
 8003a4a:	46a8      	mov	r8, r5
 8003a4c:	46b1      	mov	r9, r6
 8003a4e:	eb18 0308 	adds.w	r3, r8, r8
 8003a52:	eb49 0409 	adc.w	r4, r9, r9
 8003a56:	4698      	mov	r8, r3
 8003a58:	46a1      	mov	r9, r4
 8003a5a:	eb18 0805 	adds.w	r8, r8, r5
 8003a5e:	eb49 0906 	adc.w	r9, r9, r6
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a76:	4688      	mov	r8, r1
 8003a78:	4691      	mov	r9, r2
 8003a7a:	eb18 0005 	adds.w	r0, r8, r5
 8003a7e:	eb49 0106 	adc.w	r1, r9, r6
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	461d      	mov	r5, r3
 8003a88:	f04f 0600 	mov.w	r6, #0
 8003a8c:	196b      	adds	r3, r5, r5
 8003a8e:	eb46 0406 	adc.w	r4, r6, r6
 8003a92:	461a      	mov	r2, r3
 8003a94:	4623      	mov	r3, r4
 8003a96:	f7fc fc13 	bl	80002c0 <__aeabi_uldivmod>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4ba5      	ldr	r3, [pc, #660]	; (8003d38 <UART_SetConfig+0x384>)
 8003aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	461d      	mov	r5, r3
 8003ab0:	f04f 0600 	mov.w	r6, #0
 8003ab4:	46a9      	mov	r9, r5
 8003ab6:	46b2      	mov	sl, r6
 8003ab8:	eb19 0309 	adds.w	r3, r9, r9
 8003abc:	eb4a 040a 	adc.w	r4, sl, sl
 8003ac0:	4699      	mov	r9, r3
 8003ac2:	46a2      	mov	sl, r4
 8003ac4:	eb19 0905 	adds.w	r9, r9, r5
 8003ac8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003adc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ae0:	4689      	mov	r9, r1
 8003ae2:	4692      	mov	sl, r2
 8003ae4:	eb19 0005 	adds.w	r0, r9, r5
 8003ae8:	eb4a 0106 	adc.w	r1, sl, r6
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	461d      	mov	r5, r3
 8003af2:	f04f 0600 	mov.w	r6, #0
 8003af6:	196b      	adds	r3, r5, r5
 8003af8:	eb46 0406 	adc.w	r4, r6, r6
 8003afc:	461a      	mov	r2, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	f7fc fbde 	bl	80002c0 <__aeabi_uldivmod>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b8b      	ldr	r3, [pc, #556]	; (8003d38 <UART_SetConfig+0x384>)
 8003b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	2164      	movs	r1, #100	; 0x64
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	4a86      	ldr	r2, [pc, #536]	; (8003d38 <UART_SetConfig+0x384>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b2c:	4498      	add	r8, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	461d      	mov	r5, r3
 8003b32:	f04f 0600 	mov.w	r6, #0
 8003b36:	46a9      	mov	r9, r5
 8003b38:	46b2      	mov	sl, r6
 8003b3a:	eb19 0309 	adds.w	r3, r9, r9
 8003b3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003b42:	4699      	mov	r9, r3
 8003b44:	46a2      	mov	sl, r4
 8003b46:	eb19 0905 	adds.w	r9, r9, r5
 8003b4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b62:	4689      	mov	r9, r1
 8003b64:	4692      	mov	sl, r2
 8003b66:	eb19 0005 	adds.w	r0, r9, r5
 8003b6a:	eb4a 0106 	adc.w	r1, sl, r6
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	461d      	mov	r5, r3
 8003b74:	f04f 0600 	mov.w	r6, #0
 8003b78:	196b      	adds	r3, r5, r5
 8003b7a:	eb46 0406 	adc.w	r4, r6, r6
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	f7fc fb9d 	bl	80002c0 <__aeabi_uldivmod>
 8003b86:	4603      	mov	r3, r0
 8003b88:	460c      	mov	r4, r1
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <UART_SetConfig+0x384>)
 8003b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2164      	movs	r1, #100	; 0x64
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	3332      	adds	r3, #50	; 0x32
 8003ba0:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <UART_SetConfig+0x384>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 0207 	and.w	r2, r3, #7
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4442      	add	r2, r8
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	e26f      	b.n	8004096 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb6:	f7ff fc17 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8003bba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	461d      	mov	r5, r3
 8003bc0:	f04f 0600 	mov.w	r6, #0
 8003bc4:	46a8      	mov	r8, r5
 8003bc6:	46b1      	mov	r9, r6
 8003bc8:	eb18 0308 	adds.w	r3, r8, r8
 8003bcc:	eb49 0409 	adc.w	r4, r9, r9
 8003bd0:	4698      	mov	r8, r3
 8003bd2:	46a1      	mov	r9, r4
 8003bd4:	eb18 0805 	adds.w	r8, r8, r5
 8003bd8:	eb49 0906 	adc.w	r9, r9, r6
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003be8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bf0:	4688      	mov	r8, r1
 8003bf2:	4691      	mov	r9, r2
 8003bf4:	eb18 0005 	adds.w	r0, r8, r5
 8003bf8:	eb49 0106 	adc.w	r1, r9, r6
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	461d      	mov	r5, r3
 8003c02:	f04f 0600 	mov.w	r6, #0
 8003c06:	196b      	adds	r3, r5, r5
 8003c08:	eb46 0406 	adc.w	r4, r6, r6
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	f7fc fb56 	bl	80002c0 <__aeabi_uldivmod>
 8003c14:	4603      	mov	r3, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <UART_SetConfig+0x384>)
 8003c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	461d      	mov	r5, r3
 8003c2a:	f04f 0600 	mov.w	r6, #0
 8003c2e:	46a9      	mov	r9, r5
 8003c30:	46b2      	mov	sl, r6
 8003c32:	eb19 0309 	adds.w	r3, r9, r9
 8003c36:	eb4a 040a 	adc.w	r4, sl, sl
 8003c3a:	4699      	mov	r9, r3
 8003c3c:	46a2      	mov	sl, r4
 8003c3e:	eb19 0905 	adds.w	r9, r9, r5
 8003c42:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c5a:	4689      	mov	r9, r1
 8003c5c:	4692      	mov	sl, r2
 8003c5e:	eb19 0005 	adds.w	r0, r9, r5
 8003c62:	eb4a 0106 	adc.w	r1, sl, r6
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	f04f 0600 	mov.w	r6, #0
 8003c70:	196b      	adds	r3, r5, r5
 8003c72:	eb46 0406 	adc.w	r4, r6, r6
 8003c76:	461a      	mov	r2, r3
 8003c78:	4623      	mov	r3, r4
 8003c7a:	f7fc fb21 	bl	80002c0 <__aeabi_uldivmod>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	460c      	mov	r4, r1
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <UART_SetConfig+0x384>)
 8003c86:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2164      	movs	r1, #100	; 0x64
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	3332      	adds	r3, #50	; 0x32
 8003c98:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <UART_SetConfig+0x384>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca6:	4498      	add	r8, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	461d      	mov	r5, r3
 8003cac:	f04f 0600 	mov.w	r6, #0
 8003cb0:	46a9      	mov	r9, r5
 8003cb2:	46b2      	mov	sl, r6
 8003cb4:	eb19 0309 	adds.w	r3, r9, r9
 8003cb8:	eb4a 040a 	adc.w	r4, sl, sl
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	46a2      	mov	sl, r4
 8003cc0:	eb19 0905 	adds.w	r9, r9, r5
 8003cc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cdc:	4689      	mov	r9, r1
 8003cde:	4692      	mov	sl, r2
 8003ce0:	eb19 0005 	adds.w	r0, r9, r5
 8003ce4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	461d      	mov	r5, r3
 8003cee:	f04f 0600 	mov.w	r6, #0
 8003cf2:	196b      	adds	r3, r5, r5
 8003cf4:	eb46 0406 	adc.w	r4, r6, r6
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	f7fc fae0 	bl	80002c0 <__aeabi_uldivmod>
 8003d00:	4603      	mov	r3, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <UART_SetConfig+0x384>)
 8003d08:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <UART_SetConfig+0x384>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 0207 	and.w	r2, r3, #7
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4442      	add	r2, r8
 8003d2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d2e:	e1b2      	b.n	8004096 <UART_SetConfig+0x6e2>
 8003d30:	40011000 	.word	0x40011000
 8003d34:	40011400 	.word	0x40011400
 8003d38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4ad7      	ldr	r2, [pc, #860]	; (80040a0 <UART_SetConfig+0x6ec>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d005      	beq.n	8003d52 <UART_SetConfig+0x39e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4ad6      	ldr	r2, [pc, #856]	; (80040a4 <UART_SetConfig+0x6f0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	f040 80d1 	bne.w	8003ef4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d52:	f7ff fb5d 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 8003d56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	469a      	mov	sl, r3
 8003d5c:	f04f 0b00 	mov.w	fp, #0
 8003d60:	46d0      	mov	r8, sl
 8003d62:	46d9      	mov	r9, fp
 8003d64:	eb18 0308 	adds.w	r3, r8, r8
 8003d68:	eb49 0409 	adc.w	r4, r9, r9
 8003d6c:	4698      	mov	r8, r3
 8003d6e:	46a1      	mov	r9, r4
 8003d70:	eb18 080a 	adds.w	r8, r8, sl
 8003d74:	eb49 090b 	adc.w	r9, r9, fp
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d8c:	4688      	mov	r8, r1
 8003d8e:	4691      	mov	r9, r2
 8003d90:	eb1a 0508 	adds.w	r5, sl, r8
 8003d94:	eb4b 0609 	adc.w	r6, fp, r9
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	0094      	lsls	r4, r2, #2
 8003dac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003db0:	008b      	lsls	r3, r1, #2
 8003db2:	461a      	mov	r2, r3
 8003db4:	4623      	mov	r3, r4
 8003db6:	4628      	mov	r0, r5
 8003db8:	4631      	mov	r1, r6
 8003dba:	f7fc fa81 	bl	80002c0 <__aeabi_uldivmod>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4bb8      	ldr	r3, [pc, #736]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	469b      	mov	fp, r3
 8003dd4:	f04f 0c00 	mov.w	ip, #0
 8003dd8:	46d9      	mov	r9, fp
 8003dda:	46e2      	mov	sl, ip
 8003ddc:	eb19 0309 	adds.w	r3, r9, r9
 8003de0:	eb4a 040a 	adc.w	r4, sl, sl
 8003de4:	4699      	mov	r9, r3
 8003de6:	46a2      	mov	sl, r4
 8003de8:	eb19 090b 	adds.w	r9, r9, fp
 8003dec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e04:	4689      	mov	r9, r1
 8003e06:	4692      	mov	sl, r2
 8003e08:	eb1b 0509 	adds.w	r5, fp, r9
 8003e0c:	eb4c 060a 	adc.w	r6, ip, sl
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4619      	mov	r1, r3
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	f04f 0400 	mov.w	r4, #0
 8003e22:	0094      	lsls	r4, r2, #2
 8003e24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e28:	008b      	lsls	r3, r1, #2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	4628      	mov	r0, r5
 8003e30:	4631      	mov	r1, r6
 8003e32:	f7fc fa45 	bl	80002c0 <__aeabi_uldivmod>
 8003e36:	4603      	mov	r3, r0
 8003e38:	460c      	mov	r4, r1
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b9a      	ldr	r3, [pc, #616]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2164      	movs	r1, #100	; 0x64
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a95      	ldr	r2, [pc, #596]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5c:	4498      	add	r8, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	469b      	mov	fp, r3
 8003e62:	f04f 0c00 	mov.w	ip, #0
 8003e66:	46d9      	mov	r9, fp
 8003e68:	46e2      	mov	sl, ip
 8003e6a:	eb19 0309 	adds.w	r3, r9, r9
 8003e6e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e72:	4699      	mov	r9, r3
 8003e74:	46a2      	mov	sl, r4
 8003e76:	eb19 090b 	adds.w	r9, r9, fp
 8003e7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e92:	4689      	mov	r9, r1
 8003e94:	4692      	mov	sl, r2
 8003e96:	eb1b 0509 	adds.w	r5, fp, r9
 8003e9a:	eb4c 060a 	adc.w	r6, ip, sl
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	f04f 0400 	mov.w	r4, #0
 8003eb0:	0094      	lsls	r4, r2, #2
 8003eb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eb6:	008b      	lsls	r3, r1, #2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4623      	mov	r3, r4
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	f7fc f9fe 	bl	80002c0 <__aeabi_uldivmod>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b77      	ldr	r3, [pc, #476]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2164      	movs	r1, #100	; 0x64
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	3332      	adds	r3, #50	; 0x32
 8003ede:	4a72      	ldr	r2, [pc, #456]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4442      	add	r2, r8
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	e0d0      	b.n	8004096 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7ff fa78 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	469a      	mov	sl, r3
 8003efe:	f04f 0b00 	mov.w	fp, #0
 8003f02:	46d0      	mov	r8, sl
 8003f04:	46d9      	mov	r9, fp
 8003f06:	eb18 0308 	adds.w	r3, r8, r8
 8003f0a:	eb49 0409 	adc.w	r4, r9, r9
 8003f0e:	4698      	mov	r8, r3
 8003f10:	46a1      	mov	r9, r4
 8003f12:	eb18 080a 	adds.w	r8, r8, sl
 8003f16:	eb49 090b 	adc.w	r9, r9, fp
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f2e:	4688      	mov	r8, r1
 8003f30:	4691      	mov	r9, r2
 8003f32:	eb1a 0508 	adds.w	r5, sl, r8
 8003f36:	eb4b 0609 	adc.w	r6, fp, r9
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	f04f 0400 	mov.w	r4, #0
 8003f4c:	0094      	lsls	r4, r2, #2
 8003f4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f52:	008b      	lsls	r3, r1, #2
 8003f54:	461a      	mov	r2, r3
 8003f56:	4623      	mov	r3, r4
 8003f58:	4628      	mov	r0, r5
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	f7fc f9b0 	bl	80002c0 <__aeabi_uldivmod>
 8003f60:	4603      	mov	r3, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003f68:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	469b      	mov	fp, r3
 8003f76:	f04f 0c00 	mov.w	ip, #0
 8003f7a:	46d9      	mov	r9, fp
 8003f7c:	46e2      	mov	sl, ip
 8003f7e:	eb19 0309 	adds.w	r3, r9, r9
 8003f82:	eb4a 040a 	adc.w	r4, sl, sl
 8003f86:	4699      	mov	r9, r3
 8003f88:	46a2      	mov	sl, r4
 8003f8a:	eb19 090b 	adds.w	r9, r9, fp
 8003f8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa6:	4689      	mov	r9, r1
 8003fa8:	4692      	mov	sl, r2
 8003faa:	eb1b 0509 	adds.w	r5, fp, r9
 8003fae:	eb4c 060a 	adc.w	r6, ip, sl
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	f04f 0400 	mov.w	r4, #0
 8003fc4:	0094      	lsls	r4, r2, #2
 8003fc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fca:	008b      	lsls	r3, r1, #2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	f7fc f974 	bl	80002c0 <__aeabi_uldivmod>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	; 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	3332      	adds	r3, #50	; 0x32
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <UART_SetConfig+0x6f4>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffe:	4498      	add	r8, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	469b      	mov	fp, r3
 8004004:	f04f 0c00 	mov.w	ip, #0
 8004008:	46d9      	mov	r9, fp
 800400a:	46e2      	mov	sl, ip
 800400c:	eb19 0309 	adds.w	r3, r9, r9
 8004010:	eb4a 040a 	adc.w	r4, sl, sl
 8004014:	4699      	mov	r9, r3
 8004016:	46a2      	mov	sl, r4
 8004018:	eb19 090b 	adds.w	r9, r9, fp
 800401c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800402c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004034:	4689      	mov	r9, r1
 8004036:	4692      	mov	sl, r2
 8004038:	eb1b 0509 	adds.w	r5, fp, r9
 800403c:	eb4c 060a 	adc.w	r6, ip, sl
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4619      	mov	r1, r3
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	f04f 0400 	mov.w	r4, #0
 8004052:	0094      	lsls	r4, r2, #2
 8004054:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004058:	008b      	lsls	r3, r1, #2
 800405a:	461a      	mov	r2, r3
 800405c:	4623      	mov	r3, r4
 800405e:	4628      	mov	r0, r5
 8004060:	4631      	mov	r1, r6
 8004062:	f7fc f92d 	bl	80002c0 <__aeabi_uldivmod>
 8004066:	4603      	mov	r3, r0
 8004068:	460c      	mov	r4, r1
 800406a:	461a      	mov	r2, r3
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <UART_SetConfig+0x6f4>)
 800406e:	fba3 1302 	umull	r1, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2164      	movs	r1, #100	; 0x64
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <UART_SetConfig+0x6f4>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4442      	add	r2, r8
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	e7ff      	b.n	8004096 <UART_SetConfig+0x6e2>
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a0:	40011000 	.word	0x40011000
 80040a4:	40011400 	.word	0x40011400
 80040a8:	51eb851f 	.word	0x51eb851f

080040ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80040ac:	b5b0      	push	{r4, r5, r7, lr}
 80040ae:	b08e      	sub	sp, #56	; 0x38
 80040b0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80040b2:	2100      	movs	r1, #0
 80040b4:	2000      	movs	r0, #0
 80040b6:	f005 fee5 	bl	8009e84 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80040ba:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <MX_LWIP_Init+0xb8>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80040c0:	4b29      	ldr	r3, [pc, #164]	; (8004168 <MX_LWIP_Init+0xbc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <MX_LWIP_Init+0xc0>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80040cc:	4b28      	ldr	r3, [pc, #160]	; (8004170 <MX_LWIP_Init+0xc4>)
 80040ce:	9302      	str	r3, [sp, #8]
 80040d0:	4b28      	ldr	r3, [pc, #160]	; (8004174 <MX_LWIP_Init+0xc8>)
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	2300      	movs	r3, #0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <MX_LWIP_Init+0xc0>)
 80040da:	4a23      	ldr	r2, [pc, #140]	; (8004168 <MX_LWIP_Init+0xbc>)
 80040dc:	4921      	ldr	r1, [pc, #132]	; (8004164 <MX_LWIP_Init+0xb8>)
 80040de:	4826      	ldr	r0, [pc, #152]	; (8004178 <MX_LWIP_Init+0xcc>)
 80040e0:	f007 faa4 	bl	800b62c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80040e4:	4824      	ldr	r0, [pc, #144]	; (8004178 <MX_LWIP_Init+0xcc>)
 80040e6:	f007 fc5b 	bl	800b9a0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <MX_LWIP_Init+0xcc>)
 80040ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040f0:	089b      	lsrs	r3, r3, #2
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80040fc:	481e      	ldr	r0, [pc, #120]	; (8004178 <MX_LWIP_Init+0xcc>)
 80040fe:	f007 fc5f 	bl	800b9c0 <netif_set_up>
 8004102:	e002      	b.n	800410a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004104:	481c      	ldr	r0, [pc, #112]	; (8004178 <MX_LWIP_Init+0xcc>)
 8004106:	f007 fcc7 	bl	800ba98 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800410a:	491c      	ldr	r1, [pc, #112]	; (800417c <MX_LWIP_Init+0xd0>)
 800410c:	481a      	ldr	r0, [pc, #104]	; (8004178 <MX_LWIP_Init+0xcc>)
 800410e:	f007 fd5d 	bl	800bbcc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004112:	2300      	movs	r3, #0
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800411a:	f107 0320 	add.w	r3, r7, #32
 800411e:	2101      	movs	r1, #1
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fd99 	bl	8004c58 <osSemaphoreCreate>
 8004126:	4602      	mov	r2, r0
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <MX_LWIP_Init+0xd4>)
 800412a:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <MX_LWIP_Init+0xd8>)
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <MX_LWIP_Init+0xcc>)
 8004130:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <MX_LWIP_Init+0xd4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a13      	ldr	r2, [pc, #76]	; (8004184 <MX_LWIP_Init+0xd8>)
 8004138:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <MX_LWIP_Init+0xdc>)
 800413c:	1d3c      	adds	r4, r7, #4
 800413e:	461d      	mov	r5, r3
 8004140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004144:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	490d      	ldr	r1, [pc, #52]	; (8004184 <MX_LWIP_Init+0xd8>)
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fc84 	bl	8004a5e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004156:	4808      	ldr	r0, [pc, #32]	; (8004178 <MX_LWIP_Init+0xcc>)
 8004158:	f00f fdfc 	bl	8013d54 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800415c:	bf00      	nop
 800415e:	3728      	adds	r7, #40	; 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bdb0      	pop	{r4, r5, r7, pc}
 8004164:	20008ca8 	.word	0x20008ca8
 8004168:	20008cac 	.word	0x20008cac
 800416c:	20008cb0 	.word	0x20008cb0
 8004170:	08009d95 	.word	0x08009d95
 8004174:	080047ed 	.word	0x080047ed
 8004178:	20008c70 	.word	0x20008c70
 800417c:	080048d1 	.word	0x080048d1
 8004180:	200004a8 	.word	0x200004a8
 8004184:	20008c68 	.word	0x20008c68
 8004188:	08018e14 	.word	0x08018e14

0800418c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08e      	sub	sp, #56	; 0x38
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a59      	ldr	r2, [pc, #356]	; (8004310 <HAL_ETH_MspInit+0x184>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	f040 80ac 	bne.w	8004308 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80041b0:	2300      	movs	r3, #0
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	4b57      	ldr	r3, [pc, #348]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	4a56      	ldr	r2, [pc, #344]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041be:	6313      	str	r3, [r2, #48]	; 0x30
 80041c0:	4b54      	ldr	r3, [pc, #336]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	4b50      	ldr	r3, [pc, #320]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	4a4f      	ldr	r2, [pc, #316]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041da:	6313      	str	r3, [r2, #48]	; 0x30
 80041dc:	4b4d      	ldr	r3, [pc, #308]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	4b49      	ldr	r3, [pc, #292]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	4a48      	ldr	r2, [pc, #288]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041f6:	6313      	str	r3, [r2, #48]	; 0x30
 80041f8:	4b46      	ldr	r3, [pc, #280]	; (8004314 <HAL_ETH_MspInit+0x188>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	4b42      	ldr	r3, [pc, #264]	; (8004314 <HAL_ETH_MspInit+0x188>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	4a41      	ldr	r2, [pc, #260]	; (8004314 <HAL_ETH_MspInit+0x188>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	6313      	str	r3, [r2, #48]	; 0x30
 8004214:	4b3f      	ldr	r3, [pc, #252]	; (8004314 <HAL_ETH_MspInit+0x188>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	4b3b      	ldr	r3, [pc, #236]	; (8004314 <HAL_ETH_MspInit+0x188>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	4a3a      	ldr	r2, [pc, #232]	; (8004314 <HAL_ETH_MspInit+0x188>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6313      	str	r3, [r2, #48]	; 0x30
 8004230:	4b38      	ldr	r3, [pc, #224]	; (8004314 <HAL_ETH_MspInit+0x188>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	4b34      	ldr	r3, [pc, #208]	; (8004314 <HAL_ETH_MspInit+0x188>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	4a33      	ldr	r2, [pc, #204]	; (8004314 <HAL_ETH_MspInit+0x188>)
 8004246:	f043 0302 	orr.w	r3, r3, #2
 800424a:	6313      	str	r3, [r2, #48]	; 0x30
 800424c:	4b31      	ldr	r3, [pc, #196]	; (8004314 <HAL_ETH_MspInit+0x188>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_ETH_MspInit+0x188>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	4a2c      	ldr	r2, [pc, #176]	; (8004314 <HAL_ETH_MspInit+0x188>)
 8004262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004266:	6313      	str	r3, [r2, #48]	; 0x30
 8004268:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <HAL_ETH_MspInit+0x188>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004274:	2332      	movs	r3, #50	; 0x32
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004280:	2303      	movs	r3, #3
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004284:	230b      	movs	r3, #11
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800428c:	4619      	mov	r1, r3
 800428e:	4822      	ldr	r0, [pc, #136]	; (8004318 <HAL_ETH_MspInit+0x18c>)
 8004290:	f7fe fa94 	bl	80027bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004294:	2386      	movs	r3, #134	; 0x86
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004298:	2302      	movs	r3, #2
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a0:	2303      	movs	r3, #3
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042a4:	230b      	movs	r3, #11
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ac:	4619      	mov	r1, r3
 80042ae:	481b      	ldr	r0, [pc, #108]	; (800431c <HAL_ETH_MspInit+0x190>)
 80042b0:	f7fe fa84 	bl	80027bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80042b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042c6:	230b      	movs	r3, #11
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80042ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ce:	4619      	mov	r1, r3
 80042d0:	4813      	ldr	r0, [pc, #76]	; (8004320 <HAL_ETH_MspInit+0x194>)
 80042d2:	f7fe fa73 	bl	80027bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80042d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042dc:	2302      	movs	r3, #2
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e4:	2303      	movs	r3, #3
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042e8:	230b      	movs	r3, #11
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f0:	4619      	mov	r1, r3
 80042f2:	480c      	ldr	r0, [pc, #48]	; (8004324 <HAL_ETH_MspInit+0x198>)
 80042f4:	f7fe fa62 	bl	80027bc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80042f8:	2200      	movs	r2, #0
 80042fa:	2100      	movs	r1, #0
 80042fc:	203d      	movs	r0, #61	; 0x3d
 80042fe:	f7fd f88d 	bl	800141c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004302:	203d      	movs	r0, #61	; 0x3d
 8004304:	f7fd f8a6 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004308:	bf00      	nop
 800430a:	3738      	adds	r7, #56	; 0x38
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40028000 	.word	0x40028000
 8004314:	40023800 	.word	0x40023800
 8004318:	40020800 	.word	0x40020800
 800431c:	40020000 	.word	0x40020000
 8004320:	40020400 	.word	0x40020400
 8004324:	40021800 	.word	0x40021800

08004328 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <HAL_ETH_RxCpltCallback+0x1c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fd11 	bl	8004d5c <osSemaphoreRelease>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200004ac 	.word	0x200004ac

08004348 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004348:	b5b0      	push	{r4, r5, r7, lr}
 800434a:	b090      	sub	sp, #64	; 0x40
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004354:	4b5c      	ldr	r3, [pc, #368]	; (80044c8 <low_level_init+0x180>)
 8004356:	4a5d      	ldr	r2, [pc, #372]	; (80044cc <low_level_init+0x184>)
 8004358:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800435a:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <low_level_init+0x180>)
 800435c:	2201      	movs	r2, #1
 800435e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004360:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <low_level_init+0x180>)
 8004362:	2200      	movs	r2, #0
 8004364:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004372:	23e1      	movs	r3, #225	; 0xe1
 8004374:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004378:	23fe      	movs	r3, #254	; 0xfe
 800437a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 800437e:	23ec      	movs	r3, #236	; 0xec
 8004380:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 8004384:	2371      	movs	r3, #113	; 0x71
 8004386:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800438a:	4a4f      	ldr	r2, [pc, #316]	; (80044c8 <low_level_init+0x180>)
 800438c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004390:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004392:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <low_level_init+0x180>)
 8004394:	2201      	movs	r2, #1
 8004396:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004398:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <low_level_init+0x180>)
 800439a:	2200      	movs	r2, #0
 800439c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800439e:	4b4a      	ldr	r3, [pc, #296]	; (80044c8 <low_level_init+0x180>)
 80043a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80043a4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80043a6:	4848      	ldr	r0, [pc, #288]	; (80044c8 <low_level_init+0x180>)
 80043a8:	f7fd f862 	bl	8001470 <HAL_ETH_Init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80043b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80043cc:	2304      	movs	r3, #4
 80043ce:	4a40      	ldr	r2, [pc, #256]	; (80044d0 <low_level_init+0x188>)
 80043d0:	4940      	ldr	r1, [pc, #256]	; (80044d4 <low_level_init+0x18c>)
 80043d2:	483d      	ldr	r0, [pc, #244]	; (80044c8 <low_level_init+0x180>)
 80043d4:	f7fd f9ea 	bl	80017ac <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80043d8:	2304      	movs	r3, #4
 80043da:	4a3f      	ldr	r2, [pc, #252]	; (80044d8 <low_level_init+0x190>)
 80043dc:	493f      	ldr	r1, [pc, #252]	; (80044dc <low_level_init+0x194>)
 80043de:	483a      	ldr	r0, [pc, #232]	; (80044c8 <low_level_init+0x180>)
 80043e0:	f7fd fa4d 	bl	800187e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2206      	movs	r2, #6
 80043e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80043ec:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <low_level_init+0x180>)
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80043f8:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <low_level_init+0x180>)
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	785a      	ldrb	r2, [r3, #1]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004404:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <low_level_init+0x180>)
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	789a      	ldrb	r2, [r3, #2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <low_level_init+0x180>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	78da      	ldrb	r2, [r3, #3]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800441c:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <low_level_init+0x180>)
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	791a      	ldrb	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004428:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <low_level_init+0x180>)
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	795a      	ldrb	r2, [r3, #5]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004442:	f043 030a 	orr.w	r3, r3, #10
 8004446:	b2da      	uxtb	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800444e:	2300      	movs	r3, #0
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
 8004452:	2300      	movs	r3, #0
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445a:	2101      	movs	r1, #1
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fbfb 	bl	8004c58 <osSemaphoreCreate>
 8004462:	4602      	mov	r2, r0
 8004464:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <low_level_init+0x198>)
 8004466:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004468:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <low_level_init+0x19c>)
 800446a:	f107 040c 	add.w	r4, r7, #12
 800446e:	461d      	mov	r5, r3
 8004470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004474:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004478:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800447c:	f107 030c 	add.w	r3, r7, #12
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 faeb 	bl	8004a5e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004488:	480f      	ldr	r0, [pc, #60]	; (80044c8 <low_level_init+0x180>)
 800448a:	f7fd fd20 	bl	8001ece <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800448e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004492:	461a      	mov	r2, r3
 8004494:	211d      	movs	r1, #29
 8004496:	480c      	ldr	r0, [pc, #48]	; (80044c8 <low_level_init+0x180>)
 8004498:	f7fd fc4b 	bl	8001d32 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	f043 030b 	orr.w	r3, r3, #11
 80044a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	461a      	mov	r2, r3
 80044a8:	211d      	movs	r1, #29
 80044aa:	4807      	ldr	r0, [pc, #28]	; (80044c8 <low_level_init+0x180>)
 80044ac:	f7fd fca9 	bl	8001e02 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80044b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044b4:	461a      	mov	r2, r3
 80044b6:	211d      	movs	r1, #29
 80044b8:	4803      	ldr	r0, [pc, #12]	; (80044c8 <low_level_init+0x180>)
 80044ba:	f7fd fc3a 	bl	8001d32 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80044be:	bf00      	nop
 80044c0:	3740      	adds	r7, #64	; 0x40
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bdb0      	pop	{r4, r5, r7, pc}
 80044c6:	bf00      	nop
 80044c8:	2000a584 	.word	0x2000a584
 80044cc:	40028000 	.word	0x40028000
 80044d0:	2000a5cc 	.word	0x2000a5cc
 80044d4:	20008cb4 	.word	0x20008cb4
 80044d8:	20008d34 	.word	0x20008d34
 80044dc:	2000a504 	.word	0x2000a504
 80044e0:	200004ac 	.word	0x200004ac
 80044e4:	08018e38 	.word	0x08018e38

080044e8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80044f2:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <low_level_output+0x138>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800450a:	4b45      	ldr	r3, [pc, #276]	; (8004620 <low_level_output+0x138>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	e05a      	b.n	80045d0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	da03      	bge.n	800452a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004522:	23f8      	movs	r3, #248	; 0xf8
 8004524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004528:	e05c      	b.n	80045e4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	895b      	ldrh	r3, [r3, #10]
 800452e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004534:	e02f      	b.n	8004596 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	18d0      	adds	r0, r2, r3
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	18d1      	adds	r1, r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800454a:	3304      	adds	r3, #4
 800454c:	461a      	mov	r2, r3
 800454e:	f013 fc38 	bl	8017dc2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	da03      	bge.n	8004568 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004560:	23f8      	movs	r3, #248	; 0xf8
 8004562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004566:	e03d      	b.n	80045e4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004578:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004584:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004590:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d8c8      	bhi.n	8004536 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	18d0      	adds	r0, r2, r3
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4413      	add	r3, r2
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4619      	mov	r1, r3
 80045b6:	f013 fc04 	bl	8017dc2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	623b      	str	r3, [r7, #32]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1a1      	bne.n	800451a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80045d6:	6979      	ldr	r1, [r7, #20]
 80045d8:	4811      	ldr	r0, [pc, #68]	; (8004620 <low_level_output+0x138>)
 80045da:	f7fd f9bd 	bl	8001958 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <low_level_output+0x138>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ec:	3314      	adds	r3, #20
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <low_level_output+0x138>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004600:	3314      	adds	r3, #20
 8004602:	2220      	movs	r2, #32
 8004604:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <low_level_output+0x138>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460e:	3304      	adds	r3, #4
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	2000a584 	.word	0x2000a584

08004624 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	; 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004648:	484f      	ldr	r0, [pc, #316]	; (8004788 <low_level_input+0x164>)
 800464a:	f7fd fa6f 	bl	8001b2c <HAL_ETH_GetReceivedFrame_IT>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <low_level_input+0x34>

    return NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	e092      	b.n	800477e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004658:	4b4b      	ldr	r3, [pc, #300]	; (8004788 <low_level_input+0x164>)
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800465e:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <low_level_input+0x164>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800466a:	89fb      	ldrh	r3, [r7, #14]
 800466c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004670:	4619      	mov	r1, r3
 8004672:	2000      	movs	r0, #0
 8004674:	f007 fb74 	bl	800bd60 <pbuf_alloc>
 8004678:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d04b      	beq.n	8004718 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004680:	4b41      	ldr	r3, [pc, #260]	; (8004788 <low_level_input+0x164>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	e040      	b.n	8004712 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	895b      	ldrh	r3, [r3, #10]
 8004694:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800469a:	e021      	b.n	80046e0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	18d0      	adds	r0, r2, r3
 80046a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	18d1      	adds	r1, r2, r3
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80046b0:	3304      	adds	r3, #4
 80046b2:	461a      	mov	r2, r3
 80046b4:	f013 fb85 	bl	8017dc2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4413      	add	r3, r2
 80046ca:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80046ce:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80046da:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d8d6      	bhi.n	800469c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	18d0      	adds	r0, r2, r3
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4619      	mov	r1, r3
 8004700:	f013 fb5f 	bl	8017dc2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1bb      	bne.n	8004690 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004718:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <low_level_input+0x164>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e00b      	b.n	800473c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	3301      	adds	r3, #1
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <low_level_input+0x164>)
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3ee      	bcc.n	8004724 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <low_level_input+0x164>)
 8004748:	2200      	movs	r2, #0
 800474a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <low_level_input+0x164>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004754:	3314      	adds	r3, #20
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004760:	4b09      	ldr	r3, [pc, #36]	; (8004788 <low_level_input+0x164>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004768:	3314      	adds	r3, #20
 800476a:	2280      	movs	r2, #128	; 0x80
 800476c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <low_level_input+0x164>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004776:	3308      	adds	r3, #8
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800477e:	4618      	mov	r0, r3
 8004780:	3730      	adds	r7, #48	; 0x30
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	2000a584 	.word	0x2000a584

0800478c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <ethernetif_input+0x58>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f04f 31ff 	mov.w	r1, #4294967295
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fa8d 	bl	8004cc0 <osSemaphoreWait>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f5      	bne.n	8004798 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80047ac:	480e      	ldr	r0, [pc, #56]	; (80047e8 <ethernetif_input+0x5c>)
 80047ae:	f013 fa55 	bl	8017c5c <sys_mutex_lock>
        p = low_level_input( netif );
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7ff ff36 	bl	8004624 <low_level_input>
 80047b8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	4798      	blx	r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80047d0:	68b8      	ldr	r0, [r7, #8]
 80047d2:	f007 fda5 	bl	800c320 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80047d6:	4804      	ldr	r0, [pc, #16]	; (80047e8 <ethernetif_input+0x5c>)
 80047d8:	f013 fa4f 	bl	8017c7a <sys_mutex_unlock>
      } while(p!=NULL);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e4      	bne.n	80047ac <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80047e2:	e7d9      	b.n	8004798 <ethernetif_input+0xc>
 80047e4:	200004ac 	.word	0x200004ac
 80047e8:	2000bddc 	.word	0x2000bddc

080047ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <ethernetif_init+0x1c>
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <ethernetif_init+0x48>)
 80047fc:	f240 2233 	movw	r2, #563	; 0x233
 8004800:	490d      	ldr	r1, [pc, #52]	; (8004838 <ethernetif_init+0x4c>)
 8004802:	480e      	ldr	r0, [pc, #56]	; (800483c <ethernetif_init+0x50>)
 8004804:	f013 faf0 	bl	8017de8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2273      	movs	r2, #115	; 0x73
 800480c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2274      	movs	r2, #116	; 0x74
 8004814:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a09      	ldr	r2, [pc, #36]	; (8004840 <ethernetif_init+0x54>)
 800481c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a08      	ldr	r2, [pc, #32]	; (8004844 <ethernetif_init+0x58>)
 8004822:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fd8f 	bl	8004348 <low_level_init>

  return ERR_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	08018e54 	.word	0x08018e54
 8004838:	08018e70 	.word	0x08018e70
 800483c:	08018e80 	.word	0x08018e80
 8004840:	08015c41 	.word	0x08015c41
 8004844:	080044e9 	.word	0x080044e9

08004848 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800484c:	f7fc fd00 	bl	8001250 <HAL_GetTick>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004868:	f107 0308 	add.w	r3, r7, #8
 800486c:	461a      	mov	r2, r3
 800486e:	2101      	movs	r1, #1
 8004870:	4816      	ldr	r0, [pc, #88]	; (80048cc <ethernetif_set_link+0x74>)
 8004872:	f7fd fa5e 	bl	8001d32 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <ethernetif_set_link+0x48>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f007 f92f 	bl	800bafc <netif_set_link_up>
 800489e:	e011      	b.n	80048c4 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <ethernetif_set_link+0x6c>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f007 f954 	bl	800bb6c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80048c4:	20c8      	movs	r0, #200	; 0xc8
 80048c6:	f000 f916 	bl	8004af6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80048ca:	e7cd      	b.n	8004868 <ethernetif_set_link+0x10>
 80048cc:	2000a584 	.word	0x2000a584

080048d0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d05d      	beq.n	80049ae <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80048f2:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <ethernetif_update_config+0xf4>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03f      	beq.n	800497a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80048fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048fe:	2100      	movs	r1, #0
 8004900:	4830      	ldr	r0, [pc, #192]	; (80049c4 <ethernetif_update_config+0xf4>)
 8004902:	f7fd fa7e 	bl	8001e02 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004906:	f7fc fca3 	bl	8001250 <HAL_GetTick>
 800490a:	4603      	mov	r3, r0
 800490c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800490e:	f107 0308 	add.w	r3, r7, #8
 8004912:	461a      	mov	r2, r3
 8004914:	2101      	movs	r1, #1
 8004916:	482b      	ldr	r0, [pc, #172]	; (80049c4 <ethernetif_update_config+0xf4>)
 8004918:	f7fd fa0b 	bl	8001d32 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800491c:	f7fc fc98 	bl	8001250 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800492a:	d828      	bhi.n	800497e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0eb      	beq.n	800490e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004936:	f107 0308 	add.w	r3, r7, #8
 800493a:	461a      	mov	r2, r3
 800493c:	211f      	movs	r1, #31
 800493e:	4821      	ldr	r0, [pc, #132]	; (80049c4 <ethernetif_update_config+0xf4>)
 8004940:	f7fd f9f7 	bl	8001d32 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <ethernetif_update_config+0xf4>)
 8004950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004954:	60da      	str	r2, [r3, #12]
 8004956:	e002      	b.n	800495e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <ethernetif_update_config+0xf4>)
 800495a:	2200      	movs	r2, #0
 800495c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <ethernetif_update_config+0xf4>)
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
 800496e:	e016      	b.n	800499e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <ethernetif_update_config+0xf4>)
 8004972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	e011      	b.n	800499e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <ethernetif_update_config+0xb0>
          goto error;
 800497e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <ethernetif_update_config+0xf4>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	08db      	lsrs	r3, r3, #3
 8004986:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <ethernetif_update_config+0xf4>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004990:	4313      	orrs	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	2100      	movs	r1, #0
 8004998:	480a      	ldr	r0, [pc, #40]	; (80049c4 <ethernetif_update_config+0xf4>)
 800499a:	f7fd fa32 	bl	8001e02 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800499e:	2100      	movs	r1, #0
 80049a0:	4808      	ldr	r0, [pc, #32]	; (80049c4 <ethernetif_update_config+0xf4>)
 80049a2:	f7fd faf3 	bl	8001f8c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80049a6:	4807      	ldr	r0, [pc, #28]	; (80049c4 <ethernetif_update_config+0xf4>)
 80049a8:	f7fd fa91 	bl	8001ece <HAL_ETH_Start>
 80049ac:	e002      	b.n	80049b4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80049ae:	4805      	ldr	r0, [pc, #20]	; (80049c4 <ethernetif_update_config+0xf4>)
 80049b0:	f7fd fabc 	bl	8001f2c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f807 	bl	80049c8 <ethernetif_notify_conn_changed>
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	2000a584 	.word	0x2000a584

080049c8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80049ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ee:	2b84      	cmp	r3, #132	; 0x84
 80049f0:	d005      	beq.n	80049fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80049f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4413      	add	r3, r2
 80049fa:	3303      	adds	r3, #3
 80049fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049fe:	68fb      	ldr	r3, [r7, #12]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a12:	f3ef 8305 	mrs	r3, IPSR
 8004a16:	607b      	str	r3, [r7, #4]
  return(result);
 8004a18:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a34:	f001 fd08 	bl	8006448 <vTaskStartScheduler>
  
  return osOK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004a42:	f7ff ffe3 	bl	8004a0c <inHandlerMode>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004a4c:	f001 fe14 	bl	8006678 <xTaskGetTickCountFromISR>
 8004a50:	4603      	mov	r3, r0
 8004a52:	e002      	b.n	8004a5a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004a54:	f001 fe00 	bl	8006658 <xTaskGetTickCount>
 8004a58:	4603      	mov	r3, r0
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a60:	b089      	sub	sp, #36	; 0x24
 8004a62:	af04      	add	r7, sp, #16
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <osThreadCreate+0x54>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01c      	beq.n	8004ab2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685c      	ldr	r4, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681d      	ldr	r5, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691e      	ldr	r6, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ffa6 	bl	80049dc <makeFreeRtosPriority>
 8004a90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a9a:	9202      	str	r2, [sp, #8]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	9100      	str	r1, [sp, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4632      	mov	r2, r6
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f001 fb0a 	bl	80060c0 <xTaskCreateStatic>
 8004aac:	4603      	mov	r3, r0
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e01c      	b.n	8004aec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685c      	ldr	r4, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004abe:	b29e      	uxth	r6, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff88 	bl	80049dc <makeFreeRtosPriority>
 8004acc:	4602      	mov	r2, r0
 8004ace:	f107 030c 	add.w	r3, r7, #12
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	9200      	str	r2, [sp, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	4632      	mov	r2, r6
 8004ada:	4629      	mov	r1, r5
 8004adc:	4620      	mov	r0, r4
 8004ade:	f001 fb49 	bl	8006174 <xTaskCreate>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d001      	beq.n	8004aec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004aec:	68fb      	ldr	r3, [r7, #12]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004af6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <osDelay+0x16>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	e000      	b.n	8004b0e <osDelay+0x18>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 fc66 	bl	80063e0 <vTaskDelay>
  
  return osOK;
 8004b14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4619      	mov	r1, r3
 8004b34:	2001      	movs	r0, #1
 8004b36:	f000 fc80 	bl	800543a <xQueueCreateMutexStatic>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	e003      	b.n	8004b46 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f000 fc63 	bl	800540a <xQueueCreateMutex>
 8004b44:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <osMutexWait+0x18>
    return osErrorParameter;
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	e03a      	b.n	8004bde <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d103      	bne.n	8004b7c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	e009      	b.n	8004b90 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d006      	beq.n	8004b90 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <osMutexWait+0x40>
      ticks = 1;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004b90:	f7ff ff3c 	bl	8004a0c <inHandlerMode>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d017      	beq.n	8004bca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f001 f860 	bl	8005c68 <xQueueReceiveFromISR>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d001      	beq.n	8004bb2 <osMutexWait+0x62>
      return osErrorOS;
 8004bae:	23ff      	movs	r3, #255	; 0xff
 8004bb0:	e015      	b.n	8004bde <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d011      	beq.n	8004bdc <osMutexWait+0x8c>
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <osMutexWait+0x98>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	e008      	b.n	8004bdc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 ff43 	bl	8005a58 <xQueueSemaphoreTake>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d001      	beq.n	8004bdc <osMutexWait+0x8c>
    return osErrorOS;
 8004bd8:	23ff      	movs	r3, #255	; 0xff
 8004bda:	e000      	b.n	8004bde <osMutexWait+0x8e>
  }
  
  return osOK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004bfc:	f7ff ff06 	bl	8004a0c <inHandlerMode>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c06:	f107 0308 	add.w	r3, r7, #8
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fdbd 	bl	800578c <xQueueGiveFromISR>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d001      	beq.n	8004c1c <osMutexRelease+0x30>
      return osErrorOS;
 8004c18:	23ff      	movs	r3, #255	; 0xff
 8004c1a:	e017      	b.n	8004c4c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d013      	beq.n	8004c4a <osMutexRelease+0x5e>
 8004c22:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <osMutexRelease+0x68>)
 8004c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	e00a      	b.n	8004c4a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004c34:	2300      	movs	r3, #0
 8004c36:	2200      	movs	r2, #0
 8004c38:	2100      	movs	r1, #0
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fc18 	bl	8005470 <xQueueGenericSend>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004c46:	23ff      	movs	r3, #255	; 0xff
 8004c48:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10b      	bne.n	8004c88 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	2303      	movs	r3, #3
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f000 fad8 	bl	8005234 <xQueueGenericCreateStatic>
 8004c84:	4603      	mov	r3, r0
 8004c86:	e016      	b.n	8004cb6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e014      	b.n	8004cb6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d110      	bne.n	8004cb4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004c92:	2203      	movs	r2, #3
 8004c94:	2100      	movs	r1, #0
 8004c96:	2001      	movs	r0, #1
 8004c98:	f000 fb3f 	bl	800531a <xQueueGenericCreate>
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <osSemaphoreCreate+0x58>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fbe0 	bl	8005470 <xQueueGenericSend>
      return sema;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	e000      	b.n	8004cb6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004cb4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	e03a      	b.n	8004d4e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d103      	bne.n	8004cec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e009      	b.n	8004d00 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <osSemaphoreWait+0x40>
      ticks = 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004d00:	f7ff fe84 	bl	8004a0c <inHandlerMode>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d017      	beq.n	8004d3a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004d0a:	f107 0308 	add.w	r3, r7, #8
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2100      	movs	r1, #0
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 ffa8 	bl	8005c68 <xQueueReceiveFromISR>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d001      	beq.n	8004d22 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004d1e:	23ff      	movs	r3, #255	; 0xff
 8004d20:	e015      	b.n	8004d4e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d011      	beq.n	8004d4c <osSemaphoreWait+0x8c>
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <osSemaphoreWait+0x98>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	e008      	b.n	8004d4c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fe8b 	bl	8005a58 <xQueueSemaphoreTake>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d001      	beq.n	8004d4c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004d48:	23ff      	movs	r3, #255	; 0xff
 8004d4a:	e000      	b.n	8004d4e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004d6c:	f7ff fe4e 	bl	8004a0c <inHandlerMode>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004d76:	f107 0308 	add.w	r3, r7, #8
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fd05 	bl	800578c <xQueueGiveFromISR>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d001      	beq.n	8004d8c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004d88:	23ff      	movs	r3, #255	; 0xff
 8004d8a:	e017      	b.n	8004dbc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d013      	beq.n	8004dba <osSemaphoreRelease+0x5e>
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <osSemaphoreRelease+0x68>)
 8004d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	e00a      	b.n	8004dba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004da4:	2300      	movs	r3, #0
 8004da6:	2200      	movs	r2, #0
 8004da8:	2100      	movs	r1, #0
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb60 	bl	8005470 <xQueueGenericSend>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004db6:	23ff      	movs	r3, #255	; 0xff
 8004db8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004dba:	68fb      	ldr	r3, [r7, #12]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004dd0:	f7ff fe1c 	bl	8004a0c <inHandlerMode>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004dda:	2382      	movs	r3, #130	; 0x82
 8004ddc:	e003      	b.n	8004de6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fff9 	bl	8005dd6 <vQueueDelete>

  return osOK; 
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004dee:	b590      	push	{r4, r7, lr}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af02      	add	r7, sp, #8
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d012      	beq.n	8004e26 <osMessageCreate+0x38>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00e      	beq.n	8004e26 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6859      	ldr	r1, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68dc      	ldr	r4, [r3, #12]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	f000 fa09 	bl	8005234 <xQueueGenericCreateStatic>
 8004e22:	4603      	mov	r3, r0
 8004e24:	e008      	b.n	8004e38 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4619      	mov	r1, r3
 8004e32:	f000 fa72 	bl	800531a <xQueueGenericCreate>
 8004e36:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd90      	pop	{r4, r7, pc}

08004e40 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <osMessagePut+0x1e>
    ticks = 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004e5e:	f7ff fdd5 	bl	8004a0c <inHandlerMode>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d018      	beq.n	8004e9a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004e68:	f107 0210 	add.w	r2, r7, #16
 8004e6c:	f107 0108 	add.w	r1, r7, #8
 8004e70:	2300      	movs	r3, #0
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 fbf6 	bl	8005664 <xQueueGenericSendFromISR>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d001      	beq.n	8004e82 <osMessagePut+0x42>
      return osErrorOS;
 8004e7e:	23ff      	movs	r3, #255	; 0xff
 8004e80:	e018      	b.n	8004eb4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d014      	beq.n	8004eb2 <osMessagePut+0x72>
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <osMessagePut+0x7c>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	e00b      	b.n	8004eb2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004e9a:	f107 0108 	add.w	r1, r7, #8
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fae4 	bl	8005470 <xQueueGenericSend>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d001      	beq.n	8004eb2 <osMessagePut+0x72>
      return osErrorOS;
 8004eae:	23ff      	movs	r3, #255	; 0xff
 8004eb0:	e000      	b.n	8004eb4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b08b      	sub	sp, #44	; 0x2c
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	617b      	str	r3, [r7, #20]
    return event;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004eee:	e054      	b.n	8004f9a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d103      	bne.n	8004f08 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004f00:	f04f 33ff 	mov.w	r3, #4294967295
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
 8004f06:	e009      	b.n	8004f1c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <osMessageGet+0x5c>
      ticks = 1;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004f1c:	f7ff fd76 	bl	8004a0c <inHandlerMode>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01c      	beq.n	8004f60 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004f26:	f107 0220 	add.w	r2, r7, #32
 8004f2a:	f107 0314 	add.w	r3, r7, #20
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	68b8      	ldr	r0, [r7, #8]
 8004f34:	f000 fe98 	bl	8005c68 <xQueueReceiveFromISR>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d102      	bne.n	8004f44 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004f3e:	2310      	movs	r3, #16
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e001      	b.n	8004f48 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01d      	beq.n	8004f8a <osMessageGet+0xca>
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <osMessageGet+0xe4>)
 8004f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	e014      	b.n	8004f8a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004f60:	f107 0314 	add.w	r3, r7, #20
 8004f64:	3304      	adds	r3, #4
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	4619      	mov	r1, r3
 8004f6a:	68b8      	ldr	r0, [r7, #8]
 8004f6c:	f000 fc98 	bl	80058a0 <xQueueReceive>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004f76:	2310      	movs	r3, #16
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e006      	b.n	8004f8a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <osMessageGet+0xc6>
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <osMessageGet+0xc8>
 8004f86:	2340      	movs	r3, #64	; 0x40
 8004f88:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	461c      	mov	r4, r3
 8004f8e:	f107 0314 	add.w	r3, r7, #20
 8004f92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	372c      	adds	r7, #44	; 0x2c
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004fb0:	f7ff fd2c 	bl	8004a0c <inHandlerMode>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 feee 	bl	8005d9c <uxQueueMessagesWaitingFromISR>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	e003      	b.n	8004fcc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fecc 	bl	8005d62 <uxQueueMessagesWaiting>
 8004fca:	4603      	mov	r3, r0
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004fdc:	f7ff fd16 	bl	8004a0c <inHandlerMode>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <osMessageDelete+0x16>
    return osErrorISR;
 8004fe6:	2382      	movs	r3, #130	; 0x82
 8004fe8:	e003      	b.n	8004ff2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fef3 	bl	8005dd6 <vQueueDelete>

  return osOK; 
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f103 0208 	add.w	r2, r3, #8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f04f 32ff 	mov.w	r2, #4294967295
 8005012:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f103 0208 	add.w	r2, r3, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f103 0208 	add.w	r2, r3, #8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d103      	bne.n	80050bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e00c      	b.n	80050d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3308      	adds	r3, #8
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e002      	b.n	80050ca <vListInsert+0x2e>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d2f6      	bcs.n	80050c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6852      	ldr	r2, [r2, #4]
 800512e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d103      	bne.n	8005142 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	1e5a      	subs	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	e7fe      	b.n	800518a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800518c:	f002 f8ce 	bl	800732c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	68f9      	ldr	r1, [r7, #12]
 800519a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	441a      	add	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	3b01      	subs	r3, #1
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	441a      	add	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	22ff      	movs	r2, #255	; 0xff
 80051d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	22ff      	movs	r2, #255	; 0xff
 80051d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d114      	bne.n	800520c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01a      	beq.n	8005220 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3310      	adds	r3, #16
 80051ee:	4618      	mov	r0, r3
 80051f0:	f001 fb8a 	bl	8006908 <xTaskRemoveFromEventList>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d012      	beq.n	8005220 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <xQueueGenericReset+0xcc>)
 80051fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	e009      	b.n	8005220 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3310      	adds	r3, #16
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fef2 	bl	8004ffa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3324      	adds	r3, #36	; 0x24
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff feed 	bl	8004ffa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005220:	f002 f8b2 	bl	8007388 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005224:	2301      	movs	r3, #1
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	e000ed04 	.word	0xe000ed04

08005234 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	; 0x38
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <xQueueGenericCreateStatic+0x28>
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
 800525a:	e7fe      	b.n	800525a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <xQueueGenericCreateStatic+0x42>
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	e7fe      	b.n	8005274 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <xQueueGenericCreateStatic+0x4e>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <xQueueGenericCreateStatic+0x52>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <xQueueGenericCreateStatic+0x54>
 8005286:	2300      	movs	r3, #0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <xQueueGenericCreateStatic+0x6c>
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	e7fe      	b.n	800529e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <xQueueGenericCreateStatic+0x78>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <xQueueGenericCreateStatic+0x7c>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <xQueueGenericCreateStatic+0x7e>
 80052b0:	2300      	movs	r3, #0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <xQueueGenericCreateStatic+0x96>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	e7fe      	b.n	80052c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052ca:	2348      	movs	r3, #72	; 0x48
 80052cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b48      	cmp	r3, #72	; 0x48
 80052d2:	d009      	beq.n	80052e8 <xQueueGenericCreateStatic+0xb4>
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	e7fe      	b.n	80052e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f844 	bl	8005398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005312:	4618      	mov	r0, r3
 8005314:	3730      	adds	r7, #48	; 0x30
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800531a:	b580      	push	{r7, lr}
 800531c:	b08a      	sub	sp, #40	; 0x28
 800531e:	af02      	add	r7, sp, #8
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	4613      	mov	r3, r2
 8005326:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <xQueueGenericCreate+0x28>
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e7fe      	b.n	8005340 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e004      	b.n	8005358 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3348      	adds	r3, #72	; 0x48
 800535c:	4618      	mov	r0, r3
 800535e:	f002 f8ff 	bl	8007560 <pvPortMalloc>
 8005362:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d011      	beq.n	800538e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	3348      	adds	r3, #72	; 0x48
 8005372:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800537c:	79fa      	ldrb	r2, [r7, #7]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f805 	bl	8005398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800538e:	69bb      	ldr	r3, [r7, #24]
	}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e002      	b.n	80053ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053c6:	2101      	movs	r1, #1
 80053c8:	69b8      	ldr	r0, [r7, #24]
 80053ca:	f7ff fecb 	bl	8005164 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80053f6:	2300      	movs	r3, #0
 80053f8:	2200      	movs	r2, #0
 80053fa:	2100      	movs	r1, #0
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f837 	bl	8005470 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	4603      	mov	r3, r0
 8005412:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	461a      	mov	r2, r3
 8005420:	6939      	ldr	r1, [r7, #16]
 8005422:	6978      	ldr	r0, [r7, #20]
 8005424:	f7ff ff79 	bl	800531a <xQueueGenericCreate>
 8005428:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ffd3 	bl	80053d6 <prvInitialiseMutex>

		return xNewQueue;
 8005430:	68fb      	ldr	r3, [r7, #12]
	}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800543a:	b580      	push	{r7, lr}
 800543c:	b088      	sub	sp, #32
 800543e:	af02      	add	r7, sp, #8
 8005440:	4603      	mov	r3, r0
 8005442:	6039      	str	r1, [r7, #0]
 8005444:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005446:	2301      	movs	r3, #1
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	6939      	ldr	r1, [r7, #16]
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f7ff feeb 	bl	8005234 <xQueueGenericCreateStatic>
 800545e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff ffb8 	bl	80053d6 <prvInitialiseMutex>

		return xNewQueue;
 8005466:	68fb      	ldr	r3, [r7, #12]
	}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08e      	sub	sp, #56	; 0x38
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800547e:	2300      	movs	r3, #0
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <xQueueGenericSend+0x30>
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	62bb      	str	r3, [r7, #40]	; 0x28
 800549e:	e7fe      	b.n	800549e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <xQueueGenericSend+0x3e>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <xQueueGenericSend+0x42>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <xQueueGenericSend+0x44>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <xQueueGenericSend+0x5c>
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	e7fe      	b.n	80054ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d103      	bne.n	80054da <xQueueGenericSend+0x6a>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <xQueueGenericSend+0x6e>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <xQueueGenericSend+0x70>
 80054de:	2300      	movs	r3, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <xQueueGenericSend+0x88>
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	623b      	str	r3, [r7, #32]
 80054f6:	e7fe      	b.n	80054f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054f8:	f001 fbbc 	bl	8006c74 <xTaskGetSchedulerState>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <xQueueGenericSend+0x98>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <xQueueGenericSend+0x9c>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <xQueueGenericSend+0x9e>
 800550c:	2300      	movs	r3, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <xQueueGenericSend+0xb6>
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	e7fe      	b.n	8005524 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005526:	f001 ff01 	bl	800732c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <xQueueGenericSend+0xcc>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d129      	bne.n	8005590 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005542:	f000 fc82 	bl	8005e4a <prvCopyDataToQueue>
 8005546:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	4618      	mov	r0, r3
 8005556:	f001 f9d7 	bl	8006908 <xTaskRemoveFromEventList>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d013      	beq.n	8005588 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005560:	4b3f      	ldr	r3, [pc, #252]	; (8005660 <xQueueGenericSend+0x1f0>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	e00a      	b.n	8005588 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005578:	4b39      	ldr	r3, [pc, #228]	; (8005660 <xQueueGenericSend+0x1f0>)
 800557a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005588:	f001 fefe 	bl	8007388 <vPortExitCritical>
				return pdPASS;
 800558c:	2301      	movs	r3, #1
 800558e:	e063      	b.n	8005658 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005596:	f001 fef7 	bl	8007388 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800559a:	2300      	movs	r3, #0
 800559c:	e05c      	b.n	8005658 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a4:	f107 0314 	add.w	r3, r7, #20
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 fa0f 	bl	80069cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b2:	f001 fee9 	bl	8007388 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055b6:	f000 ffa5 	bl	8006504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ba:	f001 feb7 	bl	800732c <vPortEnterCritical>
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d103      	bne.n	80055d4 <xQueueGenericSend+0x164>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055da:	b25b      	sxtb	r3, r3
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d103      	bne.n	80055ea <xQueueGenericSend+0x17a>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ea:	f001 fecd 	bl	8007388 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ee:	1d3a      	adds	r2, r7, #4
 80055f0:	f107 0314 	add.w	r3, r7, #20
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 f9fe 	bl	80069f8 <xTaskCheckForTimeOut>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d124      	bne.n	800564c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005604:	f000 fd19 	bl	800603a <prvIsQueueFull>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d018      	beq.n	8005640 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	3310      	adds	r3, #16
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f952 	bl	80068c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800561c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800561e:	f000 fca4 	bl	8005f6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005622:	f000 ff7d 	bl	8006520 <xTaskResumeAll>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	f47f af7c 	bne.w	8005526 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <xQueueGenericSend+0x1f0>)
 8005630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	e772      	b.n	8005526 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005642:	f000 fc92 	bl	8005f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005646:	f000 ff6b 	bl	8006520 <xTaskResumeAll>
 800564a:	e76c      	b.n	8005526 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800564c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800564e:	f000 fc8c 	bl	8005f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005652:	f000 ff65 	bl	8006520 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005658:	4618      	mov	r0, r3
 800565a:	3738      	adds	r7, #56	; 0x38
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08e      	sub	sp, #56	; 0x38
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <xQueueGenericSendFromISR+0x2c>
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
 800568e:	e7fe      	b.n	800568e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <xQueueGenericSendFromISR+0x3a>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <xQueueGenericSendFromISR+0x3e>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <xQueueGenericSendFromISR+0x40>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d109      	bne.n	80056bc <xQueueGenericSendFromISR+0x58>
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	623b      	str	r3, [r7, #32]
 80056ba:	e7fe      	b.n	80056ba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d103      	bne.n	80056ca <xQueueGenericSendFromISR+0x66>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <xQueueGenericSendFromISR+0x6a>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueGenericSendFromISR+0x6c>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <xQueueGenericSendFromISR+0x84>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	e7fe      	b.n	80056e6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056e8:	f001 fefc 	bl	80074e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056ec:	f3ef 8211 	mrs	r2, BASEPRI
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61ba      	str	r2, [r7, #24]
 8005702:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005704:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	429a      	cmp	r2, r3
 8005712:	d302      	bcc.n	800571a <xQueueGenericSendFromISR+0xb6>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d12c      	bne.n	8005774 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572a:	f000 fb8e 	bl	8005e4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800572e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d112      	bne.n	800575e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d016      	beq.n	800576e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	3324      	adds	r3, #36	; 0x24
 8005744:	4618      	mov	r0, r3
 8005746:	f001 f8df 	bl	8006908 <xTaskRemoveFromEventList>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00e      	beq.n	800576e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e007      	b.n	800576e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800575e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005762:	3301      	adds	r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	b25a      	sxtb	r2, r3
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800576e:	2301      	movs	r3, #1
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005772:	e001      	b.n	8005778 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005774:	2300      	movs	r3, #0
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005784:	4618      	mov	r0, r3
 8005786:	3738      	adds	r7, #56	; 0x38
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	; 0x38
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <xQueueGiveFromISR+0x28>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	e7fe      	b.n	80057b2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <xQueueGiveFromISR+0x44>
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	e7fe      	b.n	80057ce <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <xQueueGiveFromISR+0x54>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <xQueueGiveFromISR+0x58>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <xQueueGiveFromISR+0x5a>
 80057e4:	2300      	movs	r3, #0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <xQueueGiveFromISR+0x72>
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	61bb      	str	r3, [r7, #24]
 80057fc:	e7fe      	b.n	80057fc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057fe:	f001 fe71 	bl	80074e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005802:	f3ef 8211 	mrs	r2, BASEPRI
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	617a      	str	r2, [r7, #20]
 8005818:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800581a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582a:	429a      	cmp	r2, r3
 800582c:	d22b      	bcs.n	8005886 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d112      	bne.n	8005870 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d016      	beq.n	8005880 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	3324      	adds	r3, #36	; 0x24
 8005856:	4618      	mov	r0, r3
 8005858:	f001 f856 	bl	8006908 <xTaskRemoveFromEventList>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2201      	movs	r2, #1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e007      	b.n	8005880 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005874:	3301      	adds	r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	b25a      	sxtb	r2, r3
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005880:	2301      	movs	r3, #1
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
 8005884:	e001      	b.n	800588a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005886:	2300      	movs	r3, #0
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005896:	4618      	mov	r0, r3
 8005898:	3738      	adds	r7, #56	; 0x38
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08c      	sub	sp, #48	; 0x30
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058ac:	2300      	movs	r3, #0
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <xQueueReceive+0x2e>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	e7fe      	b.n	80058cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <xQueueReceive+0x3c>
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <xQueueReceive+0x40>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <xQueueReceive+0x42>
 80058e0:	2300      	movs	r3, #0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <xQueueReceive+0x5a>
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	e7fe      	b.n	80058f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058fa:	f001 f9bb 	bl	8006c74 <xTaskGetSchedulerState>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <xQueueReceive+0x6a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <xQueueReceive+0x6e>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <xQueueReceive+0x70>
 800590e:	2300      	movs	r3, #0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <xQueueReceive+0x88>
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e7fe      	b.n	8005926 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005928:	f001 fd00 	bl	800732c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01f      	beq.n	8005978 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593c:	f000 faef 	bl	8005f1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	1e5a      	subs	r2, r3, #1
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00f      	beq.n	8005970 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	3310      	adds	r3, #16
 8005954:	4618      	mov	r0, r3
 8005956:	f000 ffd7 	bl	8006908 <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b3c      	ldr	r3, [pc, #240]	; (8005a54 <xQueueReceive+0x1b4>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005970:	f001 fd0a 	bl	8007388 <vPortExitCritical>
				return pdPASS;
 8005974:	2301      	movs	r3, #1
 8005976:	e069      	b.n	8005a4c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800597e:	f001 fd03 	bl	8007388 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005982:	2300      	movs	r3, #0
 8005984:	e062      	b.n	8005a4c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800598c:	f107 0310 	add.w	r3, r7, #16
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f81b 	bl	80069cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005996:	2301      	movs	r3, #1
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800599a:	f001 fcf5 	bl	8007388 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800599e:	f000 fdb1 	bl	8006504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059a2:	f001 fcc3 	bl	800732c <vPortEnterCritical>
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ac:	b25b      	sxtb	r3, r3
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	d103      	bne.n	80059bc <xQueueReceive+0x11c>
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059c2:	b25b      	sxtb	r3, r3
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d103      	bne.n	80059d2 <xQueueReceive+0x132>
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059d2:	f001 fcd9 	bl	8007388 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059d6:	1d3a      	adds	r2, r7, #4
 80059d8:	f107 0310 	add.w	r3, r7, #16
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 f80a 	bl	80069f8 <xTaskCheckForTimeOut>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d123      	bne.n	8005a32 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ec:	f000 fb0f 	bl	800600e <prvIsQueueEmpty>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d017      	beq.n	8005a26 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	3324      	adds	r3, #36	; 0x24
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 ff5e 	bl	80068c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a06:	f000 fab0 	bl	8005f6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a0a:	f000 fd89 	bl	8006520 <xTaskResumeAll>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d189      	bne.n	8005928 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005a14:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <xQueueReceive+0x1b4>)
 8005a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	e780      	b.n	8005928 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a28:	f000 fa9f 	bl	8005f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a2c:	f000 fd78 	bl	8006520 <xTaskResumeAll>
 8005a30:	e77a      	b.n	8005928 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a34:	f000 fa99 	bl	8005f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a38:	f000 fd72 	bl	8006520 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a3e:	f000 fae6 	bl	800600e <prvIsQueueEmpty>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f43f af6f 	beq.w	8005928 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3730      	adds	r7, #48	; 0x30
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <xQueueSemaphoreTake+0x30>
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	e7fe      	b.n	8005a86 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <xQueueSemaphoreTake+0x4c>
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e7fe      	b.n	8005aa2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa4:	f001 f8e6 	bl	8006c74 <xTaskGetSchedulerState>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <xQueueSemaphoreTake+0x5c>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <xQueueSemaphoreTake+0x60>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <xQueueSemaphoreTake+0x62>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <xQueueSemaphoreTake+0x7a>
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ad2:	f001 fc2b 	bl	800732c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d024      	beq.n	8005b2c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	1e5a      	subs	r2, r3, #1
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005af2:	f001 fa79 	bl	8006fe8 <pvTaskIncrementMutexHeldCount>
 8005af6:	4602      	mov	r2, r0
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00f      	beq.n	8005b24 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	3310      	adds	r3, #16
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fefd 	bl	8006908 <xTaskRemoveFromEventList>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b14:	4b53      	ldr	r3, [pc, #332]	; (8005c64 <xQueueSemaphoreTake+0x20c>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b24:	f001 fc30 	bl	8007388 <vPortExitCritical>
				return pdPASS;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e096      	b.n	8005c5a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d110      	bne.n	8005b54 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <xQueueSemaphoreTake+0xf4>
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e7fe      	b.n	8005b4a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b4c:	f001 fc1c 	bl	8007388 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e082      	b.n	8005c5a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5a:	f107 030c 	add.w	r3, r7, #12
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 ff34 	bl	80069cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b64:	2301      	movs	r3, #1
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b68:	f001 fc0e 	bl	8007388 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b6c:	f000 fcca 	bl	8006504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b70:	f001 fbdc 	bl	800732c <vPortEnterCritical>
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b7a:	b25b      	sxtb	r3, r3
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b80:	d103      	bne.n	8005b8a <xQueueSemaphoreTake+0x132>
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d103      	bne.n	8005ba0 <xQueueSemaphoreTake+0x148>
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba0:	f001 fbf2 	bl	8007388 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	f107 030c 	add.w	r3, r7, #12
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 ff23 	bl	80069f8 <xTaskCheckForTimeOut>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d132      	bne.n	8005c1e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bba:	f000 fa28 	bl	800600e <prvIsQueueEmpty>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d026      	beq.n	8005c12 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005bcc:	f001 fbae 	bl	800732c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 f86b 	bl	8006cb0 <xTaskPriorityInherit>
 8005bda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005bdc:	f001 fbd4 	bl	8007388 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	3324      	adds	r3, #36	; 0x24
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fe69 	bl	80068c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bf0:	f000 f9bb 	bl	8005f6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bf4:	f000 fc94 	bl	8006520 <xTaskResumeAll>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f47f af69 	bne.w	8005ad2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005c00:	4b18      	ldr	r3, [pc, #96]	; (8005c64 <xQueueSemaphoreTake+0x20c>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	e75f      	b.n	8005ad2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c14:	f000 f9a9 	bl	8005f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c18:	f000 fc82 	bl	8006520 <xTaskResumeAll>
 8005c1c:	e759      	b.n	8005ad2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c20:	f000 f9a3 	bl	8005f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c24:	f000 fc7c 	bl	8006520 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c2a:	f000 f9f0 	bl	800600e <prvIsQueueEmpty>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f43f af4e 	beq.w	8005ad2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005c3c:	f001 fb76 	bl	800732c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c42:	f000 f8ea 	bl	8005e1a <prvGetDisinheritPriorityAfterTimeout>
 8005c46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 f932 	bl	8006eb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c54:	f001 fb98 	bl	8007388 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3738      	adds	r7, #56	; 0x38
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <xQueueReceiveFromISR+0x2a>
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	e7fe      	b.n	8005c90 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d103      	bne.n	8005ca0 <xQueueReceiveFromISR+0x38>
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <xQueueReceiveFromISR+0x3c>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <xQueueReceiveFromISR+0x3e>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <xQueueReceiveFromISR+0x56>
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	61fb      	str	r3, [r7, #28]
 8005cbc:	e7fe      	b.n	8005cbc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cbe:	f001 fc11 	bl	80074e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	61ba      	str	r2, [r7, #24]
 8005cd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005cda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d02f      	beq.n	8005d4a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cf8:	f000 f911 	bl	8005f1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	1e5a      	subs	r2, r3, #1
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0c:	d112      	bne.n	8005d34 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	3310      	adds	r3, #16
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fdf4 	bl	8006908 <xTaskRemoveFromEventList>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00e      	beq.n	8005d44 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	e007      	b.n	8005d44 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	b25a      	sxtb	r2, r3
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005d44:	2301      	movs	r3, #1
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
 8005d48:	e001      	b.n	8005d4e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3738      	adds	r7, #56	; 0x38
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d109      	bne.n	8005d84 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	e7fe      	b.n	8005d82 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005d84:	f001 fad2 	bl	800732c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005d8e:	f001 fafb 	bl	8007388 <vPortExitCritical>

	return uxReturn;
 8005d92:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <uxQueueMessagesWaitingFromISR+0x26>
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e7fe      	b.n	8005dc0 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005dc8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005dca:	4618      	mov	r0, r3
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <vQueueDelete+0x26>
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	e7fe      	b.n	8005dfa <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f935 	bl	800606c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f001 fc69 	bl	80076e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d006      	beq.n	8005e38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1c3 0307 	rsb	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e001      	b.n	8005e3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
	}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10d      	bne.n	8005e84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d14d      	bne.n	8005f0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 ff9b 	bl	8006db0 <xTaskPriorityDisinherit>
 8005e7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	e043      	b.n	8005f0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d119      	bne.n	8005ebe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6858      	ldr	r0, [r3, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	461a      	mov	r2, r3
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	f011 ff94 	bl	8017dc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	441a      	add	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d32b      	bcc.n	8005f0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]
 8005ebc:	e026      	b.n	8005f0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68d8      	ldr	r0, [r3, #12]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	f011 ff7a 	bl	8017dc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	425b      	negs	r3, r3
 8005ed8:	441a      	add	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d207      	bcs.n	8005efa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	425b      	negs	r3, r3
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d105      	bne.n	8005f0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f14:	697b      	ldr	r3, [r7, #20]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d018      	beq.n	8005f62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	441a      	add	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d303      	bcc.n	8005f52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68d9      	ldr	r1, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6838      	ldr	r0, [r7, #0]
 8005f5e:	f011 ff30 	bl	8017dc2 <memcpy>
	}
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f72:	f001 f9db 	bl	800732c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f7e:	e011      	b.n	8005fa4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d012      	beq.n	8005fae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3324      	adds	r3, #36	; 0x24
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fcbb 	bl	8006908 <xTaskRemoveFromEventList>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f98:	f000 fd8e 	bl	8006ab8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dce9      	bgt.n	8005f80 <prvUnlockQueue+0x16>
 8005fac:	e000      	b.n	8005fb0 <prvUnlockQueue+0x46>
					break;
 8005fae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	22ff      	movs	r2, #255	; 0xff
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fb8:	f001 f9e6 	bl	8007388 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fbc:	f001 f9b6 	bl	800732c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fc8:	e011      	b.n	8005fee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d012      	beq.n	8005ff8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3310      	adds	r3, #16
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fc96 	bl	8006908 <xTaskRemoveFromEventList>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fe2:	f000 fd69 	bl	8006ab8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fe6:	7bbb      	ldrb	r3, [r7, #14]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	dce9      	bgt.n	8005fca <prvUnlockQueue+0x60>
 8005ff6:	e000      	b.n	8005ffa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ff8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	22ff      	movs	r2, #255	; 0xff
 8005ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006002:	f001 f9c1 	bl	8007388 <vPortExitCritical>
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006016:	f001 f989 	bl	800732c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006022:	2301      	movs	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	e001      	b.n	800602c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800602c:	f001 f9ac 	bl	8007388 <vPortExitCritical>

	return xReturn;
 8006030:	68fb      	ldr	r3, [r7, #12]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006042:	f001 f973 	bl	800732c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604e:	429a      	cmp	r2, r3
 8006050:	d102      	bne.n	8006058 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006052:	2301      	movs	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	e001      	b.n	800605c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800605c:	f001 f994 	bl	8007388 <vPortExitCritical>

	return xReturn;
 8006060:	68fb      	ldr	r3, [r7, #12]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	e016      	b.n	80060a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800607a:	4a10      	ldr	r2, [pc, #64]	; (80060bc <vQueueUnregisterQueue+0x50>)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	4413      	add	r3, r2
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	429a      	cmp	r2, r3
 8006088:	d10b      	bne.n	80060a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800608a:	4a0c      	ldr	r2, [pc, #48]	; (80060bc <vQueueUnregisterQueue+0x50>)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2100      	movs	r1, #0
 8006090:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006094:	4a09      	ldr	r2, [pc, #36]	; (80060bc <vQueueUnregisterQueue+0x50>)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4413      	add	r3, r2
 800609c:	2200      	movs	r2, #0
 800609e:	605a      	str	r2, [r3, #4]
				break;
 80060a0:	e005      	b.n	80060ae <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b07      	cmp	r3, #7
 80060ac:	d9e5      	bls.n	800607a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	2000bd9c 	.word	0x2000bd9c

080060c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	; 0x38
 80060c4:	af04      	add	r7, sp, #16
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <xTaskCreateStatic+0x28>
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	623b      	str	r3, [r7, #32]
 80060e6:	e7fe      	b.n	80060e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <xTaskCreateStatic+0x42>
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e7fe      	b.n	8006100 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006102:	2354      	movs	r3, #84	; 0x54
 8006104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b54      	cmp	r3, #84	; 0x54
 800610a:	d009      	beq.n	8006120 <xTaskCreateStatic+0x60>
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e7fe      	b.n	800611e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006120:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01e      	beq.n	8006166 <xTaskCreateStatic+0xa6>
 8006128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01b      	beq.n	8006166 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006136:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006140:	2300      	movs	r3, #0
 8006142:	9303      	str	r3, [sp, #12]
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	9302      	str	r3, [sp, #8]
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f850 	bl	80061fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800615e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006160:	f000 f8d4 	bl	800630c <prvAddNewTaskToReadyList>
 8006164:	e001      	b.n	800616a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800616a:	697b      	ldr	r3, [r7, #20]
	}
 800616c:	4618      	mov	r0, r3
 800616e:	3728      	adds	r7, #40	; 0x28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	; 0x30
 8006178:	af04      	add	r7, sp, #16
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4618      	mov	r0, r3
 800618a:	f001 f9e9 	bl	8007560 <pvPortMalloc>
 800618e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006196:	2054      	movs	r0, #84	; 0x54
 8006198:	f001 f9e2 	bl	8007560 <pvPortMalloc>
 800619c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
 80061aa:	e005      	b.n	80061b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061ac:	6978      	ldr	r0, [r7, #20]
 80061ae:	f001 fa99 	bl	80076e4 <vPortFree>
 80061b2:	e001      	b.n	80061b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d017      	beq.n	80061ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	2300      	movs	r3, #0
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	9302      	str	r3, [sp, #8]
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f80e 	bl	80061fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061e2:	69f8      	ldr	r0, [r7, #28]
 80061e4:	f000 f892 	bl	800630c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061e8:	2301      	movs	r3, #1
 80061ea:	61bb      	str	r3, [r7, #24]
 80061ec:	e002      	b.n	80061f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061ee:	f04f 33ff 	mov.w	r3, #4294967295
 80061f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061f4:	69bb      	ldr	r3, [r7, #24]
	}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b088      	sub	sp, #32
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006216:	3b01      	subs	r3, #1
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f023 0307 	bic.w	r3, r3, #7
 8006224:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <prvInitialiseNewTask+0x46>
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	e7fe      	b.n	8006242 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01f      	beq.n	800628a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	e012      	b.n	8006276 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	7819      	ldrb	r1, [r3, #0]
 8006258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	3334      	adds	r3, #52	; 0x34
 8006260:	460a      	mov	r2, r1
 8006262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d006      	beq.n	800627e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b0f      	cmp	r3, #15
 800627a:	d9e9      	bls.n	8006250 <prvInitialiseNewTask+0x52>
 800627c:	e000      	b.n	8006280 <prvInitialiseNewTask+0x82>
			{
				break;
 800627e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006288:	e003      	b.n	8006292 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	2b06      	cmp	r3, #6
 8006296:	d901      	bls.n	800629c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006298:	2306      	movs	r3, #6
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	3304      	adds	r3, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe fec1 	bl	800503a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	3318      	adds	r3, #24
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe febc 	bl	800503a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	f1c3 0207 	rsb	r2, r3, #7
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	2200      	movs	r2, #0
 80062dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	68f9      	ldr	r1, [r7, #12]
 80062ea:	69b8      	ldr	r0, [r7, #24]
 80062ec:	f000 fef6 	bl	80070dc <pxPortInitialiseStack>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006302:	bf00      	nop
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006314:	f001 f80a 	bl	800732c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006318:	4b2a      	ldr	r3, [pc, #168]	; (80063c4 <prvAddNewTaskToReadyList+0xb8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	4a29      	ldr	r2, [pc, #164]	; (80063c4 <prvAddNewTaskToReadyList+0xb8>)
 8006320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006322:	4b29      	ldr	r3, [pc, #164]	; (80063c8 <prvAddNewTaskToReadyList+0xbc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800632a:	4a27      	ldr	r2, [pc, #156]	; (80063c8 <prvAddNewTaskToReadyList+0xbc>)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006330:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <prvAddNewTaskToReadyList+0xb8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d110      	bne.n	800635a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006338:	f000 fbe2 	bl	8006b00 <prvInitialiseTaskLists>
 800633c:	e00d      	b.n	800635a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800633e:	4b23      	ldr	r3, [pc, #140]	; (80063cc <prvAddNewTaskToReadyList+0xc0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <prvAddNewTaskToReadyList+0xbc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	429a      	cmp	r2, r3
 8006352:	d802      	bhi.n	800635a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006354:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <prvAddNewTaskToReadyList+0xbc>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800635a:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <prvAddNewTaskToReadyList+0xc4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <prvAddNewTaskToReadyList+0xc4>)
 8006362:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	2201      	movs	r2, #1
 800636a:	409a      	lsls	r2, r3
 800636c:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <prvAddNewTaskToReadyList+0xc8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4313      	orrs	r3, r2
 8006372:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <prvAddNewTaskToReadyList+0xc8>)
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <prvAddNewTaskToReadyList+0xcc>)
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f7fe fe61 	bl	8005054 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006392:	f000 fff9 	bl	8007388 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <prvAddNewTaskToReadyList+0xc0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00e      	beq.n	80063bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800639e:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <prvAddNewTaskToReadyList+0xbc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d207      	bcs.n	80063bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <prvAddNewTaskToReadyList+0xd0>)
 80063ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200005b0 	.word	0x200005b0
 80063c8:	200004b0 	.word	0x200004b0
 80063cc:	200005bc 	.word	0x200005bc
 80063d0:	200005cc 	.word	0x200005cc
 80063d4:	200005b8 	.word	0x200005b8
 80063d8:	200004b4 	.word	0x200004b4
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <vTaskDelay+0x60>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <vTaskDelay+0x2e>
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	e7fe      	b.n	800640c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800640e:	f000 f879 	bl	8006504 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006412:	2100      	movs	r1, #0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fdfb 	bl	8007010 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800641a:	f000 f881 	bl	8006520 <xTaskResumeAll>
 800641e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006426:	4b07      	ldr	r3, [pc, #28]	; (8006444 <vTaskDelay+0x64>)
 8006428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	200005d8 	.word	0x200005d8
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006456:	463a      	mov	r2, r7
 8006458:	1d39      	adds	r1, r7, #4
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	4618      	mov	r0, r3
 8006460:	f7fa f8ae 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	9202      	str	r2, [sp, #8]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	460a      	mov	r2, r1
 8006476:	491d      	ldr	r1, [pc, #116]	; (80064ec <vTaskStartScheduler+0xa4>)
 8006478:	481d      	ldr	r0, [pc, #116]	; (80064f0 <vTaskStartScheduler+0xa8>)
 800647a:	f7ff fe21 	bl	80060c0 <xTaskCreateStatic>
 800647e:	4602      	mov	r2, r0
 8006480:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <vTaskStartScheduler+0xac>)
 8006482:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006484:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <vTaskStartScheduler+0xac>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e001      	b.n	8006496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d115      	bne.n	80064c8 <vTaskStartScheduler+0x80>
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064ae:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <vTaskStartScheduler+0xb0>)
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295
 80064b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <vTaskStartScheduler+0xb4>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <vTaskStartScheduler+0xb8>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064c2:	f000 fe95 	bl	80071f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064c6:	e00d      	b.n	80064e4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d109      	bne.n	80064e4 <vTaskStartScheduler+0x9c>
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	e7fe      	b.n	80064e2 <vTaskStartScheduler+0x9a>
}
 80064e4:	bf00      	nop
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	08018ea8 	.word	0x08018ea8
 80064f0:	08006ad1 	.word	0x08006ad1
 80064f4:	200005d4 	.word	0x200005d4
 80064f8:	200005d0 	.word	0x200005d0
 80064fc:	200005bc 	.word	0x200005bc
 8006500:	200005b4 	.word	0x200005b4

08006504 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <vTaskSuspendAll+0x18>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	4a03      	ldr	r2, [pc, #12]	; (800651c <vTaskSuspendAll+0x18>)
 8006510:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006512:	bf00      	nop
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	200005d8 	.word	0x200005d8

08006520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800652e:	4b41      	ldr	r3, [pc, #260]	; (8006634 <xTaskResumeAll+0x114>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <xTaskResumeAll+0x2a>
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	e7fe      	b.n	8006548 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800654a:	f000 feef 	bl	800732c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800654e:	4b39      	ldr	r3, [pc, #228]	; (8006634 <xTaskResumeAll+0x114>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3b01      	subs	r3, #1
 8006554:	4a37      	ldr	r2, [pc, #220]	; (8006634 <xTaskResumeAll+0x114>)
 8006556:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006558:	4b36      	ldr	r3, [pc, #216]	; (8006634 <xTaskResumeAll+0x114>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d161      	bne.n	8006624 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006560:	4b35      	ldr	r3, [pc, #212]	; (8006638 <xTaskResumeAll+0x118>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05d      	beq.n	8006624 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006568:	e02e      	b.n	80065c8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656a:	4b34      	ldr	r3, [pc, #208]	; (800663c <xTaskResumeAll+0x11c>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3318      	adds	r3, #24
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fdc9 	bl	800510e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3304      	adds	r3, #4
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fdc4 	bl	800510e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	2201      	movs	r2, #1
 800658c:	409a      	lsls	r2, r3
 800658e:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <xTaskResumeAll+0x120>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4313      	orrs	r3, r2
 8006594:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <xTaskResumeAll+0x120>)
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4a27      	ldr	r2, [pc, #156]	; (8006644 <xTaskResumeAll+0x124>)
 80065a6:	441a      	add	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7fe fd50 	bl	8005054 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4b23      	ldr	r3, [pc, #140]	; (8006648 <xTaskResumeAll+0x128>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80065c2:	4b22      	ldr	r3, [pc, #136]	; (800664c <xTaskResumeAll+0x12c>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c8:	4b1c      	ldr	r3, [pc, #112]	; (800663c <xTaskResumeAll+0x11c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1cc      	bne.n	800656a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065d6:	f000 fb2d 	bl	8006c34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065da:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <xTaskResumeAll+0x130>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d010      	beq.n	8006608 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065e6:	f000 f859 	bl	800669c <xTaskIncrementTick>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80065f0:	4b16      	ldr	r3, [pc, #88]	; (800664c <xTaskResumeAll+0x12c>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f1      	bne.n	80065e6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006602:	4b13      	ldr	r3, [pc, #76]	; (8006650 <xTaskResumeAll+0x130>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <xTaskResumeAll+0x12c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <xTaskResumeAll+0x134>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006624:	f000 feb0 	bl	8007388 <vPortExitCritical>

	return xAlreadyYielded;
 8006628:	68bb      	ldr	r3, [r7, #8]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200005d8 	.word	0x200005d8
 8006638:	200005b0 	.word	0x200005b0
 800663c:	20000570 	.word	0x20000570
 8006640:	200005b8 	.word	0x200005b8
 8006644:	200004b4 	.word	0x200004b4
 8006648:	200004b0 	.word	0x200004b0
 800664c:	200005c4 	.word	0x200005c4
 8006650:	200005c0 	.word	0x200005c0
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <xTaskGetTickCount+0x1c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006664:	687b      	ldr	r3, [r7, #4]
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	200005b4 	.word	0x200005b4

08006678 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800667e:	f000 ff31 	bl	80074e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006682:	2300      	movs	r3, #0
 8006684:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006686:	4b04      	ldr	r3, [pc, #16]	; (8006698 <xTaskGetTickCountFromISR+0x20>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800668c:	683b      	ldr	r3, [r7, #0]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	200005b4 	.word	0x200005b4

0800669c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a6:	4b4e      	ldr	r3, [pc, #312]	; (80067e0 <xTaskIncrementTick+0x144>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 8087 	bne.w	80067be <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066b0:	4b4c      	ldr	r3, [pc, #304]	; (80067e4 <xTaskIncrementTick+0x148>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066b8:	4a4a      	ldr	r2, [pc, #296]	; (80067e4 <xTaskIncrementTick+0x148>)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11f      	bne.n	8006704 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80066c4:	4b48      	ldr	r3, [pc, #288]	; (80067e8 <xTaskIncrementTick+0x14c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <xTaskIncrementTick+0x46>
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	e7fe      	b.n	80066e0 <xTaskIncrementTick+0x44>
 80066e2:	4b41      	ldr	r3, [pc, #260]	; (80067e8 <xTaskIncrementTick+0x14c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	4b40      	ldr	r3, [pc, #256]	; (80067ec <xTaskIncrementTick+0x150>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3e      	ldr	r2, [pc, #248]	; (80067e8 <xTaskIncrementTick+0x14c>)
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	4a3e      	ldr	r2, [pc, #248]	; (80067ec <xTaskIncrementTick+0x150>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b3e      	ldr	r3, [pc, #248]	; (80067f0 <xTaskIncrementTick+0x154>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	4a3c      	ldr	r2, [pc, #240]	; (80067f0 <xTaskIncrementTick+0x154>)
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	f000 fa98 	bl	8006c34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006704:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <xTaskIncrementTick+0x158>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	429a      	cmp	r2, r3
 800670c:	d348      	bcc.n	80067a0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800670e:	4b36      	ldr	r3, [pc, #216]	; (80067e8 <xTaskIncrementTick+0x14c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006718:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <xTaskIncrementTick+0x158>)
 800671a:	f04f 32ff 	mov.w	r2, #4294967295
 800671e:	601a      	str	r2, [r3, #0]
					break;
 8006720:	e03e      	b.n	80067a0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006722:	4b31      	ldr	r3, [pc, #196]	; (80067e8 <xTaskIncrementTick+0x14c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d203      	bcs.n	8006742 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800673a:	4a2e      	ldr	r2, [pc, #184]	; (80067f4 <xTaskIncrementTick+0x158>)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006740:	e02e      	b.n	80067a0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	3304      	adds	r3, #4
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fce1 	bl	800510e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	3318      	adds	r3, #24
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fcd8 	bl	800510e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	2201      	movs	r2, #1
 8006764:	409a      	lsls	r2, r3
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <xTaskIncrementTick+0x15c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4313      	orrs	r3, r2
 800676c:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <xTaskIncrementTick+0x15c>)
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4a1f      	ldr	r2, [pc, #124]	; (80067fc <xTaskIncrementTick+0x160>)
 800677e:	441a      	add	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7fe fc64 	bl	8005054 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <xTaskIncrementTick+0x164>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	429a      	cmp	r2, r3
 8006798:	d3b9      	bcc.n	800670e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800679a:	2301      	movs	r3, #1
 800679c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800679e:	e7b6      	b.n	800670e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <xTaskIncrementTick+0x164>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	4915      	ldr	r1, [pc, #84]	; (80067fc <xTaskIncrementTick+0x160>)
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d907      	bls.n	80067c8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e004      	b.n	80067c8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <xTaskIncrementTick+0x168>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	4a0f      	ldr	r2, [pc, #60]	; (8006804 <xTaskIncrementTick+0x168>)
 80067c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <xTaskIncrementTick+0x16c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80067d0:	2301      	movs	r3, #1
 80067d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067d4:	697b      	ldr	r3, [r7, #20]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200005d8 	.word	0x200005d8
 80067e4:	200005b4 	.word	0x200005b4
 80067e8:	20000568 	.word	0x20000568
 80067ec:	2000056c 	.word	0x2000056c
 80067f0:	200005c8 	.word	0x200005c8
 80067f4:	200005d0 	.word	0x200005d0
 80067f8:	200005b8 	.word	0x200005b8
 80067fc:	200004b4 	.word	0x200004b4
 8006800:	200004b0 	.word	0x200004b0
 8006804:	200005c0 	.word	0x200005c0
 8006808:	200005c4 	.word	0x200005c4

0800680c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006812:	4b26      	ldr	r3, [pc, #152]	; (80068ac <vTaskSwitchContext+0xa0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800681a:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <vTaskSwitchContext+0xa4>)
 800681c:	2201      	movs	r2, #1
 800681e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006820:	e03e      	b.n	80068a0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006822:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <vTaskSwitchContext+0xa4>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006828:	4b22      	ldr	r3, [pc, #136]	; (80068b4 <vTaskSwitchContext+0xa8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	fab3 f383 	clz	r3, r3
 8006834:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	f1c3 031f 	rsb	r3, r3, #31
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	491e      	ldr	r1, [pc, #120]	; (80068b8 <vTaskSwitchContext+0xac>)
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	607b      	str	r3, [r7, #4]
 8006864:	e7fe      	b.n	8006864 <vTaskSwitchContext+0x58>
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <vTaskSwitchContext+0xac>)
 8006872:	4413      	add	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	3308      	adds	r3, #8
 8006888:	429a      	cmp	r2, r3
 800688a:	d104      	bne.n	8006896 <vTaskSwitchContext+0x8a>
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	4a07      	ldr	r2, [pc, #28]	; (80068bc <vTaskSwitchContext+0xb0>)
 800689e:	6013      	str	r3, [r2, #0]
}
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	200005d8 	.word	0x200005d8
 80068b0:	200005c4 	.word	0x200005c4
 80068b4:	200005b8 	.word	0x200005b8
 80068b8:	200004b4 	.word	0x200004b4
 80068bc:	200004b0 	.word	0x200004b0

080068c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <vTaskPlaceOnEventList+0x24>
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	e7fe      	b.n	80068e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <vTaskPlaceOnEventList+0x44>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3318      	adds	r3, #24
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fe fbd5 	bl	800509c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068f2:	2101      	movs	r1, #1
 80068f4:	6838      	ldr	r0, [r7, #0]
 80068f6:	f000 fb8b 	bl	8007010 <prvAddCurrentTaskToDelayedList>
}
 80068fa:	bf00      	nop
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	200004b0 	.word	0x200004b0

08006908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <xTaskRemoveFromEventList+0x2a>
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e7fe      	b.n	8006930 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3318      	adds	r3, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fbe9 	bl	800510e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800693c:	4b1d      	ldr	r3, [pc, #116]	; (80069b4 <xTaskRemoveFromEventList+0xac>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d11c      	bne.n	800697e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	3304      	adds	r3, #4
 8006948:	4618      	mov	r0, r3
 800694a:	f7fe fbe0 	bl	800510e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	2201      	movs	r2, #1
 8006954:	409a      	lsls	r2, r3
 8006956:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <xTaskRemoveFromEventList+0xb0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4313      	orrs	r3, r2
 800695c:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <xTaskRemoveFromEventList+0xb0>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a13      	ldr	r2, [pc, #76]	; (80069bc <xTaskRemoveFromEventList+0xb4>)
 800696e:	441a      	add	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fe fb6c 	bl	8005054 <vListInsertEnd>
 800697c:	e005      	b.n	800698a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	3318      	adds	r3, #24
 8006982:	4619      	mov	r1, r3
 8006984:	480e      	ldr	r0, [pc, #56]	; (80069c0 <xTaskRemoveFromEventList+0xb8>)
 8006986:	f7fe fb65 	bl	8005054 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <xTaskRemoveFromEventList+0xbc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	429a      	cmp	r2, r3
 8006996:	d905      	bls.n	80069a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006998:	2301      	movs	r3, #1
 800699a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <xTaskRemoveFromEventList+0xc0>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e001      	b.n	80069a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069a8:	697b      	ldr	r3, [r7, #20]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	200005d8 	.word	0x200005d8
 80069b8:	200005b8 	.word	0x200005b8
 80069bc:	200004b4 	.word	0x200004b4
 80069c0:	20000570 	.word	0x20000570
 80069c4:	200004b0 	.word	0x200004b0
 80069c8:	200005c4 	.word	0x200005c4

080069cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <vTaskInternalSetTimeOutState+0x24>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069dc:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <vTaskInternalSetTimeOutState+0x28>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	605a      	str	r2, [r3, #4]
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	200005c8 	.word	0x200005c8
 80069f4:	200005b4 	.word	0x200005b4

080069f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <xTaskCheckForTimeOut+0x24>
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	e7fe      	b.n	8006a1a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <xTaskCheckForTimeOut+0x3e>
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e7fe      	b.n	8006a34 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006a36:	f000 fc79 	bl	800732c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <xTaskCheckForTimeOut+0xb8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d102      	bne.n	8006a5a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	e023      	b.n	8006aa2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <xTaskCheckForTimeOut+0xbc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d007      	beq.n	8006a76 <xTaskCheckForTimeOut+0x7e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d302      	bcc.n	8006a76 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	61fb      	str	r3, [r7, #28]
 8006a74:	e015      	b.n	8006aa2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d20b      	bcs.n	8006a98 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	1ad2      	subs	r2, r2, r3
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff ff9d 	bl	80069cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	e004      	b.n	8006aa2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006aa2:	f000 fc71 	bl	8007388 <vPortExitCritical>

	return xReturn;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	200005b4 	.word	0x200005b4
 8006ab4:	200005c8 	.word	0x200005c8

08006ab8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006abc:	4b03      	ldr	r3, [pc, #12]	; (8006acc <vTaskMissedYield+0x14>)
 8006abe:	2201      	movs	r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	200005c4 	.word	0x200005c4

08006ad0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ad8:	f000 f852 	bl	8006b80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <prvIdleTask+0x28>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d9f9      	bls.n	8006ad8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <prvIdleTask+0x2c>)
 8006ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006af4:	e7f0      	b.n	8006ad8 <prvIdleTask+0x8>
 8006af6:	bf00      	nop
 8006af8:	200004b4 	.word	0x200004b4
 8006afc:	e000ed04 	.word	0xe000ed04

08006b00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
 8006b0a:	e00c      	b.n	8006b26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4a12      	ldr	r2, [pc, #72]	; (8006b60 <prvInitialiseTaskLists+0x60>)
 8006b18:	4413      	add	r3, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fa6d 	bl	8004ffa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3301      	adds	r3, #1
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b06      	cmp	r3, #6
 8006b2a:	d9ef      	bls.n	8006b0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b2c:	480d      	ldr	r0, [pc, #52]	; (8006b64 <prvInitialiseTaskLists+0x64>)
 8006b2e:	f7fe fa64 	bl	8004ffa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b32:	480d      	ldr	r0, [pc, #52]	; (8006b68 <prvInitialiseTaskLists+0x68>)
 8006b34:	f7fe fa61 	bl	8004ffa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b38:	480c      	ldr	r0, [pc, #48]	; (8006b6c <prvInitialiseTaskLists+0x6c>)
 8006b3a:	f7fe fa5e 	bl	8004ffa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b3e:	480c      	ldr	r0, [pc, #48]	; (8006b70 <prvInitialiseTaskLists+0x70>)
 8006b40:	f7fe fa5b 	bl	8004ffa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b44:	480b      	ldr	r0, [pc, #44]	; (8006b74 <prvInitialiseTaskLists+0x74>)
 8006b46:	f7fe fa58 	bl	8004ffa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <prvInitialiseTaskLists+0x78>)
 8006b4c:	4a05      	ldr	r2, [pc, #20]	; (8006b64 <prvInitialiseTaskLists+0x64>)
 8006b4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b50:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <prvInitialiseTaskLists+0x7c>)
 8006b52:	4a05      	ldr	r2, [pc, #20]	; (8006b68 <prvInitialiseTaskLists+0x68>)
 8006b54:	601a      	str	r2, [r3, #0]
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	200004b4 	.word	0x200004b4
 8006b64:	20000540 	.word	0x20000540
 8006b68:	20000554 	.word	0x20000554
 8006b6c:	20000570 	.word	0x20000570
 8006b70:	20000584 	.word	0x20000584
 8006b74:	2000059c 	.word	0x2000059c
 8006b78:	20000568 	.word	0x20000568
 8006b7c:	2000056c 	.word	0x2000056c

08006b80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b86:	e019      	b.n	8006bbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b88:	f000 fbd0 	bl	800732c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <prvCheckTasksWaitingTermination+0x4c>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fab8 	bl	800510e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b9e:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <prvCheckTasksWaitingTermination+0x50>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <prvCheckTasksWaitingTermination+0x50>)
 8006ba6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <prvCheckTasksWaitingTermination+0x54>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <prvCheckTasksWaitingTermination+0x54>)
 8006bb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006bb2:	f000 fbe9 	bl	8007388 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f80e 	bl	8006bd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <prvCheckTasksWaitingTermination+0x54>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e1      	bne.n	8006b88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000584 	.word	0x20000584
 8006bd0:	200005b0 	.word	0x200005b0
 8006bd4:	20000598 	.word	0x20000598

08006bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d108      	bne.n	8006bfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fd78 	bl	80076e4 <vPortFree>
				vPortFree( pxTCB );
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fd75 	bl	80076e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bfa:	e017      	b.n	8006c2c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d103      	bne.n	8006c0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fd6c 	bl	80076e4 <vPortFree>
	}
 8006c0c:	e00e      	b.n	8006c2c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d009      	beq.n	8006c2c <prvDeleteTCB+0x54>
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e7fe      	b.n	8006c2a <prvDeleteTCB+0x52>
	}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <prvResetNextTaskUnblockTime+0x38>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c44:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <prvResetNextTaskUnblockTime+0x3c>)
 8006c46:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c4c:	e008      	b.n	8006c60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4e:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <prvResetNextTaskUnblockTime+0x38>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4a04      	ldr	r2, [pc, #16]	; (8006c70 <prvResetNextTaskUnblockTime+0x3c>)
 8006c5e:	6013      	str	r3, [r2, #0]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000568 	.word	0x20000568
 8006c70:	200005d0 	.word	0x200005d0

08006c74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <xTaskGetSchedulerState+0x34>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c82:	2301      	movs	r3, #1
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	e008      	b.n	8006c9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <xTaskGetSchedulerState+0x38>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c90:	2302      	movs	r3, #2
 8006c92:	607b      	str	r3, [r7, #4]
 8006c94:	e001      	b.n	8006c9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c96:	2300      	movs	r3, #0
 8006c98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c9a:	687b      	ldr	r3, [r7, #4]
	}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	200005bc 	.word	0x200005bc
 8006cac:	200005d8 	.word	0x200005d8

08006cb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d069      	beq.n	8006d9a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cca:	4b36      	ldr	r3, [pc, #216]	; (8006da4 <xTaskPriorityInherit+0xf4>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d259      	bcs.n	8006d88 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	db06      	blt.n	8006cea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cdc:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <xTaskPriorityInherit+0xf4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	f1c3 0207 	rsb	r2, r3, #7
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6959      	ldr	r1, [r3, #20]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4a2b      	ldr	r2, [pc, #172]	; (8006da8 <xTaskPriorityInherit+0xf8>)
 8006cfc:	4413      	add	r3, r2
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	d13a      	bne.n	8006d78 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fa01 	bl	800510e <uxListRemove>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d115      	bne.n	8006d3e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d16:	4924      	ldr	r1, [pc, #144]	; (8006da8 <xTaskPriorityInherit+0xf8>)
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	440b      	add	r3, r1
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <xTaskPriorityInherit+0x8e>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43da      	mvns	r2, r3
 8006d34:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <xTaskPriorityInherit+0xfc>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <xTaskPriorityInherit+0xfc>)
 8006d3c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d3e:	4b19      	ldr	r3, [pc, #100]	; (8006da4 <xTaskPriorityInherit+0xf4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	4b16      	ldr	r3, [pc, #88]	; (8006dac <xTaskPriorityInherit+0xfc>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	4a15      	ldr	r2, [pc, #84]	; (8006dac <xTaskPriorityInherit+0xfc>)
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4a10      	ldr	r2, [pc, #64]	; (8006da8 <xTaskPriorityInherit+0xf8>)
 8006d68:	441a      	add	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f7fe f96f 	bl	8005054 <vListInsertEnd>
 8006d76:	e004      	b.n	8006d82 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <xTaskPriorityInherit+0xf4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e008      	b.n	8006d9a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d8c:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <xTaskPriorityInherit+0xf4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d201      	bcs.n	8006d9a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d96:	2301      	movs	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200004b0 	.word	0x200004b0
 8006da8:	200004b4 	.word	0x200004b4
 8006dac:	200005b8 	.word	0x200005b8

08006db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d06c      	beq.n	8006ea0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dc6:	4b39      	ldr	r3, [pc, #228]	; (8006eac <xTaskPriorityDisinherit+0xfc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d009      	beq.n	8006de4 <xTaskPriorityDisinherit+0x34>
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e7fe      	b.n	8006de2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <xTaskPriorityDisinherit+0x50>
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	e7fe      	b.n	8006dfe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e04:	1e5a      	subs	r2, r3, #1
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d044      	beq.n	8006ea0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d140      	bne.n	8006ea0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3304      	adds	r3, #4
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe f973 	bl	800510e <uxListRemove>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d115      	bne.n	8006e5a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	491f      	ldr	r1, [pc, #124]	; (8006eb0 <xTaskPriorityDisinherit+0x100>)
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <xTaskPriorityDisinherit+0xaa>
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	2201      	movs	r2, #1
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	43da      	mvns	r2, r3
 8006e50:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <xTaskPriorityDisinherit+0x104>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4013      	ands	r3, r2
 8006e56:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <xTaskPriorityDisinherit+0x104>)
 8006e58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	f1c3 0207 	rsb	r2, r3, #7
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	2201      	movs	r2, #1
 8006e74:	409a      	lsls	r2, r3
 8006e76:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <xTaskPriorityDisinherit+0x104>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	4a0d      	ldr	r2, [pc, #52]	; (8006eb4 <xTaskPriorityDisinherit+0x104>)
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <xTaskPriorityDisinherit+0x100>)
 8006e8e:	441a      	add	r2, r3
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4619      	mov	r1, r3
 8006e96:	4610      	mov	r0, r2
 8006e98:	f7fe f8dc 	bl	8005054 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ea0:	697b      	ldr	r3, [r7, #20]
	}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	200004b0 	.word	0x200004b0
 8006eb0:	200004b4 	.word	0x200004b4
 8006eb4:	200005b8 	.word	0x200005b8

08006eb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8081 	beq.w	8006fd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	e7fe      	b.n	8006eec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d902      	bls.n	8006efe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	e002      	b.n	8006f04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d062      	beq.n	8006fd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d15d      	bne.n	8006fd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f18:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d109      	bne.n	8006f36 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	60bb      	str	r3, [r7, #8]
 8006f34:	e7fe      	b.n	8006f34 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	db04      	blt.n	8006f54 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f1c3 0207 	rsb	r2, r3, #7
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	6959      	ldr	r1, [r3, #20]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4a1f      	ldr	r2, [pc, #124]	; (8006fe0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006f64:	4413      	add	r3, r2
 8006f66:	4299      	cmp	r1, r3
 8006f68:	d134      	bne.n	8006fd4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe f8cd 	bl	800510e <uxListRemove>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d115      	bne.n	8006fa6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7e:	4918      	ldr	r1, [pc, #96]	; (8006fe0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	2201      	movs	r2, #1
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	43da      	mvns	r2, r3
 8006f9c:	4b11      	ldr	r3, [pc, #68]	; (8006fe4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	4a10      	ldr	r2, [pc, #64]	; (8006fe4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006fa4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	2201      	movs	r2, #1
 8006fac:	409a      	lsls	r2, r3
 8006fae:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	4a0b      	ldr	r2, [pc, #44]	; (8006fe4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4a06      	ldr	r2, [pc, #24]	; (8006fe0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006fc6:	441a      	add	r2, r3
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fe f840 	bl	8005054 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fd4:	bf00      	nop
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200004b0 	.word	0x200004b0
 8006fe0:	200004b4 	.word	0x200004b4
 8006fe4:	200005b8 	.word	0x200005b8

08006fe8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <pvTaskIncrementMutexHeldCount+0x24>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <pvTaskIncrementMutexHeldCount+0x24>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ffa:	3201      	adds	r2, #1
 8006ffc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006ffe:	4b03      	ldr	r3, [pc, #12]	; (800700c <pvTaskIncrementMutexHeldCount+0x24>)
 8007000:	681b      	ldr	r3, [r3, #0]
	}
 8007002:	4618      	mov	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	200004b0 	.word	0x200004b0

08007010 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800701a:	4b29      	ldr	r3, [pc, #164]	; (80070c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007020:	4b28      	ldr	r3, [pc, #160]	; (80070c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3304      	adds	r3, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe f871 	bl	800510e <uxListRemove>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10b      	bne.n	800704a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	2201      	movs	r2, #1
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43da      	mvns	r2, r3
 8007040:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4013      	ands	r3, r2
 8007046:	4a20      	ldr	r2, [pc, #128]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007048:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d10a      	bne.n	8007068 <prvAddCurrentTaskToDelayedList+0x58>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007058:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3304      	adds	r3, #4
 800705e:	4619      	mov	r1, r3
 8007060:	481a      	ldr	r0, [pc, #104]	; (80070cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007062:	f7fd fff7 	bl	8005054 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007066:	e026      	b.n	80070b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007070:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	429a      	cmp	r2, r3
 800707e:	d209      	bcs.n	8007094 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3304      	adds	r3, #4
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f7fe f805 	bl	800509c <vListInsert>
}
 8007092:	e010      	b.n	80070b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007094:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f7fd fffb 	bl	800509c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070a6:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d202      	bcs.n	80070b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80070b0:	4a09      	ldr	r2, [pc, #36]	; (80070d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6013      	str	r3, [r2, #0]
}
 80070b6:	bf00      	nop
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	200005b4 	.word	0x200005b4
 80070c4:	200004b0 	.word	0x200004b0
 80070c8:	200005b8 	.word	0x200005b8
 80070cc:	2000059c 	.word	0x2000059c
 80070d0:	2000056c 	.word	0x2000056c
 80070d4:	20000568 	.word	0x20000568
 80070d8:	200005d0 	.word	0x200005d0

080070dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b04      	subs	r3, #4
 80070ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3b04      	subs	r3, #4
 80070fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f023 0201 	bic.w	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3b04      	subs	r3, #4
 800710a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800710c:	4a0c      	ldr	r2, [pc, #48]	; (8007140 <pxPortInitialiseStack+0x64>)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3b14      	subs	r3, #20
 8007116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3b04      	subs	r3, #4
 8007122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f06f 0202 	mvn.w	r2, #2
 800712a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3b20      	subs	r3, #32
 8007130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007132:	68fb      	ldr	r3, [r7, #12]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	08007145 	.word	0x08007145

08007144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <prvTaskExitError+0x50>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d009      	beq.n	800716c <prvTaskExitError+0x28>
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e7fe      	b.n	800716a <prvTaskExitError+0x26>
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800717e:	bf00      	nop
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0fc      	beq.n	8007180 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	2000000c 	.word	0x2000000c
	...

080071a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <pxCurrentTCBConst2>)
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	6808      	ldr	r0, [r1, #0]
 80071a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071aa:	f380 8809 	msr	PSP, r0
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f380 8811 	msr	BASEPRI, r0
 80071ba:	4770      	bx	lr
 80071bc:	f3af 8000 	nop.w

080071c0 <pxCurrentTCBConst2>:
 80071c0:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop

080071c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071c8:	4808      	ldr	r0, [pc, #32]	; (80071ec <prvPortStartFirstTask+0x24>)
 80071ca:	6800      	ldr	r0, [r0, #0]
 80071cc:	6800      	ldr	r0, [r0, #0]
 80071ce:	f380 8808 	msr	MSP, r0
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8814 	msr	CONTROL, r0
 80071da:	b662      	cpsie	i
 80071dc:	b661      	cpsie	f
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	df00      	svc	0
 80071e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ea:	bf00      	nop
 80071ec:	e000ed08 	.word	0xe000ed08

080071f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071f6:	4b44      	ldr	r3, [pc, #272]	; (8007308 <xPortStartScheduler+0x118>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a44      	ldr	r2, [pc, #272]	; (800730c <xPortStartScheduler+0x11c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d109      	bne.n	8007214 <xPortStartScheduler+0x24>
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	e7fe      	b.n	8007212 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007214:	4b3c      	ldr	r3, [pc, #240]	; (8007308 <xPortStartScheduler+0x118>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a3d      	ldr	r2, [pc, #244]	; (8007310 <xPortStartScheduler+0x120>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d109      	bne.n	8007232 <xPortStartScheduler+0x42>
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e7fe      	b.n	8007230 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007232:	4b38      	ldr	r3, [pc, #224]	; (8007314 <xPortStartScheduler+0x124>)
 8007234:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	22ff      	movs	r2, #255	; 0xff
 8007242:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007254:	b2da      	uxtb	r2, r3
 8007256:	4b30      	ldr	r3, [pc, #192]	; (8007318 <xPortStartScheduler+0x128>)
 8007258:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800725a:	4b30      	ldr	r3, [pc, #192]	; (800731c <xPortStartScheduler+0x12c>)
 800725c:	2207      	movs	r2, #7
 800725e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007260:	e009      	b.n	8007276 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007262:	4b2e      	ldr	r3, [pc, #184]	; (800731c <xPortStartScheduler+0x12c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3b01      	subs	r3, #1
 8007268:	4a2c      	ldr	r2, [pc, #176]	; (800731c <xPortStartScheduler+0x12c>)
 800726a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	b2db      	uxtb	r3, r3
 8007274:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d0ef      	beq.n	8007262 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007282:	4b26      	ldr	r3, [pc, #152]	; (800731c <xPortStartScheduler+0x12c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f1c3 0307 	rsb	r3, r3, #7
 800728a:	2b04      	cmp	r3, #4
 800728c:	d009      	beq.n	80072a2 <xPortStartScheduler+0xb2>
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	e7fe      	b.n	80072a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <xPortStartScheduler+0x12c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <xPortStartScheduler+0x12c>)
 80072aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072ac:	4b1b      	ldr	r3, [pc, #108]	; (800731c <xPortStartScheduler+0x12c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072b4:	4a19      	ldr	r2, [pc, #100]	; (800731c <xPortStartScheduler+0x12c>)
 80072b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072c0:	4b17      	ldr	r3, [pc, #92]	; (8007320 <xPortStartScheduler+0x130>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <xPortStartScheduler+0x130>)
 80072c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072cc:	4b14      	ldr	r3, [pc, #80]	; (8007320 <xPortStartScheduler+0x130>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a13      	ldr	r2, [pc, #76]	; (8007320 <xPortStartScheduler+0x130>)
 80072d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072d8:	f000 f8d6 	bl	8007488 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072dc:	4b11      	ldr	r3, [pc, #68]	; (8007324 <xPortStartScheduler+0x134>)
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072e2:	f000 f8f5 	bl	80074d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <xPortStartScheduler+0x138>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a0f      	ldr	r2, [pc, #60]	; (8007328 <xPortStartScheduler+0x138>)
 80072ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072f2:	f7ff ff69 	bl	80071c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072f6:	f7ff fa89 	bl	800680c <vTaskSwitchContext>
	prvTaskExitError();
 80072fa:	f7ff ff23 	bl	8007144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	e000ed00 	.word	0xe000ed00
 800730c:	410fc271 	.word	0x410fc271
 8007310:	410fc270 	.word	0x410fc270
 8007314:	e000e400 	.word	0xe000e400
 8007318:	200005dc 	.word	0x200005dc
 800731c:	200005e0 	.word	0x200005e0
 8007320:	e000ed20 	.word	0xe000ed20
 8007324:	2000000c 	.word	0x2000000c
 8007328:	e000ef34 	.word	0xe000ef34

0800732c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <vPortEnterCritical+0x54>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	4a0d      	ldr	r2, [pc, #52]	; (8007380 <vPortEnterCritical+0x54>)
 800734c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <vPortEnterCritical+0x54>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d10e      	bne.n	8007374 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007356:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <vPortEnterCritical+0x58>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <vPortEnterCritical+0x48>
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	e7fe      	b.n	8007372 <vPortEnterCritical+0x46>
	}
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	2000000c 	.word	0x2000000c
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800738e:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <vPortExitCritical+0x4c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <vPortExitCritical+0x22>
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	e7fe      	b.n	80073a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80073aa:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <vPortExitCritical+0x4c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <vPortExitCritical+0x4c>)
 80073b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073b4:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <vPortExitCritical+0x4c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <vPortExitCritical+0x3e>
 80073bc:	2300      	movs	r3, #0
 80073be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	2000000c 	.word	0x2000000c
	...

080073e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073e0:	f3ef 8009 	mrs	r0, PSP
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	4b15      	ldr	r3, [pc, #84]	; (8007440 <pxCurrentTCBConst>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	f01e 0f10 	tst.w	lr, #16
 80073f0:	bf08      	it	eq
 80073f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	6010      	str	r0, [r2, #0]
 80073fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007404:	f380 8811 	msr	BASEPRI, r0
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f7ff f9fc 	bl	800680c <vTaskSwitchContext>
 8007414:	f04f 0000 	mov.w	r0, #0
 8007418:	f380 8811 	msr	BASEPRI, r0
 800741c:	bc09      	pop	{r0, r3}
 800741e:	6819      	ldr	r1, [r3, #0]
 8007420:	6808      	ldr	r0, [r1, #0]
 8007422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007426:	f01e 0f10 	tst.w	lr, #16
 800742a:	bf08      	it	eq
 800742c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007430:	f380 8809 	msr	PSP, r0
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	f3af 8000 	nop.w

08007440 <pxCurrentTCBConst>:
 8007440:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop

08007448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007460:	f7ff f91c 	bl	800669c <xTaskIncrementTick>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <SysTick_Handler+0x3c>)
 800746c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	2300      	movs	r3, #0
 8007474:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	e000ed04 	.word	0xe000ed04

08007488 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800748c:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <vPortSetupTimerInterrupt+0x34>)
 800748e:	2200      	movs	r2, #0
 8007490:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <vPortSetupTimerInterrupt+0x38>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <vPortSetupTimerInterrupt+0x3c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a0a      	ldr	r2, [pc, #40]	; (80074c8 <vPortSetupTimerInterrupt+0x40>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	099b      	lsrs	r3, r3, #6
 80074a4:	4a09      	ldr	r2, [pc, #36]	; (80074cc <vPortSetupTimerInterrupt+0x44>)
 80074a6:	3b01      	subs	r3, #1
 80074a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074aa:	4b04      	ldr	r3, [pc, #16]	; (80074bc <vPortSetupTimerInterrupt+0x34>)
 80074ac:	2207      	movs	r2, #7
 80074ae:	601a      	str	r2, [r3, #0]
}
 80074b0:	bf00      	nop
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	e000e010 	.word	0xe000e010
 80074c0:	e000e018 	.word	0xe000e018
 80074c4:	20000000 	.word	0x20000000
 80074c8:	10624dd3 	.word	0x10624dd3
 80074cc:	e000e014 	.word	0xe000e014

080074d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074e0 <vPortEnableVFP+0x10>
 80074d4:	6801      	ldr	r1, [r0, #0]
 80074d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074da:	6001      	str	r1, [r0, #0]
 80074dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074de:	bf00      	nop
 80074e0:	e000ed88 	.word	0xe000ed88

080074e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074ea:	f3ef 8305 	mrs	r3, IPSR
 80074ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b0f      	cmp	r3, #15
 80074f4:	d913      	bls.n	800751e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074f6:	4a16      	ldr	r2, [pc, #88]	; (8007550 <vPortValidateInterruptPriority+0x6c>)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007500:	4b14      	ldr	r3, [pc, #80]	; (8007554 <vPortValidateInterruptPriority+0x70>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	7afa      	ldrb	r2, [r7, #11]
 8007506:	429a      	cmp	r2, r3
 8007508:	d209      	bcs.n	800751e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	e7fe      	b.n	800751c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800751e:	4b0e      	ldr	r3, [pc, #56]	; (8007558 <vPortValidateInterruptPriority+0x74>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007526:	4b0d      	ldr	r3, [pc, #52]	; (800755c <vPortValidateInterruptPriority+0x78>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d909      	bls.n	8007542 <vPortValidateInterruptPriority+0x5e>
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	e7fe      	b.n	8007540 <vPortValidateInterruptPriority+0x5c>
	}
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	e000e3f0 	.word	0xe000e3f0
 8007554:	200005dc 	.word	0x200005dc
 8007558:	e000ed0c 	.word	0xe000ed0c
 800755c:	200005e0 	.word	0x200005e0

08007560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	; 0x28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007568:	2300      	movs	r3, #0
 800756a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800756c:	f7fe ffca 	bl	8006504 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007570:	4b57      	ldr	r3, [pc, #348]	; (80076d0 <pvPortMalloc+0x170>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007578:	f000 f90c 	bl	8007794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800757c:	4b55      	ldr	r3, [pc, #340]	; (80076d4 <pvPortMalloc+0x174>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4013      	ands	r3, r2
 8007584:	2b00      	cmp	r3, #0
 8007586:	f040 808c 	bne.w	80076a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01c      	beq.n	80075ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007590:	2208      	movs	r2, #8
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4413      	add	r3, r2
 8007596:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d013      	beq.n	80075ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	3308      	adds	r3, #8
 80075aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <pvPortMalloc+0x6a>
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	e7fe      	b.n	80075c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d068      	beq.n	80076a2 <pvPortMalloc+0x142>
 80075d0:	4b41      	ldr	r3, [pc, #260]	; (80076d8 <pvPortMalloc+0x178>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d863      	bhi.n	80076a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075da:	4b40      	ldr	r3, [pc, #256]	; (80076dc <pvPortMalloc+0x17c>)
 80075dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075de:	4b3f      	ldr	r3, [pc, #252]	; (80076dc <pvPortMalloc+0x17c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075e4:	e004      	b.n	80075f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d903      	bls.n	8007602 <pvPortMalloc+0xa2>
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f1      	bne.n	80075e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007602:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <pvPortMalloc+0x170>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007608:	429a      	cmp	r2, r3
 800760a:	d04a      	beq.n	80076a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2208      	movs	r2, #8
 8007612:	4413      	add	r3, r2
 8007614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	1ad2      	subs	r2, r2, r3
 8007626:	2308      	movs	r3, #8
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	429a      	cmp	r2, r3
 800762c:	d91e      	bls.n	800766c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800762e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <pvPortMalloc+0xf4>
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	613b      	str	r3, [r7, #16]
 8007652:	e7fe      	b.n	8007652 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1ad2      	subs	r2, r2, r3
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007666:	69b8      	ldr	r0, [r7, #24]
 8007668:	f000 f8f6 	bl	8007858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <pvPortMalloc+0x178>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <pvPortMalloc+0x178>)
 8007678:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800767a:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <pvPortMalloc+0x178>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b18      	ldr	r3, [pc, #96]	; (80076e0 <pvPortMalloc+0x180>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d203      	bcs.n	800768e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007686:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <pvPortMalloc+0x178>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a15      	ldr	r2, [pc, #84]	; (80076e0 <pvPortMalloc+0x180>)
 800768c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <pvPortMalloc+0x174>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	431a      	orrs	r2, r3
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076a2:	f7fe ff3d 	bl	8006520 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d009      	beq.n	80076c4 <pvPortMalloc+0x164>
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e7fe      	b.n	80076c2 <pvPortMalloc+0x162>
	return pvReturn;
 80076c4:	69fb      	ldr	r3, [r7, #28]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3728      	adds	r7, #40	; 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200085ec 	.word	0x200085ec
 80076d4:	200085f8 	.word	0x200085f8
 80076d8:	200085f0 	.word	0x200085f0
 80076dc:	200085e4 	.word	0x200085e4
 80076e0:	200085f4 	.word	0x200085f4

080076e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d046      	beq.n	8007784 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076f6:	2308      	movs	r3, #8
 80076f8:	425b      	negs	r3, r3
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	4b20      	ldr	r3, [pc, #128]	; (800778c <vPortFree+0xa8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4013      	ands	r3, r2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <vPortFree+0x42>
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e7fe      	b.n	8007724 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <vPortFree+0x5e>
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	60bb      	str	r3, [r7, #8]
 8007740:	e7fe      	b.n	8007740 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <vPortFree+0xa8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d019      	beq.n	8007784 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d115      	bne.n	8007784 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <vPortFree+0xa8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	43db      	mvns	r3, r3
 8007762:	401a      	ands	r2, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007768:	f7fe fecc 	bl	8006504 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <vPortFree+0xac>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4413      	add	r3, r2
 8007776:	4a06      	ldr	r2, [pc, #24]	; (8007790 <vPortFree+0xac>)
 8007778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800777a:	6938      	ldr	r0, [r7, #16]
 800777c:	f000 f86c 	bl	8007858 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007780:	f7fe fece 	bl	8006520 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007784:	bf00      	nop
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	200085f8 	.word	0x200085f8
 8007790:	200085f0 	.word	0x200085f0

08007794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800779a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077a0:	4b27      	ldr	r3, [pc, #156]	; (8007840 <prvHeapInit+0xac>)
 80077a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00c      	beq.n	80077c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3307      	adds	r3, #7
 80077b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <prvHeapInit+0xac>)
 80077c4:	4413      	add	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <prvHeapInit+0xb0>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077d2:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <prvHeapInit+0xb0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4413      	add	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077e0:	2208      	movs	r2, #8
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0307 	bic.w	r3, r3, #7
 80077ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a15      	ldr	r2, [pc, #84]	; (8007848 <prvHeapInit+0xb4>)
 80077f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <prvHeapInit+0xb4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2200      	movs	r2, #0
 80077fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <prvHeapInit+0xb4>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	1ad2      	subs	r2, r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <prvHeapInit+0xb4>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <prvHeapInit+0xb8>)
 8007822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <prvHeapInit+0xbc>)
 800782a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800782c:	4b09      	ldr	r3, [pc, #36]	; (8007854 <prvHeapInit+0xc0>)
 800782e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007832:	601a      	str	r2, [r3, #0]
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	200005e4 	.word	0x200005e4
 8007844:	200085e4 	.word	0x200085e4
 8007848:	200085ec 	.word	0x200085ec
 800784c:	200085f4 	.word	0x200085f4
 8007850:	200085f0 	.word	0x200085f0
 8007854:	200085f8 	.word	0x200085f8

08007858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007860:	4b28      	ldr	r3, [pc, #160]	; (8007904 <prvInsertBlockIntoFreeList+0xac>)
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e002      	b.n	800786c <prvInsertBlockIntoFreeList+0x14>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	429a      	cmp	r2, r3
 8007874:	d8f7      	bhi.n	8007866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	d108      	bne.n	800789a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	441a      	add	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d118      	bne.n	80078e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b15      	ldr	r3, [pc, #84]	; (8007908 <prvInsertBlockIntoFreeList+0xb0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d00d      	beq.n	80078d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	441a      	add	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e008      	b.n	80078e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078d6:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <prvInsertBlockIntoFreeList+0xb0>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e003      	b.n	80078e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d002      	beq.n	80078f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	200085e4 	.word	0x200085e4
 8007908:	200085ec 	.word	0x200085ec

0800790c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	330c      	adds	r3, #12
 800791c:	461a      	mov	r2, r3
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f002 fa99 	bl	8009e58 <tcpip_send_msg_wait_sem>
 8007926:	4603      	mov	r3, r0
 8007928:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800792a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007938:	e001      	b.n	800793e <netconn_apimsg+0x32>
  }
  return err;
 800793a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	; 0x30
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	603a      	str	r2, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
 8007954:	460b      	mov	r3, r1
 8007956:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f91f 	bl	8008ba0 <netconn_alloc>
 8007962:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d054      	beq.n	8007a14 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800796a:	79bb      	ldrb	r3, [r7, #6]
 800796c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007972:	f107 0308 	add.w	r3, r7, #8
 8007976:	4619      	mov	r1, r3
 8007978:	4829      	ldr	r0, [pc, #164]	; (8007a20 <netconn_new_with_proto_and_callback+0xd8>)
 800797a:	f7ff ffc7 	bl	800790c <netconn_apimsg>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007984:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007988:	2b00      	cmp	r3, #0
 800798a:	d043      	beq.n	8007a14 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <netconn_new_with_proto_and_callback+0x58>
 8007994:	4b23      	ldr	r3, [pc, #140]	; (8007a24 <netconn_new_with_proto_and_callback+0xdc>)
 8007996:	22a3      	movs	r2, #163	; 0xa3
 8007998:	4923      	ldr	r1, [pc, #140]	; (8007a28 <netconn_new_with_proto_and_callback+0xe0>)
 800799a:	4824      	ldr	r0, [pc, #144]	; (8007a2c <netconn_new_with_proto_and_callback+0xe4>)
 800799c:	f010 fa24 	bl	8017de8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	3310      	adds	r3, #16
 80079a4:	4618      	mov	r0, r3
 80079a6:	f010 f880 	bl	8017aaa <sys_mbox_valid>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d105      	bne.n	80079bc <netconn_new_with_proto_and_callback+0x74>
 80079b0:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <netconn_new_with_proto_and_callback+0xdc>)
 80079b2:	22a4      	movs	r2, #164	; 0xa4
 80079b4:	491e      	ldr	r1, [pc, #120]	; (8007a30 <netconn_new_with_proto_and_callback+0xe8>)
 80079b6:	481d      	ldr	r0, [pc, #116]	; (8007a2c <netconn_new_with_proto_and_callback+0xe4>)
 80079b8:	f010 fa16 	bl	8017de8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	3314      	adds	r3, #20
 80079c0:	4618      	mov	r0, r3
 80079c2:	f010 f872 	bl	8017aaa <sys_mbox_valid>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <netconn_new_with_proto_and_callback+0x90>
 80079cc:	4b15      	ldr	r3, [pc, #84]	; (8007a24 <netconn_new_with_proto_and_callback+0xdc>)
 80079ce:	22a6      	movs	r2, #166	; 0xa6
 80079d0:	4918      	ldr	r1, [pc, #96]	; (8007a34 <netconn_new_with_proto_and_callback+0xec>)
 80079d2:	4816      	ldr	r0, [pc, #88]	; (8007a2c <netconn_new_with_proto_and_callback+0xe4>)
 80079d4:	f010 fa08 	bl	8017de8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	330c      	adds	r3, #12
 80079dc:	4618      	mov	r0, r3
 80079de:	f010 f8f5 	bl	8017bcc <sys_sem_valid>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d105      	bne.n	80079f4 <netconn_new_with_proto_and_callback+0xac>
 80079e8:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <netconn_new_with_proto_and_callback+0xdc>)
 80079ea:	22a9      	movs	r2, #169	; 0xa9
 80079ec:	4912      	ldr	r1, [pc, #72]	; (8007a38 <netconn_new_with_proto_and_callback+0xf0>)
 80079ee:	480f      	ldr	r0, [pc, #60]	; (8007a2c <netconn_new_with_proto_and_callback+0xe4>)
 80079f0:	f010 f9fa 	bl	8017de8 <iprintf>
      sys_sem_free(&conn->op_completed);
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	330c      	adds	r3, #12
 80079f8:	4618      	mov	r0, r3
 80079fa:	f010 f8da 	bl	8017bb2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	3310      	adds	r3, #16
 8007a02:	4618      	mov	r0, r3
 8007a04:	f00f ffca 	bl	801799c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007a08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a0a:	2007      	movs	r0, #7
 8007a0c:	f003 fddc 	bl	800b5c8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007a10:	2300      	movs	r3, #0
 8007a12:	e000      	b.n	8007a16 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3730      	adds	r7, #48	; 0x30
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	08008b75 	.word	0x08008b75
 8007a24:	08018eb0 	.word	0x08018eb0
 8007a28:	08018ee4 	.word	0x08018ee4
 8007a2c:	08018f08 	.word	0x08018f08
 8007a30:	08018f30 	.word	0x08018f30
 8007a34:	08018f48 	.word	0x08018f48
 8007a38:	08018f6c 	.word	0x08018f6c

08007a3c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08c      	sub	sp, #48	; 0x30
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e014      	b.n	8007a78 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007a52:	2329      	movs	r3, #41	; 0x29
 8007a54:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007a56:	f107 030c 	add.w	r3, r7, #12
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4808      	ldr	r0, [pc, #32]	; (8007a80 <netconn_prepare_delete+0x44>)
 8007a5e:	f7ff ff55 	bl	800790c <netconn_apimsg>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007a68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <netconn_prepare_delete+0x3a>
    return err;
 8007a70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a74:	e000      	b.n	8007a78 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3730      	adds	r7, #48	; 0x30
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	080090d9 	.word	0x080090d9

08007a84 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <netconn_delete+0x12>
    return ERR_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	e00d      	b.n	8007ab2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff ffd0 	bl	8007a3c <netconn_prepare_delete>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <netconn_delete+0x2a>
    netconn_free(conn);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 f8e7 	bl	8008c7c <netconn_free>
  }
  return err;
 8007aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08e      	sub	sp, #56	; 0x38
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <netconn_bind+0x28>
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <netconn_bind+0x5c>)
 8007ad2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007ad6:	4911      	ldr	r1, [pc, #68]	; (8007b1c <netconn_bind+0x60>)
 8007ad8:	4811      	ldr	r0, [pc, #68]	; (8007b20 <netconn_bind+0x64>)
 8007ada:	f010 f985 	bl	8017de8 <iprintf>
 8007ade:	f06f 030f 	mvn.w	r3, #15
 8007ae2:	e015      	b.n	8007b10 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007aea:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <netconn_bind+0x68>)
 8007aec:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007afa:	f107 0314 	add.w	r3, r7, #20
 8007afe:	4619      	mov	r1, r3
 8007b00:	4809      	ldr	r0, [pc, #36]	; (8007b28 <netconn_bind+0x6c>)
 8007b02:	f7ff ff03 	bl	800790c <netconn_apimsg>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007b0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3738      	adds	r7, #56	; 0x38
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	08018eb0 	.word	0x08018eb0
 8007b1c:	08018fe8 	.word	0x08018fe8
 8007b20:	08018f08 	.word	0x08018f08
 8007b24:	08026bb4 	.word	0x08026bb4
 8007b28:	080092a1 	.word	0x080092a1

08007b2c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08c      	sub	sp, #48	; 0x30
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d109      	bne.n	8007b52 <netconn_listen_with_backlog+0x26>
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <netconn_listen_with_backlog+0x48>)
 8007b40:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007b44:	490c      	ldr	r1, [pc, #48]	; (8007b78 <netconn_listen_with_backlog+0x4c>)
 8007b46:	480d      	ldr	r0, [pc, #52]	; (8007b7c <netconn_listen_with_backlog+0x50>)
 8007b48:	f010 f94e 	bl	8017de8 <iprintf>
 8007b4c:	f06f 030f 	mvn.w	r3, #15
 8007b50:	e00c      	b.n	8007b6c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007b56:	f107 030c 	add.w	r3, r7, #12
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4808      	ldr	r0, [pc, #32]	; (8007b80 <netconn_listen_with_backlog+0x54>)
 8007b5e:	f7ff fed5 	bl	800790c <netconn_apimsg>
 8007b62:	4603      	mov	r3, r0
 8007b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007b68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3730      	adds	r7, #48	; 0x30
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	08018eb0 	.word	0x08018eb0
 8007b78:	08019068 	.word	0x08019068
 8007b7c:	08018f08 	.word	0x08018f08
 8007b80:	08009319 	.word	0x08009319

08007b84 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <netconn_accept+0x24>
 8007b94:	4b3d      	ldr	r3, [pc, #244]	; (8007c8c <netconn_accept+0x108>)
 8007b96:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007b9a:	493d      	ldr	r1, [pc, #244]	; (8007c90 <netconn_accept+0x10c>)
 8007b9c:	483d      	ldr	r0, [pc, #244]	; (8007c94 <netconn_accept+0x110>)
 8007b9e:	f010 f923 	bl	8017de8 <iprintf>
 8007ba2:	f06f 030f 	mvn.w	r3, #15
 8007ba6:	e06c      	b.n	8007c82 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <netconn_accept+0x44>
 8007bb4:	4b35      	ldr	r3, [pc, #212]	; (8007c8c <netconn_accept+0x108>)
 8007bb6:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007bba:	4937      	ldr	r1, [pc, #220]	; (8007c98 <netconn_accept+0x114>)
 8007bbc:	4835      	ldr	r0, [pc, #212]	; (8007c94 <netconn_accept+0x110>)
 8007bbe:	f010 f913 	bl	8017de8 <iprintf>
 8007bc2:	f06f 030f 	mvn.w	r3, #15
 8007bc6:	e05c      	b.n	8007c82 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fb6c 	bl	80082a6 <netconn_err>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007bd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007bda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007bde:	e050      	b.n	8007c82 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3314      	adds	r3, #20
 8007be4:	4618      	mov	r0, r3
 8007be6:	f00f ff60 	bl	8017aaa <sys_mbox_valid>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <netconn_accept+0x78>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7f1b      	ldrb	r3, [r3, #28]
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007bfc:	f06f 030e 	mvn.w	r3, #14
 8007c00:	e03f      	b.n	8007c82 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7f1b      	ldrb	r3, [r3, #28]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00e      	beq.n	8007c2c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3314      	adds	r3, #20
 8007c12:	f107 020c 	add.w	r2, r7, #12
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f00f ff2a 	bl	8017a72 <sys_arch_mbox_tryfetch>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d10a      	bne.n	8007c3c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007c26:	f06f 0306 	mvn.w	r3, #6
 8007c2a:	e02a      	b.n	8007c82 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3314      	adds	r3, #20
 8007c30:	f107 010c 	add.w	r1, r7, #12
 8007c34:	2200      	movs	r2, #0
 8007c36:	4618      	mov	r0, r3
 8007c38:	f00f fedc 	bl	80179f4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <netconn_accept+0xcc>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f107 0213 	add.w	r2, r7, #19
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fb71 	bl	8008340 <lwip_netconn_is_err_msg>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007c64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c68:	e00b      	b.n	8007c82 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007c70:	f06f 030e 	mvn.w	r3, #14
 8007c74:	e005      	b.n	8007c82 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007c80:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	08018eb0 	.word	0x08018eb0
 8007c90:	08019088 	.word	0x08019088
 8007c94:	08018f08 	.word	0x08018f08
 8007c98:	080190a8 	.word	0x080190a8

08007c9c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d109      	bne.n	8007cc8 <netconn_recv_data+0x2c>
 8007cb4:	4b58      	ldr	r3, [pc, #352]	; (8007e18 <netconn_recv_data+0x17c>)
 8007cb6:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007cba:	4958      	ldr	r1, [pc, #352]	; (8007e1c <netconn_recv_data+0x180>)
 8007cbc:	4858      	ldr	r0, [pc, #352]	; (8007e20 <netconn_recv_data+0x184>)
 8007cbe:	f010 f893 	bl	8017de8 <iprintf>
 8007cc2:	f06f 030f 	mvn.w	r3, #15
 8007cc6:	e0a2      	b.n	8007e0e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d109      	bne.n	8007ce8 <netconn_recv_data+0x4c>
 8007cd4:	4b50      	ldr	r3, [pc, #320]	; (8007e18 <netconn_recv_data+0x17c>)
 8007cd6:	f240 224a 	movw	r2, #586	; 0x24a
 8007cda:	4952      	ldr	r1, [pc, #328]	; (8007e24 <netconn_recv_data+0x188>)
 8007cdc:	4850      	ldr	r0, [pc, #320]	; (8007e20 <netconn_recv_data+0x184>)
 8007cde:	f010 f883 	bl	8017de8 <iprintf>
 8007ce2:	f06f 030f 	mvn.w	r3, #15
 8007ce6:	e092      	b.n	8007e0e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3310      	adds	r3, #16
 8007cec:	4618      	mov	r0, r3
 8007cee:	f00f fedc 	bl	8017aaa <sys_mbox_valid>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10e      	bne.n	8007d16 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fad4 	bl	80082a6 <netconn_err>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007d02:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007d0a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007d0e:	e07e      	b.n	8007e0e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007d10:	f06f 030a 	mvn.w	r3, #10
 8007d14:	e07b      	b.n	8007e0e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	7f1b      	ldrb	r3, [r3, #28]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10f      	bne.n	8007d42 <netconn_recv_data+0xa6>
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	7f1b      	ldrb	r3, [r3, #28]
 8007d30:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d023      	beq.n	8007d8a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3310      	adds	r3, #16
 8007d46:	f107 0218 	add.w	r2, r7, #24
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f00f fe90 	bl	8017a72 <sys_arch_mbox_tryfetch>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d58:	d11f      	bne.n	8007d9a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 faa3 	bl	80082a6 <netconn_err>
 8007d60:	4603      	mov	r3, r0
 8007d62:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007d64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007d6c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007d70:	e04d      	b.n	8007e0e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	7f1b      	ldrb	r3, [r3, #28]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007d7e:	f06f 030a 	mvn.w	r3, #10
 8007d82:	e044      	b.n	8007e0e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007d84:	f06f 0306 	mvn.w	r3, #6
 8007d88:	e041      	b.n	8007e0e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	f107 0118 	add.w	r1, r7, #24
 8007d92:	2200      	movs	r2, #0
 8007d94:	4618      	mov	r0, r3
 8007d96:	f00f fe2d 	bl	80179f4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	d117      	bne.n	8007dd6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f107 0217 	add.w	r2, r7, #23
 8007dac:	4611      	mov	r1, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fac6 	bl	8008340 <lwip_netconn_is_err_msg>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dbe:	f113 0f0f 	cmn.w	r3, #15
 8007dc2:	d101      	bne.n	8007dc8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e022      	b.n	8007e0e <netconn_recv_data+0x172>
      }
      return err;
 8007dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dcc:	e01f      	b.n	8007e0e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	891b      	ldrh	r3, [r3, #8]
 8007dd2:	83fb      	strh	r3, [r7, #30]
 8007dd4:	e00d      	b.n	8007df2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <netconn_recv_data+0x14e>
 8007ddc:	4b0e      	ldr	r3, [pc, #56]	; (8007e18 <netconn_recv_data+0x17c>)
 8007dde:	f240 2291 	movw	r2, #657	; 0x291
 8007de2:	4911      	ldr	r1, [pc, #68]	; (8007e28 <netconn_recv_data+0x18c>)
 8007de4:	480e      	ldr	r0, [pc, #56]	; (8007e20 <netconn_recv_data+0x184>)
 8007de6:	f00f ffff 	bl	8017de8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	891b      	ldrh	r3, [r3, #8]
 8007df0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <netconn_recv_data+0x16a>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	8bfa      	ldrh	r2, [r7, #30]
 8007e00:	2101      	movs	r1, #1
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3720      	adds	r7, #32
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	08018eb0 	.word	0x08018eb0
 8007e1c:	080190c8 	.word	0x080190c8
 8007e20:	08018f08 	.word	0x08018f08
 8007e24:	080190e8 	.word	0x080190e8
 8007e28:	08019104 	.word	0x08019104

08007e2c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <netconn_tcp_recvd_msg+0x1e>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e46:	2b10      	cmp	r3, #16
 8007e48:	d009      	beq.n	8007e5e <netconn_tcp_recvd_msg+0x32>
 8007e4a:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <netconn_tcp_recvd_msg+0x50>)
 8007e4c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007e50:	490b      	ldr	r1, [pc, #44]	; (8007e80 <netconn_tcp_recvd_msg+0x54>)
 8007e52:	480c      	ldr	r0, [pc, #48]	; (8007e84 <netconn_tcp_recvd_msg+0x58>)
 8007e54:	f00f ffc8 	bl	8017de8 <iprintf>
 8007e58:	f06f 030f 	mvn.w	r3, #15
 8007e5c:	e00a      	b.n	8007e74 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	4806      	ldr	r0, [pc, #24]	; (8007e88 <netconn_tcp_recvd_msg+0x5c>)
 8007e6e:	f7ff fd4d 	bl	800790c <netconn_apimsg>
 8007e72:	4603      	mov	r3, r0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	08018eb0 	.word	0x08018eb0
 8007e80:	08019110 	.word	0x08019110
 8007e84:	08018f08 	.word	0x08018f08
 8007e88:	08009449 	.word	0x08009449

08007e8c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b090      	sub	sp, #64	; 0x40
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	4613      	mov	r3, r2
 8007e98:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3310      	adds	r3, #16
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f00f fe03 	bl	8017aaa <sys_mbox_valid>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d102      	bne.n	8007eb0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007eaa:	f06f 030a 	mvn.w	r3, #10
 8007eae:	e06d      	b.n	8007f8c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	7f1b      	ldrb	r3, [r3, #28]
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da07      	bge.n	8007eca <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	7f1b      	ldrb	r3, [r3, #28]
 8007ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007ec8:	e039      	b.n	8007f3e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	68b9      	ldr	r1, [r7, #8]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff fee3 	bl	8007c9c <netconn_recv_data>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007edc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007ee4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ee8:	e050      	b.n	8007f8c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10e      	bne.n	8007f18 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <netconn_recv_data_tcp+0x7a>
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	891b      	ldrh	r3, [r3, #8]
 8007f04:	e000      	b.n	8007f08 <netconn_recv_data_tcp+0x7c>
 8007f06:	2301      	movs	r3, #1
 8007f08:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007f0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f0c:	f107 0214 	add.w	r2, r7, #20
 8007f10:	4619      	mov	r1, r3
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff ff8a 	bl	8007e2c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d134      	bne.n	8007f88 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d009      	beq.n	8007f3c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	7f1b      	ldrb	r3, [r3, #28]
 8007f2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007f36:	f06f 0306 	mvn.w	r3, #6
 8007f3a:	e027      	b.n	8007f8c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007f3c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <netconn_recv_data_tcp+0xc6>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10f      	bne.n	8007f7a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f9a3 	bl	80082a6 <netconn_err>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8007f66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <netconn_recv_data_tcp+0xe8>
          return err;
 8007f6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f72:	e00b      	b.n	8007f8c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8007f74:	f06f 030d 	mvn.w	r3, #13
 8007f78:	e008      	b.n	8007f8c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f955 	bl	800822c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007f82:	f06f 030e 	mvn.w	r3, #14
 8007f86:	e001      	b.n	8007f8c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8007f88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3740      	adds	r7, #64	; 0x40
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <netconn_recv+0x28>
 8007fa8:	4b32      	ldr	r3, [pc, #200]	; (8008074 <netconn_recv+0xe0>)
 8007faa:	f240 3263 	movw	r2, #867	; 0x363
 8007fae:	4932      	ldr	r1, [pc, #200]	; (8008078 <netconn_recv+0xe4>)
 8007fb0:	4832      	ldr	r0, [pc, #200]	; (800807c <netconn_recv+0xe8>)
 8007fb2:	f00f ff19 	bl	8017de8 <iprintf>
 8007fb6:	f06f 030f 	mvn.w	r3, #15
 8007fba:	e056      	b.n	800806a <netconn_recv+0xd6>
  *new_buf = NULL;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <netconn_recv+0x48>
 8007fc8:	4b2a      	ldr	r3, [pc, #168]	; (8008074 <netconn_recv+0xe0>)
 8007fca:	f240 3265 	movw	r2, #869	; 0x365
 8007fce:	492c      	ldr	r1, [pc, #176]	; (8008080 <netconn_recv+0xec>)
 8007fd0:	482a      	ldr	r0, [pc, #168]	; (800807c <netconn_recv+0xe8>)
 8007fd2:	f00f ff09 	bl	8017de8 <iprintf>
 8007fd6:	f06f 030f 	mvn.w	r3, #15
 8007fda:	e046      	b.n	800806a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d13a      	bne.n	800805e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007fec:	2006      	movs	r0, #6
 8007fee:	f003 fa99 	bl	800b524 <memp_malloc>
 8007ff2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d102      	bne.n	8008000 <netconn_recv+0x6c>
      return ERR_MEM;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffe:	e034      	b.n	800806a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008000:	f107 030c 	add.w	r3, r7, #12
 8008004:	2200      	movs	r2, #0
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff ff3f 	bl	8007e8c <netconn_recv_data_tcp>
 800800e:	4603      	mov	r3, r0
 8008010:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008012:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d006      	beq.n	8008028 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800801a:	6979      	ldr	r1, [r7, #20]
 800801c:	2006      	movs	r0, #6
 800801e:	f003 fad3 	bl	800b5c8 <memp_free>
      return err;
 8008022:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008026:	e020      	b.n	800806a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <netconn_recv+0xa8>
 800802e:	4b11      	ldr	r3, [pc, #68]	; (8008074 <netconn_recv+0xe0>)
 8008030:	f240 3279 	movw	r2, #889	; 0x379
 8008034:	4913      	ldr	r1, [pc, #76]	; (8008084 <netconn_recv+0xf0>)
 8008036:	4811      	ldr	r0, [pc, #68]	; (800807c <netconn_recv+0xe8>)
 8008038:	f00f fed6 	bl	8017de8 <iprintf>

    buf->p = p;
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2200      	movs	r2, #0
 800804c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2200      	movs	r2, #0
 8008052:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	e005      	b.n	800806a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800805e:	2200      	movs	r2, #0
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fe1a 	bl	8007c9c <netconn_recv_data>
 8008068:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	08018eb0 	.word	0x08018eb0
 8008078:	080190c8 	.word	0x080190c8
 800807c:	08018f08 	.word	0x08018f08
 8008080:	080190e8 	.word	0x080190e8
 8008084:	08019160 	.word	0x08019160

08008088 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af02      	add	r7, sp, #8
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800809e:	78fa      	ldrb	r2, [r7, #3]
 80080a0:	f107 0110 	add.w	r1, r7, #16
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	4613      	mov	r3, r2
 80080aa:	2201      	movs	r2, #1
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 f805 	bl	80080bc <netconn_write_vectors_partly>
 80080b2:	4603      	mov	r3, r0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b092      	sub	sp, #72	; 0x48
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4611      	mov	r1, r2
 80080c8:	461a      	mov	r2, r3
 80080ca:	460b      	mov	r3, r1
 80080cc:	80fb      	strh	r3, [r7, #6]
 80080ce:	4613      	mov	r3, r2
 80080d0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <netconn_write_vectors_partly+0x30>
 80080d8:	4b4e      	ldr	r3, [pc, #312]	; (8008214 <netconn_write_vectors_partly+0x158>)
 80080da:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80080de:	494e      	ldr	r1, [pc, #312]	; (8008218 <netconn_write_vectors_partly+0x15c>)
 80080e0:	484e      	ldr	r0, [pc, #312]	; (800821c <netconn_write_vectors_partly+0x160>)
 80080e2:	f00f fe81 	bl	8017de8 <iprintf>
 80080e6:	f06f 030f 	mvn.w	r3, #15
 80080ea:	e08e      	b.n	800820a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080f4:	2b10      	cmp	r3, #16
 80080f6:	d009      	beq.n	800810c <netconn_write_vectors_partly+0x50>
 80080f8:	4b46      	ldr	r3, [pc, #280]	; (8008214 <netconn_write_vectors_partly+0x158>)
 80080fa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80080fe:	4948      	ldr	r1, [pc, #288]	; (8008220 <netconn_write_vectors_partly+0x164>)
 8008100:	4846      	ldr	r0, [pc, #280]	; (800821c <netconn_write_vectors_partly+0x160>)
 8008102:	f00f fe71 	bl	8017de8 <iprintf>
 8008106:	f06f 0305 	mvn.w	r3, #5
 800810a:	e07e      	b.n	800820a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	7f1b      	ldrb	r3, [r3, #28]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d104      	bne.n	8008122 <netconn_write_vectors_partly+0x66>
 8008118:	797b      	ldrb	r3, [r7, #5]
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <netconn_write_vectors_partly+0x6a>
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <netconn_write_vectors_partly+0x6c>
 8008126:	2300      	movs	r3, #0
 8008128:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800812c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <netconn_write_vectors_partly+0x84>
 8008134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800813a:	f06f 0305 	mvn.w	r3, #5
 800813e:	e064      	b.n	800820a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008144:	2300      	movs	r3, #0
 8008146:	643b      	str	r3, [r7, #64]	; 0x40
 8008148:	e015      	b.n	8008176 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800814a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	4413      	add	r3, r2
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008156:	4413      	add	r3, r2
 8008158:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800815a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	4413      	add	r3, r2
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008166:	429a      	cmp	r2, r3
 8008168:	d202      	bcs.n	8008170 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800816a:	f06f 0305 	mvn.w	r3, #5
 800816e:	e04c      	b.n	800820a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008172:	3301      	adds	r3, #1
 8008174:	643b      	str	r3, [r7, #64]	; 0x40
 8008176:	88fb      	ldrh	r3, [r7, #6]
 8008178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800817a:	429a      	cmp	r2, r3
 800817c:	dbe5      	blt.n	800814a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800817e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	e040      	b.n	800820a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800818a:	2b00      	cmp	r3, #0
 800818c:	da0a      	bge.n	80081a4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800818e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008194:	f06f 0305 	mvn.w	r3, #5
 8008198:	e037      	b.n	800820a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800819a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800819e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80081ac:	88fb      	ldrh	r3, [r7, #6]
 80081ae:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80081b4:	797b      	ldrb	r3, [r7, #5]
 80081b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80081ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081bc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80081c2:	f107 0314 	add.w	r3, r7, #20
 80081c6:	4619      	mov	r1, r3
 80081c8:	4816      	ldr	r0, [pc, #88]	; (8008224 <netconn_write_vectors_partly+0x168>)
 80081ca:	f7ff fb9f 	bl	800790c <netconn_apimsg>
 80081ce:	4603      	mov	r3, r0
 80081d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80081d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d114      	bne.n	8008206 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80081dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80081e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80081e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d006      	beq.n	8008206 <netconn_write_vectors_partly+0x14a>
 80081f8:	4b06      	ldr	r3, [pc, #24]	; (8008214 <netconn_write_vectors_partly+0x158>)
 80081fa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80081fe:	490a      	ldr	r1, [pc, #40]	; (8008228 <netconn_write_vectors_partly+0x16c>)
 8008200:	4806      	ldr	r0, [pc, #24]	; (800821c <netconn_write_vectors_partly+0x160>)
 8008202:	f00f fdf1 	bl	8017de8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008206:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800820a:	4618      	mov	r0, r3
 800820c:	3748      	adds	r7, #72	; 0x48
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	08018eb0 	.word	0x08018eb0
 8008218:	08019188 	.word	0x08019188
 800821c:	08018f08 	.word	0x08018f08
 8008220:	080191a4 	.word	0x080191a4
 8008224:	0800984d 	.word	0x0800984d
 8008228:	080191c8 	.word	0x080191c8

0800822c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08c      	sub	sp, #48	; 0x30
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <netconn_close_shutdown+0x26>
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <netconn_close_shutdown+0x50>)
 8008240:	f240 4247 	movw	r2, #1095	; 0x447
 8008244:	490e      	ldr	r1, [pc, #56]	; (8008280 <netconn_close_shutdown+0x54>)
 8008246:	480f      	ldr	r0, [pc, #60]	; (8008284 <netconn_close_shutdown+0x58>)
 8008248:	f00f fdce 	bl	8017de8 <iprintf>
 800824c:	f06f 030f 	mvn.w	r3, #15
 8008250:	e010      	b.n	8008274 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800825a:	2329      	movs	r3, #41	; 0x29
 800825c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800825e:	f107 030c 	add.w	r3, r7, #12
 8008262:	4619      	mov	r1, r3
 8008264:	4808      	ldr	r0, [pc, #32]	; (8008288 <netconn_close_shutdown+0x5c>)
 8008266:	f7ff fb51 	bl	800790c <netconn_apimsg>
 800826a:	4603      	mov	r3, r0
 800826c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008270:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008274:	4618      	mov	r0, r3
 8008276:	3730      	adds	r7, #48	; 0x30
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	08018eb0 	.word	0x08018eb0
 8008280:	080191ec 	.word	0x080191ec
 8008284:	08018f08 	.word	0x08018f08
 8008288:	08009965 	.word	0x08009965

0800828c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008294:	2103      	movs	r1, #3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff ffc8 	bl	800822c <netconn_close_shutdown>
 800829c:	4603      	mov	r3, r0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <netconn_err+0x12>
    return ERR_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e00d      	b.n	80082d4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80082b8:	f00f fd12 	bl	8017ce0 <sys_arch_protect>
 80082bc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7a1b      	ldrb	r3, [r3, #8]
 80082c2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f00f fd16 	bl	8017cfc <sys_arch_unprotect>
  return err;
 80082d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80082e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ea:	f113 0f0e 	cmn.w	r3, #14
 80082ee:	d008      	beq.n	8008302 <lwip_netconn_err_to_msg+0x26>
 80082f0:	f113 0f0d 	cmn.w	r3, #13
 80082f4:	d003      	beq.n	80082fe <lwip_netconn_err_to_msg+0x22>
 80082f6:	f113 0f0f 	cmn.w	r3, #15
 80082fa:	d004      	beq.n	8008306 <lwip_netconn_err_to_msg+0x2a>
 80082fc:	e005      	b.n	800830a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80082fe:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <lwip_netconn_err_to_msg+0x4c>)
 8008300:	e00e      	b.n	8008320 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <lwip_netconn_err_to_msg+0x50>)
 8008304:	e00c      	b.n	8008320 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008306:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <lwip_netconn_err_to_msg+0x54>)
 8008308:	e00a      	b.n	8008320 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800830a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <lwip_netconn_err_to_msg+0x42>
 8008312:	4b08      	ldr	r3, [pc, #32]	; (8008334 <lwip_netconn_err_to_msg+0x58>)
 8008314:	227d      	movs	r2, #125	; 0x7d
 8008316:	4908      	ldr	r1, [pc, #32]	; (8008338 <lwip_netconn_err_to_msg+0x5c>)
 8008318:	4808      	ldr	r0, [pc, #32]	; (800833c <lwip_netconn_err_to_msg+0x60>)
 800831a:	f00f fd65 	bl	8017de8 <iprintf>
      return NULL;
 800831e:	2300      	movs	r3, #0
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	0801c958 	.word	0x0801c958
 800832c:	0801c959 	.word	0x0801c959
 8008330:	0801c95a 	.word	0x0801c95a
 8008334:	08019208 	.word	0x08019208
 8008338:	0801923c 	.word	0x0801923c
 800833c:	0801924c 	.word	0x0801924c

08008340 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d105      	bne.n	800835c <lwip_netconn_is_err_msg+0x1c>
 8008350:	4b12      	ldr	r3, [pc, #72]	; (800839c <lwip_netconn_is_err_msg+0x5c>)
 8008352:	2285      	movs	r2, #133	; 0x85
 8008354:	4912      	ldr	r1, [pc, #72]	; (80083a0 <lwip_netconn_is_err_msg+0x60>)
 8008356:	4813      	ldr	r0, [pc, #76]	; (80083a4 <lwip_netconn_is_err_msg+0x64>)
 8008358:	f00f fd46 	bl	8017de8 <iprintf>

  if (msg == &netconn_aborted) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a12      	ldr	r2, [pc, #72]	; (80083a8 <lwip_netconn_is_err_msg+0x68>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d104      	bne.n	800836e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	22f3      	movs	r2, #243	; 0xf3
 8008368:	701a      	strb	r2, [r3, #0]
    return 1;
 800836a:	2301      	movs	r3, #1
 800836c:	e012      	b.n	8008394 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a0e      	ldr	r2, [pc, #56]	; (80083ac <lwip_netconn_is_err_msg+0x6c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d104      	bne.n	8008380 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	22f2      	movs	r2, #242	; 0xf2
 800837a:	701a      	strb	r2, [r3, #0]
    return 1;
 800837c:	2301      	movs	r3, #1
 800837e:	e009      	b.n	8008394 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a0b      	ldr	r2, [pc, #44]	; (80083b0 <lwip_netconn_is_err_msg+0x70>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d104      	bne.n	8008392 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	22f1      	movs	r2, #241	; 0xf1
 800838c:	701a      	strb	r2, [r3, #0]
    return 1;
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	08019208 	.word	0x08019208
 80083a0:	08019274 	.word	0x08019274
 80083a4:	0801924c 	.word	0x0801924c
 80083a8:	0801c958 	.word	0x0801c958
 80083ac:	0801c959 	.word	0x0801c959
 80083b0:	0801c95a 	.word	0x0801c95a

080083b4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d105      	bne.n	80083d4 <recv_udp+0x20>
 80083c8:	4b34      	ldr	r3, [pc, #208]	; (800849c <recv_udp+0xe8>)
 80083ca:	22e5      	movs	r2, #229	; 0xe5
 80083cc:	4934      	ldr	r1, [pc, #208]	; (80084a0 <recv_udp+0xec>)
 80083ce:	4835      	ldr	r0, [pc, #212]	; (80084a4 <recv_udp+0xf0>)
 80083d0:	f00f fd0a 	bl	8017de8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d105      	bne.n	80083e6 <recv_udp+0x32>
 80083da:	4b30      	ldr	r3, [pc, #192]	; (800849c <recv_udp+0xe8>)
 80083dc:	22e6      	movs	r2, #230	; 0xe6
 80083de:	4932      	ldr	r1, [pc, #200]	; (80084a8 <recv_udp+0xf4>)
 80083e0:	4830      	ldr	r0, [pc, #192]	; (80084a4 <recv_udp+0xf0>)
 80083e2:	f00f fd01 	bl	8017de8 <iprintf>
  conn = (struct netconn *)arg;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d103      	bne.n	80083f8 <recv_udp+0x44>
    pbuf_free(p);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f003 ff95 	bl	800c320 <pbuf_free>
    return;
 80083f6:	e04d      	b.n	8008494 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d005      	beq.n	800840e <recv_udp+0x5a>
 8008402:	4b26      	ldr	r3, [pc, #152]	; (800849c <recv_udp+0xe8>)
 8008404:	22ee      	movs	r2, #238	; 0xee
 8008406:	4929      	ldr	r1, [pc, #164]	; (80084ac <recv_udp+0xf8>)
 8008408:	4826      	ldr	r0, [pc, #152]	; (80084a4 <recv_udp+0xf0>)
 800840a:	f00f fced 	bl	8017de8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	3310      	adds	r3, #16
 8008412:	4618      	mov	r0, r3
 8008414:	f00f fb49 	bl	8017aaa <sys_mbox_valid>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f003 ff7e 	bl	800c320 <pbuf_free>
    return;
 8008424:	e036      	b.n	8008494 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008426:	2006      	movs	r0, #6
 8008428:	f003 f87c 	bl	800b524 <memp_malloc>
 800842c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <recv_udp+0x88>
    pbuf_free(p);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f003 ff73 	bl	800c320 <pbuf_free>
    return;
 800843a:	e02b      	b.n	8008494 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <recv_udp+0xa0>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	e000      	b.n	8008456 <recv_udp+0xa2>
 8008454:	2300      	movs	r3, #0
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800845e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	891b      	ldrh	r3, [r3, #8]
 8008464:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	3310      	adds	r3, #16
 800846a:	69b9      	ldr	r1, [r7, #24]
 800846c:	4618      	mov	r0, r3
 800846e:	f00f faa7 	bl	80179c0 <sys_mbox_trypost>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008478:	69b8      	ldr	r0, [r7, #24]
 800847a:	f001 faff 	bl	8009a7c <netbuf_delete>
    return;
 800847e:	e009      	b.n	8008494 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <recv_udp+0xe0>
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	8afa      	ldrh	r2, [r7, #22]
 800848e:	2100      	movs	r1, #0
 8008490:	69f8      	ldr	r0, [r7, #28]
 8008492:	4798      	blx	r3
  }
}
 8008494:	3720      	adds	r7, #32
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	08019208 	.word	0x08019208
 80084a0:	08019280 	.word	0x08019280
 80084a4:	0801924c 	.word	0x0801924c
 80084a8:	080192a4 	.word	0x080192a4
 80084ac:	080192c4 	.word	0x080192c4

080084b0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <recv_tcp+0x22>
 80084c4:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <recv_tcp+0xf0>)
 80084c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80084ca:	4936      	ldr	r1, [pc, #216]	; (80085a4 <recv_tcp+0xf4>)
 80084cc:	4836      	ldr	r0, [pc, #216]	; (80085a8 <recv_tcp+0xf8>)
 80084ce:	f00f fc8b 	bl	8017de8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <recv_tcp+0x36>
 80084d8:	4b31      	ldr	r3, [pc, #196]	; (80085a0 <recv_tcp+0xf0>)
 80084da:	f240 122d 	movw	r2, #301	; 0x12d
 80084de:	4933      	ldr	r1, [pc, #204]	; (80085ac <recv_tcp+0xfc>)
 80084e0:	4831      	ldr	r0, [pc, #196]	; (80085a8 <recv_tcp+0xf8>)
 80084e2:	f00f fc81 	bl	8017de8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80084e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d006      	beq.n	80084fc <recv_tcp+0x4c>
 80084ee:	4b2c      	ldr	r3, [pc, #176]	; (80085a0 <recv_tcp+0xf0>)
 80084f0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80084f4:	492e      	ldr	r1, [pc, #184]	; (80085b0 <recv_tcp+0x100>)
 80084f6:	482c      	ldr	r0, [pc, #176]	; (80085a8 <recv_tcp+0xf8>)
 80084f8:	f00f fc76 	bl	8017de8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <recv_tcp+0x5c>
    return ERR_VAL;
 8008506:	f06f 0305 	mvn.w	r3, #5
 800850a:	e045      	b.n	8008598 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	429a      	cmp	r2, r3
 8008514:	d006      	beq.n	8008524 <recv_tcp+0x74>
 8008516:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <recv_tcp+0xf0>)
 8008518:	f240 1235 	movw	r2, #309	; 0x135
 800851c:	4925      	ldr	r1, [pc, #148]	; (80085b4 <recv_tcp+0x104>)
 800851e:	4822      	ldr	r0, [pc, #136]	; (80085a8 <recv_tcp+0xf8>)
 8008520:	f00f fc62 	bl	8017de8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	3310      	adds	r3, #16
 8008528:	4618      	mov	r0, r3
 800852a:	f00f fabe 	bl	8017aaa <sys_mbox_valid>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10d      	bne.n	8008550 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d008      	beq.n	800854c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	891b      	ldrh	r3, [r3, #8]
 800853e:	4619      	mov	r1, r3
 8008540:	68b8      	ldr	r0, [r7, #8]
 8008542:	f004 febd 	bl	800d2c0 <tcp_recved>
      pbuf_free(p);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f003 feea 	bl	800c320 <pbuf_free>
    }
    return ERR_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	e023      	b.n	8008598 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <recv_tcp+0xb2>
    msg = p;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	891b      	ldrh	r3, [r3, #8]
 800855e:	83fb      	strh	r3, [r7, #30]
 8008560:	e003      	b.n	800856a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008562:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <recv_tcp+0x108>)
 8008564:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	3310      	adds	r3, #16
 800856e:	69b9      	ldr	r1, [r7, #24]
 8008570:	4618      	mov	r0, r3
 8008572:	f00f fa25 	bl	80179c0 <sys_mbox_trypost>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800857c:	f04f 33ff 	mov.w	r3, #4294967295
 8008580:	e00a      	b.n	8008598 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <recv_tcp+0xe6>
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	8bfa      	ldrh	r2, [r7, #30]
 8008590:	2100      	movs	r1, #0
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	4798      	blx	r3
  }

  return ERR_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	08019208 	.word	0x08019208
 80085a4:	080192e4 	.word	0x080192e4
 80085a8:	0801924c 	.word	0x0801924c
 80085ac:	08019308 	.word	0x08019308
 80085b0:	08019328 	.word	0x08019328
 80085b4:	08019340 	.word	0x08019340
 80085b8:	0801c95a 	.word	0x0801c95a

080085bc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d106      	bne.n	80085de <poll_tcp+0x22>
 80085d0:	4b29      	ldr	r3, [pc, #164]	; (8008678 <poll_tcp+0xbc>)
 80085d2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80085d6:	4929      	ldr	r1, [pc, #164]	; (800867c <poll_tcp+0xc0>)
 80085d8:	4829      	ldr	r0, [pc, #164]	; (8008680 <poll_tcp+0xc4>)
 80085da:	f00f fc05 	bl	8017de8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d104      	bne.n	80085f0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80085e6:	2101      	movs	r1, #1
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 ff63 	bl	80094b4 <lwip_netconn_do_writemore>
 80085ee:	e016      	b.n	800861e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d112      	bne.n	800861e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <poll_tcp+0x5a>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	7a5b      	ldrb	r3, [r3, #9]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	7a5a      	ldrb	r2, [r3, #9]
 8008610:	3a01      	subs	r2, #1
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008616:	2101      	movs	r1, #1
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fbf7 	bl	8008e0c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	7f1b      	ldrb	r3, [r3, #28]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b00      	cmp	r3, #0
 8008628:	d021      	beq.n	800866e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d01d      	beq.n	800866e <poll_tcp+0xb2>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800863a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800863e:	d316      	bcc.n	800866e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008648:	2b04      	cmp	r3, #4
 800864a:	d810      	bhi.n	800866e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	7f1b      	ldrb	r3, [r3, #28]
 8008650:	f023 0310 	bic.w	r3, r3, #16
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <poll_tcp+0xb2>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	2200      	movs	r2, #0
 8008668:	2102      	movs	r1, #2
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	08019208 	.word	0x08019208
 800867c:	08019360 	.word	0x08019360
 8008680:	0801924c 	.word	0x0801924c

08008684 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <sent_tcp+0x26>
 800869c:	4b20      	ldr	r3, [pc, #128]	; (8008720 <sent_tcp+0x9c>)
 800869e:	f240 1293 	movw	r2, #403	; 0x193
 80086a2:	4920      	ldr	r1, [pc, #128]	; (8008724 <sent_tcp+0xa0>)
 80086a4:	4820      	ldr	r0, [pc, #128]	; (8008728 <sent_tcp+0xa4>)
 80086a6:	f00f fb9f 	bl	8017de8 <iprintf>

  if (conn) {
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d032      	beq.n	8008716 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d104      	bne.n	80086c2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80086b8:	2101      	movs	r1, #1
 80086ba:	6978      	ldr	r0, [r7, #20]
 80086bc:	f000 fefa 	bl	80094b4 <lwip_netconn_do_writemore>
 80086c0:	e007      	b.n	80086d2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d103      	bne.n	80086d2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80086ca:	2101      	movs	r1, #1
 80086cc:	6978      	ldr	r0, [r7, #20]
 80086ce:	f000 fb9d 	bl	8008e0c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01d      	beq.n	8008716 <sent_tcp+0x92>
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80086e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80086e6:	d316      	bcc.n	8008716 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d810      	bhi.n	8008716 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	7f1b      	ldrb	r3, [r3, #28]
 80086f8:	f023 0310 	bic.w	r3, r3, #16
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <sent_tcp+0x92>
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	88fa      	ldrh	r2, [r7, #6]
 8008710:	2102      	movs	r1, #2
 8008712:	6978      	ldr	r0, [r7, #20]
 8008714:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	08019208 	.word	0x08019208
 8008724:	08019360 	.word	0x08019360
 8008728:	0801924c 	.word	0x0801924c

0800872c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <err_tcp+0x24>
 8008742:	4b5f      	ldr	r3, [pc, #380]	; (80088c0 <err_tcp+0x194>)
 8008744:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008748:	495e      	ldr	r1, [pc, #376]	; (80088c4 <err_tcp+0x198>)
 800874a:	485f      	ldr	r0, [pc, #380]	; (80088c8 <err_tcp+0x19c>)
 800874c:	f00f fb4c 	bl	8017de8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008750:	f00f fac6 	bl	8017ce0 <sys_arch_protect>
 8008754:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	2200      	movs	r2, #0
 800875a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	78fa      	ldrb	r2, [r7, #3]
 8008760:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	7f1b      	ldrb	r3, [r3, #28]
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	b2da      	uxtb	r2, r3
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	2200      	movs	r2, #0
 800877a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800877c:	69b8      	ldr	r0, [r7, #24]
 800877e:	f00f fabd 	bl	8017cfc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <err_tcp+0x6a>
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2200      	movs	r2, #0
 8008790:	2104      	movs	r1, #4
 8008792:	69f8      	ldr	r0, [r7, #28]
 8008794:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	2b00      	cmp	r3, #0
 800879c:	d005      	beq.n	80087aa <err_tcp+0x7e>
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	69f8      	ldr	r0, [r7, #28]
 80087a8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <err_tcp+0x92>
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2200      	movs	r2, #0
 80087b8:	2102      	movs	r1, #2
 80087ba:	69f8      	ldr	r0, [r7, #28]
 80087bc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80087be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff fd8a 	bl	80082dc <lwip_netconn_err_to_msg>
 80087c8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	3310      	adds	r3, #16
 80087ce:	4618      	mov	r0, r3
 80087d0:	f00f f96b 	bl	8017aaa <sys_mbox_valid>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	3310      	adds	r3, #16
 80087de:	6939      	ldr	r1, [r7, #16]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00f f8ed 	bl	80179c0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	3314      	adds	r3, #20
 80087ea:	4618      	mov	r0, r3
 80087ec:	f00f f95d 	bl	8017aaa <sys_mbox_valid>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d005      	beq.n	8008802 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	3314      	adds	r3, #20
 80087fa:	6939      	ldr	r1, [r7, #16]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f00f f8df 	bl	80179c0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d005      	beq.n	8008814 <err_tcp+0xe8>
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	2b04      	cmp	r3, #4
 800880c:	d002      	beq.n	8008814 <err_tcp+0xe8>
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	2b03      	cmp	r3, #3
 8008812:	d143      	bne.n	800889c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	7f1b      	ldrb	r3, [r3, #28]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	7f1b      	ldrb	r3, [r3, #28]
 800882c:	f023 0304 	bic.w	r3, r3, #4
 8008830:	b2da      	uxtb	r2, r3
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d13b      	bne.n	80088b4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d106      	bne.n	8008852 <err_tcp+0x126>
 8008844:	4b1e      	ldr	r3, [pc, #120]	; (80088c0 <err_tcp+0x194>)
 8008846:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800884a:	4920      	ldr	r1, [pc, #128]	; (80088cc <err_tcp+0x1a0>)
 800884c:	481e      	ldr	r0, [pc, #120]	; (80088c8 <err_tcp+0x19c>)
 800884e:	f00f facb 	bl	8017de8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	2b04      	cmp	r3, #4
 8008856:	d104      	bne.n	8008862 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	2200      	movs	r2, #0
 800885e:	711a      	strb	r2, [r3, #4]
 8008860:	e003      	b.n	800886a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008874:	68b8      	ldr	r0, [r7, #8]
 8008876:	f00f f9a9 	bl	8017bcc <sys_sem_valid>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <err_tcp+0x162>
 8008880:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <err_tcp+0x194>)
 8008882:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008886:	4912      	ldr	r1, [pc, #72]	; (80088d0 <err_tcp+0x1a4>)
 8008888:	480f      	ldr	r0, [pc, #60]	; (80088c8 <err_tcp+0x19c>)
 800888a:	f00f faad 	bl	8017de8 <iprintf>
      conn->current_msg = NULL;
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	2200      	movs	r2, #0
 8008892:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008894:	68b8      	ldr	r0, [r7, #8]
 8008896:	f00f f97f 	bl	8017b98 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800889a:	e00b      	b.n	80088b4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d008      	beq.n	80088b6 <err_tcp+0x18a>
 80088a4:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <err_tcp+0x194>)
 80088a6:	f240 12f7 	movw	r2, #503	; 0x1f7
 80088aa:	490a      	ldr	r1, [pc, #40]	; (80088d4 <err_tcp+0x1a8>)
 80088ac:	4806      	ldr	r0, [pc, #24]	; (80088c8 <err_tcp+0x19c>)
 80088ae:	f00f fa9b 	bl	8017de8 <iprintf>
  }
}
 80088b2:	e000      	b.n	80088b6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80088b4:	bf00      	nop
}
 80088b6:	bf00      	nop
 80088b8:	3720      	adds	r7, #32
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	08019208 	.word	0x08019208
 80088c4:	08019360 	.word	0x08019360
 80088c8:	0801924c 	.word	0x0801924c
 80088cc:	08019370 	.word	0x08019370
 80088d0:	0801938c 	.word	0x0801938c
 80088d4:	080193a8 	.word	0x080193a8

080088d8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f005 fbc9 	bl	800e080 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80088ee:	490a      	ldr	r1, [pc, #40]	; (8008918 <setup_tcp+0x40>)
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f005 fbd7 	bl	800e0a4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80088f6:	4909      	ldr	r1, [pc, #36]	; (800891c <setup_tcp+0x44>)
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f005 fbf5 	bl	800e0e8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80088fe:	2202      	movs	r2, #2
 8008900:	4907      	ldr	r1, [pc, #28]	; (8008920 <setup_tcp+0x48>)
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f005 fc4c 	bl	800e1a0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008908:	4906      	ldr	r1, [pc, #24]	; (8008924 <setup_tcp+0x4c>)
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f005 fc0e 	bl	800e12c <tcp_err>
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	080084b1 	.word	0x080084b1
 800891c:	08008685 	.word	0x08008685
 8008920:	080085bd 	.word	0x080085bd
 8008924:	0800872d 	.word	0x0800872d

08008928 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b089      	sub	sp, #36	; 0x24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <accept_function+0x1e>
    return ERR_VAL;
 8008940:	f06f 0305 	mvn.w	r3, #5
 8008944:	e0a1      	b.n	8008a8a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	3314      	adds	r3, #20
 800894a:	4618      	mov	r0, r3
 800894c:	f00f f8ad 	bl	8017aaa <sys_mbox_valid>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008956:	f06f 0305 	mvn.w	r3, #5
 800895a:	e096      	b.n	8008a8a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d11b      	bne.n	800899a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	f103 0414 	add.w	r4, r3, #20
 8008968:	f06f 000c 	mvn.w	r0, #12
 800896c:	f7ff fcb6 	bl	80082dc <lwip_netconn_err_to_msg>
 8008970:	4603      	mov	r3, r0
 8008972:	4619      	mov	r1, r3
 8008974:	4620      	mov	r0, r4
 8008976:	f00f f823 	bl	80179c0 <sys_mbox_trypost>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d109      	bne.n	8008994 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <accept_function+0x6c>
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	69f8      	ldr	r0, [r7, #28]
 8008992:	4798      	blx	r3
    }
    return ERR_VAL;
 8008994:	f06f 0305 	mvn.w	r3, #5
 8008998:	e077      	b.n	8008a8a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800899a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d006      	beq.n	80089b0 <accept_function+0x88>
 80089a2:	4b3c      	ldr	r3, [pc, #240]	; (8008a94 <accept_function+0x16c>)
 80089a4:	f240 222a 	movw	r2, #554	; 0x22a
 80089a8:	493b      	ldr	r1, [pc, #236]	; (8008a98 <accept_function+0x170>)
 80089aa:	483c      	ldr	r0, [pc, #240]	; (8008a9c <accept_function+0x174>)
 80089ac:	f00f fa1c 	bl	8017de8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	781a      	ldrb	r2, [r3, #0]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f000 f8f0 	bl	8008ba0 <netconn_alloc>
 80089c0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11b      	bne.n	8008a00 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f103 0414 	add.w	r4, r3, #20
 80089ce:	f06f 000c 	mvn.w	r0, #12
 80089d2:	f7ff fc83 	bl	80082dc <lwip_netconn_err_to_msg>
 80089d6:	4603      	mov	r3, r0
 80089d8:	4619      	mov	r1, r3
 80089da:	4620      	mov	r0, r4
 80089dc:	f00e fff0 	bl	80179c0 <sys_mbox_trypost>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <accept_function+0xd2>
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	2200      	movs	r2, #0
 80089f4:	2100      	movs	r1, #0
 80089f6:	69f8      	ldr	r0, [r7, #28]
 80089f8:	4798      	blx	r3
    }
    return ERR_MEM;
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295
 80089fe:	e044      	b.n	8008a8a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008a06:	69b8      	ldr	r0, [r7, #24]
 8008a08:	f7ff ff66 	bl	80088d8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	3314      	adds	r3, #20
 8008a10:	69b9      	ldr	r1, [r7, #24]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f00e ffd4 	bl	80179c0 <sys_mbox_trypost>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d02a      	beq.n	8008a74 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008a24:	2100      	movs	r1, #0
 8008a26:	6978      	ldr	r0, [r7, #20]
 8008a28:	f005 fb2a 	bl	800e080 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	6978      	ldr	r0, [r7, #20]
 8008a30:	f005 fb38 	bl	800e0a4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008a34:	2100      	movs	r1, #0
 8008a36:	6978      	ldr	r0, [r7, #20]
 8008a38:	f005 fb56 	bl	800e0e8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2100      	movs	r1, #0
 8008a40:	6978      	ldr	r0, [r7, #20]
 8008a42:	f005 fbad 	bl	800e1a0 <tcp_poll>
    tcp_err(pcb, NULL);
 8008a46:	2100      	movs	r1, #0
 8008a48:	6978      	ldr	r0, [r7, #20]
 8008a4a:	f005 fb6f 	bl	800e12c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2200      	movs	r2, #0
 8008a52:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	3310      	adds	r3, #16
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f00e ff9f 	bl	801799c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	3310      	adds	r3, #16
 8008a62:	4618      	mov	r0, r3
 8008a64:	f00f f832 	bl	8017acc <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008a68:	69b8      	ldr	r0, [r7, #24]
 8008a6a:	f000 f907 	bl	8008c7c <netconn_free>
    return ERR_MEM;
 8008a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a72:	e00a      	b.n	8008a8a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d005      	beq.n	8008a88 <accept_function+0x160>
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	2200      	movs	r2, #0
 8008a82:	2100      	movs	r1, #0
 8008a84:	69f8      	ldr	r0, [r7, #28]
 8008a86:	4798      	blx	r3
  }

  return ERR_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3724      	adds	r7, #36	; 0x24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd90      	pop	{r4, r7, pc}
 8008a92:	bf00      	nop
 8008a94:	08019208 	.word	0x08019208
 8008a98:	080193c4 	.word	0x080193c4
 8008a9c:	0801924c 	.word	0x0801924c

08008aa0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008aa0:	b590      	push	{r4, r7, lr}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d006      	beq.n	8008ac4 <pcb_new+0x24>
 8008ab6:	4b2b      	ldr	r3, [pc, #172]	; (8008b64 <pcb_new+0xc4>)
 8008ab8:	f240 2265 	movw	r2, #613	; 0x265
 8008abc:	492a      	ldr	r1, [pc, #168]	; (8008b68 <pcb_new+0xc8>)
 8008abe:	482b      	ldr	r0, [pc, #172]	; (8008b6c <pcb_new+0xcc>)
 8008ac0:	f00f f992 	bl	8017de8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d022      	beq.n	8008b18 <pcb_new+0x78>
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d133      	bne.n	8008b3e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681c      	ldr	r4, [r3, #0]
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f00a fd80 	bl	80135e2 <udp_new_ip_type>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d02a      	beq.n	8008b46 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b22      	cmp	r3, #34	; 0x22
 8008af8:	d104      	bne.n	8008b04 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6858      	ldr	r0, [r3, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4917      	ldr	r1, [pc, #92]	; (8008b70 <pcb_new+0xd0>)
 8008b12:	f00a fced 	bl	80134f0 <udp_recv>
      }
      break;
 8008b16:	e016      	b.n	8008b46 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681c      	ldr	r4, [r3, #0]
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f005 faa0 	bl	800e064 <tcp_new_ip_type>
 8008b24:	4603      	mov	r3, r0
 8008b26:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00b      	beq.n	8008b4a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff fece 	bl	80088d8 <setup_tcp>
      }
      break;
 8008b3c:	e005      	b.n	8008b4a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	22fa      	movs	r2, #250	; 0xfa
 8008b42:	711a      	strb	r2, [r3, #4]
      return;
 8008b44:	e00a      	b.n	8008b5c <pcb_new+0xbc>
      break;
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <pcb_new+0xac>
      break;
 8008b4a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	711a      	strb	r2, [r3, #4]
  }
}
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd90      	pop	{r4, r7, pc}
 8008b62:	bf00      	nop
 8008b64:	08019208 	.word	0x08019208
 8008b68:	080193ec 	.word	0x080193ec
 8008b6c:	0801924c 	.word	0x0801924c
 8008b70:	080083b5 	.word	0x080083b5

08008b74 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f7ff ff85 	bl	8008aa0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008b96:	bf00      	nop
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	6039      	str	r1, [r7, #0]
 8008baa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008bb0:	2007      	movs	r0, #7
 8008bb2:	f002 fcb7 	bl	800b524 <memp_malloc>
 8008bb6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <netconn_alloc+0x22>
    return NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e052      	b.n	8008c68 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	79fa      	ldrb	r2, [r7, #7]
 8008bcc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bda:	2b10      	cmp	r3, #16
 8008bdc:	d004      	beq.n	8008be8 <netconn_alloc+0x48>
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d105      	bne.n	8008bee <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008be2:	2306      	movs	r3, #6
 8008be4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008be6:	e00a      	b.n	8008bfe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008be8:	2306      	movs	r3, #6
 8008bea:	617b      	str	r3, [r7, #20]
      break;
 8008bec:	e007      	b.n	8008bfe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008bee:	4b20      	ldr	r3, [pc, #128]	; (8008c70 <netconn_alloc+0xd0>)
 8008bf0:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008bf4:	491f      	ldr	r1, [pc, #124]	; (8008c74 <netconn_alloc+0xd4>)
 8008bf6:	4820      	ldr	r0, [pc, #128]	; (8008c78 <netconn_alloc+0xd8>)
 8008bf8:	f00f f8f6 	bl	8017de8 <iprintf>
      goto free_and_return;
 8008bfc:	e02f      	b.n	8008c5e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3310      	adds	r3, #16
 8008c02:	6979      	ldr	r1, [r7, #20]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f00e fea7 	bl	8017958 <sys_mbox_new>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d125      	bne.n	8008c5c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	330c      	adds	r3, #12
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f00e ff65 	bl	8017ae6 <sys_sem_new>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3310      	adds	r3, #16
 8008c26:	4618      	mov	r0, r3
 8008c28:	f00e feb8 	bl	801799c <sys_mbox_free>
    goto free_and_return;
 8008c2c:	e017      	b.n	8008c5e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3314      	adds	r3, #20
 8008c32:	4618      	mov	r0, r3
 8008c34:	f00e ff4a 	bl	8017acc <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f04f 32ff 	mov.w	r2, #4294967295
 8008c44:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	7cfa      	ldrb	r2, [r7, #19]
 8008c56:	771a      	strb	r2, [r3, #28]
  return conn;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	e005      	b.n	8008c68 <netconn_alloc+0xc8>
    goto free_and_return;
 8008c5c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008c5e:	68f9      	ldr	r1, [r7, #12]
 8008c60:	2007      	movs	r0, #7
 8008c62:	f002 fcb1 	bl	800b5c8 <memp_free>
  return NULL;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	08019208 	.word	0x08019208
 8008c74:	0801940c 	.word	0x0801940c
 8008c78:	0801924c 	.word	0x0801924c

08008c7c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d006      	beq.n	8008c9a <netconn_free+0x1e>
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <netconn_free+0x80>)
 8008c8e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008c92:	491b      	ldr	r1, [pc, #108]	; (8008d00 <netconn_free+0x84>)
 8008c94:	481b      	ldr	r0, [pc, #108]	; (8008d04 <netconn_free+0x88>)
 8008c96:	f00f f8a7 	bl	8017de8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3310      	adds	r3, #16
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f00e ff03 	bl	8017aaa <sys_mbox_valid>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d006      	beq.n	8008cb8 <netconn_free+0x3c>
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <netconn_free+0x80>)
 8008cac:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008cb0:	4915      	ldr	r1, [pc, #84]	; (8008d08 <netconn_free+0x8c>)
 8008cb2:	4814      	ldr	r0, [pc, #80]	; (8008d04 <netconn_free+0x88>)
 8008cb4:	f00f f898 	bl	8017de8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3314      	adds	r3, #20
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f00e fef4 	bl	8017aaa <sys_mbox_valid>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d006      	beq.n	8008cd6 <netconn_free+0x5a>
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <netconn_free+0x80>)
 8008cca:	f240 3227 	movw	r2, #807	; 0x327
 8008cce:	490f      	ldr	r1, [pc, #60]	; (8008d0c <netconn_free+0x90>)
 8008cd0:	480c      	ldr	r0, [pc, #48]	; (8008d04 <netconn_free+0x88>)
 8008cd2:	f00f f889 	bl	8017de8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	330c      	adds	r3, #12
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f00e ff69 	bl	8017bb2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	330c      	adds	r3, #12
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f00e ff82 	bl	8017bee <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	2007      	movs	r0, #7
 8008cee:	f002 fc6b 	bl	800b5c8 <memp_free>
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	08019208 	.word	0x08019208
 8008d00:	08019434 	.word	0x08019434
 8008d04:	0801924c 	.word	0x0801924c
 8008d08:	08019464 	.word	0x08019464
 8008d0c:	080194a0 	.word	0x080194a0

08008d10 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3310      	adds	r3, #16
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f00e fec4 	bl	8017aaa <sys_mbox_valid>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d02f      	beq.n	8008d88 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d28:	e018      	b.n	8008d5c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d32:	2b10      	cmp	r3, #16
 8008d34:	d10e      	bne.n	8008d54 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f107 020f 	add.w	r2, r7, #15
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fafe 	bl	8008340 <lwip_netconn_is_err_msg>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d108      	bne.n	8008d5c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f003 fae7 	bl	800c320 <pbuf_free>
 8008d52:	e003      	b.n	8008d5c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fe90 	bl	8009a7c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3310      	adds	r3, #16
 8008d60:	f107 0210 	add.w	r2, r7, #16
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f00e fe83 	bl	8017a72 <sys_arch_mbox_tryfetch>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d1da      	bne.n	8008d2a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3310      	adds	r3, #16
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f00e fe0f 	bl	801799c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3310      	adds	r3, #16
 8008d82:	4618      	mov	r0, r3
 8008d84:	f00e fea2 	bl	8017acc <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3314      	adds	r3, #20
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f00e fe8c 	bl	8017aaa <sys_mbox_valid>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d034      	beq.n	8008e02 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d98:	e01d      	b.n	8008dd6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f107 020e 	add.w	r2, r7, #14
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff facc 	bl	8008340 <lwip_netconn_is_err_msg>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d113      	bne.n	8008dd6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008db2:	6978      	ldr	r0, [r7, #20]
 8008db4:	f7ff ffac 	bl	8008d10 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d007      	beq.n	8008dd0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f004 f8a1 	bl	800cf0c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008dd0:	6978      	ldr	r0, [r7, #20]
 8008dd2:	f7ff ff53 	bl	8008c7c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3314      	adds	r3, #20
 8008dda:	f107 0210 	add.w	r2, r7, #16
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f00e fe46 	bl	8017a72 <sys_arch_mbox_tryfetch>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d1d5      	bne.n	8008d9a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3314      	adds	r3, #20
 8008df2:	4618      	mov	r0, r3
 8008df4:	f00e fdd2 	bl	801799c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3314      	adds	r3, #20
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f00e fe65 	bl	8017acc <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008e02:	bf00      	nop
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <lwip_netconn_do_close_internal+0x24>
 8008e22:	4ba1      	ldr	r3, [pc, #644]	; (80090a8 <lwip_netconn_do_close_internal+0x29c>)
 8008e24:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008e28:	49a0      	ldr	r1, [pc, #640]	; (80090ac <lwip_netconn_do_close_internal+0x2a0>)
 8008e2a:	48a1      	ldr	r0, [pc, #644]	; (80090b0 <lwip_netconn_do_close_internal+0x2a4>)
 8008e2c:	f00e ffdc 	bl	8017de8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e38:	2b10      	cmp	r3, #16
 8008e3a:	d006      	beq.n	8008e4a <lwip_netconn_do_close_internal+0x3e>
 8008e3c:	4b9a      	ldr	r3, [pc, #616]	; (80090a8 <lwip_netconn_do_close_internal+0x29c>)
 8008e3e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008e42:	499c      	ldr	r1, [pc, #624]	; (80090b4 <lwip_netconn_do_close_internal+0x2a8>)
 8008e44:	489a      	ldr	r0, [pc, #616]	; (80090b0 <lwip_netconn_do_close_internal+0x2a4>)
 8008e46:	f00e ffcf 	bl	8017de8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d006      	beq.n	8008e60 <lwip_netconn_do_close_internal+0x54>
 8008e52:	4b95      	ldr	r3, [pc, #596]	; (80090a8 <lwip_netconn_do_close_internal+0x29c>)
 8008e54:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008e58:	4997      	ldr	r1, [pc, #604]	; (80090b8 <lwip_netconn_do_close_internal+0x2ac>)
 8008e5a:	4895      	ldr	r0, [pc, #596]	; (80090b0 <lwip_netconn_do_close_internal+0x2a4>)
 8008e5c:	f00e ffc4 	bl	8017de8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d106      	bne.n	8008e76 <lwip_netconn_do_close_internal+0x6a>
 8008e68:	4b8f      	ldr	r3, [pc, #572]	; (80090a8 <lwip_netconn_do_close_internal+0x29c>)
 8008e6a:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008e6e:	4993      	ldr	r1, [pc, #588]	; (80090bc <lwip_netconn_do_close_internal+0x2b0>)
 8008e70:	488f      	ldr	r0, [pc, #572]	; (80090b0 <lwip_netconn_do_close_internal+0x2a4>)
 8008e72:	f00e ffb9 	bl	8017de8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <lwip_netconn_do_close_internal+0x80>
 8008e7e:	4b8a      	ldr	r3, [pc, #552]	; (80090a8 <lwip_netconn_do_close_internal+0x29c>)
 8008e80:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008e84:	498e      	ldr	r1, [pc, #568]	; (80090c0 <lwip_netconn_do_close_internal+0x2b4>)
 8008e86:	488a      	ldr	r0, [pc, #552]	; (80090b0 <lwip_netconn_do_close_internal+0x2a4>)
 8008e88:	f00e ffae 	bl	8017de8 <iprintf>

  tpcb = conn->pcb.tcp;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	7a1b      	ldrb	r3, [r3, #8]
 8008e98:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d102      	bne.n	8008eb6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	75bb      	strb	r3, [r7, #22]
 8008eb4:	e01f      	b.n	8008ef6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00e      	beq.n	8008eda <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008ec0:	2b05      	cmp	r3, #5
 8008ec2:	d007      	beq.n	8008ed4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008ec8:	2b06      	cmp	r3, #6
 8008eca:	d003      	beq.n	8008ed4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d102      	bne.n	8008eda <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	75bb      	strb	r3, [r7, #22]
 8008ed8:	e00d      	b.n	8008ef6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008eda:	7b7b      	ldrb	r3, [r7, #13]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <lwip_netconn_do_close_internal+0xe6>
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	8b5b      	ldrh	r3, [r3, #26]
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008eec:	2301      	movs	r3, #1
 8008eee:	75bb      	strb	r3, [r7, #22]
 8008ef0:	e001      	b.n	8008ef6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008ef6:	7dbb      	ldrb	r3, [r7, #22]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008efc:	2100      	movs	r1, #0
 8008efe:	6938      	ldr	r0, [r7, #16]
 8008f00:	f005 f8be 	bl	800e080 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	7d1b      	ldrb	r3, [r3, #20]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d104      	bne.n	8008f16 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	6938      	ldr	r0, [r7, #16]
 8008f10:	f005 f92e 	bl	800e170 <tcp_accept>
 8008f14:	e01d      	b.n	8008f52 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6938      	ldr	r0, [r7, #16]
 8008f20:	f005 f8c0 	bl	800e0a4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008f24:	2100      	movs	r1, #0
 8008f26:	6938      	ldr	r0, [r7, #16]
 8008f28:	f005 f922 	bl	800e170 <tcp_accept>
    }
    if (shut_tx) {
 8008f2c:	7b7b      	ldrb	r3, [r7, #13]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008f32:	2100      	movs	r1, #0
 8008f34:	6938      	ldr	r0, [r7, #16]
 8008f36:	f005 f8d7 	bl	800e0e8 <tcp_sent>
    }
    if (shut_close) {
 8008f3a:	7dbb      	ldrb	r3, [r7, #22]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d008      	beq.n	8008f52 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008f40:	2200      	movs	r2, #0
 8008f42:	2100      	movs	r1, #0
 8008f44:	6938      	ldr	r0, [r7, #16]
 8008f46:	f005 f92b 	bl	800e1a0 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	6938      	ldr	r0, [r7, #16]
 8008f4e:	f005 f8ed 	bl	800e12c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008f52:	7dbb      	ldrb	r3, [r7, #22]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008f58:	6938      	ldr	r0, [r7, #16]
 8008f5a:	f003 fe93 	bl	800cc84 <tcp_close>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
 8008f62:	e007      	b.n	8008f74 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	7b7a      	ldrb	r2, [r7, #13]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6938      	ldr	r0, [r7, #16]
 8008f6c:	f003 feb6 	bl	800ccdc <tcp_shutdown>
 8008f70:	4603      	mov	r3, r0
 8008f72:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	757b      	strb	r3, [r7, #21]
 8008f80:	e016      	b.n	8008fb0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8a:	d10f      	bne.n	8008fac <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	7a5b      	ldrb	r3, [r3, #9]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10c      	bne.n	8008fb0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008f96:	2301      	movs	r3, #1
 8008f98:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8008f9a:	7dbb      	ldrb	r3, [r7, #22]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008fa0:	6938      	ldr	r0, [r7, #16]
 8008fa2:	f003 ffb3 	bl	800cf0c <tcp_abort>
          err = ERR_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75fb      	strb	r3, [r7, #23]
 8008faa:	e001      	b.n	8008fb0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008fac:	2301      	movs	r3, #1
 8008fae:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008fb0:	7d7b      	ldrb	r3, [r7, #21]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d044      	beq.n	8009040 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	330c      	adds	r3, #12
 8008fbe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	7dfa      	ldrb	r2, [r7, #23]
 8008fc6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d129      	bne.n	8009030 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008fdc:	7dbb      	ldrb	r3, [r7, #22]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00c      	beq.n	8008ffc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <lwip_netconn_do_close_internal+0x1f0>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	4798      	blx	r3
      }
      if (shut_rx) {
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	2b00      	cmp	r3, #0
 8009008:	d005      	beq.n	8009016 <lwip_netconn_do_close_internal+0x20a>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	4798      	blx	r3
      }
      if (shut_tx) {
 8009016:	7b7b      	ldrb	r3, [r7, #13]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d009      	beq.n	8009030 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <lwip_netconn_do_close_internal+0x224>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	2200      	movs	r2, #0
 800902a:	2102      	movs	r1, #2
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009036:	68b8      	ldr	r0, [r7, #8]
 8009038:	f00e fdae 	bl	8017b98 <sys_sem_signal>
    }
    return ERR_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	e02e      	b.n	800909e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009040:	7d7b      	ldrb	r3, [r7, #21]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d11e      	bne.n	8009084 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	7d1b      	ldrb	r3, [r3, #20]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d106      	bne.n	800905c <lwip_netconn_do_close_internal+0x250>
 800904e:	4b16      	ldr	r3, [pc, #88]	; (80090a8 <lwip_netconn_do_close_internal+0x29c>)
 8009050:	f240 4241 	movw	r2, #1089	; 0x441
 8009054:	491b      	ldr	r1, [pc, #108]	; (80090c4 <lwip_netconn_do_close_internal+0x2b8>)
 8009056:	4816      	ldr	r0, [pc, #88]	; (80090b0 <lwip_netconn_do_close_internal+0x2a4>)
 8009058:	f00e fec6 	bl	8017de8 <iprintf>
    if (shut_tx) {
 800905c:	7b7b      	ldrb	r3, [r7, #13]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009062:	4919      	ldr	r1, [pc, #100]	; (80090c8 <lwip_netconn_do_close_internal+0x2bc>)
 8009064:	6938      	ldr	r0, [r7, #16]
 8009066:	f005 f83f 	bl	800e0e8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800906a:	2201      	movs	r2, #1
 800906c:	4917      	ldr	r1, [pc, #92]	; (80090cc <lwip_netconn_do_close_internal+0x2c0>)
 800906e:	6938      	ldr	r0, [r7, #16]
 8009070:	f005 f896 	bl	800e1a0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009074:	4916      	ldr	r1, [pc, #88]	; (80090d0 <lwip_netconn_do_close_internal+0x2c4>)
 8009076:	6938      	ldr	r0, [r7, #16]
 8009078:	f005 f858 	bl	800e12c <tcp_err>
    tcp_arg(tpcb, conn);
 800907c:	6879      	ldr	r1, [r7, #4]
 800907e:	6938      	ldr	r0, [r7, #16]
 8009080:	f004 fffe 	bl	800e080 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d106      	bne.n	800909a <lwip_netconn_do_close_internal+0x28e>
 800908c:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <lwip_netconn_do_close_internal+0x29c>)
 800908e:	f240 424d 	movw	r2, #1101	; 0x44d
 8009092:	4910      	ldr	r1, [pc, #64]	; (80090d4 <lwip_netconn_do_close_internal+0x2c8>)
 8009094:	4806      	ldr	r0, [pc, #24]	; (80090b0 <lwip_netconn_do_close_internal+0x2a4>)
 8009096:	f00e fea7 	bl	8017de8 <iprintf>
  return err;
 800909a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	08019208 	.word	0x08019208
 80090ac:	080194dc 	.word	0x080194dc
 80090b0:	0801924c 	.word	0x0801924c
 80090b4:	080194ec 	.word	0x080194ec
 80090b8:	0801950c 	.word	0x0801950c
 80090bc:	08019530 	.word	0x08019530
 80090c0:	08019370 	.word	0x08019370
 80090c4:	08019544 	.word	0x08019544
 80090c8:	08008685 	.word	0x08008685
 80090cc:	080085bd 	.word	0x080085bd
 80090d0:	0800872d 	.word	0x0800872d
 80090d4:	08019568 	.word	0x08019568

080090d8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00d      	beq.n	800910e <lwip_netconn_do_delconn+0x36>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090fc:	2b10      	cmp	r3, #16
 80090fe:	d006      	beq.n	800910e <lwip_netconn_do_delconn+0x36>
 8009100:	4b60      	ldr	r3, [pc, #384]	; (8009284 <lwip_netconn_do_delconn+0x1ac>)
 8009102:	f240 425f 	movw	r2, #1119	; 0x45f
 8009106:	4960      	ldr	r1, [pc, #384]	; (8009288 <lwip_netconn_do_delconn+0x1b0>)
 8009108:	4860      	ldr	r0, [pc, #384]	; (800928c <lwip_netconn_do_delconn+0x1b4>)
 800910a:	f00e fe6d 	bl	8017de8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800910e:	7afb      	ldrb	r3, [r7, #11]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <lwip_netconn_do_delconn+0x48>
 8009114:	7afb      	ldrb	r3, [r7, #11]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d002      	beq.n	8009120 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800911a:	7afb      	ldrb	r3, [r7, #11]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d109      	bne.n	8009134 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	2b03      	cmp	r3, #3
 8009124:	d10a      	bne.n	800913c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	7f1b      	ldrb	r3, [r3, #28]
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	22fb      	movs	r2, #251	; 0xfb
 8009138:	711a      	strb	r2, [r3, #4]
 800913a:	e097      	b.n	800926c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	2b03      	cmp	r3, #3
 8009140:	d10d      	bne.n	800915e <lwip_netconn_do_delconn+0x86>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	7f1b      	ldrb	r3, [r3, #28]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <lwip_netconn_do_delconn+0x86>
 8009150:	4b4c      	ldr	r3, [pc, #304]	; (8009284 <lwip_netconn_do_delconn+0x1ac>)
 8009152:	f240 427b 	movw	r2, #1147	; 0x47b
 8009156:	494e      	ldr	r1, [pc, #312]	; (8009290 <lwip_netconn_do_delconn+0x1b8>)
 8009158:	484c      	ldr	r0, [pc, #304]	; (800928c <lwip_netconn_do_delconn+0x1b4>)
 800915a:	f00e fe45 	bl	8017de8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff fdd1 	bl	8008d10 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d05f      	beq.n	8009238 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009182:	2b10      	cmp	r3, #16
 8009184:	d00e      	beq.n	80091a4 <lwip_netconn_do_delconn+0xcc>
 8009186:	2b20      	cmp	r3, #32
 8009188:	d000      	beq.n	800918c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800918a:	e051      	b.n	8009230 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	4618      	mov	r0, r3
 800919e:	f00a f9c7 	bl	8013530 <udp_remove>
          break;
 80091a2:	e045      	b.n	8009230 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <lwip_netconn_do_delconn+0xe4>
 80091ae:	4b35      	ldr	r3, [pc, #212]	; (8009284 <lwip_netconn_do_delconn+0x1ac>)
 80091b0:	f240 4294 	movw	r2, #1172	; 0x494
 80091b4:	4937      	ldr	r1, [pc, #220]	; (8009294 <lwip_netconn_do_delconn+0x1bc>)
 80091b6:	4835      	ldr	r0, [pc, #212]	; (800928c <lwip_netconn_do_delconn+0x1b4>)
 80091b8:	f00e fe16 	bl	8017de8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2204      	movs	r2, #4
 80091c2:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2203      	movs	r2, #3
 80091c8:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f7ff fe17 	bl	8008e0c <lwip_netconn_do_close_internal>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d04a      	beq.n	800927a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d006      	beq.n	80091fc <lwip_netconn_do_delconn+0x124>
 80091ee:	4b25      	ldr	r3, [pc, #148]	; (8009284 <lwip_netconn_do_delconn+0x1ac>)
 80091f0:	f240 429a 	movw	r2, #1178	; 0x49a
 80091f4:	4928      	ldr	r1, [pc, #160]	; (8009298 <lwip_netconn_do_delconn+0x1c0>)
 80091f6:	4825      	ldr	r0, [pc, #148]	; (800928c <lwip_netconn_do_delconn+0x1b4>)
 80091f8:	f00e fdf6 	bl	8017de8 <iprintf>
            UNLOCK_TCPIP_CORE();
 80091fc:	4827      	ldr	r0, [pc, #156]	; (800929c <lwip_netconn_do_delconn+0x1c4>)
 80091fe:	f00e fd3c 	bl	8017c7a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	330c      	adds	r3, #12
 8009208:	2100      	movs	r1, #0
 800920a:	4618      	mov	r0, r3
 800920c:	f00e fc93 	bl	8017b36 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009210:	4822      	ldr	r0, [pc, #136]	; (800929c <lwip_netconn_do_delconn+0x1c4>)
 8009212:	f00e fd23 	bl	8017c5c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	785b      	ldrb	r3, [r3, #1]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d02c      	beq.n	800927a <lwip_netconn_do_delconn+0x1a2>
 8009220:	4b18      	ldr	r3, [pc, #96]	; (8009284 <lwip_netconn_do_delconn+0x1ac>)
 8009222:	f240 429e 	movw	r2, #1182	; 0x49e
 8009226:	491c      	ldr	r1, [pc, #112]	; (8009298 <lwip_netconn_do_delconn+0x1c0>)
 8009228:	4818      	ldr	r0, [pc, #96]	; (800928c <lwip_netconn_do_delconn+0x1b4>)
 800922a:	f00e fddd 	bl	8017de8 <iprintf>
          return;
 800922e:	e024      	b.n	800927a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2200      	movs	r2, #0
 8009236:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <lwip_netconn_do_delconn+0x17a>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	6810      	ldr	r0, [r2, #0]
 800924c:	2200      	movs	r2, #0
 800924e:	2100      	movs	r1, #0
 8009250:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d007      	beq.n	800926c <lwip_netconn_do_delconn+0x194>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	6810      	ldr	r0, [r2, #0]
 8009266:	2200      	movs	r2, #0
 8009268:	2102      	movs	r1, #2
 800926a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	4618      	mov	r0, r3
 8009274:	f00e fcaa 	bl	8017bcc <sys_sem_valid>
 8009278:	e000      	b.n	800927c <lwip_netconn_do_delconn+0x1a4>
          return;
 800927a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	08019208 	.word	0x08019208
 8009288:	08019578 	.word	0x08019578
 800928c:	0801924c 	.word	0x0801924c
 8009290:	0801958c 	.word	0x0801958c
 8009294:	080195ac 	.word	0x080195ac
 8009298:	080195c8 	.word	0x080195c8
 800929c:	2000bddc 	.word	0x2000bddc

080092a0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d026      	beq.n	8009304 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d00e      	beq.n	80092e2 <lwip_netconn_do_bind+0x42>
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	d119      	bne.n	80092fc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6858      	ldr	r0, [r3, #4]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6899      	ldr	r1, [r3, #8]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	899b      	ldrh	r3, [r3, #12]
 80092d6:	461a      	mov	r2, r3
 80092d8:	f00a f814 	bl	8013304 <udp_bind>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
        break;
 80092e0:	e012      	b.n	8009308 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6858      	ldr	r0, [r3, #4]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6899      	ldr	r1, [r3, #8]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	899b      	ldrh	r3, [r3, #12]
 80092f0:	461a      	mov	r2, r3
 80092f2:	f003 fe17 	bl	800cf24 <tcp_bind>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]
        break;
 80092fa:	e005      	b.n	8009308 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80092fc:	23fa      	movs	r3, #250	; 0xfa
 80092fe:	73fb      	strb	r3, [r7, #15]
        break;
 8009300:	bf00      	nop
 8009302:	e001      	b.n	8009308 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8009304:	23fa      	movs	r3, #250	; 0xfa
 8009306:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	7bfa      	ldrb	r2, [r7, #15]
 800930c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d07f      	beq.n	800942e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009338:	2b10      	cmp	r3, #16
 800933a:	d175      	bne.n	8009428 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	785b      	ldrb	r3, [r3, #1]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d165      	bne.n	8009412 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	7d1b      	ldrb	r3, [r3, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009352:	23fa      	movs	r3, #250	; 0xfa
 8009354:	72fb      	strb	r3, [r7, #11]
 8009356:	e06c      	b.n	8009432 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009358:	23ff      	movs	r3, #255	; 0xff
 800935a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f107 020b 	add.w	r2, r7, #11
 8009366:	7cf9      	ldrb	r1, [r7, #19]
 8009368:	4618      	mov	r0, r3
 800936a:	f003 fea5 	bl	800d0b8 <tcp_listen_with_backlog_and_err>
 800936e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d05d      	beq.n	8009432 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3310      	adds	r3, #16
 800937c:	4618      	mov	r0, r3
 800937e:	f00e fb94 	bl	8017aaa <sys_mbox_valid>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3310      	adds	r3, #16
 800938e:	4618      	mov	r0, r3
 8009390:	f00e fb04 	bl	801799c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3310      	adds	r3, #16
 800939a:	4618      	mov	r0, r3
 800939c:	f00e fb96 	bl	8017acc <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3314      	adds	r3, #20
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00e fb7d 	bl	8017aaa <sys_mbox_valid>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d108      	bne.n	80093c8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3314      	adds	r3, #20
 80093bc:	2106      	movs	r1, #6
 80093be:	4618      	mov	r0, r3
 80093c0:	f00e faca 	bl	8017958 <sys_mbox_new>
 80093c4:	4603      	mov	r3, r0
 80093c6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80093c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d118      	bne.n	8009402 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2202      	movs	r2, #2
 80093d6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f004 fe47 	bl	800e080 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	4912      	ldr	r1, [pc, #72]	; (8009444 <lwip_netconn_do_listen+0x12c>)
 80093fa:	4618      	mov	r0, r3
 80093fc:	f004 feb8 	bl	800e170 <tcp_accept>
 8009400:	e017      	b.n	8009432 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f003 fc3e 	bl	800cc84 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2200      	movs	r2, #0
 800940e:	605a      	str	r2, [r3, #4]
 8009410:	e00f      	b.n	8009432 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b02      	cmp	r3, #2
 800941a:	d102      	bne.n	8009422 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	72fb      	strb	r3, [r7, #11]
 8009420:	e007      	b.n	8009432 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009422:	23f5      	movs	r3, #245	; 0xf5
 8009424:	72fb      	strb	r3, [r7, #11]
 8009426:	e004      	b.n	8009432 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009428:	23f0      	movs	r3, #240	; 0xf0
 800942a:	72fb      	strb	r3, [r7, #11]
 800942c:	e001      	b.n	8009432 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800942e:	23f5      	movs	r3, #245	; 0xf5
 8009430:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009432:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800943a:	bf00      	nop
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	08008929 	.word	0x08008929

08009448 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2200      	movs	r2, #0
 8009458:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d022      	beq.n	80094aa <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800946e:	2b10      	cmp	r3, #16
 8009470:	d11b      	bne.n	80094aa <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800947e:	d202      	bcs.n	8009486 <lwip_netconn_do_recv+0x3e>
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	b29b      	uxth	r3, r3
 8009484:	e001      	b.n	800948a <lwip_netconn_do_recv+0x42>
 8009486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800948a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	89fa      	ldrh	r2, [r7, #14]
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f003 ff12 	bl	800d2c0 <tcp_recved>
        remaining -= recved;
 800949c:	89fb      	ldrh	r3, [r7, #14]
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e6      	bne.n	8009478 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80094aa:	bf00      	nop
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <lwip_netconn_do_writemore+0x24>
 80094ca:	4b96      	ldr	r3, [pc, #600]	; (8009724 <lwip_netconn_do_writemore+0x270>)
 80094cc:	f240 6273 	movw	r2, #1651	; 0x673
 80094d0:	4995      	ldr	r1, [pc, #596]	; (8009728 <lwip_netconn_do_writemore+0x274>)
 80094d2:	4896      	ldr	r0, [pc, #600]	; (800972c <lwip_netconn_do_writemore+0x278>)
 80094d4:	f00e fc88 	bl	8017de8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d006      	beq.n	80094ee <lwip_netconn_do_writemore+0x3a>
 80094e0:	4b90      	ldr	r3, [pc, #576]	; (8009724 <lwip_netconn_do_writemore+0x270>)
 80094e2:	f240 6274 	movw	r2, #1652	; 0x674
 80094e6:	4992      	ldr	r1, [pc, #584]	; (8009730 <lwip_netconn_do_writemore+0x27c>)
 80094e8:	4890      	ldr	r0, [pc, #576]	; (800972c <lwip_netconn_do_writemore+0x278>)
 80094ea:	f00e fc7d 	bl	8017de8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <lwip_netconn_do_writemore+0x50>
 80094f6:	4b8b      	ldr	r3, [pc, #556]	; (8009724 <lwip_netconn_do_writemore+0x270>)
 80094f8:	f240 6275 	movw	r2, #1653	; 0x675
 80094fc:	498d      	ldr	r1, [pc, #564]	; (8009734 <lwip_netconn_do_writemore+0x280>)
 80094fe:	488b      	ldr	r0, [pc, #556]	; (800972c <lwip_netconn_do_writemore+0x278>)
 8009500:	f00e fc72 	bl	8017de8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d106      	bne.n	800951a <lwip_netconn_do_writemore+0x66>
 800950c:	4b85      	ldr	r3, [pc, #532]	; (8009724 <lwip_netconn_do_writemore+0x270>)
 800950e:	f240 6276 	movw	r2, #1654	; 0x676
 8009512:	4989      	ldr	r1, [pc, #548]	; (8009738 <lwip_netconn_do_writemore+0x284>)
 8009514:	4885      	ldr	r0, [pc, #532]	; (800972c <lwip_netconn_do_writemore+0x278>)
 8009516:	f00e fc67 	bl	8017de8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	699a      	ldr	r2, [r3, #24]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	429a      	cmp	r2, r3
 8009528:	d306      	bcc.n	8009538 <lwip_netconn_do_writemore+0x84>
 800952a:	4b7e      	ldr	r3, [pc, #504]	; (8009724 <lwip_netconn_do_writemore+0x270>)
 800952c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009530:	4982      	ldr	r1, [pc, #520]	; (800973c <lwip_netconn_do_writemore+0x288>)
 8009532:	487e      	ldr	r0, [pc, #504]	; (800972c <lwip_netconn_do_writemore+0x278>)
 8009534:	f00e fc58 	bl	8017de8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	899b      	ldrh	r3, [r3, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <lwip_netconn_do_writemore+0x9c>
 8009542:	4b78      	ldr	r3, [pc, #480]	; (8009724 <lwip_netconn_do_writemore+0x270>)
 8009544:	f240 6279 	movw	r2, #1657	; 0x679
 8009548:	497d      	ldr	r1, [pc, #500]	; (8009740 <lwip_netconn_do_writemore+0x28c>)
 800954a:	4878      	ldr	r0, [pc, #480]	; (800972c <lwip_netconn_do_writemore+0x278>)
 800954c:	f00e fc4c 	bl	8017de8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	7f1b      	ldrb	r3, [r3, #28]
 8009556:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7f1b      	ldrb	r3, [r3, #28]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <lwip_netconn_do_writemore+0xba>
 8009564:	7ebb      	ldrb	r3, [r7, #26]
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <lwip_netconn_do_writemore+0xbe>
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <lwip_netconn_do_writemore+0xc0>
 8009572:	2300      	movs	r3, #0
 8009574:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	4413      	add	r3, r2
 8009586:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095a0:	d307      	bcc.n	80095b2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80095a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095a6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80095a8:	7ebb      	ldrb	r3, [r7, #26]
 80095aa:	f043 0302 	orr.w	r3, r3, #2
 80095ae:	76bb      	strb	r3, [r7, #26]
 80095b0:	e001      	b.n	80095b6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80095be:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80095c0:	89fa      	ldrh	r2, [r7, #14]
 80095c2:	8bbb      	ldrh	r3, [r7, #28]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d216      	bcs.n	80095f6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80095c8:	89fb      	ldrh	r3, [r7, #14]
 80095ca:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80095cc:	7e3b      	ldrb	r3, [r7, #24]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00d      	beq.n	80095ee <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80095d2:	8bbb      	ldrh	r3, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10e      	bne.n	80095f6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <lwip_netconn_do_writemore+0x134>
 80095e2:	f06f 0306 	mvn.w	r3, #6
 80095e6:	e000      	b.n	80095ea <lwip_netconn_do_writemore+0x136>
 80095e8:	2300      	movs	r3, #0
 80095ea:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80095ec:	e07d      	b.n	80096ea <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80095ee:	7ebb      	ldrb	r3, [r7, #26]
 80095f0:	f043 0302 	orr.w	r3, r3, #2
 80095f4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	8bbb      	ldrh	r3, [r7, #28]
 80095fe:	441a      	add	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d906      	bls.n	800961a <lwip_netconn_do_writemore+0x166>
 800960c:	4b45      	ldr	r3, [pc, #276]	; (8009724 <lwip_netconn_do_writemore+0x270>)
 800960e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009612:	494c      	ldr	r1, [pc, #304]	; (8009744 <lwip_netconn_do_writemore+0x290>)
 8009614:	4845      	ldr	r0, [pc, #276]	; (800972c <lwip_netconn_do_writemore+0x278>)
 8009616:	f00e fbe7 	bl	8017de8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800961a:	8bbb      	ldrh	r3, [r7, #28]
 800961c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009620:	4293      	cmp	r3, r2
 8009622:	d103      	bne.n	800962c <lwip_netconn_do_writemore+0x178>
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800962a:	d209      	bcs.n	8009640 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009630:	8bba      	ldrh	r2, [r7, #28]
 8009632:	429a      	cmp	r2, r3
 8009634:	d10b      	bne.n	800964e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	899b      	ldrh	r3, [r3, #12]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d906      	bls.n	800964e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009640:	2301      	movs	r3, #1
 8009642:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009644:	7ebb      	ldrb	r3, [r7, #26]
 8009646:	f043 0302 	orr.w	r3, r3, #2
 800964a:	76bb      	strb	r3, [r7, #26]
 800964c:	e001      	b.n	8009652 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6858      	ldr	r0, [r3, #4]
 8009656:	7ebb      	ldrb	r3, [r7, #26]
 8009658:	8bba      	ldrh	r2, [r7, #28]
 800965a:	6979      	ldr	r1, [r7, #20]
 800965c:	f007 fc4c 	bl	8010ef8 <tcp_write>
 8009660:	4603      	mov	r3, r0
 8009662:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009664:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d12c      	bne.n	80096c6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	6999      	ldr	r1, [r3, #24]
 8009672:	8bba      	ldrh	r2, [r7, #28]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	440a      	add	r2, r1
 800967a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	6919      	ldr	r1, [r3, #16]
 8009682:	8bba      	ldrh	r2, [r7, #28]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	440a      	add	r2, r1
 800968a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	691a      	ldr	r2, [r3, #16]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	429a      	cmp	r2, r3
 800969c:	d113      	bne.n	80096c6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	899a      	ldrh	r2, [r3, #12]
 80096a4:	3a01      	subs	r2, #1
 80096a6:	b292      	uxth	r2, r2
 80096a8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	899b      	ldrh	r3, [r3, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d008      	beq.n	80096c6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	689a      	ldr	r2, [r3, #8]
 80096ba:	3208      	adds	r2, #8
 80096bc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	2200      	movs	r2, #0
 80096c4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80096c6:	7e7b      	ldrb	r3, [r7, #25]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d004      	beq.n	80096d6 <lwip_netconn_do_writemore+0x222>
 80096cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f43f af50 	beq.w	8009576 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80096d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <lwip_netconn_do_writemore+0x234>
 80096de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e6:	d146      	bne.n	8009776 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80096e8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80096ea:	7e3b      	ldrb	r3, [r7, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d02b      	beq.n	8009748 <lwip_netconn_do_writemore+0x294>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	699a      	ldr	r2, [r3, #24]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d223      	bcs.n	8009748 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	2b00      	cmp	r3, #0
 8009706:	d005      	beq.n	8009714 <lwip_netconn_do_writemore+0x260>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	2200      	movs	r2, #0
 800970e:	2103      	movs	r1, #3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	7f1b      	ldrb	r3, [r3, #28]
 8009718:	f043 0310 	orr.w	r3, r3, #16
 800971c:	b2da      	uxtb	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	771a      	strb	r2, [r3, #28]
 8009722:	e028      	b.n	8009776 <lwip_netconn_do_writemore+0x2c2>
 8009724:	08019208 	.word	0x08019208
 8009728:	08019360 	.word	0x08019360
 800972c:	0801924c 	.word	0x0801924c
 8009730:	08019668 	.word	0x08019668
 8009734:	08019370 	.word	0x08019370
 8009738:	08019688 	.word	0x08019688
 800973c:	080196a0 	.word	0x080196a0
 8009740:	080196e0 	.word	0x080196e0
 8009744:	08019708 	.word	0x08019708
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009750:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009754:	d305      	bcc.n	8009762 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800975e:	2b04      	cmp	r3, #4
 8009760:	d909      	bls.n	8009776 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <lwip_netconn_do_writemore+0x2c2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	2200      	movs	r2, #0
 8009770:	2103      	movs	r1, #3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009776:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d11d      	bne.n	80097ba <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	699a      	ldr	r2, [r3, #24]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	429a      	cmp	r2, r3
 800978c:	d002      	beq.n	8009794 <lwip_netconn_do_writemore+0x2e0>
 800978e:	7e3b      	ldrb	r3, [r7, #24]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009794:	2301      	movs	r3, #1
 8009796:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	f008 f997 	bl	8011ad0 <tcp_output>
 80097a2:	4603      	mov	r3, r0
 80097a4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80097a6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80097aa:	f113 0f04 	cmn.w	r3, #4
 80097ae:	d12c      	bne.n	800980a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80097b0:	7b3b      	ldrb	r3, [r7, #12]
 80097b2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80097b4:	2301      	movs	r3, #1
 80097b6:	76fb      	strb	r3, [r7, #27]
 80097b8:	e027      	b.n	800980a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80097ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d120      	bne.n	8009806 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f008 f981 	bl	8011ad0 <tcp_output>
 80097ce:	4603      	mov	r3, r0
 80097d0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80097d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80097d6:	f113 0f04 	cmn.w	r3, #4
 80097da:	d104      	bne.n	80097e6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80097dc:	7b7b      	ldrb	r3, [r7, #13]
 80097de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80097e0:	2301      	movs	r3, #1
 80097e2:	76fb      	strb	r3, [r7, #27]
 80097e4:	e011      	b.n	800980a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80097e6:	7e3b      	ldrb	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00e      	beq.n	800980a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <lwip_netconn_do_writemore+0x348>
 80097f6:	f06f 0306 	mvn.w	r3, #6
 80097fa:	e000      	b.n	80097fe <lwip_netconn_do_writemore+0x34a>
 80097fc:	2300      	movs	r3, #0
 80097fe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009800:	2301      	movs	r3, #1
 8009802:	76fb      	strb	r3, [r7, #27]
 8009804:	e001      	b.n	800980a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009806:	2301      	movs	r3, #1
 8009808:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800980a:	7efb      	ldrb	r3, [r7, #27]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d015      	beq.n	800983c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	330c      	adds	r3, #12
 8009818:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	7ffa      	ldrb	r2, [r7, #31]
 8009820:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d006      	beq.n	8009842 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f00e f9af 	bl	8017b98 <sys_sem_signal>
 800983a:	e002      	b.n	8009842 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	e000      	b.n	8009844 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe fd22 	bl	80082a6 <netconn_err>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d166      	bne.n	800993c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009878:	2b10      	cmp	r3, #16
 800987a:	d15d      	bne.n	8009938 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009886:	23fb      	movs	r3, #251	; 0xfb
 8009888:	73fb      	strb	r3, [r7, #15]
 800988a:	e057      	b.n	800993c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d04d      	beq.n	8009932 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2201      	movs	r2, #1
 800989c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d006      	beq.n	80098b6 <lwip_netconn_do_write+0x6a>
 80098a8:	4b28      	ldr	r3, [pc, #160]	; (800994c <lwip_netconn_do_write+0x100>)
 80098aa:	f240 7223 	movw	r2, #1827	; 0x723
 80098ae:	4928      	ldr	r1, [pc, #160]	; (8009950 <lwip_netconn_do_write+0x104>)
 80098b0:	4828      	ldr	r0, [pc, #160]	; (8009954 <lwip_netconn_do_write+0x108>)
 80098b2:	f00e fa99 	bl	8017de8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <lwip_netconn_do_write+0x80>
 80098be:	4b23      	ldr	r3, [pc, #140]	; (800994c <lwip_netconn_do_write+0x100>)
 80098c0:	f240 7224 	movw	r2, #1828	; 0x724
 80098c4:	4924      	ldr	r1, [pc, #144]	; (8009958 <lwip_netconn_do_write+0x10c>)
 80098c6:	4823      	ldr	r0, [pc, #140]	; (8009954 <lwip_netconn_do_write+0x108>)
 80098c8:	f00e fa8e 	bl	8017de8 <iprintf>
        msg->conn->current_msg = msg;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f7ff fdea 	bl	80094b4 <lwip_netconn_do_writemore>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d02e      	beq.n	8009944 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d006      	beq.n	80098fe <lwip_netconn_do_write+0xb2>
 80098f0:	4b16      	ldr	r3, [pc, #88]	; (800994c <lwip_netconn_do_write+0x100>)
 80098f2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80098f6:	4919      	ldr	r1, [pc, #100]	; (800995c <lwip_netconn_do_write+0x110>)
 80098f8:	4816      	ldr	r0, [pc, #88]	; (8009954 <lwip_netconn_do_write+0x108>)
 80098fa:	f00e fa75 	bl	8017de8 <iprintf>
          UNLOCK_TCPIP_CORE();
 80098fe:	4818      	ldr	r0, [pc, #96]	; (8009960 <lwip_netconn_do_write+0x114>)
 8009900:	f00e f9bb 	bl	8017c7a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	330c      	adds	r3, #12
 800990a:	2100      	movs	r1, #0
 800990c:	4618      	mov	r0, r3
 800990e:	f00e f912 	bl	8017b36 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009912:	4813      	ldr	r0, [pc, #76]	; (8009960 <lwip_netconn_do_write+0x114>)
 8009914:	f00e f9a2 	bl	8017c5c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d110      	bne.n	8009944 <lwip_netconn_do_write+0xf8>
 8009922:	4b0a      	ldr	r3, [pc, #40]	; (800994c <lwip_netconn_do_write+0x100>)
 8009924:	f240 722c 	movw	r2, #1836	; 0x72c
 8009928:	490c      	ldr	r1, [pc, #48]	; (800995c <lwip_netconn_do_write+0x110>)
 800992a:	480a      	ldr	r0, [pc, #40]	; (8009954 <lwip_netconn_do_write+0x108>)
 800992c:	f00e fa5c 	bl	8017de8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009930:	e008      	b.n	8009944 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009932:	23f5      	movs	r3, #245	; 0xf5
 8009934:	73fb      	strb	r3, [r7, #15]
 8009936:	e001      	b.n	800993c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009938:	23fa      	movs	r3, #250	; 0xfa
 800993a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	7bfa      	ldrb	r2, [r7, #15]
 8009940:	711a      	strb	r2, [r3, #4]
 8009942:	e000      	b.n	8009946 <lwip_netconn_do_write+0xfa>
        return;
 8009944:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	08019208 	.word	0x08019208
 8009950:	080195ac 	.word	0x080195ac
 8009954:	0801924c 	.word	0x0801924c
 8009958:	08019734 	.word	0x08019734
 800995c:	080195c8 	.word	0x080195c8
 8009960:	2000bddc 	.word	0x2000bddc

08009964 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d069      	beq.n	8009a56 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800998c:	2b10      	cmp	r3, #16
 800998e:	d162      	bne.n	8009a56 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009994:	2b03      	cmp	r3, #3
 8009996:	d002      	beq.n	800999e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d05b      	beq.n	8009a56 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d103      	bne.n	80099ac <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	22f5      	movs	r2, #245	; 0xf5
 80099a8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80099aa:	e059      	b.n	8009a60 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d103      	bne.n	80099ba <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	22fb      	movs	r2, #251	; 0xfb
 80099b6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80099b8:	e052      	b.n	8009a60 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	7a1b      	ldrb	r3, [r3, #8]
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff f9a0 	bl	8008d10 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d006      	beq.n	80099e8 <lwip_netconn_do_close+0x84>
 80099da:	4b23      	ldr	r3, [pc, #140]	; (8009a68 <lwip_netconn_do_close+0x104>)
 80099dc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80099e0:	4922      	ldr	r1, [pc, #136]	; (8009a6c <lwip_netconn_do_close+0x108>)
 80099e2:	4823      	ldr	r0, [pc, #140]	; (8009a70 <lwip_netconn_do_close+0x10c>)
 80099e4:	f00e fa00 	bl	8017de8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2204      	movs	r2, #4
 80099ee:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7ff fa04 	bl	8008e0c <lwip_netconn_do_close_internal>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d029      	beq.n	8009a5e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	785b      	ldrb	r3, [r3, #1]
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d006      	beq.n	8009a22 <lwip_netconn_do_close+0xbe>
 8009a14:	4b14      	ldr	r3, [pc, #80]	; (8009a68 <lwip_netconn_do_close+0x104>)
 8009a16:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009a1a:	4916      	ldr	r1, [pc, #88]	; (8009a74 <lwip_netconn_do_close+0x110>)
 8009a1c:	4814      	ldr	r0, [pc, #80]	; (8009a70 <lwip_netconn_do_close+0x10c>)
 8009a1e:	f00e f9e3 	bl	8017de8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009a22:	4815      	ldr	r0, [pc, #84]	; (8009a78 <lwip_netconn_do_close+0x114>)
 8009a24:	f00e f929 	bl	8017c7a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f00e f880 	bl	8017b36 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009a36:	4810      	ldr	r0, [pc, #64]	; (8009a78 <lwip_netconn_do_close+0x114>)
 8009a38:	f00e f910 	bl	8017c5c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	785b      	ldrb	r3, [r3, #1]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00b      	beq.n	8009a5e <lwip_netconn_do_close+0xfa>
 8009a46:	4b08      	ldr	r3, [pc, #32]	; (8009a68 <lwip_netconn_do_close+0x104>)
 8009a48:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009a4c:	4909      	ldr	r1, [pc, #36]	; (8009a74 <lwip_netconn_do_close+0x110>)
 8009a4e:	4808      	ldr	r0, [pc, #32]	; (8009a70 <lwip_netconn_do_close+0x10c>)
 8009a50:	f00e f9ca 	bl	8017de8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009a54:	e003      	b.n	8009a5e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	22f5      	movs	r2, #245	; 0xf5
 8009a5a:	711a      	strb	r2, [r3, #4]
 8009a5c:	e000      	b.n	8009a60 <lwip_netconn_do_close+0xfc>
      return;
 8009a5e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	08019208 	.word	0x08019208
 8009a6c:	080195ac 	.word	0x080195ac
 8009a70:	0801924c 	.word	0x0801924c
 8009a74:	080195c8 	.word	0x080195c8
 8009a78:	2000bddc 	.word	0x2000bddc

08009a7c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d013      	beq.n	8009ab2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00b      	beq.n	8009aaa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f002 fc42 	bl	800c320 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	605a      	str	r2, [r3, #4]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	2006      	movs	r0, #6
 8009aae:	f001 fd8b 	bl	800b5c8 <memp_free>
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d108      	bne.n	8009ae0 <netbuf_data+0x24>
 8009ace:	4b1b      	ldr	r3, [pc, #108]	; (8009b3c <netbuf_data+0x80>)
 8009ad0:	22c6      	movs	r2, #198	; 0xc6
 8009ad2:	491b      	ldr	r1, [pc, #108]	; (8009b40 <netbuf_data+0x84>)
 8009ad4:	481b      	ldr	r0, [pc, #108]	; (8009b44 <netbuf_data+0x88>)
 8009ad6:	f00e f987 	bl	8017de8 <iprintf>
 8009ada:	f06f 030f 	mvn.w	r3, #15
 8009ade:	e029      	b.n	8009b34 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d108      	bne.n	8009af8 <netbuf_data+0x3c>
 8009ae6:	4b15      	ldr	r3, [pc, #84]	; (8009b3c <netbuf_data+0x80>)
 8009ae8:	22c7      	movs	r2, #199	; 0xc7
 8009aea:	4917      	ldr	r1, [pc, #92]	; (8009b48 <netbuf_data+0x8c>)
 8009aec:	4815      	ldr	r0, [pc, #84]	; (8009b44 <netbuf_data+0x88>)
 8009aee:	f00e f97b 	bl	8017de8 <iprintf>
 8009af2:	f06f 030f 	mvn.w	r3, #15
 8009af6:	e01d      	b.n	8009b34 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d108      	bne.n	8009b10 <netbuf_data+0x54>
 8009afe:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <netbuf_data+0x80>)
 8009b00:	22c8      	movs	r2, #200	; 0xc8
 8009b02:	4912      	ldr	r1, [pc, #72]	; (8009b4c <netbuf_data+0x90>)
 8009b04:	480f      	ldr	r0, [pc, #60]	; (8009b44 <netbuf_data+0x88>)
 8009b06:	f00e f96f 	bl	8017de8 <iprintf>
 8009b0a:	f06f 030f 	mvn.w	r3, #15
 8009b0e:	e011      	b.n	8009b34 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <netbuf_data+0x62>
    return ERR_BUF;
 8009b18:	f06f 0301 	mvn.w	r3, #1
 8009b1c:	e00a      	b.n	8009b34 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	895a      	ldrh	r2, [r3, #10]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	08019760 	.word	0x08019760
 8009b40:	08019868 	.word	0x08019868
 8009b44:	080197b0 	.word	0x080197b0
 8009b48:	08019884 	.word	0x08019884
 8009b4c:	080198a4 	.word	0x080198a4

08009b50 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d108      	bne.n	8009b70 <netbuf_next+0x20>
 8009b5e:	4b11      	ldr	r3, [pc, #68]	; (8009ba4 <netbuf_next+0x54>)
 8009b60:	22e0      	movs	r2, #224	; 0xe0
 8009b62:	4911      	ldr	r1, [pc, #68]	; (8009ba8 <netbuf_next+0x58>)
 8009b64:	4811      	ldr	r0, [pc, #68]	; (8009bac <netbuf_next+0x5c>)
 8009b66:	f00e f93f 	bl	8017de8 <iprintf>
 8009b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6e:	e014      	b.n	8009b9a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <netbuf_next+0x30>
    return -1;
 8009b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7e:	e00c      	b.n	8009b9a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <netbuf_next+0x48>
    return 1;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e000      	b.n	8009b9a <netbuf_next+0x4a>
  }
  return 0;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	08019760 	.word	0x08019760
 8009ba8:	080198c0 	.word	0x080198c0
 8009bac:	080197b0 	.word	0x080197b0

08009bb0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009bba:	f009 f84f 	bl	8012c5c <sys_timeouts_sleeptime>
 8009bbe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc6:	d10b      	bne.n	8009be0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009bc8:	4813      	ldr	r0, [pc, #76]	; (8009c18 <tcpip_timeouts_mbox_fetch+0x68>)
 8009bca:	f00e f856 	bl	8017c7a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009bce:	2200      	movs	r2, #0
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f00d ff0e 	bl	80179f4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009bd8:	480f      	ldr	r0, [pc, #60]	; (8009c18 <tcpip_timeouts_mbox_fetch+0x68>)
 8009bda:	f00e f83f 	bl	8017c5c <sys_mutex_lock>
    return;
 8009bde:	e018      	b.n	8009c12 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d102      	bne.n	8009bec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009be6:	f008 ffff 	bl	8012be8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009bea:	e7e6      	b.n	8009bba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009bec:	480a      	ldr	r0, [pc, #40]	; (8009c18 <tcpip_timeouts_mbox_fetch+0x68>)
 8009bee:	f00e f844 	bl	8017c7a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f00d fefc 	bl	80179f4 <sys_arch_mbox_fetch>
 8009bfc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009bfe:	4806      	ldr	r0, [pc, #24]	; (8009c18 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c00:	f00e f82c 	bl	8017c5c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0a:	d102      	bne.n	8009c12 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009c0c:	f008 ffec 	bl	8012be8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009c10:	e7d3      	b.n	8009bba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	2000bddc 	.word	0x2000bddc

08009c1c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009c24:	4810      	ldr	r0, [pc, #64]	; (8009c68 <tcpip_thread+0x4c>)
 8009c26:	f00e f819 	bl	8017c5c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009c2a:	4b10      	ldr	r3, [pc, #64]	; (8009c6c <tcpip_thread+0x50>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009c32:	4b0e      	ldr	r3, [pc, #56]	; (8009c6c <tcpip_thread+0x50>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a0e      	ldr	r2, [pc, #56]	; (8009c70 <tcpip_thread+0x54>)
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c3e:	f107 030c 	add.w	r3, r7, #12
 8009c42:	4619      	mov	r1, r3
 8009c44:	480b      	ldr	r0, [pc, #44]	; (8009c74 <tcpip_thread+0x58>)
 8009c46:	f7ff ffb3 	bl	8009bb0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c50:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <tcpip_thread+0x5c>)
 8009c52:	2291      	movs	r2, #145	; 0x91
 8009c54:	4909      	ldr	r1, [pc, #36]	; (8009c7c <tcpip_thread+0x60>)
 8009c56:	480a      	ldr	r0, [pc, #40]	; (8009c80 <tcpip_thread+0x64>)
 8009c58:	f00e f8c6 	bl	8017de8 <iprintf>
      continue;
 8009c5c:	e003      	b.n	8009c66 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 f80f 	bl	8009c84 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c66:	e7ea      	b.n	8009c3e <tcpip_thread+0x22>
 8009c68:	2000bddc 	.word	0x2000bddc
 8009c6c:	200085fc 	.word	0x200085fc
 8009c70:	20008600 	.word	0x20008600
 8009c74:	20008604 	.word	0x20008604
 8009c78:	080198f8 	.word	0x080198f8
 8009c7c:	08019928 	.word	0x08019928
 8009c80:	08019948 	.word	0x08019948

08009c84 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d018      	beq.n	8009cc6 <tcpip_thread_handle_msg+0x42>
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d021      	beq.n	8009cdc <tcpip_thread_handle_msg+0x58>
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d126      	bne.n	8009cea <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	6850      	ldr	r0, [r2, #4]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	6892      	ldr	r2, [r2, #8]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4798      	blx	r3
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d004      	beq.n	8009cbc <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f002 fb32 	bl	800c320 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	2009      	movs	r0, #9
 8009cc0:	f001 fc82 	bl	800b5c8 <memp_free>
      break;
 8009cc4:	e018      	b.n	8009cf8 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6892      	ldr	r2, [r2, #8]
 8009cce:	4610      	mov	r0, r2
 8009cd0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	2008      	movs	r0, #8
 8009cd6:	f001 fc77 	bl	800b5c8 <memp_free>
      break;
 8009cda:	e00d      	b.n	8009cf8 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6892      	ldr	r2, [r2, #8]
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4798      	blx	r3
      break;
 8009ce8:	e006      	b.n	8009cf8 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <tcpip_thread_handle_msg+0x7c>)
 8009cec:	22cf      	movs	r2, #207	; 0xcf
 8009cee:	4905      	ldr	r1, [pc, #20]	; (8009d04 <tcpip_thread_handle_msg+0x80>)
 8009cf0:	4805      	ldr	r0, [pc, #20]	; (8009d08 <tcpip_thread_handle_msg+0x84>)
 8009cf2:	f00e f879 	bl	8017de8 <iprintf>
      break;
 8009cf6:	bf00      	nop
  }
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	080198f8 	.word	0x080198f8
 8009d04:	08019928 	.word	0x08019928
 8009d08:	08019948 	.word	0x08019948

08009d0c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009d18:	481a      	ldr	r0, [pc, #104]	; (8009d84 <tcpip_inpkt+0x78>)
 8009d1a:	f00d fec6 	bl	8017aaa <sys_mbox_valid>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d105      	bne.n	8009d30 <tcpip_inpkt+0x24>
 8009d24:	4b18      	ldr	r3, [pc, #96]	; (8009d88 <tcpip_inpkt+0x7c>)
 8009d26:	22fc      	movs	r2, #252	; 0xfc
 8009d28:	4918      	ldr	r1, [pc, #96]	; (8009d8c <tcpip_inpkt+0x80>)
 8009d2a:	4819      	ldr	r0, [pc, #100]	; (8009d90 <tcpip_inpkt+0x84>)
 8009d2c:	f00e f85c 	bl	8017de8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009d30:	2009      	movs	r0, #9
 8009d32:	f001 fbf7 	bl	800b524 <memp_malloc>
 8009d36:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d42:	e01a      	b.n	8009d7a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2200      	movs	r2, #0
 8009d48:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d5c:	6979      	ldr	r1, [r7, #20]
 8009d5e:	4809      	ldr	r0, [pc, #36]	; (8009d84 <tcpip_inpkt+0x78>)
 8009d60:	f00d fe2e 	bl	80179c0 <sys_mbox_trypost>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d006      	beq.n	8009d78 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d6a:	6979      	ldr	r1, [r7, #20]
 8009d6c:	2009      	movs	r0, #9
 8009d6e:	f001 fc2b 	bl	800b5c8 <memp_free>
    return ERR_MEM;
 8009d72:	f04f 33ff 	mov.w	r3, #4294967295
 8009d76:	e000      	b.n	8009d7a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009d78:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20008604 	.word	0x20008604
 8009d88:	080198f8 	.word	0x080198f8
 8009d8c:	08019970 	.word	0x08019970
 8009d90:	08019948 	.word	0x08019948

08009d94 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009da4:	f003 0318 	and.w	r3, r3, #24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d006      	beq.n	8009dba <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009dac:	4a08      	ldr	r2, [pc, #32]	; (8009dd0 <tcpip_input+0x3c>)
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff ffab 	bl	8009d0c <tcpip_inpkt>
 8009db6:	4603      	mov	r3, r0
 8009db8:	e005      	b.n	8009dc6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009dba:	4a06      	ldr	r2, [pc, #24]	; (8009dd4 <tcpip_input+0x40>)
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff ffa4 	bl	8009d0c <tcpip_inpkt>
 8009dc4:	4603      	mov	r3, r0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	080177ad 	.word	0x080177ad
 8009dd4:	08016691 	.word	0x08016691

08009dd8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009de2:	4819      	ldr	r0, [pc, #100]	; (8009e48 <tcpip_try_callback+0x70>)
 8009de4:	f00d fe61 	bl	8017aaa <sys_mbox_valid>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d106      	bne.n	8009dfc <tcpip_try_callback+0x24>
 8009dee:	4b17      	ldr	r3, [pc, #92]	; (8009e4c <tcpip_try_callback+0x74>)
 8009df0:	f240 125d 	movw	r2, #349	; 0x15d
 8009df4:	4916      	ldr	r1, [pc, #88]	; (8009e50 <tcpip_try_callback+0x78>)
 8009df6:	4817      	ldr	r0, [pc, #92]	; (8009e54 <tcpip_try_callback+0x7c>)
 8009df8:	f00d fff6 	bl	8017de8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009dfc:	2008      	movs	r0, #8
 8009dfe:	f001 fb91 	bl	800b524 <memp_malloc>
 8009e02:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0e:	e017      	b.n	8009e40 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2201      	movs	r2, #1
 8009e14:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e22:	68f9      	ldr	r1, [r7, #12]
 8009e24:	4808      	ldr	r0, [pc, #32]	; (8009e48 <tcpip_try_callback+0x70>)
 8009e26:	f00d fdcb 	bl	80179c0 <sys_mbox_trypost>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e30:	68f9      	ldr	r1, [r7, #12]
 8009e32:	2008      	movs	r0, #8
 8009e34:	f001 fbc8 	bl	800b5c8 <memp_free>
    return ERR_MEM;
 8009e38:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3c:	e000      	b.n	8009e40 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	20008604 	.word	0x20008604
 8009e4c:	080198f8 	.word	0x080198f8
 8009e50:	08019970 	.word	0x08019970
 8009e54:	08019948 	.word	0x08019948

08009e58 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009e64:	4806      	ldr	r0, [pc, #24]	; (8009e80 <tcpip_send_msg_wait_sem+0x28>)
 8009e66:	f00d fef9 	bl	8017c5c <sys_mutex_lock>
  fn(apimsg);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	68b8      	ldr	r0, [r7, #8]
 8009e6e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009e70:	4803      	ldr	r0, [pc, #12]	; (8009e80 <tcpip_send_msg_wait_sem+0x28>)
 8009e72:	f00d ff02 	bl	8017c7a <sys_mutex_unlock>
  return ERR_OK;
 8009e76:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	2000bddc 	.word	0x2000bddc

08009e84 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af02      	add	r7, sp, #8
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009e8e:	f000 fec1 	bl	800ac14 <lwip_init>

  tcpip_init_done = initfunc;
 8009e92:	4a17      	ldr	r2, [pc, #92]	; (8009ef0 <tcpip_init+0x6c>)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009e98:	4a16      	ldr	r2, [pc, #88]	; (8009ef4 <tcpip_init+0x70>)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009e9e:	2106      	movs	r1, #6
 8009ea0:	4815      	ldr	r0, [pc, #84]	; (8009ef8 <tcpip_init+0x74>)
 8009ea2:	f00d fd59 	bl	8017958 <sys_mbox_new>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d006      	beq.n	8009eba <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009eac:	4b13      	ldr	r3, [pc, #76]	; (8009efc <tcpip_init+0x78>)
 8009eae:	f240 2261 	movw	r2, #609	; 0x261
 8009eb2:	4913      	ldr	r1, [pc, #76]	; (8009f00 <tcpip_init+0x7c>)
 8009eb4:	4813      	ldr	r0, [pc, #76]	; (8009f04 <tcpip_init+0x80>)
 8009eb6:	f00d ff97 	bl	8017de8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009eba:	4813      	ldr	r0, [pc, #76]	; (8009f08 <tcpip_init+0x84>)
 8009ebc:	f00d feb2 	bl	8017c24 <sys_mutex_new>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <tcpip_init+0x78>)
 8009ec8:	f240 2265 	movw	r2, #613	; 0x265
 8009ecc:	490f      	ldr	r1, [pc, #60]	; (8009f0c <tcpip_init+0x88>)
 8009ece:	480d      	ldr	r0, [pc, #52]	; (8009f04 <tcpip_init+0x80>)
 8009ed0:	f00d ff8a 	bl	8017de8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009edc:	2200      	movs	r2, #0
 8009ede:	490c      	ldr	r1, [pc, #48]	; (8009f10 <tcpip_init+0x8c>)
 8009ee0:	480c      	ldr	r0, [pc, #48]	; (8009f14 <tcpip_init+0x90>)
 8009ee2:	f00d fed7 	bl	8017c94 <sys_thread_new>
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	200085fc 	.word	0x200085fc
 8009ef4:	20008600 	.word	0x20008600
 8009ef8:	20008604 	.word	0x20008604
 8009efc:	080198f8 	.word	0x080198f8
 8009f00:	08019980 	.word	0x08019980
 8009f04:	08019948 	.word	0x08019948
 8009f08:	2000bddc 	.word	0x2000bddc
 8009f0c:	080199a4 	.word	0x080199a4
 8009f10:	08009c1d 	.word	0x08009c1d
 8009f14:	080199c8 	.word	0x080199c8

08009f18 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <fs_open+0x16>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d102      	bne.n	8009f34 <fs_open+0x1c>
    return ERR_ARG;
 8009f2e:	f06f 030f 	mvn.w	r3, #15
 8009f32:	e028      	b.n	8009f86 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009f34:	4b16      	ldr	r3, [pc, #88]	; (8009f90 <fs_open+0x78>)
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	e020      	b.n	8009f7c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6838      	ldr	r0, [r7, #0]
 8009f42:	f7f6 f955 	bl	80001f0 <strcmp>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d114      	bne.n	8009f76 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	68da      	ldr	r2, [r3, #12]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	7c1a      	ldrb	r2, [r3, #16]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	e007      	b.n	8009f86 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1db      	bne.n	8009f3a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009f82:	f06f 0305 	mvn.w	r3, #5
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	08026a58 	.word	0x08026a58

08009f94 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	1ad3      	subs	r3, r2, r3
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8009fce:	222c      	movs	r2, #44	; 0x2c
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f00d ff00 	bl	8017dd8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009fe6:	202c      	movs	r0, #44	; 0x2c
 8009fe8:	f001 f91a 	bl	800b220 <mem_malloc>
 8009fec:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <http_state_alloc+0x1a>
    http_state_init(ret);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff ffe6 	bl	8009fc6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009ffa:	687b      	ldr	r3, [r7, #4]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d007      	beq.n	800a024 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff ffbb 	bl	8009f94 <fs_close>
    hs->handle = NULL;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d007      	beq.n	800a03c <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	4618      	mov	r0, r3
 800a032:	f002 f975 	bl	800c320 <pbuf_free>
    hs->req = NULL;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a03c:	bf00      	nop
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d005      	beq.n	800a05e <http_state_free+0x1a>
    http_state_eof(hs);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff ffd6 	bl	800a004 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 ff47 	bl	800aeec <mem_free>
  }
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
	...

0800a068 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d106      	bne.n	800a08a <http_write+0x22>
 800a07c:	4b2c      	ldr	r3, [pc, #176]	; (800a130 <http_write+0xc8>)
 800a07e:	f240 2219 	movw	r2, #537	; 0x219
 800a082:	492c      	ldr	r1, [pc, #176]	; (800a134 <http_write+0xcc>)
 800a084:	482c      	ldr	r0, [pc, #176]	; (800a138 <http_write+0xd0>)
 800a086:	f00d feaf 	bl	8017de8 <iprintf>
  len = *length;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a090:	8afb      	ldrh	r3, [r7, #22]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <http_write+0x32>
    return ERR_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	e045      	b.n	800a126 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0a0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a0a2:	8aba      	ldrh	r2, [r7, #20]
 800a0a4:	8afb      	ldrh	r3, [r7, #22]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d201      	bcs.n	800a0ae <http_write+0x46>
    len = max_len;
 800a0aa:	8abb      	ldrh	r3, [r7, #20]
 800a0ac:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a0b6:	8afa      	ldrh	r2, [r7, #22]
 800a0b8:	8abb      	ldrh	r3, [r7, #20]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d901      	bls.n	800a0c2 <http_write+0x5a>
    len = max_len;
 800a0be:	8abb      	ldrh	r3, [r7, #20]
 800a0c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a0c2:	78fb      	ldrb	r3, [r7, #3]
 800a0c4:	8afa      	ldrh	r2, [r7, #22]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f006 ff15 	bl	8010ef8 <tcp_write>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a0d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0da:	d10f      	bne.n	800a0fc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d004      	beq.n	800a0f0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a0ec:	2b08      	cmp	r3, #8
 800a0ee:	d902      	bls.n	800a0f6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	82fb      	strh	r3, [r7, #22]
 800a0f4:	e002      	b.n	800a0fc <http_write+0x94>
      } else {
        len /= 2;
 800a0f6:	8afb      	ldrh	r3, [r7, #22]
 800a0f8:	085b      	lsrs	r3, r3, #1
 800a0fa:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a0fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d102      	bne.n	800a10c <http_write+0xa4>
 800a106:	8afb      	ldrh	r3, [r7, #22]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d8da      	bhi.n	800a0c2 <http_write+0x5a>

  if (err == ERR_OK) {
 800a10c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	8afa      	ldrh	r2, [r7, #22]
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	e002      	b.n	800a122 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a122:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	08019a18 	.word	0x08019a18
 800a134:	08019a50 	.word	0x08019a50
 800a138:	08019a60 	.word	0x08019a60

0800a13c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a14a:	2100      	movs	r1, #0
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f003 ff97 	bl	800e080 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a152:	2100      	movs	r1, #0
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f003 ffa5 	bl	800e0a4 <tcp_recv>
  altcp_err(pcb, NULL);
 800a15a:	2100      	movs	r1, #0
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f003 ffe5 	bl	800e12c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a162:	2200      	movs	r2, #0
 800a164:	2100      	movs	r1, #0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f004 f81a 	bl	800e1a0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a16c:	2100      	movs	r1, #0
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f003 ffba 	bl	800e0e8 <tcp_sent>
  if (hs != NULL) {
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a17a:	68b8      	ldr	r0, [r7, #8]
 800a17c:	f7ff ff62 	bl	800a044 <http_state_free>
  }

  if (abort_conn) {
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d004      	beq.n	800a190 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f002 fec0 	bl	800cf0c <tcp_abort>
    return ERR_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	e00f      	b.n	800a1b0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f002 fd77 	bl	800cc84 <tcp_close>
 800a196:	4603      	mov	r3, r0
 800a198:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a19a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d004      	beq.n	800a1ac <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a1a2:	2204      	movs	r2, #4
 800a1a4:	4904      	ldr	r1, [pc, #16]	; (800a1b8 <http_close_or_abort_conn+0x7c>)
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f003 fffa 	bl	800e1a0 <tcp_poll>
  }
  return err;
 800a1ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	0800a87f 	.word	0x0800a87f

0800a1bc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff ffb6 	bl	800a13c <http_close_or_abort_conn>
 800a1d0:	4603      	mov	r3, r0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff ffe8 	bl	800a1bc <http_close_conn>
  }
}
 800a1ec:	bf00      	nop
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d105      	bne.n	800a212 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff ffe6 	bl	800a1da <http_eof>
    return 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	e016      	b.n	800a240 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fec6 	bl	8009fa8 <fs_bytes_left>
 800a21c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	dc05      	bgt.n	800a230 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff ffd7 	bl	800a1da <http_eof>
    return 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	e007      	b.n	800a240 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a230:	4b05      	ldr	r3, [pc, #20]	; (800a248 <http_check_eof+0x54>)
 800a232:	f240 429d 	movw	r2, #1181	; 0x49d
 800a236:	4905      	ldr	r1, [pc, #20]	; (800a24c <http_check_eof+0x58>)
 800a238:	4805      	ldr	r0, [pc, #20]	; (800a250 <http_check_eof+0x5c>)
 800a23a:	f00d fdd5 	bl	8017de8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a23e:	2301      	movs	r3, #1
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	08019a18 	.word	0x08019a18
 800a24c:	08019a88 	.word	0x08019a88
 800a250:	08019a60 	.word	0x08019a60

0800a254 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d803      	bhi.n	800a276 <http_send_data_nonssi+0x22>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a272:	b29b      	uxth	r3, r3
 800a274:	e001      	b.n	800a27a <http_send_data_nonssi+0x26>
 800a276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a27a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	6999      	ldr	r1, [r3, #24]
 800a280:	f107 020c 	add.w	r2, r7, #12
 800a284:	2300      	movs	r3, #0
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7ff feee 	bl	800a068 <http_write>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10d      	bne.n	800a2b4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a298:	2301      	movs	r3, #1
 800a29a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	89ba      	ldrh	r2, [r7, #12]
 800a2a2:	441a      	add	r2, r3
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	89ba      	ldrh	r2, [r7, #12]
 800a2ae:	1a9a      	subs	r2, r3, r2
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <http_send+0x18>
    return 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e025      	b.n	800a322 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d108      	bne.n	800a2f0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff ff87 	bl	800a1f4 <http_check_eof>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <http_send+0x32>
      return 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e018      	b.n	800a322 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff ffae 	bl	800a254 <http_send_data_nonssi>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10d      	bne.n	800a320 <http_send+0x62>
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	4618      	mov	r0, r3
 800a30a:	f7ff fe4d 	bl	8009fa8 <fs_bytes_left>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc05      	bgt.n	800a320 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff ff5f 	bl	800a1da <http_eof>
    return 0;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e000      	b.n	800a322 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a320:	7bfb      	ldrb	r3, [r7, #15]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	4a1c      	ldr	r2, [pc, #112]	; (800a3ac <http_get_404_file+0x80>)
 800a33a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4619      	mov	r1, r3
 800a344:	4610      	mov	r0, r2
 800a346:	f7ff fde7 	bl	8009f18 <fs_open>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d024      	beq.n	800a3a0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	4a15      	ldr	r2, [pc, #84]	; (800a3b0 <http_get_404_file+0x84>)
 800a35a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	4610      	mov	r0, r2
 800a366:	f7ff fdd7 	bl	8009f18 <fs_open>
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d014      	beq.n	800a3a0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	4a0e      	ldr	r2, [pc, #56]	; (800a3b4 <http_get_404_file+0x88>)
 800a37a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4619      	mov	r1, r3
 800a384:	4610      	mov	r0, r2
 800a386:	f7ff fdc7 	bl	8009f18 <fs_open>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a38e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d004      	beq.n	800a3a0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
        return NULL;
 800a39c:	2300      	movs	r3, #0
 800a39e:	e000      	b.n	800a3a2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a3a0:	687b      	ldr	r3, [r7, #4]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	08019ac0 	.word	0x08019ac0
 800a3b0:	08019acc 	.word	0x08019acc
 800a3b4:	08019ad8 	.word	0x08019ad8

0800a3b8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08e      	sub	sp, #56	; 0x38
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <http_parse_request+0x24>
 800a3ce:	4b65      	ldr	r3, [pc, #404]	; (800a564 <http_parse_request+0x1ac>)
 800a3d0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a3d4:	4964      	ldr	r1, [pc, #400]	; (800a568 <http_parse_request+0x1b0>)
 800a3d6:	4865      	ldr	r0, [pc, #404]	; (800a56c <http_parse_request+0x1b4>)
 800a3d8:	f00d fd06 	bl	8017de8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <http_parse_request+0x38>
 800a3e2:	4b60      	ldr	r3, [pc, #384]	; (800a564 <http_parse_request+0x1ac>)
 800a3e4:	f240 72af 	movw	r2, #1967	; 0x7af
 800a3e8:	4961      	ldr	r1, [pc, #388]	; (800a570 <http_parse_request+0x1b8>)
 800a3ea:	4860      	ldr	r0, [pc, #384]	; (800a56c <http_parse_request+0x1b4>)
 800a3ec:	f00d fcfc 	bl	8017de8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d103      	bne.n	800a400 <http_parse_request+0x48>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a400:	f06f 0307 	mvn.w	r3, #7
 800a404:	e0aa      	b.n	800a55c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a412:	621a      	str	r2, [r3, #32]
 800a414:	e005      	b.n	800a422 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a41c:	4618      	mov	r0, r3
 800a41e:	f002 f84d 	bl	800c4bc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a424:	f002 f822 	bl	800c46c <pbuf_ref>

  if (hs->req->next != NULL) {
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d012      	beq.n	800a458 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	891b      	ldrh	r3, [r3, #8]
 800a438:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a43c:	4293      	cmp	r3, r2
 800a43e:	bf28      	it	cs
 800a440:	4613      	movcs	r3, r2
 800a442:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	6a18      	ldr	r0, [r3, #32]
 800a448:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a44a:	2300      	movs	r3, #0
 800a44c:	4949      	ldr	r1, [pc, #292]	; (800a574 <http_parse_request+0x1bc>)
 800a44e:	f002 f96d 	bl	800c72c <pbuf_copy_partial>
    data = httpd_req_buf;
 800a452:	4b48      	ldr	r3, [pc, #288]	; (800a574 <http_parse_request+0x1bc>)
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
 800a456:	e005      	b.n	800a464 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	895b      	ldrh	r3, [r3, #10]
 800a462:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a464:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a466:	2b06      	cmp	r3, #6
 800a468:	d963      	bls.n	800a532 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a46a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a46c:	461a      	mov	r2, r3
 800a46e:	4942      	ldr	r1, [pc, #264]	; (800a578 <http_parse_request+0x1c0>)
 800a470:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a472:	f000 fb99 	bl	800aba8 <lwip_strnstr>
 800a476:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d059      	beq.n	800a532 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a47e:	2300      	movs	r3, #0
 800a480:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a482:	2204      	movs	r2, #4
 800a484:	493d      	ldr	r1, [pc, #244]	; (800a57c <http_parse_request+0x1c4>)
 800a486:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a488:	f00d fd25 	bl	8017ed6 <strncmp>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d117      	bne.n	800a4c2 <http_parse_request+0x10a>
        sp1 = data + 3;
 800a492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a494:	3303      	adds	r3, #3
 800a496:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	3301      	adds	r3, #1
 800a49c:	461a      	mov	r2, r3
 800a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	8b7a      	ldrh	r2, [r7, #26]
 800a4b0:	4933      	ldr	r1, [pc, #204]	; (800a580 <http_parse_request+0x1c8>)
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fb78 	bl	800aba8 <lwip_strnstr>
 800a4b8:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d111      	bne.n	800a4e4 <http_parse_request+0x12c>
 800a4c0:	e006      	b.n	800a4d0 <http_parse_request+0x118>
        data[4] = 0;
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a4ca:	f06f 030f 	mvn.w	r3, #15
 800a4ce:	e045      	b.n	800a55c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	8b7a      	ldrh	r2, [r7, #26]
 800a4d6:	4928      	ldr	r1, [pc, #160]	; (800a578 <http_parse_request+0x1c0>)
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fb65 	bl	800aba8 <lwip_strnstr>
 800a4de:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	3201      	adds	r2, #1
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01e      	beq.n	800a532 <http_parse_request+0x17a>
 800a4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d91a      	bls.n	800a532 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a4fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a4fe:	461a      	mov	r2, r3
 800a500:	4920      	ldr	r1, [pc, #128]	; (800a584 <http_parse_request+0x1cc>)
 800a502:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a504:	f000 fb50 	bl	800aba8 <lwip_strnstr>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d011      	beq.n	800a532 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	3301      	adds	r3, #1
 800a512:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	2200      	movs	r2, #0
 800a518:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a51a:	8b3b      	ldrh	r3, [r7, #24]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	4413      	add	r3, r2
 800a520:	2200      	movs	r2, #0
 800a522:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a526:	6979      	ldr	r1, [r7, #20]
 800a528:	68b8      	ldr	r0, [r7, #8]
 800a52a:	f000 f82d 	bl	800a588 <http_find_file>
 800a52e:	4603      	mov	r3, r0
 800a530:	e014      	b.n	800a55c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	4618      	mov	r0, r3
 800a538:	f001 ff80 	bl	800c43c <pbuf_clen>
 800a53c:	4603      	mov	r3, r0
 800a53e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	891b      	ldrh	r3, [r3, #8]
 800a546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a54a:	d205      	bcs.n	800a558 <http_parse_request+0x1a0>
 800a54c:	8a7b      	ldrh	r3, [r7, #18]
 800a54e:	2b05      	cmp	r3, #5
 800a550:	d802      	bhi.n	800a558 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a552:	f06f 0304 	mvn.w	r3, #4
 800a556:	e001      	b.n	800a55c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a558:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3738      	adds	r7, #56	; 0x38
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	08019a18 	.word	0x08019a18
 800a568:	08019ae4 	.word	0x08019ae4
 800a56c:	08019a60 	.word	0x08019a60
 800a570:	08019af0 	.word	0x08019af0
 800a574:	20008608 	.word	0x20008608
 800a578:	08019afc 	.word	0x08019afc
 800a57c:	08019b00 	.word	0x08019b00
 800a580:	08019b08 	.word	0x08019b08
 800a584:	08019b0c 	.word	0x08019b0c

0800a588 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b092      	sub	sp, #72	; 0x48
 800a58c:	af02      	add	r7, sp, #8
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a594:	2300      	movs	r3, #0
 800a596:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7f5 fe2d 	bl	8000204 <strlen>
 800a5aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d06b      	beq.n	800a68a <http_find_file+0x102>
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	4413      	add	r3, r2
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2b2f      	cmp	r3, #47	; 0x2f
 800a5be:	d164      	bne.n	800a68a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a5c0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a5c2:	4a53      	ldr	r2, [pc, #332]	; (800a710 <http_find_file+0x188>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d102      	bne.n	800a5ce <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d15d      	bne.n	800a68a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	2b3f      	cmp	r3, #63	; 0x3f
 800a5d4:	bf28      	it	cs
 800a5d6:	233f      	movcs	r3, #63	; 0x3f
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00a      	beq.n	800a5f6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	484a      	ldr	r0, [pc, #296]	; (800a710 <http_find_file+0x188>)
 800a5e8:	f00d fbeb 	bl	8017dc2 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a5ec:	4a48      	ldr	r2, [pc, #288]	; (800a710 <http_find_file+0x188>)
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	4413      	add	r3, r2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fa:	e043      	b.n	800a684 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d028      	beq.n	800a654 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a608:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d01e      	beq.n	800a64e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a610:	4a40      	ldr	r2, [pc, #256]	; (800a714 <http_find_file+0x18c>)
 800a612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7f5 fdf3 	bl	8000204 <strlen>
 800a61e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	4293      	cmp	r3, r2
 800a626:	bf28      	it	cs
 800a628:	4613      	movcs	r3, r2
 800a62a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	4a38      	ldr	r2, [pc, #224]	; (800a710 <http_find_file+0x188>)
 800a630:	1898      	adds	r0, r3, r2
 800a632:	4a38      	ldr	r2, [pc, #224]	; (800a714 <http_find_file+0x18c>)
 800a634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a636:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a63a:	69ba      	ldr	r2, [r7, #24]
 800a63c:	4619      	mov	r1, r3
 800a63e:	f00d fbc0 	bl	8017dc2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	4413      	add	r3, r2
 800a648:	4a31      	ldr	r2, [pc, #196]	; (800a710 <http_find_file+0x188>)
 800a64a:	2100      	movs	r1, #0
 800a64c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800a64e:	4b30      	ldr	r3, [pc, #192]	; (800a710 <http_find_file+0x188>)
 800a650:	633b      	str	r3, [r7, #48]	; 0x30
 800a652:	e004      	b.n	800a65e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800a654:	4a2f      	ldr	r2, [pc, #188]	; (800a714 <http_find_file+0x18c>)
 800a656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a658:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a65c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff fc58 	bl	8009f18 <fs_open>
 800a668:	4603      	mov	r3, r0
 800a66a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800a66c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <http_find_file+0xf6>
        uri = file_name;
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a67c:	e005      	b.n	800a68a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a680:	3301      	adds	r3, #1
 800a682:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a686:	2b04      	cmp	r3, #4
 800a688:	d9b8      	bls.n	800a5fc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d124      	bne.n	800a6da <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	213f      	movs	r1, #63	; 0x3f
 800a694:	4618      	mov	r0, r3
 800a696:	f00d fc11 	bl	8017ebc <strchr>
 800a69a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d005      	beq.n	800a6ae <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	701a      	strb	r2, [r3, #0]
      params++;
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7ff fc2f 	bl	8009f18 <fs_open>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a6be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d102      	bne.n	800a6cc <http_find_file+0x144>
      file = &hs->file_handle;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6ca:	e006      	b.n	800a6da <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800a6cc:	f107 0308 	add.w	r3, r7, #8
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff fe2a 	bl	800a32c <http_get_404_file>
 800a6d8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d106      	bne.n	800a6ee <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a6e0:	f107 0308 	add.w	r3, r7, #8
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff fe20 	bl	800a32c <http_get_404_file>
 800a6ec:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 f809 	bl	800a718 <http_init_file>
 800a706:	4603      	mov	r3, r0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3740      	adds	r7, #64	; 0x40
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	20008a08 	.word	0x20008a08
 800a714:	08026a6c 	.word	0x08026a6c

0800a718 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d05d      	beq.n	800a7e8 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d106      	bne.n	800a742 <http_init_file+0x2a>
 800a734:	4b35      	ldr	r3, [pc, #212]	; (800a80c <http_init_file+0xf4>)
 800a736:	f640 120b 	movw	r2, #2315	; 0x90b
 800a73a:	4935      	ldr	r1, [pc, #212]	; (800a810 <http_init_file+0xf8>)
 800a73c:	4835      	ldr	r0, [pc, #212]	; (800a814 <http_init_file+0xfc>)
 800a73e:	f00d fb53 	bl	8017de8 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	da06      	bge.n	800a766 <http_init_file+0x4e>
 800a758:	4b2c      	ldr	r3, [pc, #176]	; (800a80c <http_init_file+0xf4>)
 800a75a:	f640 1234 	movw	r2, #2356	; 0x934
 800a75e:	492e      	ldr	r1, [pc, #184]	; (800a818 <http_init_file+0x100>)
 800a760:	482c      	ldr	r0, [pc, #176]	; (800a814 <http_init_file+0xfc>)
 800a762:	f00d fb41 	bl	8017de8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	461a      	mov	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	7c1b      	ldrb	r3, [r3, #16]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <http_init_file+0x7c>
 800a786:	4b21      	ldr	r3, [pc, #132]	; (800a80c <http_init_file+0xf4>)
 800a788:	f640 1244 	movw	r2, #2372	; 0x944
 800a78c:	4923      	ldr	r1, [pc, #140]	; (800a81c <http_init_file+0x104>)
 800a78e:	4821      	ldr	r0, [pc, #132]	; (800a814 <http_init_file+0xfc>)
 800a790:	f00d fb2a 	bl	8017de8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d033      	beq.n	800a802 <http_init_file+0xea>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	7c1b      	ldrb	r3, [r3, #16]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d02c      	beq.n	800a802 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6998      	ldr	r0, [r3, #24]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	491b      	ldr	r1, [pc, #108]	; (800a820 <http_init_file+0x108>)
 800a7b4:	f000 f9f8 	bl	800aba8 <lwip_strnstr>
 800a7b8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d020      	beq.n	800a802 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	699a      	ldr	r2, [r3, #24]
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	1ad2      	subs	r2, r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	625a      	str	r2, [r3, #36]	; 0x24
 800a7e6:	e00c      	b.n	800a802 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	08019a18 	.word	0x08019a18
 800a810:	08019b14 	.word	0x08019b14
 800a814:	08019a60 	.word	0x08019a60
 800a818:	08019b28 	.word	0x08019b28
 800a81c:	08019b48 	.word	0x08019b48
 800a820:	08019b0c 	.word	0x08019b0c

0800a824 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <http_err+0x1c>
    http_state_free(hs);
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f7ff fc02 	bl	800a044 <http_state_free>
  }
}
 800a840:	bf00      	nop
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <http_sent+0x1c>
    return ERR_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	e008      	b.n	800a876 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a86c:	6979      	ldr	r1, [r7, #20]
 800a86e:	68b8      	ldr	r0, [r7, #8]
 800a870:	f7ff fd25 	bl	800a2be <http_send>

  return ERR_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d107      	bne.n	800a8a2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a892:	2100      	movs	r1, #0
 800a894:	6838      	ldr	r0, [r7, #0]
 800a896:	f7ff fc91 	bl	800a1bc <http_close_conn>
 800a89a:	4603      	mov	r3, r0
 800a89c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e021      	b.n	800a8e6 <http_poll+0x68>
  } else {
    hs->retries++;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d105      	bne.n	800a8c8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a8bc:	68f9      	ldr	r1, [r7, #12]
 800a8be:	6838      	ldr	r0, [r7, #0]
 800a8c0:	f7ff fc7c 	bl	800a1bc <http_close_conn>
      return ERR_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e00e      	b.n	800a8e6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d009      	beq.n	800a8e4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800a8d0:	68f9      	ldr	r1, [r7, #12]
 800a8d2:	6838      	ldr	r0, [r7, #0]
 800a8d4:	f7ff fcf3 	bl	800a2be <http_send>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800a8de:	6838      	ldr	r0, [r7, #0]
 800a8e0:	f007 f8f6 	bl	8011ad0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d105      	bne.n	800a916 <http_recv+0x26>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <http_recv+0x26>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d111      	bne.n	800a93a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d008      	beq.n	800a92e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	891b      	ldrh	r3, [r3, #8]
 800a920:	4619      	mov	r1, r3
 800a922:	68b8      	ldr	r0, [r7, #8]
 800a924:	f002 fccc 	bl	800d2c0 <tcp_recved>
      pbuf_free(p);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f001 fcf9 	bl	800c320 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a92e:	6979      	ldr	r1, [r7, #20]
 800a930:	68b8      	ldr	r0, [r7, #8]
 800a932:	f7ff fc43 	bl	800a1bc <http_close_conn>
    return ERR_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	e055      	b.n	800a9e6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	891b      	ldrh	r3, [r3, #8]
 800a93e:	4619      	mov	r1, r3
 800a940:	68b8      	ldr	r0, [r7, #8]
 800a942:	f002 fcbd 	bl	800d2c0 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d147      	bne.n	800a9de <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	6979      	ldr	r1, [r7, #20]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff fd30 	bl	800a3b8 <http_parse_request>
 800a958:	4603      	mov	r3, r0
 800a95a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a95c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d015      	beq.n	800a990 <http_recv+0xa0>
 800a964:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a968:	f113 0f05 	cmn.w	r3, #5
 800a96c:	d010      	beq.n	800a990 <http_recv+0xa0>
 800a96e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a972:	f113 0f10 	cmn.w	r3, #16
 800a976:	d00b      	beq.n	800a990 <http_recv+0xa0>
 800a978:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a97c:	f113 0f08 	cmn.w	r3, #8
 800a980:	d006      	beq.n	800a990 <http_recv+0xa0>
 800a982:	4b1b      	ldr	r3, [pc, #108]	; (800a9f0 <http_recv+0x100>)
 800a984:	f640 2205 	movw	r2, #2565	; 0xa05
 800a988:	491a      	ldr	r1, [pc, #104]	; (800a9f4 <http_recv+0x104>)
 800a98a:	481b      	ldr	r0, [pc, #108]	; (800a9f8 <http_recv+0x108>)
 800a98c:	f00d fa2c 	bl	8017de8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a990:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a994:	f113 0f05 	cmn.w	r3, #5
 800a998:	d00b      	beq.n	800a9b2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d007      	beq.n	800a9b2 <http_recv+0xc2>
          pbuf_free(hs->req);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 fcba 	bl	800c320 <pbuf_free>
          hs->req = NULL;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f001 fcb4 	bl	800c320 <pbuf_free>
      if (parsed == ERR_OK) {
 800a9b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d104      	bne.n	800a9ca <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800a9c0:	6979      	ldr	r1, [r7, #20]
 800a9c2:	68b8      	ldr	r0, [r7, #8]
 800a9c4:	f7ff fc7b 	bl	800a2be <http_send>
 800a9c8:	e00c      	b.n	800a9e4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800a9ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a9ce:	f113 0f10 	cmn.w	r3, #16
 800a9d2:	d107      	bne.n	800a9e4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a9d4:	6979      	ldr	r1, [r7, #20]
 800a9d6:	68b8      	ldr	r0, [r7, #8]
 800a9d8:	f7ff fbf0 	bl	800a1bc <http_close_conn>
 800a9dc:	e002      	b.n	800a9e4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f001 fc9e 	bl	800c320 <pbuf_free>
    }
  }
  return ERR_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	08019a18 	.word	0x08019a18
 800a9f4:	08019b74 	.word	0x08019b74
 800a9f8:	08019a60 	.word	0x08019a60

0800a9fc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	4613      	mov	r3, r2
 800aa08:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800aa0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d102      	bne.n	800aa18 <http_accept+0x1c>
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d102      	bne.n	800aa1e <http_accept+0x22>
    return ERR_VAL;
 800aa18:	f06f 0305 	mvn.w	r3, #5
 800aa1c:	e025      	b.n	800aa6a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800aa1e:	2101      	movs	r1, #1
 800aa20:	68b8      	ldr	r0, [r7, #8]
 800aa22:	f003 f92d 	bl	800dc80 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800aa26:	f7ff fadb 	bl	8009fe0 <http_state_alloc>
 800aa2a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d102      	bne.n	800aa38 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800aa32:	f04f 33ff 	mov.w	r3, #4294967295
 800aa36:	e018      	b.n	800aa6a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800aa3e:	6979      	ldr	r1, [r7, #20]
 800aa40:	68b8      	ldr	r0, [r7, #8]
 800aa42:	f003 fb1d 	bl	800e080 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800aa46:	490b      	ldr	r1, [pc, #44]	; (800aa74 <http_accept+0x78>)
 800aa48:	68b8      	ldr	r0, [r7, #8]
 800aa4a:	f003 fb2b 	bl	800e0a4 <tcp_recv>
  altcp_err(pcb, http_err);
 800aa4e:	490a      	ldr	r1, [pc, #40]	; (800aa78 <http_accept+0x7c>)
 800aa50:	68b8      	ldr	r0, [r7, #8]
 800aa52:	f003 fb6b 	bl	800e12c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800aa56:	2204      	movs	r2, #4
 800aa58:	4908      	ldr	r1, [pc, #32]	; (800aa7c <http_accept+0x80>)
 800aa5a:	68b8      	ldr	r0, [r7, #8]
 800aa5c:	f003 fba0 	bl	800e1a0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800aa60:	4907      	ldr	r1, [pc, #28]	; (800aa80 <http_accept+0x84>)
 800aa62:	68b8      	ldr	r0, [r7, #8]
 800aa64:	f003 fb40 	bl	800e0e8 <tcp_sent>

  return ERR_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	0800a8f1 	.word	0x0800a8f1
 800aa78:	0800a825 	.word	0x0800a825
 800aa7c:	0800a87f 	.word	0x0800a87f
 800aa80:	0800a849 	.word	0x0800a849

0800aa84 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d029      	beq.n	800aaea <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800aa96:	2101      	movs	r1, #1
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f003 f8f1 	bl	800dc80 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800aa9e:	887b      	ldrh	r3, [r7, #2]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4914      	ldr	r1, [pc, #80]	; (800aaf4 <httpd_init_pcb+0x70>)
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f002 fa3d 	bl	800cf24 <tcp_bind>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800aaae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d006      	beq.n	800aac4 <httpd_init_pcb+0x40>
 800aab6:	4b10      	ldr	r3, [pc, #64]	; (800aaf8 <httpd_init_pcb+0x74>)
 800aab8:	f640 2257 	movw	r2, #2647	; 0xa57
 800aabc:	490f      	ldr	r1, [pc, #60]	; (800aafc <httpd_init_pcb+0x78>)
 800aabe:	4810      	ldr	r0, [pc, #64]	; (800ab00 <httpd_init_pcb+0x7c>)
 800aac0:	f00d f992 	bl	8017de8 <iprintf>
    pcb = altcp_listen(pcb);
 800aac4:	21ff      	movs	r1, #255	; 0xff
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f002 fae4 	bl	800d094 <tcp_listen_with_backlog>
 800aacc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d106      	bne.n	800aae2 <httpd_init_pcb+0x5e>
 800aad4:	4b08      	ldr	r3, [pc, #32]	; (800aaf8 <httpd_init_pcb+0x74>)
 800aad6:	f640 2259 	movw	r2, #2649	; 0xa59
 800aada:	490a      	ldr	r1, [pc, #40]	; (800ab04 <httpd_init_pcb+0x80>)
 800aadc:	4808      	ldr	r0, [pc, #32]	; (800ab00 <httpd_init_pcb+0x7c>)
 800aade:	f00d f983 	bl	8017de8 <iprintf>
    altcp_accept(pcb, http_accept);
 800aae2:	4909      	ldr	r1, [pc, #36]	; (800ab08 <httpd_init_pcb+0x84>)
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f003 fb43 	bl	800e170 <tcp_accept>
  }
}
 800aaea:	bf00      	nop
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	08026bb4 	.word	0x08026bb4
 800aaf8:	08019a18 	.word	0x08019a18
 800aafc:	08019ba0 	.word	0x08019ba0
 800ab00:	08019a60 	.word	0x08019a60
 800ab04:	08019bbc 	.word	0x08019bbc
 800ab08:	0800a9fd 	.word	0x0800a9fd

0800ab0c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800ab12:	202e      	movs	r0, #46	; 0x2e
 800ab14:	f003 faa6 	bl	800e064 <tcp_new_ip_type>
 800ab18:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <httpd_init+0x22>
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <httpd_init+0x34>)
 800ab22:	f640 2272 	movw	r2, #2674	; 0xa72
 800ab26:	4907      	ldr	r1, [pc, #28]	; (800ab44 <httpd_init+0x38>)
 800ab28:	4807      	ldr	r0, [pc, #28]	; (800ab48 <httpd_init+0x3c>)
 800ab2a:	f00d f95d 	bl	8017de8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800ab2e:	2150      	movs	r1, #80	; 0x50
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff ffa7 	bl	800aa84 <httpd_init_pcb>
}
 800ab36:	bf00      	nop
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	08019a18 	.word	0x08019a18
 800ab44:	08019bdc 	.word	0x08019bdc
 800ab48:	08019a60 	.word	0x08019a60

0800ab4c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ab56:	88fb      	ldrh	r3, [r7, #6]
 800ab58:	021b      	lsls	r3, r3, #8
 800ab5a:	b21a      	sxth	r2, r3
 800ab5c:	88fb      	ldrh	r3, [r7, #6]
 800ab5e:	0a1b      	lsrs	r3, r3, #8
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	b21b      	sxth	r3, r3
 800ab64:	4313      	orrs	r3, r2
 800ab66:	b21b      	sxth	r3, r3
 800ab68:	b29b      	uxth	r3, r3
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	061a      	lsls	r2, r3, #24
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	021b      	lsls	r3, r3, #8
 800ab86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab8a:	431a      	orrs	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	0a1b      	lsrs	r3, r3, #8
 800ab90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	0e1b      	lsrs	r3, r3, #24
 800ab9a:	4313      	orrs	r3, r2
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800abb4:	68b8      	ldr	r0, [r7, #8]
 800abb6:	f7f5 fb25 	bl	8000204 <strlen>
 800abba:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	e022      	b.n	800ac0c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	617b      	str	r3, [r7, #20]
 800abca:	e012      	b.n	800abf2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	781a      	ldrb	r2, [r3, #0]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d109      	bne.n	800abec <lwip_strnstr+0x44>
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	68b9      	ldr	r1, [r7, #8]
 800abdc:	6978      	ldr	r0, [r7, #20]
 800abde:	f00d f97a 	bl	8017ed6 <strncmp>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	e00f      	b.n	800ac0c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	3301      	adds	r3, #1
 800abf0:	617b      	str	r3, [r7, #20]
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d007      	beq.n	800ac0a <lwip_strnstr+0x62>
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	441a      	add	r2, r3
 800ac00:	68f9      	ldr	r1, [r7, #12]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	440b      	add	r3, r1
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d9e0      	bls.n	800abcc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ac1e:	f00c fff3 	bl	8017c08 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ac22:	f000 f8d5 	bl	800add0 <mem_init>
  memp_init();
 800ac26:	f000 fc31 	bl	800b48c <memp_init>
  pbuf_init();
  netif_init();
 800ac2a:	f000 fcf7 	bl	800b61c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ac2e:	f008 f84d 	bl	8012ccc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ac32:	f001 fe1f 	bl	800c874 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ac36:	f007 ff91 	bl	8012b5c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ac4e:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <ptr_to_mem+0x20>)
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	88fb      	ldrh	r3, [r7, #6]
 800ac54:	4413      	add	r3, r2
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20008a48 	.word	0x20008a48

0800ac68 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a05      	ldr	r2, [pc, #20]	; (800ac88 <mem_to_ptr+0x20>)
 800ac74:	6812      	ldr	r2, [r2, #0]
 800ac76:	1a9b      	subs	r3, r3, r2
 800ac78:	b29b      	uxth	r3, r3
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	20008a48 	.word	0x20008a48

0800ac8c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ac8c:	b590      	push	{r4, r7, lr}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ac94:	4b45      	ldr	r3, [pc, #276]	; (800adac <plug_holes+0x120>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d206      	bcs.n	800acac <plug_holes+0x20>
 800ac9e:	4b44      	ldr	r3, [pc, #272]	; (800adb0 <plug_holes+0x124>)
 800aca0:	f240 12df 	movw	r2, #479	; 0x1df
 800aca4:	4943      	ldr	r1, [pc, #268]	; (800adb4 <plug_holes+0x128>)
 800aca6:	4844      	ldr	r0, [pc, #272]	; (800adb8 <plug_holes+0x12c>)
 800aca8:	f00d f89e 	bl	8017de8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800acac:	4b43      	ldr	r3, [pc, #268]	; (800adbc <plug_holes+0x130>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d306      	bcc.n	800acc4 <plug_holes+0x38>
 800acb6:	4b3e      	ldr	r3, [pc, #248]	; (800adb0 <plug_holes+0x124>)
 800acb8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800acbc:	4940      	ldr	r1, [pc, #256]	; (800adc0 <plug_holes+0x134>)
 800acbe:	483e      	ldr	r0, [pc, #248]	; (800adb8 <plug_holes+0x12c>)
 800acc0:	f00d f892 	bl	8017de8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	791b      	ldrb	r3, [r3, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d006      	beq.n	800acda <plug_holes+0x4e>
 800accc:	4b38      	ldr	r3, [pc, #224]	; (800adb0 <plug_holes+0x124>)
 800acce:	f240 12e1 	movw	r2, #481	; 0x1e1
 800acd2:	493c      	ldr	r1, [pc, #240]	; (800adc4 <plug_holes+0x138>)
 800acd4:	4838      	ldr	r0, [pc, #224]	; (800adb8 <plug_holes+0x12c>)
 800acd6:	f00d f887 	bl	8017de8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ace2:	d906      	bls.n	800acf2 <plug_holes+0x66>
 800ace4:	4b32      	ldr	r3, [pc, #200]	; (800adb0 <plug_holes+0x124>)
 800ace6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800acea:	4937      	ldr	r1, [pc, #220]	; (800adc8 <plug_holes+0x13c>)
 800acec:	4832      	ldr	r0, [pc, #200]	; (800adb8 <plug_holes+0x12c>)
 800acee:	f00d f87b 	bl	8017de8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff ffa4 	bl	800ac44 <ptr_to_mem>
 800acfc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d024      	beq.n	800ad50 <plug_holes+0xc4>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	791b      	ldrb	r3, [r3, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d120      	bne.n	800ad50 <plug_holes+0xc4>
 800ad0e:	4b2b      	ldr	r3, [pc, #172]	; (800adbc <plug_holes+0x130>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d01b      	beq.n	800ad50 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ad18:	4b2c      	ldr	r3, [pc, #176]	; (800adcc <plug_holes+0x140>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d102      	bne.n	800ad28 <plug_holes+0x9c>
      lfree = mem;
 800ad22:	4a2a      	ldr	r2, [pc, #168]	; (800adcc <plug_holes+0x140>)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	881a      	ldrh	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad38:	d00a      	beq.n	800ad50 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	881b      	ldrh	r3, [r3, #0]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff ff80 	bl	800ac44 <ptr_to_mem>
 800ad44:	4604      	mov	r4, r0
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff ff8e 	bl	800ac68 <mem_to_ptr>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	885b      	ldrh	r3, [r3, #2]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff ff75 	bl	800ac44 <ptr_to_mem>
 800ad5a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d01f      	beq.n	800ada4 <plug_holes+0x118>
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	791b      	ldrb	r3, [r3, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d11b      	bne.n	800ada4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ad6c:	4b17      	ldr	r3, [pc, #92]	; (800adcc <plug_holes+0x140>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d102      	bne.n	800ad7c <plug_holes+0xf0>
      lfree = pmem;
 800ad76:	4a15      	ldr	r2, [pc, #84]	; (800adcc <plug_holes+0x140>)
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	881a      	ldrh	r2, [r3, #0]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad8c:	d00a      	beq.n	800ada4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7ff ff56 	bl	800ac44 <ptr_to_mem>
 800ad98:	4604      	mov	r4, r0
 800ad9a:	68b8      	ldr	r0, [r7, #8]
 800ad9c:	f7ff ff64 	bl	800ac68 <mem_to_ptr>
 800ada0:	4603      	mov	r3, r0
 800ada2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ada4:	bf00      	nop
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd90      	pop	{r4, r7, pc}
 800adac:	20008a48 	.word	0x20008a48
 800adb0:	08019bf8 	.word	0x08019bf8
 800adb4:	08019c28 	.word	0x08019c28
 800adb8:	08019c40 	.word	0x08019c40
 800adbc:	20008a4c 	.word	0x20008a4c
 800adc0:	08019c68 	.word	0x08019c68
 800adc4:	08019c84 	.word	0x08019c84
 800adc8:	08019ca0 	.word	0x08019ca0
 800adcc:	20008a54 	.word	0x20008a54

0800add0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800add6:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <mem_init+0x84>)
 800add8:	3303      	adds	r3, #3
 800adda:	f023 0303 	bic.w	r3, r3, #3
 800adde:	461a      	mov	r2, r3
 800ade0:	4b1d      	ldr	r3, [pc, #116]	; (800ae58 <mem_init+0x88>)
 800ade2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ade4:	4b1c      	ldr	r3, [pc, #112]	; (800ae58 <mem_init+0x88>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800adf0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800adfe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ae02:	f7ff ff1f 	bl	800ac44 <ptr_to_mem>
 800ae06:	4602      	mov	r2, r0
 800ae08:	4b14      	ldr	r3, [pc, #80]	; (800ae5c <mem_init+0x8c>)
 800ae0a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800ae0c:	4b13      	ldr	r3, [pc, #76]	; (800ae5c <mem_init+0x8c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2201      	movs	r2, #1
 800ae12:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ae14:	4b11      	ldr	r3, [pc, #68]	; (800ae5c <mem_init+0x8c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ae1c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ae1e:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <mem_init+0x8c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ae26:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ae28:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <mem_init+0x88>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a0c      	ldr	r2, [pc, #48]	; (800ae60 <mem_init+0x90>)
 800ae2e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ae30:	480c      	ldr	r0, [pc, #48]	; (800ae64 <mem_init+0x94>)
 800ae32:	f00c fef7 	bl	8017c24 <sys_mutex_new>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d006      	beq.n	800ae4a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <mem_init+0x98>)
 800ae3e:	f240 221f 	movw	r2, #543	; 0x21f
 800ae42:	490a      	ldr	r1, [pc, #40]	; (800ae6c <mem_init+0x9c>)
 800ae44:	480a      	ldr	r0, [pc, #40]	; (800ae70 <mem_init+0xa0>)
 800ae46:	f00c ffcf 	bl	8017de8 <iprintf>
  }
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	2000bdf8 	.word	0x2000bdf8
 800ae58:	20008a48 	.word	0x20008a48
 800ae5c:	20008a4c 	.word	0x20008a4c
 800ae60:	20008a54 	.word	0x20008a54
 800ae64:	20008a50 	.word	0x20008a50
 800ae68:	08019bf8 	.word	0x08019bf8
 800ae6c:	08019ccc 	.word	0x08019ccc
 800ae70:	08019c40 	.word	0x08019c40

0800ae74 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff fef3 	bl	800ac68 <mem_to_ptr>
 800ae82:	4603      	mov	r3, r0
 800ae84:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	881b      	ldrh	r3, [r3, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff feda 	bl	800ac44 <ptr_to_mem>
 800ae90:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff fed4 	bl	800ac44 <ptr_to_mem>
 800ae9c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aea6:	d818      	bhi.n	800aeda <mem_link_valid+0x66>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	885b      	ldrh	r3, [r3, #2]
 800aeac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aeb0:	d813      	bhi.n	800aeda <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800aeb6:	8afa      	ldrh	r2, [r7, #22]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d004      	beq.n	800aec6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	8afa      	ldrh	r2, [r7, #22]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d109      	bne.n	800aeda <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <mem_link_valid+0x74>)
 800aec8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d006      	beq.n	800aede <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	885b      	ldrh	r3, [r3, #2]
 800aed4:	8afa      	ldrh	r2, [r7, #22]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d001      	beq.n	800aede <mem_link_valid+0x6a>
    return 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e000      	b.n	800aee0 <mem_link_valid+0x6c>
  }
  return 1;
 800aede:	2301      	movs	r3, #1
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20008a4c 	.word	0x20008a4c

0800aeec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b088      	sub	sp, #32
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d070      	beq.n	800afdc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f003 0303 	and.w	r3, r3, #3
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00d      	beq.n	800af20 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800af04:	4b37      	ldr	r3, [pc, #220]	; (800afe4 <mem_free+0xf8>)
 800af06:	f240 2273 	movw	r2, #627	; 0x273
 800af0a:	4937      	ldr	r1, [pc, #220]	; (800afe8 <mem_free+0xfc>)
 800af0c:	4837      	ldr	r0, [pc, #220]	; (800afec <mem_free+0x100>)
 800af0e:	f00c ff6b 	bl	8017de8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af12:	f00c fee5 	bl	8017ce0 <sys_arch_protect>
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f00c feef 	bl	8017cfc <sys_arch_unprotect>
    return;
 800af1e:	e05e      	b.n	800afde <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3b08      	subs	r3, #8
 800af24:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800af26:	4b32      	ldr	r3, [pc, #200]	; (800aff0 <mem_free+0x104>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d306      	bcc.n	800af3e <mem_free+0x52>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f103 020c 	add.w	r2, r3, #12
 800af36:	4b2f      	ldr	r3, [pc, #188]	; (800aff4 <mem_free+0x108>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d90d      	bls.n	800af5a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800af3e:	4b29      	ldr	r3, [pc, #164]	; (800afe4 <mem_free+0xf8>)
 800af40:	f240 227f 	movw	r2, #639	; 0x27f
 800af44:	492c      	ldr	r1, [pc, #176]	; (800aff8 <mem_free+0x10c>)
 800af46:	4829      	ldr	r0, [pc, #164]	; (800afec <mem_free+0x100>)
 800af48:	f00c ff4e 	bl	8017de8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af4c:	f00c fec8 	bl	8017ce0 <sys_arch_protect>
 800af50:	6138      	str	r0, [r7, #16]
 800af52:	6938      	ldr	r0, [r7, #16]
 800af54:	f00c fed2 	bl	8017cfc <sys_arch_unprotect>
    return;
 800af58:	e041      	b.n	800afde <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af5a:	4828      	ldr	r0, [pc, #160]	; (800affc <mem_free+0x110>)
 800af5c:	f00c fe7e 	bl	8017c5c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	791b      	ldrb	r3, [r3, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d110      	bne.n	800af8a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800af68:	4b1e      	ldr	r3, [pc, #120]	; (800afe4 <mem_free+0xf8>)
 800af6a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800af6e:	4924      	ldr	r1, [pc, #144]	; (800b000 <mem_free+0x114>)
 800af70:	481e      	ldr	r0, [pc, #120]	; (800afec <mem_free+0x100>)
 800af72:	f00c ff39 	bl	8017de8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800af76:	4821      	ldr	r0, [pc, #132]	; (800affc <mem_free+0x110>)
 800af78:	f00c fe7f 	bl	8017c7a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af7c:	f00c feb0 	bl	8017ce0 <sys_arch_protect>
 800af80:	6178      	str	r0, [r7, #20]
 800af82:	6978      	ldr	r0, [r7, #20]
 800af84:	f00c feba 	bl	8017cfc <sys_arch_unprotect>
    return;
 800af88:	e029      	b.n	800afde <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800af8a:	69f8      	ldr	r0, [r7, #28]
 800af8c:	f7ff ff72 	bl	800ae74 <mem_link_valid>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d110      	bne.n	800afb8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800af96:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <mem_free+0xf8>)
 800af98:	f240 2295 	movw	r2, #661	; 0x295
 800af9c:	4919      	ldr	r1, [pc, #100]	; (800b004 <mem_free+0x118>)
 800af9e:	4813      	ldr	r0, [pc, #76]	; (800afec <mem_free+0x100>)
 800afa0:	f00c ff22 	bl	8017de8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800afa4:	4815      	ldr	r0, [pc, #84]	; (800affc <mem_free+0x110>)
 800afa6:	f00c fe68 	bl	8017c7a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800afaa:	f00c fe99 	bl	8017ce0 <sys_arch_protect>
 800afae:	61b8      	str	r0, [r7, #24]
 800afb0:	69b8      	ldr	r0, [r7, #24]
 800afb2:	f00c fea3 	bl	8017cfc <sys_arch_unprotect>
    return;
 800afb6:	e012      	b.n	800afde <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	2200      	movs	r2, #0
 800afbc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800afbe:	4b12      	ldr	r3, [pc, #72]	; (800b008 <mem_free+0x11c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	69fa      	ldr	r2, [r7, #28]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d202      	bcs.n	800afce <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800afc8:	4a0f      	ldr	r2, [pc, #60]	; (800b008 <mem_free+0x11c>)
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800afce:	69f8      	ldr	r0, [r7, #28]
 800afd0:	f7ff fe5c 	bl	800ac8c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800afd4:	4809      	ldr	r0, [pc, #36]	; (800affc <mem_free+0x110>)
 800afd6:	f00c fe50 	bl	8017c7a <sys_mutex_unlock>
 800afda:	e000      	b.n	800afde <mem_free+0xf2>
    return;
 800afdc:	bf00      	nop
}
 800afde:	3720      	adds	r7, #32
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	08019bf8 	.word	0x08019bf8
 800afe8:	08019ce8 	.word	0x08019ce8
 800afec:	08019c40 	.word	0x08019c40
 800aff0:	20008a48 	.word	0x20008a48
 800aff4:	20008a4c 	.word	0x20008a4c
 800aff8:	08019d0c 	.word	0x08019d0c
 800affc:	20008a50 	.word	0x20008a50
 800b000:	08019d28 	.word	0x08019d28
 800b004:	08019d50 	.word	0x08019d50
 800b008:	20008a54 	.word	0x20008a54

0800b00c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b018:	887b      	ldrh	r3, [r7, #2]
 800b01a:	3303      	adds	r3, #3
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b024:	8bfb      	ldrh	r3, [r7, #30]
 800b026:	2b0b      	cmp	r3, #11
 800b028:	d801      	bhi.n	800b02e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b02a:	230c      	movs	r3, #12
 800b02c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b02e:	8bfb      	ldrh	r3, [r7, #30]
 800b030:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b034:	d803      	bhi.n	800b03e <mem_trim+0x32>
 800b036:	8bfa      	ldrh	r2, [r7, #30]
 800b038:	887b      	ldrh	r3, [r7, #2]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d201      	bcs.n	800b042 <mem_trim+0x36>
    return NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	e0d8      	b.n	800b1f4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b042:	4b6e      	ldr	r3, [pc, #440]	; (800b1fc <mem_trim+0x1f0>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d304      	bcc.n	800b056 <mem_trim+0x4a>
 800b04c:	4b6c      	ldr	r3, [pc, #432]	; (800b200 <mem_trim+0x1f4>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	429a      	cmp	r2, r3
 800b054:	d306      	bcc.n	800b064 <mem_trim+0x58>
 800b056:	4b6b      	ldr	r3, [pc, #428]	; (800b204 <mem_trim+0x1f8>)
 800b058:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b05c:	496a      	ldr	r1, [pc, #424]	; (800b208 <mem_trim+0x1fc>)
 800b05e:	486b      	ldr	r0, [pc, #428]	; (800b20c <mem_trim+0x200>)
 800b060:	f00c fec2 	bl	8017de8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b064:	4b65      	ldr	r3, [pc, #404]	; (800b1fc <mem_trim+0x1f0>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d304      	bcc.n	800b078 <mem_trim+0x6c>
 800b06e:	4b64      	ldr	r3, [pc, #400]	; (800b200 <mem_trim+0x1f4>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d307      	bcc.n	800b088 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b078:	f00c fe32 	bl	8017ce0 <sys_arch_protect>
 800b07c:	60b8      	str	r0, [r7, #8]
 800b07e:	68b8      	ldr	r0, [r7, #8]
 800b080:	f00c fe3c 	bl	8017cfc <sys_arch_unprotect>
    return rmem;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	e0b5      	b.n	800b1f4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3b08      	subs	r3, #8
 800b08c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b08e:	69b8      	ldr	r0, [r7, #24]
 800b090:	f7ff fdea 	bl	800ac68 <mem_to_ptr>
 800b094:	4603      	mov	r3, r0
 800b096:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	881a      	ldrh	r2, [r3, #0]
 800b09c:	8afb      	ldrh	r3, [r7, #22]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	3b08      	subs	r3, #8
 800b0a4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b0a6:	8bfa      	ldrh	r2, [r7, #30]
 800b0a8:	8abb      	ldrh	r3, [r7, #20]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d906      	bls.n	800b0bc <mem_trim+0xb0>
 800b0ae:	4b55      	ldr	r3, [pc, #340]	; (800b204 <mem_trim+0x1f8>)
 800b0b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b0b4:	4956      	ldr	r1, [pc, #344]	; (800b210 <mem_trim+0x204>)
 800b0b6:	4855      	ldr	r0, [pc, #340]	; (800b20c <mem_trim+0x200>)
 800b0b8:	f00c fe96 	bl	8017de8 <iprintf>
  if (newsize > size) {
 800b0bc:	8bfa      	ldrh	r2, [r7, #30]
 800b0be:	8abb      	ldrh	r3, [r7, #20]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d901      	bls.n	800b0c8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e095      	b.n	800b1f4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b0c8:	8bfa      	ldrh	r2, [r7, #30]
 800b0ca:	8abb      	ldrh	r3, [r7, #20]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d101      	bne.n	800b0d4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	e08f      	b.n	800b1f4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b0d4:	484f      	ldr	r0, [pc, #316]	; (800b214 <mem_trim+0x208>)
 800b0d6:	f00c fdc1 	bl	8017c5c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7ff fdb0 	bl	800ac44 <ptr_to_mem>
 800b0e4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	791b      	ldrb	r3, [r3, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d13f      	bne.n	800b16e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0f6:	d106      	bne.n	800b106 <mem_trim+0xfa>
 800b0f8:	4b42      	ldr	r3, [pc, #264]	; (800b204 <mem_trim+0x1f8>)
 800b0fa:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b0fe:	4946      	ldr	r1, [pc, #280]	; (800b218 <mem_trim+0x20c>)
 800b100:	4842      	ldr	r0, [pc, #264]	; (800b20c <mem_trim+0x200>)
 800b102:	f00c fe71 	bl	8017de8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b10c:	8afa      	ldrh	r2, [r7, #22]
 800b10e:	8bfb      	ldrh	r3, [r7, #30]
 800b110:	4413      	add	r3, r2
 800b112:	b29b      	uxth	r3, r3
 800b114:	3308      	adds	r3, #8
 800b116:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b118:	4b40      	ldr	r3, [pc, #256]	; (800b21c <mem_trim+0x210>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d106      	bne.n	800b130 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b122:	89fb      	ldrh	r3, [r7, #14]
 800b124:	4618      	mov	r0, r3
 800b126:	f7ff fd8d 	bl	800ac44 <ptr_to_mem>
 800b12a:	4602      	mov	r2, r0
 800b12c:	4b3b      	ldr	r3, [pc, #236]	; (800b21c <mem_trim+0x210>)
 800b12e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b130:	89fb      	ldrh	r3, [r7, #14]
 800b132:	4618      	mov	r0, r3
 800b134:	f7ff fd86 	bl	800ac44 <ptr_to_mem>
 800b138:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2200      	movs	r2, #0
 800b13e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	89ba      	ldrh	r2, [r7, #12]
 800b144:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	8afa      	ldrh	r2, [r7, #22]
 800b14a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	89fa      	ldrh	r2, [r7, #14]
 800b150:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b15a:	d047      	beq.n	800b1ec <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff fd6f 	bl	800ac44 <ptr_to_mem>
 800b166:	4602      	mov	r2, r0
 800b168:	89fb      	ldrh	r3, [r7, #14]
 800b16a:	8053      	strh	r3, [r2, #2]
 800b16c:	e03e      	b.n	800b1ec <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b16e:	8bfb      	ldrh	r3, [r7, #30]
 800b170:	f103 0214 	add.w	r2, r3, #20
 800b174:	8abb      	ldrh	r3, [r7, #20]
 800b176:	429a      	cmp	r2, r3
 800b178:	d838      	bhi.n	800b1ec <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b17a:	8afa      	ldrh	r2, [r7, #22]
 800b17c:	8bfb      	ldrh	r3, [r7, #30]
 800b17e:	4413      	add	r3, r2
 800b180:	b29b      	uxth	r3, r3
 800b182:	3308      	adds	r3, #8
 800b184:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b18e:	d106      	bne.n	800b19e <mem_trim+0x192>
 800b190:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <mem_trim+0x1f8>)
 800b192:	f240 3216 	movw	r2, #790	; 0x316
 800b196:	4920      	ldr	r1, [pc, #128]	; (800b218 <mem_trim+0x20c>)
 800b198:	481c      	ldr	r0, [pc, #112]	; (800b20c <mem_trim+0x200>)
 800b19a:	f00c fe25 	bl	8017de8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b19e:	89fb      	ldrh	r3, [r7, #14]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff fd4f 	bl	800ac44 <ptr_to_mem>
 800b1a6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b1a8:	4b1c      	ldr	r3, [pc, #112]	; (800b21c <mem_trim+0x210>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d202      	bcs.n	800b1b8 <mem_trim+0x1ac>
      lfree = mem2;
 800b1b2:	4a1a      	ldr	r2, [pc, #104]	; (800b21c <mem_trim+0x210>)
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	881a      	ldrh	r2, [r3, #0]
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	8afa      	ldrh	r2, [r7, #22]
 800b1ca:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	89fa      	ldrh	r2, [r7, #14]
 800b1d0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1da:	d007      	beq.n	800b1ec <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff fd2f 	bl	800ac44 <ptr_to_mem>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	89fb      	ldrh	r3, [r7, #14]
 800b1ea:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b1ec:	4809      	ldr	r0, [pc, #36]	; (800b214 <mem_trim+0x208>)
 800b1ee:	f00c fd44 	bl	8017c7a <sys_mutex_unlock>
  return rmem;
 800b1f2:	687b      	ldr	r3, [r7, #4]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3720      	adds	r7, #32
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20008a48 	.word	0x20008a48
 800b200:	20008a4c 	.word	0x20008a4c
 800b204:	08019bf8 	.word	0x08019bf8
 800b208:	08019d84 	.word	0x08019d84
 800b20c:	08019c40 	.word	0x08019c40
 800b210:	08019d9c 	.word	0x08019d9c
 800b214:	20008a50 	.word	0x20008a50
 800b218:	08019dbc 	.word	0x08019dbc
 800b21c:	20008a54 	.word	0x20008a54

0800b220 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b088      	sub	sp, #32
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <mem_malloc+0x14>
    return NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	e0e2      	b.n	800b3fa <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b234:	88fb      	ldrh	r3, [r7, #6]
 800b236:	3303      	adds	r3, #3
 800b238:	b29b      	uxth	r3, r3
 800b23a:	f023 0303 	bic.w	r3, r3, #3
 800b23e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b240:	8bbb      	ldrh	r3, [r7, #28]
 800b242:	2b0b      	cmp	r3, #11
 800b244:	d801      	bhi.n	800b24a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b246:	230c      	movs	r3, #12
 800b248:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b24a:	8bbb      	ldrh	r3, [r7, #28]
 800b24c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b250:	d803      	bhi.n	800b25a <mem_malloc+0x3a>
 800b252:	8bba      	ldrh	r2, [r7, #28]
 800b254:	88fb      	ldrh	r3, [r7, #6]
 800b256:	429a      	cmp	r2, r3
 800b258:	d201      	bcs.n	800b25e <mem_malloc+0x3e>
    return NULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	e0cd      	b.n	800b3fa <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b25e:	4869      	ldr	r0, [pc, #420]	; (800b404 <mem_malloc+0x1e4>)
 800b260:	f00c fcfc 	bl	8017c5c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b264:	4b68      	ldr	r3, [pc, #416]	; (800b408 <mem_malloc+0x1e8>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fcfd 	bl	800ac68 <mem_to_ptr>
 800b26e:	4603      	mov	r3, r0
 800b270:	83fb      	strh	r3, [r7, #30]
 800b272:	e0b7      	b.n	800b3e4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b274:	8bfb      	ldrh	r3, [r7, #30]
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff fce4 	bl	800ac44 <ptr_to_mem>
 800b27c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	791b      	ldrb	r3, [r3, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	f040 80a7 	bne.w	800b3d6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	461a      	mov	r2, r3
 800b28e:	8bfb      	ldrh	r3, [r7, #30]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	f1a3 0208 	sub.w	r2, r3, #8
 800b296:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b298:	429a      	cmp	r2, r3
 800b29a:	f0c0 809c 	bcc.w	800b3d6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	8bfb      	ldrh	r3, [r7, #30]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	f1a3 0208 	sub.w	r2, r3, #8
 800b2ac:	8bbb      	ldrh	r3, [r7, #28]
 800b2ae:	3314      	adds	r3, #20
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d333      	bcc.n	800b31c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b2b4:	8bfa      	ldrh	r2, [r7, #30]
 800b2b6:	8bbb      	ldrh	r3, [r7, #28]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	3308      	adds	r3, #8
 800b2be:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b2c0:	8a7b      	ldrh	r3, [r7, #18]
 800b2c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2c6:	d106      	bne.n	800b2d6 <mem_malloc+0xb6>
 800b2c8:	4b50      	ldr	r3, [pc, #320]	; (800b40c <mem_malloc+0x1ec>)
 800b2ca:	f240 3287 	movw	r2, #903	; 0x387
 800b2ce:	4950      	ldr	r1, [pc, #320]	; (800b410 <mem_malloc+0x1f0>)
 800b2d0:	4850      	ldr	r0, [pc, #320]	; (800b414 <mem_malloc+0x1f4>)
 800b2d2:	f00c fd89 	bl	8017de8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b2d6:	8a7b      	ldrh	r3, [r7, #18]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7ff fcb3 	bl	800ac44 <ptr_to_mem>
 800b2de:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	881a      	ldrh	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	8bfa      	ldrh	r2, [r7, #30]
 800b2f2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	8a7a      	ldrh	r2, [r7, #18]
 800b2f8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b308:	d00b      	beq.n	800b322 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	4618      	mov	r0, r3
 800b310:	f7ff fc98 	bl	800ac44 <ptr_to_mem>
 800b314:	4602      	mov	r2, r0
 800b316:	8a7b      	ldrh	r3, [r7, #18]
 800b318:	8053      	strh	r3, [r2, #2]
 800b31a:	e002      	b.n	800b322 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2201      	movs	r2, #1
 800b320:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b322:	4b39      	ldr	r3, [pc, #228]	; (800b408 <mem_malloc+0x1e8>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d127      	bne.n	800b37c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b32c:	4b36      	ldr	r3, [pc, #216]	; (800b408 <mem_malloc+0x1e8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b332:	e005      	b.n	800b340 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff fc83 	bl	800ac44 <ptr_to_mem>
 800b33e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	791b      	ldrb	r3, [r3, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d004      	beq.n	800b352 <mem_malloc+0x132>
 800b348:	4b33      	ldr	r3, [pc, #204]	; (800b418 <mem_malloc+0x1f8>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d1f0      	bne.n	800b334 <mem_malloc+0x114>
          }
          lfree = cur;
 800b352:	4a2d      	ldr	r2, [pc, #180]	; (800b408 <mem_malloc+0x1e8>)
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b358:	4b2b      	ldr	r3, [pc, #172]	; (800b408 <mem_malloc+0x1e8>)
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	4b2e      	ldr	r3, [pc, #184]	; (800b418 <mem_malloc+0x1f8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d00b      	beq.n	800b37c <mem_malloc+0x15c>
 800b364:	4b28      	ldr	r3, [pc, #160]	; (800b408 <mem_malloc+0x1e8>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	791b      	ldrb	r3, [r3, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d006      	beq.n	800b37c <mem_malloc+0x15c>
 800b36e:	4b27      	ldr	r3, [pc, #156]	; (800b40c <mem_malloc+0x1ec>)
 800b370:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b374:	4929      	ldr	r1, [pc, #164]	; (800b41c <mem_malloc+0x1fc>)
 800b376:	4827      	ldr	r0, [pc, #156]	; (800b414 <mem_malloc+0x1f4>)
 800b378:	f00c fd36 	bl	8017de8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b37c:	4821      	ldr	r0, [pc, #132]	; (800b404 <mem_malloc+0x1e4>)
 800b37e:	f00c fc7c 	bl	8017c7a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b382:	8bba      	ldrh	r2, [r7, #28]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	4413      	add	r3, r2
 800b388:	3308      	adds	r3, #8
 800b38a:	4a23      	ldr	r2, [pc, #140]	; (800b418 <mem_malloc+0x1f8>)
 800b38c:	6812      	ldr	r2, [r2, #0]
 800b38e:	4293      	cmp	r3, r2
 800b390:	d906      	bls.n	800b3a0 <mem_malloc+0x180>
 800b392:	4b1e      	ldr	r3, [pc, #120]	; (800b40c <mem_malloc+0x1ec>)
 800b394:	f240 32ba 	movw	r2, #954	; 0x3ba
 800b398:	4921      	ldr	r1, [pc, #132]	; (800b420 <mem_malloc+0x200>)
 800b39a:	481e      	ldr	r0, [pc, #120]	; (800b414 <mem_malloc+0x1f4>)
 800b39c:	f00c fd24 	bl	8017de8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f003 0303 	and.w	r3, r3, #3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d006      	beq.n	800b3b8 <mem_malloc+0x198>
 800b3aa:	4b18      	ldr	r3, [pc, #96]	; (800b40c <mem_malloc+0x1ec>)
 800b3ac:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800b3b0:	491c      	ldr	r1, [pc, #112]	; (800b424 <mem_malloc+0x204>)
 800b3b2:	4818      	ldr	r0, [pc, #96]	; (800b414 <mem_malloc+0x1f4>)
 800b3b4:	f00c fd18 	bl	8017de8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f003 0303 	and.w	r3, r3, #3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d006      	beq.n	800b3d0 <mem_malloc+0x1b0>
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <mem_malloc+0x1ec>)
 800b3c4:	f240 32be 	movw	r2, #958	; 0x3be
 800b3c8:	4917      	ldr	r1, [pc, #92]	; (800b428 <mem_malloc+0x208>)
 800b3ca:	4812      	ldr	r0, [pc, #72]	; (800b414 <mem_malloc+0x1f4>)
 800b3cc:	f00c fd0c 	bl	8017de8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	e011      	b.n	800b3fa <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b3d6:	8bfb      	ldrh	r3, [r7, #30]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7ff fc33 	bl	800ac44 <ptr_to_mem>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b3e4:	8bfa      	ldrh	r2, [r7, #30]
 800b3e6:	8bbb      	ldrh	r3, [r7, #28]
 800b3e8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	f4ff af41 	bcc.w	800b274 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b3f2:	4804      	ldr	r0, [pc, #16]	; (800b404 <mem_malloc+0x1e4>)
 800b3f4:	f00c fc41 	bl	8017c7a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3720      	adds	r7, #32
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20008a50 	.word	0x20008a50
 800b408:	20008a54 	.word	0x20008a54
 800b40c:	08019bf8 	.word	0x08019bf8
 800b410:	08019dbc 	.word	0x08019dbc
 800b414:	08019c40 	.word	0x08019c40
 800b418:	20008a4c 	.word	0x20008a4c
 800b41c:	08019dd0 	.word	0x08019dd0
 800b420:	08019dec 	.word	0x08019dec
 800b424:	08019e1c 	.word	0x08019e1c
 800b428:	08019e4c 	.word	0x08019e4c

0800b42c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	2200      	movs	r2, #0
 800b43a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	3303      	adds	r3, #3
 800b442:	f023 0303 	bic.w	r3, r3, #3
 800b446:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e011      	b.n	800b472 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	4413      	add	r3, r2
 800b46a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3301      	adds	r3, #1
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	885b      	ldrh	r3, [r3, #2]
 800b476:	461a      	mov	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	4293      	cmp	r3, r2
 800b47c:	dbe7      	blt.n	800b44e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b47e:	bf00      	nop
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
	...

0800b48c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b492:	2300      	movs	r3, #0
 800b494:	80fb      	strh	r3, [r7, #6]
 800b496:	e009      	b.n	800b4ac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b498:	88fb      	ldrh	r3, [r7, #6]
 800b49a:	4a08      	ldr	r2, [pc, #32]	; (800b4bc <memp_init+0x30>)
 800b49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff ffc3 	bl	800b42c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b4a6:	88fb      	ldrh	r3, [r7, #6]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	80fb      	strh	r3, [r7, #6]
 800b4ac:	88fb      	ldrh	r3, [r7, #6]
 800b4ae:	2b0c      	cmp	r3, #12
 800b4b0:	d9f2      	bls.n	800b498 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b4b2:	bf00      	nop
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	08026b30 	.word	0x08026b30

0800b4c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b4c8:	f00c fc0a 	bl	8017ce0 <sys_arch_protect>
 800b4cc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d015      	beq.n	800b508 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	6812      	ldr	r2, [r2, #0]
 800b4e4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	f003 0303 	and.w	r3, r3, #3
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d006      	beq.n	800b4fe <do_memp_malloc_pool+0x3e>
 800b4f0:	4b09      	ldr	r3, [pc, #36]	; (800b518 <do_memp_malloc_pool+0x58>)
 800b4f2:	f240 1219 	movw	r2, #281	; 0x119
 800b4f6:	4909      	ldr	r1, [pc, #36]	; (800b51c <do_memp_malloc_pool+0x5c>)
 800b4f8:	4809      	ldr	r0, [pc, #36]	; (800b520 <do_memp_malloc_pool+0x60>)
 800b4fa:	f00c fc75 	bl	8017de8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f00c fbfc 	bl	8017cfc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	e003      	b.n	800b510 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f00c fbf7 	bl	8017cfc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	08019e70 	.word	0x08019e70
 800b51c:	08019ea0 	.word	0x08019ea0
 800b520:	08019ec4 	.word	0x08019ec4

0800b524 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	2b0c      	cmp	r3, #12
 800b532:	d908      	bls.n	800b546 <memp_malloc+0x22>
 800b534:	4b0a      	ldr	r3, [pc, #40]	; (800b560 <memp_malloc+0x3c>)
 800b536:	f240 1257 	movw	r2, #343	; 0x157
 800b53a:	490a      	ldr	r1, [pc, #40]	; (800b564 <memp_malloc+0x40>)
 800b53c:	480a      	ldr	r0, [pc, #40]	; (800b568 <memp_malloc+0x44>)
 800b53e:	f00c fc53 	bl	8017de8 <iprintf>
 800b542:	2300      	movs	r3, #0
 800b544:	e008      	b.n	800b558 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b546:	79fb      	ldrb	r3, [r7, #7]
 800b548:	4a08      	ldr	r2, [pc, #32]	; (800b56c <memp_malloc+0x48>)
 800b54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b54e:	4618      	mov	r0, r3
 800b550:	f7ff ffb6 	bl	800b4c0 <do_memp_malloc_pool>
 800b554:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b556:	68fb      	ldr	r3, [r7, #12]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	08019e70 	.word	0x08019e70
 800b564:	08019f00 	.word	0x08019f00
 800b568:	08019ec4 	.word	0x08019ec4
 800b56c:	08026b30 	.word	0x08026b30

0800b570 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	f003 0303 	and.w	r3, r3, #3
 800b580:	2b00      	cmp	r3, #0
 800b582:	d006      	beq.n	800b592 <do_memp_free_pool+0x22>
 800b584:	4b0d      	ldr	r3, [pc, #52]	; (800b5bc <do_memp_free_pool+0x4c>)
 800b586:	f240 126d 	movw	r2, #365	; 0x16d
 800b58a:	490d      	ldr	r1, [pc, #52]	; (800b5c0 <do_memp_free_pool+0x50>)
 800b58c:	480d      	ldr	r0, [pc, #52]	; (800b5c4 <do_memp_free_pool+0x54>)
 800b58e:	f00c fc2b 	bl	8017de8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b596:	f00c fba3 	bl	8017ce0 <sys_arch_protect>
 800b59a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b5ae:	68b8      	ldr	r0, [r7, #8]
 800b5b0:	f00c fba4 	bl	8017cfc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b5b4:	bf00      	nop
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	08019e70 	.word	0x08019e70
 800b5c0:	08019f20 	.word	0x08019f20
 800b5c4:	08019ec4 	.word	0x08019ec4

0800b5c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	6039      	str	r1, [r7, #0]
 800b5d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b5d4:	79fb      	ldrb	r3, [r7, #7]
 800b5d6:	2b0c      	cmp	r3, #12
 800b5d8:	d907      	bls.n	800b5ea <memp_free+0x22>
 800b5da:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <memp_free+0x44>)
 800b5dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b5e0:	490b      	ldr	r1, [pc, #44]	; (800b610 <memp_free+0x48>)
 800b5e2:	480c      	ldr	r0, [pc, #48]	; (800b614 <memp_free+0x4c>)
 800b5e4:	f00c fc00 	bl	8017de8 <iprintf>
 800b5e8:	e00c      	b.n	800b604 <memp_free+0x3c>

  if (mem == NULL) {
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d008      	beq.n	800b602 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	4a09      	ldr	r2, [pc, #36]	; (800b618 <memp_free+0x50>)
 800b5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff ffb8 	bl	800b570 <do_memp_free_pool>
 800b600:	e000      	b.n	800b604 <memp_free+0x3c>
    return;
 800b602:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	08019e70 	.word	0x08019e70
 800b610:	08019f40 	.word	0x08019f40
 800b614:	08019ec4 	.word	0x08019ec4
 800b618:	08026b30 	.word	0x08026b30

0800b61c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b620:	bf00      	nop
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
	...

0800b62c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d108      	bne.n	800b652 <netif_add+0x26>
 800b640:	4b5b      	ldr	r3, [pc, #364]	; (800b7b0 <netif_add+0x184>)
 800b642:	f240 1227 	movw	r2, #295	; 0x127
 800b646:	495b      	ldr	r1, [pc, #364]	; (800b7b4 <netif_add+0x188>)
 800b648:	485b      	ldr	r0, [pc, #364]	; (800b7b8 <netif_add+0x18c>)
 800b64a:	f00c fbcd 	bl	8017de8 <iprintf>
 800b64e:	2300      	movs	r3, #0
 800b650:	e0a9      	b.n	800b7a6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	2b00      	cmp	r3, #0
 800b656:	d108      	bne.n	800b66a <netif_add+0x3e>
 800b658:	4b55      	ldr	r3, [pc, #340]	; (800b7b0 <netif_add+0x184>)
 800b65a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b65e:	4957      	ldr	r1, [pc, #348]	; (800b7bc <netif_add+0x190>)
 800b660:	4855      	ldr	r0, [pc, #340]	; (800b7b8 <netif_add+0x18c>)
 800b662:	f00c fbc1 	bl	8017de8 <iprintf>
 800b666:	2300      	movs	r3, #0
 800b668:	e09d      	b.n	800b7a6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d101      	bne.n	800b674 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b670:	4b53      	ldr	r3, [pc, #332]	; (800b7c0 <netif_add+0x194>)
 800b672:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b67a:	4b51      	ldr	r3, [pc, #324]	; (800b7c0 <netif_add+0x194>)
 800b67c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b684:	4b4e      	ldr	r3, [pc, #312]	; (800b7c0 <netif_add+0x194>)
 800b686:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4a49      	ldr	r2, [pc, #292]	; (800b7c4 <netif_add+0x198>)
 800b69e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3324      	adds	r3, #36	; 0x24
 800b6b2:	2204      	movs	r2, #4
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f00c fb8e 	bl	8017dd8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6a3a      	ldr	r2, [r7, #32]
 800b6c6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b6c8:	4b3f      	ldr	r3, [pc, #252]	; (800b7c8 <netif_add+0x19c>)
 800b6ca:	781a      	ldrb	r2, [r3, #0]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6d6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	68b9      	ldr	r1, [r7, #8]
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 f914 	bl	800b90c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	4798      	blx	r3
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <netif_add+0xc8>
    return NULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	e058      	b.n	800b7a6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6fa:	2bff      	cmp	r3, #255	; 0xff
 800b6fc:	d103      	bne.n	800b706 <netif_add+0xda>
        netif->num = 0;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b706:	2300      	movs	r3, #0
 800b708:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b70a:	4b30      	ldr	r3, [pc, #192]	; (800b7cc <netif_add+0x1a0>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	617b      	str	r3, [r7, #20]
 800b710:	e02b      	b.n	800b76a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	429a      	cmp	r2, r3
 800b718:	d106      	bne.n	800b728 <netif_add+0xfc>
 800b71a:	4b25      	ldr	r3, [pc, #148]	; (800b7b0 <netif_add+0x184>)
 800b71c:	f240 128b 	movw	r2, #395	; 0x18b
 800b720:	492b      	ldr	r1, [pc, #172]	; (800b7d0 <netif_add+0x1a4>)
 800b722:	4825      	ldr	r0, [pc, #148]	; (800b7b8 <netif_add+0x18c>)
 800b724:	f00c fb60 	bl	8017de8 <iprintf>
        num_netifs++;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	3301      	adds	r3, #1
 800b72c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2bff      	cmp	r3, #255	; 0xff
 800b732:	dd06      	ble.n	800b742 <netif_add+0x116>
 800b734:	4b1e      	ldr	r3, [pc, #120]	; (800b7b0 <netif_add+0x184>)
 800b736:	f240 128d 	movw	r2, #397	; 0x18d
 800b73a:	4926      	ldr	r1, [pc, #152]	; (800b7d4 <netif_add+0x1a8>)
 800b73c:	481e      	ldr	r0, [pc, #120]	; (800b7b8 <netif_add+0x18c>)
 800b73e:	f00c fb53 	bl	8017de8 <iprintf>
        if (netif2->num == netif->num) {
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b74e:	429a      	cmp	r2, r3
 800b750:	d108      	bne.n	800b764 <netif_add+0x138>
          netif->num++;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b758:	3301      	adds	r3, #1
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b762:	e005      	b.n	800b770 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1d0      	bne.n	800b712 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1be      	bne.n	800b6f4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b77c:	2bfe      	cmp	r3, #254	; 0xfe
 800b77e:	d103      	bne.n	800b788 <netif_add+0x15c>
    netif_num = 0;
 800b780:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <netif_add+0x19c>)
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	e006      	b.n	800b796 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b78e:	3301      	adds	r3, #1
 800b790:	b2da      	uxtb	r2, r3
 800b792:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <netif_add+0x19c>)
 800b794:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b796:	4b0d      	ldr	r3, [pc, #52]	; (800b7cc <netif_add+0x1a0>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b79e:	4a0b      	ldr	r2, [pc, #44]	; (800b7cc <netif_add+0x1a0>)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3718      	adds	r7, #24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	08019f5c 	.word	0x08019f5c
 800b7b4:	08019ff0 	.word	0x08019ff0
 800b7b8:	08019fac 	.word	0x08019fac
 800b7bc:	0801a00c 	.word	0x0801a00c
 800b7c0:	08026bb4 	.word	0x08026bb4
 800b7c4:	0800bbef 	.word	0x0800bbef
 800b7c8:	20008a8c 	.word	0x20008a8c
 800b7cc:	2000f504 	.word	0x2000f504
 800b7d0:	0801a030 	.word	0x0801a030
 800b7d4:	0801a044 	.word	0x0801a044

0800b7d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f002 fe81 	bl	800e4ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f007 ff05 	bl	80135fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b7f2:	bf00      	nop
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d106      	bne.n	800b81c <netif_do_set_ipaddr+0x20>
 800b80e:	4b1d      	ldr	r3, [pc, #116]	; (800b884 <netif_do_set_ipaddr+0x88>)
 800b810:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b814:	491c      	ldr	r1, [pc, #112]	; (800b888 <netif_do_set_ipaddr+0x8c>)
 800b816:	481d      	ldr	r0, [pc, #116]	; (800b88c <netif_do_set_ipaddr+0x90>)
 800b818:	f00c fae6 	bl	8017de8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d106      	bne.n	800b830 <netif_do_set_ipaddr+0x34>
 800b822:	4b18      	ldr	r3, [pc, #96]	; (800b884 <netif_do_set_ipaddr+0x88>)
 800b824:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b828:	4917      	ldr	r1, [pc, #92]	; (800b888 <netif_do_set_ipaddr+0x8c>)
 800b82a:	4818      	ldr	r0, [pc, #96]	; (800b88c <netif_do_set_ipaddr+0x90>)
 800b82c:	f00c fadc 	bl	8017de8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	3304      	adds	r3, #4
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d01c      	beq.n	800b878 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3304      	adds	r3, #4
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b84e:	f107 0314 	add.w	r3, r7, #20
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7ff ffbf 	bl	800b7d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <netif_do_set_ipaddr+0x6a>
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	e000      	b.n	800b868 <netif_do_set_ipaddr+0x6c>
 800b866:	2300      	movs	r3, #0
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b86c:	2101      	movs	r1, #1
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 f8d2 	bl	800ba18 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b874:	2301      	movs	r3, #1
 800b876:	e000      	b.n	800b87a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	08019f5c 	.word	0x08019f5c
 800b888:	0801a074 	.word	0x0801a074
 800b88c:	08019fac 	.word	0x08019fac

0800b890 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d00a      	beq.n	800b8c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d002      	beq.n	800b8b6 <netif_do_set_netmask+0x26>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	e000      	b.n	800b8b8 <netif_do_set_netmask+0x28>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e000      	b.n	800b8c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3714      	adds	r7, #20
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b085      	sub	sp, #20
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	60f8      	str	r0, [r7, #12]
 800b8d6:	60b9      	str	r1, [r7, #8]
 800b8d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	330c      	adds	r3, #12
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d00a      	beq.n	800b8fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <netif_do_set_gw+0x26>
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	e000      	b.n	800b8f6 <netif_do_set_gw+0x28>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e000      	b.n	800b900 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b088      	sub	sp, #32
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b91e:	2300      	movs	r3, #0
 800b920:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d101      	bne.n	800b92c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b928:	4b1c      	ldr	r3, [pc, #112]	; (800b99c <netif_set_addr+0x90>)
 800b92a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b932:	4b1a      	ldr	r3, [pc, #104]	; (800b99c <netif_set_addr+0x90>)
 800b934:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b93c:	4b17      	ldr	r3, [pc, #92]	; (800b99c <netif_set_addr+0x90>)
 800b93e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d003      	beq.n	800b94e <netif_set_addr+0x42>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <netif_set_addr+0x46>
 800b94e:	2301      	movs	r3, #1
 800b950:	e000      	b.n	800b954 <netif_set_addr+0x48>
 800b952:	2300      	movs	r3, #0
 800b954:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d006      	beq.n	800b96a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b95c:	f107 0310 	add.w	r3, r7, #16
 800b960:	461a      	mov	r2, r3
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f7ff ff49 	bl	800b7fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b96a:	69fa      	ldr	r2, [r7, #28]
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7ff ff8e 	bl	800b890 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b974:	69ba      	ldr	r2, [r7, #24]
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff ffa8 	bl	800b8ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d106      	bne.n	800b992 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b984:	f107 0310 	add.w	r3, r7, #16
 800b988:	461a      	mov	r2, r3
 800b98a:	68b9      	ldr	r1, [r7, #8]
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff ff35 	bl	800b7fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b992:	bf00      	nop
 800b994:	3720      	adds	r7, #32
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	08026bb4 	.word	0x08026bb4

0800b9a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b9a8:	4a04      	ldr	r2, [pc, #16]	; (800b9bc <netif_set_default+0x1c>)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b9ae:	bf00      	nop
 800b9b0:	370c      	adds	r7, #12
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	2000f508 	.word	0x2000f508

0800b9c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d107      	bne.n	800b9de <netif_set_up+0x1e>
 800b9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <netif_set_up+0x4c>)
 800b9d0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b9d4:	490e      	ldr	r1, [pc, #56]	; (800ba10 <netif_set_up+0x50>)
 800b9d6:	480f      	ldr	r0, [pc, #60]	; (800ba14 <netif_set_up+0x54>)
 800b9d8:	f00c fa06 	bl	8017de8 <iprintf>
 800b9dc:	e013      	b.n	800ba06 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10c      	bne.n	800ba06 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9f2:	f043 0301 	orr.w	r3, r3, #1
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b9fe:	2103      	movs	r1, #3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f809 	bl	800ba18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	08019f5c 	.word	0x08019f5c
 800ba10:	0801a0e4 	.word	0x0801a0e4
 800ba14:	08019fac 	.word	0x08019fac

0800ba18 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d106      	bne.n	800ba38 <netif_issue_reports+0x20>
 800ba2a:	4b18      	ldr	r3, [pc, #96]	; (800ba8c <netif_issue_reports+0x74>)
 800ba2c:	f240 326d 	movw	r2, #877	; 0x36d
 800ba30:	4917      	ldr	r1, [pc, #92]	; (800ba90 <netif_issue_reports+0x78>)
 800ba32:	4818      	ldr	r0, [pc, #96]	; (800ba94 <netif_issue_reports+0x7c>)
 800ba34:	f00c f9d8 	bl	8017de8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba3e:	f003 0304 	and.w	r3, r3, #4
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d01e      	beq.n	800ba84 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba4c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d017      	beq.n	800ba84 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	f003 0301 	and.w	r3, r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d013      	beq.n	800ba86 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	3304      	adds	r3, #4
 800ba62:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00e      	beq.n	800ba86 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba6e:	f003 0308 	and.w	r3, r3, #8
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d007      	beq.n	800ba86 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	3304      	adds	r3, #4
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f00a fbcd 	bl	801621c <etharp_request>
 800ba82:	e000      	b.n	800ba86 <netif_issue_reports+0x6e>
    return;
 800ba84:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	08019f5c 	.word	0x08019f5c
 800ba90:	0801a100 	.word	0x0801a100
 800ba94:	08019fac 	.word	0x08019fac

0800ba98 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d107      	bne.n	800bab6 <netif_set_down+0x1e>
 800baa6:	4b12      	ldr	r3, [pc, #72]	; (800baf0 <netif_set_down+0x58>)
 800baa8:	f240 329b 	movw	r2, #923	; 0x39b
 800baac:	4911      	ldr	r1, [pc, #68]	; (800baf4 <netif_set_down+0x5c>)
 800baae:	4812      	ldr	r0, [pc, #72]	; (800baf8 <netif_set_down+0x60>)
 800bab0:	f00c f99a 	bl	8017de8 <iprintf>
 800bab4:	e019      	b.n	800baea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d012      	beq.n	800baea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800baca:	f023 0301 	bic.w	r3, r3, #1
 800bace:	b2da      	uxtb	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800badc:	f003 0308 	and.w	r3, r3, #8
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f009 ff53 	bl	8015990 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	08019f5c 	.word	0x08019f5c
 800baf4:	0801a124 	.word	0x0801a124
 800baf8:	08019fac 	.word	0x08019fac

0800bafc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d107      	bne.n	800bb1a <netif_set_link_up+0x1e>
 800bb0a:	4b15      	ldr	r3, [pc, #84]	; (800bb60 <netif_set_link_up+0x64>)
 800bb0c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bb10:	4914      	ldr	r1, [pc, #80]	; (800bb64 <netif_set_link_up+0x68>)
 800bb12:	4815      	ldr	r0, [pc, #84]	; (800bb68 <netif_set_link_up+0x6c>)
 800bb14:	f00c f968 	bl	8017de8 <iprintf>
 800bb18:	e01e      	b.n	800bb58 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb20:	f003 0304 	and.w	r3, r3, #4
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d117      	bne.n	800bb58 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb2e:	f043 0304 	orr.w	r3, r3, #4
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f008 f988 	bl	8013e50 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb40:	2103      	movs	r1, #3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff ff68 	bl	800ba18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d003      	beq.n	800bb58 <netif_set_link_up+0x5c>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	08019f5c 	.word	0x08019f5c
 800bb64:	0801a144 	.word	0x0801a144
 800bb68:	08019fac 	.word	0x08019fac

0800bb6c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d107      	bne.n	800bb8a <netif_set_link_down+0x1e>
 800bb7a:	4b11      	ldr	r3, [pc, #68]	; (800bbc0 <netif_set_link_down+0x54>)
 800bb7c:	f240 4206 	movw	r2, #1030	; 0x406
 800bb80:	4910      	ldr	r1, [pc, #64]	; (800bbc4 <netif_set_link_down+0x58>)
 800bb82:	4811      	ldr	r0, [pc, #68]	; (800bbc8 <netif_set_link_down+0x5c>)
 800bb84:	f00c f930 	bl	8017de8 <iprintf>
 800bb88:	e017      	b.n	800bbba <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb90:	f003 0304 	and.w	r3, r3, #4
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d010      	beq.n	800bbba <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb9e:	f023 0304 	bic.w	r3, r3, #4
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d003      	beq.n	800bbba <netif_set_link_down+0x4e>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	08019f5c 	.word	0x08019f5c
 800bbc4:	0801a168 	.word	0x0801a168
 800bbc8:	08019fac 	.word	0x08019fac

0800bbcc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	61da      	str	r2, [r3, #28]
  }
}
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b085      	sub	sp, #20
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	60f8      	str	r0, [r7, #12]
 800bbf6:	60b9      	str	r1, [r7, #8]
 800bbf8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bbfa:	f06f 030b 	mvn.w	r3, #11
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
	...

0800bc0c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	4603      	mov	r3, r0
 800bc14:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bc16:	79fb      	ldrb	r3, [r7, #7]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d013      	beq.n	800bc44 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bc1c:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <netif_get_by_index+0x48>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	e00c      	b.n	800bc3e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	79fa      	ldrb	r2, [r7, #7]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d101      	bne.n	800bc38 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	e006      	b.n	800bc46 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1ef      	bne.n	800bc24 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	2000f504 	.word	0x2000f504

0800bc58 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bc5e:	f00c f83f 	bl	8017ce0 <sys_arch_protect>
 800bc62:	6038      	str	r0, [r7, #0]
 800bc64:	4b0d      	ldr	r3, [pc, #52]	; (800bc9c <pbuf_free_ooseq+0x44>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	701a      	strb	r2, [r3, #0]
 800bc6a:	6838      	ldr	r0, [r7, #0]
 800bc6c:	f00c f846 	bl	8017cfc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc70:	4b0b      	ldr	r3, [pc, #44]	; (800bca0 <pbuf_free_ooseq+0x48>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	607b      	str	r3, [r7, #4]
 800bc76:	e00a      	b.n	800bc8e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d003      	beq.n	800bc88 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f002 fc71 	bl	800e568 <tcp_free_ooseq>
      return;
 800bc86:	e005      	b.n	800bc94 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	607b      	str	r3, [r7, #4]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1f1      	bne.n	800bc78 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	2000f50c 	.word	0x2000f50c
 800bca0:	2000f514 	.word	0x2000f514

0800bca4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bcac:	f7ff ffd4 	bl	800bc58 <pbuf_free_ooseq>
}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bcbe:	f00c f80f 	bl	8017ce0 <sys_arch_protect>
 800bcc2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bcc4:	4b0f      	ldr	r3, [pc, #60]	; (800bd04 <pbuf_pool_is_empty+0x4c>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bcca:	4b0e      	ldr	r3, [pc, #56]	; (800bd04 <pbuf_pool_is_empty+0x4c>)
 800bccc:	2201      	movs	r2, #1
 800bcce:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f00c f813 	bl	8017cfc <sys_arch_unprotect>

  if (!queued) {
 800bcd6:	78fb      	ldrb	r3, [r7, #3]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10f      	bne.n	800bcfc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bcdc:	2100      	movs	r1, #0
 800bcde:	480a      	ldr	r0, [pc, #40]	; (800bd08 <pbuf_pool_is_empty+0x50>)
 800bce0:	f7fe f87a 	bl	8009dd8 <tcpip_try_callback>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d008      	beq.n	800bcfc <pbuf_pool_is_empty+0x44>
 800bcea:	f00b fff9 	bl	8017ce0 <sys_arch_protect>
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <pbuf_pool_is_empty+0x4c>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	701a      	strb	r2, [r3, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f00c f800 	bl	8017cfc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	2000f50c 	.word	0x2000f50c
 800bd08:	0800bca5 	.word	0x0800bca5

0800bd0c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4611      	mov	r1, r2
 800bd18:	461a      	mov	r2, r3
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	80fb      	strh	r3, [r7, #6]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	88fa      	ldrh	r2, [r7, #6]
 800bd32:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	88ba      	ldrh	r2, [r7, #4]
 800bd38:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bd3a:	8b3b      	ldrh	r3, [r7, #24]
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	7f3a      	ldrb	r2, [r7, #28]
 800bd46:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	73da      	strb	r2, [r3, #15]
}
 800bd54:	bf00      	nop
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08c      	sub	sp, #48	; 0x30
 800bd64:	af02      	add	r7, sp, #8
 800bd66:	4603      	mov	r3, r0
 800bd68:	71fb      	strb	r3, [r7, #7]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	80bb      	strh	r3, [r7, #4]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bd72:	79fb      	ldrb	r3, [r7, #7]
 800bd74:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bd76:	887b      	ldrh	r3, [r7, #2]
 800bd78:	2b41      	cmp	r3, #65	; 0x41
 800bd7a:	d00b      	beq.n	800bd94 <pbuf_alloc+0x34>
 800bd7c:	2b41      	cmp	r3, #65	; 0x41
 800bd7e:	dc02      	bgt.n	800bd86 <pbuf_alloc+0x26>
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d007      	beq.n	800bd94 <pbuf_alloc+0x34>
 800bd84:	e0c2      	b.n	800bf0c <pbuf_alloc+0x1ac>
 800bd86:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bd8a:	d00b      	beq.n	800bda4 <pbuf_alloc+0x44>
 800bd8c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bd90:	d070      	beq.n	800be74 <pbuf_alloc+0x114>
 800bd92:	e0bb      	b.n	800bf0c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bd94:	887a      	ldrh	r2, [r7, #2]
 800bd96:	88bb      	ldrh	r3, [r7, #4]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	f000 f8d2 	bl	800bf44 <pbuf_alloc_reference>
 800bda0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bda2:	e0bd      	b.n	800bf20 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bda4:	2300      	movs	r3, #0
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bdac:	88bb      	ldrh	r3, [r7, #4]
 800bdae:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bdb0:	200c      	movs	r0, #12
 800bdb2:	f7ff fbb7 	bl	800b524 <memp_malloc>
 800bdb6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d109      	bne.n	800bdd2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800bdbe:	f7ff ff7b 	bl	800bcb8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <pbuf_alloc+0x6e>
            pbuf_free(p);
 800bdc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdca:	f000 faa9 	bl	800c320 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	e0a7      	b.n	800bf22 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bdd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdd4:	3303      	adds	r3, #3
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	f023 0303 	bic.w	r3, r3, #3
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	8b7a      	ldrh	r2, [r7, #26]
 800bde6:	4293      	cmp	r3, r2
 800bde8:	bf28      	it	cs
 800bdea:	4613      	movcs	r3, r2
 800bdec:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bdee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdf0:	3310      	adds	r3, #16
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3303      	adds	r3, #3
 800bdf8:	f023 0303 	bic.w	r3, r3, #3
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	89f9      	ldrh	r1, [r7, #14]
 800be00:	8b7a      	ldrh	r2, [r7, #26]
 800be02:	2300      	movs	r3, #0
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	887b      	ldrh	r3, [r7, #2]
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	460b      	mov	r3, r1
 800be0c:	4601      	mov	r1, r0
 800be0e:	6938      	ldr	r0, [r7, #16]
 800be10:	f7ff ff7c 	bl	800bd0c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	f003 0303 	and.w	r3, r3, #3
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d006      	beq.n	800be2e <pbuf_alloc+0xce>
 800be20:	4b42      	ldr	r3, [pc, #264]	; (800bf2c <pbuf_alloc+0x1cc>)
 800be22:	f240 1201 	movw	r2, #257	; 0x101
 800be26:	4942      	ldr	r1, [pc, #264]	; (800bf30 <pbuf_alloc+0x1d0>)
 800be28:	4842      	ldr	r0, [pc, #264]	; (800bf34 <pbuf_alloc+0x1d4>)
 800be2a:	f00b ffdd 	bl	8017de8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800be2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be30:	3303      	adds	r3, #3
 800be32:	f023 0303 	bic.w	r3, r3, #3
 800be36:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800be3a:	d106      	bne.n	800be4a <pbuf_alloc+0xea>
 800be3c:	4b3b      	ldr	r3, [pc, #236]	; (800bf2c <pbuf_alloc+0x1cc>)
 800be3e:	f240 1203 	movw	r2, #259	; 0x103
 800be42:	493d      	ldr	r1, [pc, #244]	; (800bf38 <pbuf_alloc+0x1d8>)
 800be44:	483b      	ldr	r0, [pc, #236]	; (800bf34 <pbuf_alloc+0x1d4>)
 800be46:	f00b ffcf 	bl	8017de8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d102      	bne.n	800be56 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	627b      	str	r3, [r7, #36]	; 0x24
 800be54:	e002      	b.n	800be5c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800be60:	8b7a      	ldrh	r2, [r7, #26]
 800be62:	89fb      	ldrh	r3, [r7, #14]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800be6c:	8b7b      	ldrh	r3, [r7, #26]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d19e      	bne.n	800bdb0 <pbuf_alloc+0x50>
      break;
 800be72:	e055      	b.n	800bf20 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800be74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be76:	3303      	adds	r3, #3
 800be78:	b29b      	uxth	r3, r3
 800be7a:	f023 0303 	bic.w	r3, r3, #3
 800be7e:	b29a      	uxth	r2, r3
 800be80:	88bb      	ldrh	r3, [r7, #4]
 800be82:	3303      	adds	r3, #3
 800be84:	b29b      	uxth	r3, r3
 800be86:	f023 0303 	bic.w	r3, r3, #3
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	4413      	add	r3, r2
 800be8e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800be90:	8b3b      	ldrh	r3, [r7, #24]
 800be92:	3310      	adds	r3, #16
 800be94:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800be96:	8b3a      	ldrh	r2, [r7, #24]
 800be98:	88bb      	ldrh	r3, [r7, #4]
 800be9a:	3303      	adds	r3, #3
 800be9c:	f023 0303 	bic.w	r3, r3, #3
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d306      	bcc.n	800beb2 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bea4:	8afa      	ldrh	r2, [r7, #22]
 800bea6:	88bb      	ldrh	r3, [r7, #4]
 800bea8:	3303      	adds	r3, #3
 800beaa:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800beae:	429a      	cmp	r2, r3
 800beb0:	d201      	bcs.n	800beb6 <pbuf_alloc+0x156>
        return NULL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	e035      	b.n	800bf22 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800beb6:	8afb      	ldrh	r3, [r7, #22]
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff f9b1 	bl	800b220 <mem_malloc>
 800bebe:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d101      	bne.n	800beca <pbuf_alloc+0x16a>
        return NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	e02b      	b.n	800bf22 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800beca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800becc:	3310      	adds	r3, #16
 800bece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed0:	4413      	add	r3, r2
 800bed2:	3303      	adds	r3, #3
 800bed4:	f023 0303 	bic.w	r3, r3, #3
 800bed8:	4618      	mov	r0, r3
 800beda:	88b9      	ldrh	r1, [r7, #4]
 800bedc:	88ba      	ldrh	r2, [r7, #4]
 800bede:	2300      	movs	r3, #0
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	887b      	ldrh	r3, [r7, #2]
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	460b      	mov	r3, r1
 800bee8:	4601      	mov	r1, r0
 800beea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800beec:	f7ff ff0e 	bl	800bd0c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	f003 0303 	and.w	r3, r3, #3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d010      	beq.n	800bf1e <pbuf_alloc+0x1be>
 800befc:	4b0b      	ldr	r3, [pc, #44]	; (800bf2c <pbuf_alloc+0x1cc>)
 800befe:	f240 1223 	movw	r2, #291	; 0x123
 800bf02:	490e      	ldr	r1, [pc, #56]	; (800bf3c <pbuf_alloc+0x1dc>)
 800bf04:	480b      	ldr	r0, [pc, #44]	; (800bf34 <pbuf_alloc+0x1d4>)
 800bf06:	f00b ff6f 	bl	8017de8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bf0a:	e008      	b.n	800bf1e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bf0c:	4b07      	ldr	r3, [pc, #28]	; (800bf2c <pbuf_alloc+0x1cc>)
 800bf0e:	f240 1227 	movw	r2, #295	; 0x127
 800bf12:	490b      	ldr	r1, [pc, #44]	; (800bf40 <pbuf_alloc+0x1e0>)
 800bf14:	4807      	ldr	r0, [pc, #28]	; (800bf34 <pbuf_alloc+0x1d4>)
 800bf16:	f00b ff67 	bl	8017de8 <iprintf>
      return NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	e001      	b.n	800bf22 <pbuf_alloc+0x1c2>
      break;
 800bf1e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3728      	adds	r7, #40	; 0x28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	0801a18c 	.word	0x0801a18c
 800bf30:	0801a1bc 	.word	0x0801a1bc
 800bf34:	0801a1ec 	.word	0x0801a1ec
 800bf38:	0801a214 	.word	0x0801a214
 800bf3c:	0801a248 	.word	0x0801a248
 800bf40:	0801a274 	.word	0x0801a274

0800bf44 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af02      	add	r7, sp, #8
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	807b      	strh	r3, [r7, #2]
 800bf50:	4613      	mov	r3, r2
 800bf52:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bf54:	883b      	ldrh	r3, [r7, #0]
 800bf56:	2b41      	cmp	r3, #65	; 0x41
 800bf58:	d009      	beq.n	800bf6e <pbuf_alloc_reference+0x2a>
 800bf5a:	883b      	ldrh	r3, [r7, #0]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d006      	beq.n	800bf6e <pbuf_alloc_reference+0x2a>
 800bf60:	4b0f      	ldr	r3, [pc, #60]	; (800bfa0 <pbuf_alloc_reference+0x5c>)
 800bf62:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bf66:	490f      	ldr	r1, [pc, #60]	; (800bfa4 <pbuf_alloc_reference+0x60>)
 800bf68:	480f      	ldr	r0, [pc, #60]	; (800bfa8 <pbuf_alloc_reference+0x64>)
 800bf6a:	f00b ff3d 	bl	8017de8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bf6e:	200b      	movs	r0, #11
 800bf70:	f7ff fad8 	bl	800b524 <memp_malloc>
 800bf74:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d101      	bne.n	800bf80 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e00b      	b.n	800bf98 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bf80:	8879      	ldrh	r1, [r7, #2]
 800bf82:	887a      	ldrh	r2, [r7, #2]
 800bf84:	2300      	movs	r3, #0
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	883b      	ldrh	r3, [r7, #0]
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f7ff febb 	bl	800bd0c <pbuf_init_alloced_pbuf>
  return p;
 800bf96:	68fb      	ldr	r3, [r7, #12]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	0801a18c 	.word	0x0801a18c
 800bfa4:	0801a290 	.word	0x0801a290
 800bfa8:	0801a1ec 	.word	0x0801a1ec

0800bfac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	607b      	str	r3, [r7, #4]
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73fb      	strb	r3, [r7, #15]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	81bb      	strh	r3, [r7, #12]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
 800bfc2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bfc4:	8a7b      	ldrh	r3, [r7, #18]
 800bfc6:	3303      	adds	r3, #3
 800bfc8:	f023 0203 	bic.w	r2, r3, #3
 800bfcc:	89bb      	ldrh	r3, [r7, #12]
 800bfce:	441a      	add	r2, r3
 800bfd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d901      	bls.n	800bfda <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e018      	b.n	800c00c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bfda:	6a3b      	ldr	r3, [r7, #32]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d007      	beq.n	800bff0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bfe0:	8a7b      	ldrh	r3, [r7, #18]
 800bfe2:	3303      	adds	r3, #3
 800bfe4:	f023 0303 	bic.w	r3, r3, #3
 800bfe8:	6a3a      	ldr	r2, [r7, #32]
 800bfea:	4413      	add	r3, r2
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	e001      	b.n	800bff4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	89b9      	ldrh	r1, [r7, #12]
 800bff8:	89ba      	ldrh	r2, [r7, #12]
 800bffa:	2302      	movs	r3, #2
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	897b      	ldrh	r3, [r7, #10]
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	460b      	mov	r3, r1
 800c004:	6979      	ldr	r1, [r7, #20]
 800c006:	f7ff fe81 	bl	800bd0c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c00a:	687b      	ldr	r3, [r7, #4]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <pbuf_realloc+0x20>
 800c026:	4b3a      	ldr	r3, [pc, #232]	; (800c110 <pbuf_realloc+0xfc>)
 800c028:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c02c:	4939      	ldr	r1, [pc, #228]	; (800c114 <pbuf_realloc+0x100>)
 800c02e:	483a      	ldr	r0, [pc, #232]	; (800c118 <pbuf_realloc+0x104>)
 800c030:	f00b feda 	bl	8017de8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	891b      	ldrh	r3, [r3, #8]
 800c038:	887a      	ldrh	r2, [r7, #2]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d264      	bcs.n	800c108 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	891a      	ldrh	r2, [r3, #8]
 800c042:	887b      	ldrh	r3, [r7, #2]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c048:	887b      	ldrh	r3, [r7, #2]
 800c04a:	817b      	strh	r3, [r7, #10]
  q = p;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c050:	e018      	b.n	800c084 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	895b      	ldrh	r3, [r3, #10]
 800c056:	897a      	ldrh	r2, [r7, #10]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	891a      	ldrh	r2, [r3, #8]
 800c060:	893b      	ldrh	r3, [r7, #8]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	b29a      	uxth	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <pbuf_realloc+0x70>
 800c076:	4b26      	ldr	r3, [pc, #152]	; (800c110 <pbuf_realloc+0xfc>)
 800c078:	f240 12af 	movw	r2, #431	; 0x1af
 800c07c:	4927      	ldr	r1, [pc, #156]	; (800c11c <pbuf_realloc+0x108>)
 800c07e:	4826      	ldr	r0, [pc, #152]	; (800c118 <pbuf_realloc+0x104>)
 800c080:	f00b feb2 	bl	8017de8 <iprintf>
  while (rem_len > q->len) {
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	895b      	ldrh	r3, [r3, #10]
 800c088:	897a      	ldrh	r2, [r7, #10]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d8e1      	bhi.n	800c052 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	7b1b      	ldrb	r3, [r3, #12]
 800c092:	f003 030f 	and.w	r3, r3, #15
 800c096:	2b00      	cmp	r3, #0
 800c098:	d122      	bne.n	800c0e0 <pbuf_realloc+0xcc>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	895b      	ldrh	r3, [r3, #10]
 800c09e:	897a      	ldrh	r2, [r7, #10]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d01d      	beq.n	800c0e0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	7b5b      	ldrb	r3, [r3, #13]
 800c0a8:	f003 0302 	and.w	r3, r3, #2
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d117      	bne.n	800c0e0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	897b      	ldrh	r3, [r7, #10]
 800c0be:	4413      	add	r3, r2
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7fe ffa1 	bl	800b00c <mem_trim>
 800c0ca:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d106      	bne.n	800c0e0 <pbuf_realloc+0xcc>
 800c0d2:	4b0f      	ldr	r3, [pc, #60]	; (800c110 <pbuf_realloc+0xfc>)
 800c0d4:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c0d8:	4911      	ldr	r1, [pc, #68]	; (800c120 <pbuf_realloc+0x10c>)
 800c0da:	480f      	ldr	r0, [pc, #60]	; (800c118 <pbuf_realloc+0x104>)
 800c0dc:	f00b fe84 	bl	8017de8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	897a      	ldrh	r2, [r7, #10]
 800c0e4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	895a      	ldrh	r2, [r3, #10]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d004      	beq.n	800c100 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f000 f910 	bl	800c320 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	e000      	b.n	800c10a <pbuf_realloc+0xf6>
    return;
 800c108:	bf00      	nop

}
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	0801a18c 	.word	0x0801a18c
 800c114:	0801a2a4 	.word	0x0801a2a4
 800c118:	0801a1ec 	.word	0x0801a1ec
 800c11c:	0801a2bc 	.word	0x0801a2bc
 800c120:	0801a2d4 	.word	0x0801a2d4

0800c124 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	4613      	mov	r3, r2
 800c130:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d106      	bne.n	800c146 <pbuf_add_header_impl+0x22>
 800c138:	4b2b      	ldr	r3, [pc, #172]	; (800c1e8 <pbuf_add_header_impl+0xc4>)
 800c13a:	f240 12df 	movw	r2, #479	; 0x1df
 800c13e:	492b      	ldr	r1, [pc, #172]	; (800c1ec <pbuf_add_header_impl+0xc8>)
 800c140:	482b      	ldr	r0, [pc, #172]	; (800c1f0 <pbuf_add_header_impl+0xcc>)
 800c142:	f00b fe51 	bl	8017de8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <pbuf_add_header_impl+0x30>
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c152:	d301      	bcc.n	800c158 <pbuf_add_header_impl+0x34>
    return 1;
 800c154:	2301      	movs	r3, #1
 800c156:	e043      	b.n	800c1e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <pbuf_add_header_impl+0x3e>
    return 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	e03e      	b.n	800c1e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	891a      	ldrh	r2, [r3, #8]
 800c16a:	8a7b      	ldrh	r3, [r7, #18]
 800c16c:	4413      	add	r3, r2
 800c16e:	b29b      	uxth	r3, r3
 800c170:	8a7a      	ldrh	r2, [r7, #18]
 800c172:	429a      	cmp	r2, r3
 800c174:	d901      	bls.n	800c17a <pbuf_add_header_impl+0x56>
    return 1;
 800c176:	2301      	movs	r3, #1
 800c178:	e032      	b.n	800c1e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	7b1b      	ldrb	r3, [r3, #12]
 800c17e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c180:	8a3b      	ldrh	r3, [r7, #16]
 800c182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00c      	beq.n	800c1a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	425b      	negs	r3, r3
 800c192:	4413      	add	r3, r2
 800c194:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3310      	adds	r3, #16
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d20d      	bcs.n	800c1bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e01d      	b.n	800c1e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c1a4:	79fb      	ldrb	r3, [r7, #7]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d006      	beq.n	800c1b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	425b      	negs	r3, r3
 800c1b2:	4413      	add	r3, r2
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	e001      	b.n	800c1bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e011      	b.n	800c1e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	895a      	ldrh	r2, [r3, #10]
 800c1c6:	8a7b      	ldrh	r3, [r7, #18]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	891a      	ldrh	r2, [r3, #8]
 800c1d4:	8a7b      	ldrh	r3, [r7, #18]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	811a      	strh	r2, [r3, #8]


  return 0;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	0801a18c 	.word	0x0801a18c
 800c1ec:	0801a2f0 	.word	0x0801a2f0
 800c1f0:	0801a1ec 	.word	0x0801a1ec

0800c1f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c1fe:	2200      	movs	r2, #0
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff ff8e 	bl	800c124 <pbuf_add_header_impl>
 800c208:	4603      	mov	r3, r0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
	...

0800c214 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <pbuf_remove_header+0x1e>
 800c224:	4b20      	ldr	r3, [pc, #128]	; (800c2a8 <pbuf_remove_header+0x94>)
 800c226:	f240 224b 	movw	r2, #587	; 0x24b
 800c22a:	4920      	ldr	r1, [pc, #128]	; (800c2ac <pbuf_remove_header+0x98>)
 800c22c:	4820      	ldr	r0, [pc, #128]	; (800c2b0 <pbuf_remove_header+0x9c>)
 800c22e:	f00b fddb 	bl	8017de8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <pbuf_remove_header+0x2c>
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c23e:	d301      	bcc.n	800c244 <pbuf_remove_header+0x30>
    return 1;
 800c240:	2301      	movs	r3, #1
 800c242:	e02c      	b.n	800c29e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <pbuf_remove_header+0x3a>
    return 0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	e027      	b.n	800c29e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	895b      	ldrh	r3, [r3, #10]
 800c256:	89fa      	ldrh	r2, [r7, #14]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d908      	bls.n	800c26e <pbuf_remove_header+0x5a>
 800c25c:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <pbuf_remove_header+0x94>)
 800c25e:	f240 2255 	movw	r2, #597	; 0x255
 800c262:	4914      	ldr	r1, [pc, #80]	; (800c2b4 <pbuf_remove_header+0xa0>)
 800c264:	4812      	ldr	r0, [pc, #72]	; (800c2b0 <pbuf_remove_header+0x9c>)
 800c266:	f00b fdbf 	bl	8017de8 <iprintf>
 800c26a:	2301      	movs	r3, #1
 800c26c:	e017      	b.n	800c29e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685a      	ldr	r2, [r3, #4]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	441a      	add	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	895a      	ldrh	r2, [r3, #10]
 800c284:	89fb      	ldrh	r3, [r7, #14]
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	b29a      	uxth	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	891a      	ldrh	r2, [r3, #8]
 800c292:	89fb      	ldrh	r3, [r7, #14]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	b29a      	uxth	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	0801a18c 	.word	0x0801a18c
 800c2ac:	0801a2f0 	.word	0x0801a2f0
 800c2b0:	0801a1ec 	.word	0x0801a1ec
 800c2b4:	0801a2fc 	.word	0x0801a2fc

0800c2b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	807b      	strh	r3, [r7, #2]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c2c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	da08      	bge.n	800c2e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c2d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2d4:	425b      	negs	r3, r3
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff ff9b 	bl	800c214 <pbuf_remove_header>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	e007      	b.n	800c2f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c2e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2e6:	787a      	ldrb	r2, [r7, #1]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff ff1a 	bl	800c124 <pbuf_add_header_impl>
 800c2f0:	4603      	mov	r3, r0
  }
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	460b      	mov	r3, r1
 800c304:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c306:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c30a:	2201      	movs	r2, #1
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff ffd2 	bl	800c2b8 <pbuf_header_impl>
 800c314:	4603      	mov	r3, r0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10b      	bne.n	800c346 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d106      	bne.n	800c342 <pbuf_free+0x22>
 800c334:	4b3b      	ldr	r3, [pc, #236]	; (800c424 <pbuf_free+0x104>)
 800c336:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c33a:	493b      	ldr	r1, [pc, #236]	; (800c428 <pbuf_free+0x108>)
 800c33c:	483b      	ldr	r0, [pc, #236]	; (800c42c <pbuf_free+0x10c>)
 800c33e:	f00b fd53 	bl	8017de8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c342:	2300      	movs	r3, #0
 800c344:	e069      	b.n	800c41a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c34a:	e062      	b.n	800c412 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c34c:	f00b fcc8 	bl	8017ce0 <sys_arch_protect>
 800c350:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	7b9b      	ldrb	r3, [r3, #14]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <pbuf_free+0x48>
 800c35a:	4b32      	ldr	r3, [pc, #200]	; (800c424 <pbuf_free+0x104>)
 800c35c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c360:	4933      	ldr	r1, [pc, #204]	; (800c430 <pbuf_free+0x110>)
 800c362:	4832      	ldr	r0, [pc, #200]	; (800c42c <pbuf_free+0x10c>)
 800c364:	f00b fd40 	bl	8017de8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7b9b      	ldrb	r3, [r3, #14]
 800c36c:	3b01      	subs	r3, #1
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	739a      	strb	r2, [r3, #14]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	7b9b      	ldrb	r3, [r3, #14]
 800c378:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c37a:	69b8      	ldr	r0, [r7, #24]
 800c37c:	f00b fcbe 	bl	8017cfc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c380:	7dfb      	ldrb	r3, [r7, #23]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d143      	bne.n	800c40e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	7b1b      	ldrb	r3, [r3, #12]
 800c390:	f003 030f 	and.w	r3, r3, #15
 800c394:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7b5b      	ldrb	r3, [r3, #13]
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d011      	beq.n	800c3c6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d106      	bne.n	800c3bc <pbuf_free+0x9c>
 800c3ae:	4b1d      	ldr	r3, [pc, #116]	; (800c424 <pbuf_free+0x104>)
 800c3b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c3b4:	491f      	ldr	r1, [pc, #124]	; (800c434 <pbuf_free+0x114>)
 800c3b6:	481d      	ldr	r0, [pc, #116]	; (800c42c <pbuf_free+0x10c>)
 800c3b8:	f00b fd16 	bl	8017de8 <iprintf>
        pc->custom_free_function(p);
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	4798      	blx	r3
 800c3c4:	e01d      	b.n	800c402 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d104      	bne.n	800c3d6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	200c      	movs	r0, #12
 800c3d0:	f7ff f8fa 	bl	800b5c8 <memp_free>
 800c3d4:	e015      	b.n	800c402 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d104      	bne.n	800c3e6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c3dc:	6879      	ldr	r1, [r7, #4]
 800c3de:	200b      	movs	r0, #11
 800c3e0:	f7ff f8f2 	bl	800b5c8 <memp_free>
 800c3e4:	e00d      	b.n	800c402 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d103      	bne.n	800c3f4 <pbuf_free+0xd4>
          mem_free(p);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7fe fd7d 	bl	800aeec <mem_free>
 800c3f2:	e006      	b.n	800c402 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c3f4:	4b0b      	ldr	r3, [pc, #44]	; (800c424 <pbuf_free+0x104>)
 800c3f6:	f240 320f 	movw	r2, #783	; 0x30f
 800c3fa:	490f      	ldr	r1, [pc, #60]	; (800c438 <pbuf_free+0x118>)
 800c3fc:	480b      	ldr	r0, [pc, #44]	; (800c42c <pbuf_free+0x10c>)
 800c3fe:	f00b fcf3 	bl	8017de8 <iprintf>
        }
      }
      count++;
 800c402:	7ffb      	ldrb	r3, [r7, #31]
 800c404:	3301      	adds	r3, #1
 800c406:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	607b      	str	r3, [r7, #4]
 800c40c:	e001      	b.n	800c412 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d199      	bne.n	800c34c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c418:	7ffb      	ldrb	r3, [r7, #31]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3720      	adds	r7, #32
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	0801a18c 	.word	0x0801a18c
 800c428:	0801a2f0 	.word	0x0801a2f0
 800c42c:	0801a1ec 	.word	0x0801a1ec
 800c430:	0801a31c 	.word	0x0801a31c
 800c434:	0801a334 	.word	0x0801a334
 800c438:	0801a358 	.word	0x0801a358

0800c43c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c448:	e005      	b.n	800c456 <pbuf_clen+0x1a>
    ++len;
 800c44a:	89fb      	ldrh	r3, [r7, #14]
 800c44c:	3301      	adds	r3, #1
 800c44e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1f6      	bne.n	800c44a <pbuf_clen+0xe>
  }
  return len;
 800c45c:	89fb      	ldrh	r3, [r7, #14]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
	...

0800c46c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d016      	beq.n	800c4a8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c47a:	f00b fc31 	bl	8017ce0 <sys_arch_protect>
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	7b9b      	ldrb	r3, [r3, #14]
 800c484:	3301      	adds	r3, #1
 800c486:	b2da      	uxtb	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	739a      	strb	r2, [r3, #14]
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f00b fc35 	bl	8017cfc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7b9b      	ldrb	r3, [r3, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d106      	bne.n	800c4a8 <pbuf_ref+0x3c>
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <pbuf_ref+0x44>)
 800c49c:	f240 3242 	movw	r2, #834	; 0x342
 800c4a0:	4904      	ldr	r1, [pc, #16]	; (800c4b4 <pbuf_ref+0x48>)
 800c4a2:	4805      	ldr	r0, [pc, #20]	; (800c4b8 <pbuf_ref+0x4c>)
 800c4a4:	f00b fca0 	bl	8017de8 <iprintf>
  }
}
 800c4a8:	bf00      	nop
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	0801a18c 	.word	0x0801a18c
 800c4b4:	0801a36c 	.word	0x0801a36c
 800c4b8:	0801a1ec 	.word	0x0801a1ec

0800c4bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <pbuf_cat+0x16>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d107      	bne.n	800c4e2 <pbuf_cat+0x26>
 800c4d2:	4b20      	ldr	r3, [pc, #128]	; (800c554 <pbuf_cat+0x98>)
 800c4d4:	f240 325a 	movw	r2, #858	; 0x35a
 800c4d8:	491f      	ldr	r1, [pc, #124]	; (800c558 <pbuf_cat+0x9c>)
 800c4da:	4820      	ldr	r0, [pc, #128]	; (800c55c <pbuf_cat+0xa0>)
 800c4dc:	f00b fc84 	bl	8017de8 <iprintf>
 800c4e0:	e034      	b.n	800c54c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	60fb      	str	r3, [r7, #12]
 800c4e6:	e00a      	b.n	800c4fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	891a      	ldrh	r2, [r3, #8]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	891b      	ldrh	r3, [r3, #8]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1f0      	bne.n	800c4e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	891a      	ldrh	r2, [r3, #8]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	895b      	ldrh	r3, [r3, #10]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d006      	beq.n	800c520 <pbuf_cat+0x64>
 800c512:	4b10      	ldr	r3, [pc, #64]	; (800c554 <pbuf_cat+0x98>)
 800c514:	f240 3262 	movw	r2, #866	; 0x362
 800c518:	4911      	ldr	r1, [pc, #68]	; (800c560 <pbuf_cat+0xa4>)
 800c51a:	4810      	ldr	r0, [pc, #64]	; (800c55c <pbuf_cat+0xa0>)
 800c51c:	f00b fc64 	bl	8017de8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <pbuf_cat+0x7a>
 800c528:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <pbuf_cat+0x98>)
 800c52a:	f240 3263 	movw	r2, #867	; 0x363
 800c52e:	490d      	ldr	r1, [pc, #52]	; (800c564 <pbuf_cat+0xa8>)
 800c530:	480a      	ldr	r0, [pc, #40]	; (800c55c <pbuf_cat+0xa0>)
 800c532:	f00b fc59 	bl	8017de8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	891a      	ldrh	r2, [r3, #8]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	891b      	ldrh	r3, [r3, #8]
 800c53e:	4413      	add	r3, r2
 800c540:	b29a      	uxth	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	0801a18c 	.word	0x0801a18c
 800c558:	0801a380 	.word	0x0801a380
 800c55c:	0801a1ec 	.word	0x0801a1ec
 800c560:	0801a3b8 	.word	0x0801a3b8
 800c564:	0801a3e8 	.word	0x0801a3e8

0800c568 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff ffa1 	bl	800c4bc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c57a:	6838      	ldr	r0, [r7, #0]
 800c57c:	f7ff ff76 	bl	800c46c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c592:	2300      	movs	r3, #0
 800c594:	617b      	str	r3, [r7, #20]
 800c596:	2300      	movs	r3, #0
 800c598:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <pbuf_copy+0x2a>
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d005      	beq.n	800c5b2 <pbuf_copy+0x2a>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	891a      	ldrh	r2, [r3, #8]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	891b      	ldrh	r3, [r3, #8]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d209      	bcs.n	800c5c6 <pbuf_copy+0x3e>
 800c5b2:	4b57      	ldr	r3, [pc, #348]	; (800c710 <pbuf_copy+0x188>)
 800c5b4:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c5b8:	4956      	ldr	r1, [pc, #344]	; (800c714 <pbuf_copy+0x18c>)
 800c5ba:	4857      	ldr	r0, [pc, #348]	; (800c718 <pbuf_copy+0x190>)
 800c5bc:	f00b fc14 	bl	8017de8 <iprintf>
 800c5c0:	f06f 030f 	mvn.w	r3, #15
 800c5c4:	e09f      	b.n	800c706 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	895b      	ldrh	r3, [r3, #10]
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	1ad2      	subs	r2, r2, r3
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	895b      	ldrh	r3, [r3, #10]
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	1acb      	subs	r3, r1, r3
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d306      	bcc.n	800c5ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	895b      	ldrh	r3, [r3, #10]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	1ad3      	subs	r3, r2, r3
 800c5e8:	60fb      	str	r3, [r7, #12]
 800c5ea:	e005      	b.n	800c5f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	895b      	ldrh	r3, [r3, #10]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	18d0      	adds	r0, r2, r3
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	4413      	add	r3, r2
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	4619      	mov	r1, r3
 800c60c:	f00b fbd9 	bl	8017dc2 <memcpy>
    offset_to += len;
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	4413      	add	r3, r2
 800c616:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	4413      	add	r3, r2
 800c61e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	895b      	ldrh	r3, [r3, #10]
 800c624:	461a      	mov	r2, r3
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	4293      	cmp	r3, r2
 800c62a:	d906      	bls.n	800c63a <pbuf_copy+0xb2>
 800c62c:	4b38      	ldr	r3, [pc, #224]	; (800c710 <pbuf_copy+0x188>)
 800c62e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c632:	493a      	ldr	r1, [pc, #232]	; (800c71c <pbuf_copy+0x194>)
 800c634:	4838      	ldr	r0, [pc, #224]	; (800c718 <pbuf_copy+0x190>)
 800c636:	f00b fbd7 	bl	8017de8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	895b      	ldrh	r3, [r3, #10]
 800c63e:	461a      	mov	r2, r3
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	4293      	cmp	r3, r2
 800c644:	d906      	bls.n	800c654 <pbuf_copy+0xcc>
 800c646:	4b32      	ldr	r3, [pc, #200]	; (800c710 <pbuf_copy+0x188>)
 800c648:	f240 32da 	movw	r2, #986	; 0x3da
 800c64c:	4934      	ldr	r1, [pc, #208]	; (800c720 <pbuf_copy+0x198>)
 800c64e:	4832      	ldr	r0, [pc, #200]	; (800c718 <pbuf_copy+0x190>)
 800c650:	f00b fbca 	bl	8017de8 <iprintf>
    if (offset_from >= p_from->len) {
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	895b      	ldrh	r3, [r3, #10]
 800c658:	461a      	mov	r2, r3
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d304      	bcc.n	800c66a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	895b      	ldrh	r3, [r3, #10]
 800c66e:	461a      	mov	r2, r3
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	4293      	cmp	r3, r2
 800c674:	d114      	bne.n	800c6a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10c      	bne.n	800c6a0 <pbuf_copy+0x118>
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d009      	beq.n	800c6a0 <pbuf_copy+0x118>
 800c68c:	4b20      	ldr	r3, [pc, #128]	; (800c710 <pbuf_copy+0x188>)
 800c68e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c692:	4924      	ldr	r1, [pc, #144]	; (800c724 <pbuf_copy+0x19c>)
 800c694:	4820      	ldr	r0, [pc, #128]	; (800c718 <pbuf_copy+0x190>)
 800c696:	f00b fba7 	bl	8017de8 <iprintf>
 800c69a:	f06f 030f 	mvn.w	r3, #15
 800c69e:	e032      	b.n	800c706 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d013      	beq.n	800c6ce <pbuf_copy+0x146>
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	895a      	ldrh	r2, [r3, #10]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	891b      	ldrh	r3, [r3, #8]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d10d      	bne.n	800c6ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d009      	beq.n	800c6ce <pbuf_copy+0x146>
 800c6ba:	4b15      	ldr	r3, [pc, #84]	; (800c710 <pbuf_copy+0x188>)
 800c6bc:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c6c0:	4919      	ldr	r1, [pc, #100]	; (800c728 <pbuf_copy+0x1a0>)
 800c6c2:	4815      	ldr	r0, [pc, #84]	; (800c718 <pbuf_copy+0x190>)
 800c6c4:	f00b fb90 	bl	8017de8 <iprintf>
 800c6c8:	f06f 0305 	mvn.w	r3, #5
 800c6cc:	e01b      	b.n	800c706 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d013      	beq.n	800c6fc <pbuf_copy+0x174>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	895a      	ldrh	r2, [r3, #10]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	891b      	ldrh	r3, [r3, #8]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d10d      	bne.n	800c6fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d009      	beq.n	800c6fc <pbuf_copy+0x174>
 800c6e8:	4b09      	ldr	r3, [pc, #36]	; (800c710 <pbuf_copy+0x188>)
 800c6ea:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c6ee:	490e      	ldr	r1, [pc, #56]	; (800c728 <pbuf_copy+0x1a0>)
 800c6f0:	4809      	ldr	r0, [pc, #36]	; (800c718 <pbuf_copy+0x190>)
 800c6f2:	f00b fb79 	bl	8017de8 <iprintf>
 800c6f6:	f06f 0305 	mvn.w	r3, #5
 800c6fa:	e004      	b.n	800c706 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f47f af61 	bne.w	800c5c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	0801a18c 	.word	0x0801a18c
 800c714:	0801a434 	.word	0x0801a434
 800c718:	0801a1ec 	.word	0x0801a1ec
 800c71c:	0801a464 	.word	0x0801a464
 800c720:	0801a47c 	.word	0x0801a47c
 800c724:	0801a498 	.word	0x0801a498
 800c728:	0801a4a8 	.word	0x0801a4a8

0800c72c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4611      	mov	r1, r2
 800c738:	461a      	mov	r2, r3
 800c73a:	460b      	mov	r3, r1
 800c73c:	80fb      	strh	r3, [r7, #6]
 800c73e:	4613      	mov	r3, r2
 800c740:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d108      	bne.n	800c762 <pbuf_copy_partial+0x36>
 800c750:	4b2b      	ldr	r3, [pc, #172]	; (800c800 <pbuf_copy_partial+0xd4>)
 800c752:	f240 420a 	movw	r2, #1034	; 0x40a
 800c756:	492b      	ldr	r1, [pc, #172]	; (800c804 <pbuf_copy_partial+0xd8>)
 800c758:	482b      	ldr	r0, [pc, #172]	; (800c808 <pbuf_copy_partial+0xdc>)
 800c75a:	f00b fb45 	bl	8017de8 <iprintf>
 800c75e:	2300      	movs	r3, #0
 800c760:	e04a      	b.n	800c7f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d108      	bne.n	800c77a <pbuf_copy_partial+0x4e>
 800c768:	4b25      	ldr	r3, [pc, #148]	; (800c800 <pbuf_copy_partial+0xd4>)
 800c76a:	f240 420b 	movw	r2, #1035	; 0x40b
 800c76e:	4927      	ldr	r1, [pc, #156]	; (800c80c <pbuf_copy_partial+0xe0>)
 800c770:	4825      	ldr	r0, [pc, #148]	; (800c808 <pbuf_copy_partial+0xdc>)
 800c772:	f00b fb39 	bl	8017de8 <iprintf>
 800c776:	2300      	movs	r3, #0
 800c778:	e03e      	b.n	800c7f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	61fb      	str	r3, [r7, #28]
 800c77e:	e034      	b.n	800c7ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c780:	88bb      	ldrh	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <pbuf_copy_partial+0x70>
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	895b      	ldrh	r3, [r3, #10]
 800c78a:	88ba      	ldrh	r2, [r7, #4]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d305      	bcc.n	800c79c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	895b      	ldrh	r3, [r3, #10]
 800c794:	88ba      	ldrh	r2, [r7, #4]
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	80bb      	strh	r3, [r7, #4]
 800c79a:	e023      	b.n	800c7e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	895a      	ldrh	r2, [r3, #10]
 800c7a0:	88bb      	ldrh	r3, [r7, #4]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c7a6:	8b3a      	ldrh	r2, [r7, #24]
 800c7a8:	88fb      	ldrh	r3, [r7, #6]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d901      	bls.n	800c7b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c7ae:	88fb      	ldrh	r3, [r7, #6]
 800c7b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c7b2:	8b7b      	ldrh	r3, [r7, #26]
 800c7b4:	68ba      	ldr	r2, [r7, #8]
 800c7b6:	18d0      	adds	r0, r2, r3
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	88bb      	ldrh	r3, [r7, #4]
 800c7be:	4413      	add	r3, r2
 800c7c0:	8b3a      	ldrh	r2, [r7, #24]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	f00b fafd 	bl	8017dc2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c7c8:	8afa      	ldrh	r2, [r7, #22]
 800c7ca:	8b3b      	ldrh	r3, [r7, #24]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c7d0:	8b7a      	ldrh	r2, [r7, #26]
 800c7d2:	8b3b      	ldrh	r3, [r7, #24]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c7d8:	88fa      	ldrh	r2, [r7, #6]
 800c7da:	8b3b      	ldrh	r3, [r7, #24]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	61fb      	str	r3, [r7, #28]
 800c7ea:	88fb      	ldrh	r3, [r7, #6]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <pbuf_copy_partial+0xca>
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1c4      	bne.n	800c780 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c7f6:	8afb      	ldrh	r3, [r7, #22]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3720      	adds	r7, #32
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	0801a18c 	.word	0x0801a18c
 800c804:	0801a4d4 	.word	0x0801a4d4
 800c808:	0801a1ec 	.word	0x0801a1ec
 800c80c:	0801a4f4 	.word	0x0801a4f4

0800c810 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	4603      	mov	r3, r0
 800c818:	603a      	str	r2, [r7, #0]
 800c81a:	71fb      	strb	r3, [r7, #7]
 800c81c:	460b      	mov	r3, r1
 800c81e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	8919      	ldrh	r1, [r3, #8]
 800c824:	88ba      	ldrh	r2, [r7, #4]
 800c826:	79fb      	ldrb	r3, [r7, #7]
 800c828:	4618      	mov	r0, r3
 800c82a:	f7ff fa99 	bl	800bd60 <pbuf_alloc>
 800c82e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d101      	bne.n	800c83a <pbuf_clone+0x2a>
    return NULL;
 800c836:	2300      	movs	r3, #0
 800c838:	e011      	b.n	800c85e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f7ff fea3 	bl	800c588 <pbuf_copy>
 800c842:	4603      	mov	r3, r0
 800c844:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c846:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d006      	beq.n	800c85c <pbuf_clone+0x4c>
 800c84e:	4b06      	ldr	r3, [pc, #24]	; (800c868 <pbuf_clone+0x58>)
 800c850:	f240 5224 	movw	r2, #1316	; 0x524
 800c854:	4905      	ldr	r1, [pc, #20]	; (800c86c <pbuf_clone+0x5c>)
 800c856:	4806      	ldr	r0, [pc, #24]	; (800c870 <pbuf_clone+0x60>)
 800c858:	f00b fac6 	bl	8017de8 <iprintf>
  return q;
 800c85c:	68fb      	ldr	r3, [r7, #12]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	0801a18c 	.word	0x0801a18c
 800c86c:	0801a600 	.word	0x0801a600
 800c870:	0801a1ec 	.word	0x0801a1ec

0800c874 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c878:	f00b face 	bl	8017e18 <rand>
 800c87c:	4603      	mov	r3, r0
 800c87e:	b29b      	uxth	r3, r3
 800c880:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c884:	b29b      	uxth	r3, r3
 800c886:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	4b01      	ldr	r3, [pc, #4]	; (800c894 <tcp_init+0x20>)
 800c88e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c890:	bf00      	nop
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20000010 	.word	0x20000010

0800c898 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	7d1b      	ldrb	r3, [r3, #20]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d105      	bne.n	800c8b4 <tcp_free+0x1c>
 800c8a8:	4b06      	ldr	r3, [pc, #24]	; (800c8c4 <tcp_free+0x2c>)
 800c8aa:	22d4      	movs	r2, #212	; 0xd4
 800c8ac:	4906      	ldr	r1, [pc, #24]	; (800c8c8 <tcp_free+0x30>)
 800c8ae:	4807      	ldr	r0, [pc, #28]	; (800c8cc <tcp_free+0x34>)
 800c8b0:	f00b fa9a 	bl	8017de8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	2001      	movs	r0, #1
 800c8b8:	f7fe fe86 	bl	800b5c8 <memp_free>
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	0801a68c 	.word	0x0801a68c
 800c8c8:	0801a6bc 	.word	0x0801a6bc
 800c8cc:	0801a6d0 	.word	0x0801a6d0

0800c8d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7d1b      	ldrb	r3, [r3, #20]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d105      	bne.n	800c8ec <tcp_free_listen+0x1c>
 800c8e0:	4b06      	ldr	r3, [pc, #24]	; (800c8fc <tcp_free_listen+0x2c>)
 800c8e2:	22df      	movs	r2, #223	; 0xdf
 800c8e4:	4906      	ldr	r1, [pc, #24]	; (800c900 <tcp_free_listen+0x30>)
 800c8e6:	4807      	ldr	r0, [pc, #28]	; (800c904 <tcp_free_listen+0x34>)
 800c8e8:	f00b fa7e 	bl	8017de8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c8ec:	6879      	ldr	r1, [r7, #4]
 800c8ee:	2002      	movs	r0, #2
 800c8f0:	f7fe fe6a 	bl	800b5c8 <memp_free>
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	0801a68c 	.word	0x0801a68c
 800c900:	0801a6f8 	.word	0x0801a6f8
 800c904:	0801a6d0 	.word	0x0801a6d0

0800c908 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c90c:	f001 f8ac 	bl	800da68 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c910:	4b07      	ldr	r3, [pc, #28]	; (800c930 <tcp_tmr+0x28>)
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	3301      	adds	r3, #1
 800c916:	b2da      	uxtb	r2, r3
 800c918:	4b05      	ldr	r3, [pc, #20]	; (800c930 <tcp_tmr+0x28>)
 800c91a:	701a      	strb	r2, [r3, #0]
 800c91c:	4b04      	ldr	r3, [pc, #16]	; (800c930 <tcp_tmr+0x28>)
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	f003 0301 	and.w	r3, r3, #1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d001      	beq.n	800c92c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c928:	f000 fd60 	bl	800d3ec <tcp_slowtmr>
  }
}
 800c92c:	bf00      	nop
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20008a8d 	.word	0x20008a8d

0800c934 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d105      	bne.n	800c950 <tcp_remove_listener+0x1c>
 800c944:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <tcp_remove_listener+0x48>)
 800c946:	22ff      	movs	r2, #255	; 0xff
 800c948:	490d      	ldr	r1, [pc, #52]	; (800c980 <tcp_remove_listener+0x4c>)
 800c94a:	480e      	ldr	r0, [pc, #56]	; (800c984 <tcp_remove_listener+0x50>)
 800c94c:	f00b fa4c 	bl	8017de8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	60fb      	str	r3, [r7, #12]
 800c954:	e00a      	b.n	800c96c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d102      	bne.n	800c966 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1f1      	bne.n	800c956 <tcp_remove_listener+0x22>
    }
  }
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	0801a68c 	.word	0x0801a68c
 800c980:	0801a714 	.word	0x0801a714
 800c984:	0801a6d0 	.word	0x0801a6d0

0800c988 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d106      	bne.n	800c9a4 <tcp_listen_closed+0x1c>
 800c996:	4b14      	ldr	r3, [pc, #80]	; (800c9e8 <tcp_listen_closed+0x60>)
 800c998:	f240 1211 	movw	r2, #273	; 0x111
 800c99c:	4913      	ldr	r1, [pc, #76]	; (800c9ec <tcp_listen_closed+0x64>)
 800c99e:	4814      	ldr	r0, [pc, #80]	; (800c9f0 <tcp_listen_closed+0x68>)
 800c9a0:	f00b fa22 	bl	8017de8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	7d1b      	ldrb	r3, [r3, #20]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d006      	beq.n	800c9ba <tcp_listen_closed+0x32>
 800c9ac:	4b0e      	ldr	r3, [pc, #56]	; (800c9e8 <tcp_listen_closed+0x60>)
 800c9ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c9b2:	4910      	ldr	r1, [pc, #64]	; (800c9f4 <tcp_listen_closed+0x6c>)
 800c9b4:	480e      	ldr	r0, [pc, #56]	; (800c9f0 <tcp_listen_closed+0x68>)
 800c9b6:	f00b fa17 	bl	8017de8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	60fb      	str	r3, [r7, #12]
 800c9be:	e00b      	b.n	800c9d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c9c0:	4a0d      	ldr	r2, [pc, #52]	; (800c9f8 <tcp_listen_closed+0x70>)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6879      	ldr	r1, [r7, #4]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7ff ffb1 	bl	800c934 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	60fb      	str	r3, [r7, #12]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2b03      	cmp	r3, #3
 800c9dc:	d9f0      	bls.n	800c9c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c9de:	bf00      	nop
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	0801a68c 	.word	0x0801a68c
 800c9ec:	0801a73c 	.word	0x0801a73c
 800c9f0:	0801a6d0 	.word	0x0801a6d0
 800c9f4:	0801a748 	.word	0x0801a748
 800c9f8:	08026b7c 	.word	0x08026b7c

0800c9fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c9fc:	b5b0      	push	{r4, r5, r7, lr}
 800c9fe:	b088      	sub	sp, #32
 800ca00:	af04      	add	r7, sp, #16
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d106      	bne.n	800ca1c <tcp_close_shutdown+0x20>
 800ca0e:	4b61      	ldr	r3, [pc, #388]	; (800cb94 <tcp_close_shutdown+0x198>)
 800ca10:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ca14:	4960      	ldr	r1, [pc, #384]	; (800cb98 <tcp_close_shutdown+0x19c>)
 800ca16:	4861      	ldr	r0, [pc, #388]	; (800cb9c <tcp_close_shutdown+0x1a0>)
 800ca18:	f00b f9e6 	bl	8017de8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d066      	beq.n	800caf0 <tcp_close_shutdown+0xf4>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	7d1b      	ldrb	r3, [r3, #20]
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	d003      	beq.n	800ca32 <tcp_close_shutdown+0x36>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	7d1b      	ldrb	r3, [r3, #20]
 800ca2e:	2b07      	cmp	r3, #7
 800ca30:	d15e      	bne.n	800caf0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d104      	bne.n	800ca44 <tcp_close_shutdown+0x48>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca3e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca42:	d055      	beq.n	800caf0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	8b5b      	ldrh	r3, [r3, #26]
 800ca48:	f003 0310 	and.w	r3, r3, #16
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d106      	bne.n	800ca5e <tcp_close_shutdown+0x62>
 800ca50:	4b50      	ldr	r3, [pc, #320]	; (800cb94 <tcp_close_shutdown+0x198>)
 800ca52:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ca56:	4952      	ldr	r1, [pc, #328]	; (800cba0 <tcp_close_shutdown+0x1a4>)
 800ca58:	4850      	ldr	r0, [pc, #320]	; (800cb9c <tcp_close_shutdown+0x1a0>)
 800ca5a:	f00b f9c5 	bl	8017de8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ca66:	687d      	ldr	r5, [r7, #4]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	8ad2      	ldrh	r2, [r2, #22]
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	8b09      	ldrh	r1, [r1, #24]
 800ca74:	9102      	str	r1, [sp, #8]
 800ca76:	9201      	str	r2, [sp, #4]
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	462b      	mov	r3, r5
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	4601      	mov	r1, r0
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f005 fde9 	bl	8012658 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f001 fbba 	bl	800e200 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ca8c:	4b45      	ldr	r3, [pc, #276]	; (800cba4 <tcp_close_shutdown+0x1a8>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d105      	bne.n	800caa2 <tcp_close_shutdown+0xa6>
 800ca96:	4b43      	ldr	r3, [pc, #268]	; (800cba4 <tcp_close_shutdown+0x1a8>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	4a41      	ldr	r2, [pc, #260]	; (800cba4 <tcp_close_shutdown+0x1a8>)
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	e013      	b.n	800caca <tcp_close_shutdown+0xce>
 800caa2:	4b40      	ldr	r3, [pc, #256]	; (800cba4 <tcp_close_shutdown+0x1a8>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	e00c      	b.n	800cac4 <tcp_close_shutdown+0xc8>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d104      	bne.n	800cabe <tcp_close_shutdown+0xc2>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68da      	ldr	r2, [r3, #12]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	60da      	str	r2, [r3, #12]
 800cabc:	e005      	b.n	800caca <tcp_close_shutdown+0xce>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1ef      	bne.n	800caaa <tcp_close_shutdown+0xae>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	60da      	str	r2, [r3, #12]
 800cad0:	4b35      	ldr	r3, [pc, #212]	; (800cba8 <tcp_close_shutdown+0x1ac>)
 800cad2:	2201      	movs	r2, #1
 800cad4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cad6:	4b35      	ldr	r3, [pc, #212]	; (800cbac <tcp_close_shutdown+0x1b0>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d102      	bne.n	800cae6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cae0:	f004 f84c 	bl	8010b7c <tcp_trigger_input_pcb_close>
 800cae4:	e002      	b.n	800caec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff fed6 	bl	800c898 <tcp_free>
      }
      return ERR_OK;
 800caec:	2300      	movs	r3, #0
 800caee:	e04d      	b.n	800cb8c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	7d1b      	ldrb	r3, [r3, #20]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d02d      	beq.n	800cb54 <tcp_close_shutdown+0x158>
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d036      	beq.n	800cb6a <tcp_close_shutdown+0x16e>
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d13f      	bne.n	800cb80 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	8adb      	ldrh	r3, [r3, #22]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d021      	beq.n	800cb4c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb08:	4b29      	ldr	r3, [pc, #164]	; (800cbb0 <tcp_close_shutdown+0x1b4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d105      	bne.n	800cb1e <tcp_close_shutdown+0x122>
 800cb12:	4b27      	ldr	r3, [pc, #156]	; (800cbb0 <tcp_close_shutdown+0x1b4>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	4a25      	ldr	r2, [pc, #148]	; (800cbb0 <tcp_close_shutdown+0x1b4>)
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	e013      	b.n	800cb46 <tcp_close_shutdown+0x14a>
 800cb1e:	4b24      	ldr	r3, [pc, #144]	; (800cbb0 <tcp_close_shutdown+0x1b4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60bb      	str	r3, [r7, #8]
 800cb24:	e00c      	b.n	800cb40 <tcp_close_shutdown+0x144>
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d104      	bne.n	800cb3a <tcp_close_shutdown+0x13e>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68da      	ldr	r2, [r3, #12]
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	60da      	str	r2, [r3, #12]
 800cb38:	e005      	b.n	800cb46 <tcp_close_shutdown+0x14a>
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	60bb      	str	r3, [r7, #8]
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1ef      	bne.n	800cb26 <tcp_close_shutdown+0x12a>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff fea3 	bl	800c898 <tcp_free>
      break;
 800cb52:	e01a      	b.n	800cb8a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff ff17 	bl	800c988 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cb5a:	6879      	ldr	r1, [r7, #4]
 800cb5c:	4815      	ldr	r0, [pc, #84]	; (800cbb4 <tcp_close_shutdown+0x1b8>)
 800cb5e:	f001 fb9f 	bl	800e2a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff feb4 	bl	800c8d0 <tcp_free_listen>
      break;
 800cb68:	e00f      	b.n	800cb8a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb6a:	6879      	ldr	r1, [r7, #4]
 800cb6c:	480d      	ldr	r0, [pc, #52]	; (800cba4 <tcp_close_shutdown+0x1a8>)
 800cb6e:	f001 fb97 	bl	800e2a0 <tcp_pcb_remove>
 800cb72:	4b0d      	ldr	r3, [pc, #52]	; (800cba8 <tcp_close_shutdown+0x1ac>)
 800cb74:	2201      	movs	r2, #1
 800cb76:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff fe8d 	bl	800c898 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cb7e:	e004      	b.n	800cb8a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f819 	bl	800cbb8 <tcp_close_shutdown_fin>
 800cb86:	4603      	mov	r3, r0
 800cb88:	e000      	b.n	800cb8c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bdb0      	pop	{r4, r5, r7, pc}
 800cb94:	0801a68c 	.word	0x0801a68c
 800cb98:	0801a760 	.word	0x0801a760
 800cb9c:	0801a6d0 	.word	0x0801a6d0
 800cba0:	0801a780 	.word	0x0801a780
 800cba4:	2000f514 	.word	0x2000f514
 800cba8:	2000f510 	.word	0x2000f510
 800cbac:	2000f528 	.word	0x2000f528
 800cbb0:	2000f520 	.word	0x2000f520
 800cbb4:	2000f51c 	.word	0x2000f51c

0800cbb8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <tcp_close_shutdown_fin+0x1c>
 800cbc6:	4b2c      	ldr	r3, [pc, #176]	; (800cc78 <tcp_close_shutdown_fin+0xc0>)
 800cbc8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cbcc:	492b      	ldr	r1, [pc, #172]	; (800cc7c <tcp_close_shutdown_fin+0xc4>)
 800cbce:	482c      	ldr	r0, [pc, #176]	; (800cc80 <tcp_close_shutdown_fin+0xc8>)
 800cbd0:	f00b f90a 	bl	8017de8 <iprintf>

  switch (pcb->state) {
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7d1b      	ldrb	r3, [r3, #20]
 800cbd8:	2b04      	cmp	r3, #4
 800cbda:	d010      	beq.n	800cbfe <tcp_close_shutdown_fin+0x46>
 800cbdc:	2b07      	cmp	r3, #7
 800cbde:	d01b      	beq.n	800cc18 <tcp_close_shutdown_fin+0x60>
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d126      	bne.n	800cc32 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f004 fe35 	bl	8011854 <tcp_send_fin>
 800cbea:	4603      	mov	r3, r0
 800cbec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cbee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d11f      	bne.n	800cc36 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2205      	movs	r2, #5
 800cbfa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cbfc:	e01b      	b.n	800cc36 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f004 fe28 	bl	8011854 <tcp_send_fin>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cc08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d114      	bne.n	800cc3a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2205      	movs	r2, #5
 800cc14:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cc16:	e010      	b.n	800cc3a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f004 fe1b 	bl	8011854 <tcp_send_fin>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d109      	bne.n	800cc3e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2209      	movs	r2, #9
 800cc2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cc30:	e005      	b.n	800cc3e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e01c      	b.n	800cc70 <tcp_close_shutdown_fin+0xb8>
      break;
 800cc36:	bf00      	nop
 800cc38:	e002      	b.n	800cc40 <tcp_close_shutdown_fin+0x88>
      break;
 800cc3a:	bf00      	nop
 800cc3c:	e000      	b.n	800cc40 <tcp_close_shutdown_fin+0x88>
      break;
 800cc3e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cc40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d103      	bne.n	800cc50 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f004 ff41 	bl	8011ad0 <tcp_output>
 800cc4e:	e00d      	b.n	800cc6c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800cc50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc58:	d108      	bne.n	800cc6c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	8b5b      	ldrh	r3, [r3, #26]
 800cc5e:	f043 0308 	orr.w	r3, r3, #8
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	e001      	b.n	800cc70 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800cc6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	0801a68c 	.word	0x0801a68c
 800cc7c:	0801a73c 	.word	0x0801a73c
 800cc80:	0801a6d0 	.word	0x0801a6d0

0800cc84 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d109      	bne.n	800cca6 <tcp_close+0x22>
 800cc92:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <tcp_close+0x4c>)
 800cc94:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cc98:	490e      	ldr	r1, [pc, #56]	; (800ccd4 <tcp_close+0x50>)
 800cc9a:	480f      	ldr	r0, [pc, #60]	; (800ccd8 <tcp_close+0x54>)
 800cc9c:	f00b f8a4 	bl	8017de8 <iprintf>
 800cca0:	f06f 030f 	mvn.w	r3, #15
 800cca4:	e00f      	b.n	800ccc6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	7d1b      	ldrb	r3, [r3, #20]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d006      	beq.n	800ccbc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	8b5b      	ldrh	r3, [r3, #26]
 800ccb2:	f043 0310 	orr.w	r3, r3, #16
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff fe9c 	bl	800c9fc <tcp_close_shutdown>
 800ccc4:	4603      	mov	r3, r0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	0801a68c 	.word	0x0801a68c
 800ccd4:	0801a79c 	.word	0x0801a79c
 800ccd8:	0801a6d0 	.word	0x0801a6d0

0800ccdc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d109      	bne.n	800cd02 <tcp_shutdown+0x26>
 800ccee:	4b25      	ldr	r3, [pc, #148]	; (800cd84 <tcp_shutdown+0xa8>)
 800ccf0:	f240 2207 	movw	r2, #519	; 0x207
 800ccf4:	4924      	ldr	r1, [pc, #144]	; (800cd88 <tcp_shutdown+0xac>)
 800ccf6:	4825      	ldr	r0, [pc, #148]	; (800cd8c <tcp_shutdown+0xb0>)
 800ccf8:	f00b f876 	bl	8017de8 <iprintf>
 800ccfc:	f06f 030f 	mvn.w	r3, #15
 800cd00:	e03c      	b.n	800cd7c <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	7d1b      	ldrb	r3, [r3, #20]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d102      	bne.n	800cd10 <tcp_shutdown+0x34>
    return ERR_CONN;
 800cd0a:	f06f 030a 	mvn.w	r3, #10
 800cd0e:	e035      	b.n	800cd7c <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d01b      	beq.n	800cd4e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	8b5b      	ldrh	r3, [r3, #26]
 800cd1a:	f043 0310 	orr.w	r3, r3, #16
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d005      	beq.n	800cd36 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800cd2a:	2101      	movs	r1, #1
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7ff fe65 	bl	800c9fc <tcp_close_shutdown>
 800cd32:	4603      	mov	r3, r0
 800cd34:	e022      	b.n	800cd7c <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d007      	beq.n	800cd4e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff faec 	bl	800c320 <pbuf_free>
      pcb->refused_data = NULL;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d012      	beq.n	800cd7a <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	7d1b      	ldrb	r3, [r3, #20]
 800cd58:	2b03      	cmp	r3, #3
 800cd5a:	db0b      	blt.n	800cd74 <tcp_shutdown+0x98>
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	dd01      	ble.n	800cd64 <tcp_shutdown+0x88>
 800cd60:	2b07      	cmp	r3, #7
 800cd62:	d107      	bne.n	800cd74 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	4619      	mov	r1, r3
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f7ff fe46 	bl	800c9fc <tcp_close_shutdown>
 800cd70:	4603      	mov	r3, r0
 800cd72:	e003      	b.n	800cd7c <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800cd74:	f06f 030a 	mvn.w	r3, #10
 800cd78:	e000      	b.n	800cd7c <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	0801a68c 	.word	0x0801a68c
 800cd88:	0801a7b4 	.word	0x0801a7b4
 800cd8c:	0801a6d0 	.word	0x0801a6d0

0800cd90 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08e      	sub	sp, #56	; 0x38
 800cd94:	af04      	add	r7, sp, #16
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d107      	bne.n	800cdb0 <tcp_abandon+0x20>
 800cda0:	4b52      	ldr	r3, [pc, #328]	; (800ceec <tcp_abandon+0x15c>)
 800cda2:	f240 223d 	movw	r2, #573	; 0x23d
 800cda6:	4952      	ldr	r1, [pc, #328]	; (800cef0 <tcp_abandon+0x160>)
 800cda8:	4852      	ldr	r0, [pc, #328]	; (800cef4 <tcp_abandon+0x164>)
 800cdaa:	f00b f81d 	bl	8017de8 <iprintf>
 800cdae:	e099      	b.n	800cee4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	7d1b      	ldrb	r3, [r3, #20]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d106      	bne.n	800cdc6 <tcp_abandon+0x36>
 800cdb8:	4b4c      	ldr	r3, [pc, #304]	; (800ceec <tcp_abandon+0x15c>)
 800cdba:	f240 2241 	movw	r2, #577	; 0x241
 800cdbe:	494e      	ldr	r1, [pc, #312]	; (800cef8 <tcp_abandon+0x168>)
 800cdc0:	484c      	ldr	r0, [pc, #304]	; (800cef4 <tcp_abandon+0x164>)
 800cdc2:	f00b f811 	bl	8017de8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7d1b      	ldrb	r3, [r3, #20]
 800cdca:	2b0a      	cmp	r3, #10
 800cdcc:	d107      	bne.n	800cdde <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cdce:	6879      	ldr	r1, [r7, #4]
 800cdd0:	484a      	ldr	r0, [pc, #296]	; (800cefc <tcp_abandon+0x16c>)
 800cdd2:	f001 fa65 	bl	800e2a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff fd5e 	bl	800c898 <tcp_free>
 800cddc:	e082      	b.n	800cee4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdf8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	7d1b      	ldrb	r3, [r3, #20]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d126      	bne.n	800ce56 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	8adb      	ldrh	r3, [r3, #22]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d02e      	beq.n	800ce6e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce10:	4b3b      	ldr	r3, [pc, #236]	; (800cf00 <tcp_abandon+0x170>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d105      	bne.n	800ce26 <tcp_abandon+0x96>
 800ce1a:	4b39      	ldr	r3, [pc, #228]	; (800cf00 <tcp_abandon+0x170>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	4a37      	ldr	r2, [pc, #220]	; (800cf00 <tcp_abandon+0x170>)
 800ce22:	6013      	str	r3, [r2, #0]
 800ce24:	e013      	b.n	800ce4e <tcp_abandon+0xbe>
 800ce26:	4b36      	ldr	r3, [pc, #216]	; (800cf00 <tcp_abandon+0x170>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	61fb      	str	r3, [r7, #28]
 800ce2c:	e00c      	b.n	800ce48 <tcp_abandon+0xb8>
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d104      	bne.n	800ce42 <tcp_abandon+0xb2>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68da      	ldr	r2, [r3, #12]
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	60da      	str	r2, [r3, #12]
 800ce40:	e005      	b.n	800ce4e <tcp_abandon+0xbe>
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	61fb      	str	r3, [r7, #28]
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1ef      	bne.n	800ce2e <tcp_abandon+0x9e>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	60da      	str	r2, [r3, #12]
 800ce54:	e00b      	b.n	800ce6e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	8adb      	ldrh	r3, [r3, #22]
 800ce5e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	4828      	ldr	r0, [pc, #160]	; (800cf04 <tcp_abandon+0x174>)
 800ce64:	f001 fa1c 	bl	800e2a0 <tcp_pcb_remove>
 800ce68:	4b27      	ldr	r3, [pc, #156]	; (800cf08 <tcp_abandon+0x178>)
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d004      	beq.n	800ce80 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 fed4 	bl	800dc28 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d004      	beq.n	800ce92 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 fecb 	bl	800dc28 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d004      	beq.n	800cea4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 fec2 	bl	800dc28 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00e      	beq.n	800cec8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	3304      	adds	r3, #4
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	8b12      	ldrh	r2, [r2, #24]
 800ceb4:	9202      	str	r2, [sp, #8]
 800ceb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ceb8:	9201      	str	r2, [sp, #4]
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	460b      	mov	r3, r1
 800cebe:	697a      	ldr	r2, [r7, #20]
 800cec0:	69b9      	ldr	r1, [r7, #24]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f005 fbc8 	bl	8012658 <tcp_rst>
    }
    last_state = pcb->state;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7d1b      	ldrb	r3, [r3, #20]
 800cecc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7ff fce2 	bl	800c898 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d004      	beq.n	800cee4 <tcp_abandon+0x154>
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	f06f 010c 	mvn.w	r1, #12
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	4798      	blx	r3
  }
}
 800cee4:	3728      	adds	r7, #40	; 0x28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	0801a68c 	.word	0x0801a68c
 800cef0:	0801a7d0 	.word	0x0801a7d0
 800cef4:	0801a6d0 	.word	0x0801a6d0
 800cef8:	0801a7ec 	.word	0x0801a7ec
 800cefc:	2000f524 	.word	0x2000f524
 800cf00:	2000f520 	.word	0x2000f520
 800cf04:	2000f514 	.word	0x2000f514
 800cf08:	2000f510 	.word	0x2000f510

0800cf0c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cf14:	2101      	movs	r1, #1
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7ff ff3a 	bl	800cd90 <tcp_abandon>
}
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cf32:	2304      	movs	r3, #4
 800cf34:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cf3c:	4b3e      	ldr	r3, [pc, #248]	; (800d038 <tcp_bind+0x114>)
 800cf3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d109      	bne.n	800cf5a <tcp_bind+0x36>
 800cf46:	4b3d      	ldr	r3, [pc, #244]	; (800d03c <tcp_bind+0x118>)
 800cf48:	f240 22a9 	movw	r2, #681	; 0x2a9
 800cf4c:	493c      	ldr	r1, [pc, #240]	; (800d040 <tcp_bind+0x11c>)
 800cf4e:	483d      	ldr	r0, [pc, #244]	; (800d044 <tcp_bind+0x120>)
 800cf50:	f00a ff4a 	bl	8017de8 <iprintf>
 800cf54:	f06f 030f 	mvn.w	r3, #15
 800cf58:	e06a      	b.n	800d030 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	7d1b      	ldrb	r3, [r3, #20]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d009      	beq.n	800cf76 <tcp_bind+0x52>
 800cf62:	4b36      	ldr	r3, [pc, #216]	; (800d03c <tcp_bind+0x118>)
 800cf64:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cf68:	4937      	ldr	r1, [pc, #220]	; (800d048 <tcp_bind+0x124>)
 800cf6a:	4836      	ldr	r0, [pc, #216]	; (800d044 <tcp_bind+0x120>)
 800cf6c:	f00a ff3c 	bl	8017de8 <iprintf>
 800cf70:	f06f 0305 	mvn.w	r3, #5
 800cf74:	e05c      	b.n	800d030 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cf76:	88fb      	ldrh	r3, [r7, #6]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d109      	bne.n	800cf90 <tcp_bind+0x6c>
    port = tcp_new_port();
 800cf7c:	f000 f9f0 	bl	800d360 <tcp_new_port>
 800cf80:	4603      	mov	r3, r0
 800cf82:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cf84:	88fb      	ldrh	r3, [r7, #6]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d135      	bne.n	800cff6 <tcp_bind+0xd2>
      return ERR_BUF;
 800cf8a:	f06f 0301 	mvn.w	r3, #1
 800cf8e:	e04f      	b.n	800d030 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cf90:	2300      	movs	r3, #0
 800cf92:	61fb      	str	r3, [r7, #28]
 800cf94:	e02b      	b.n	800cfee <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cf96:	4a2d      	ldr	r2, [pc, #180]	; (800d04c <tcp_bind+0x128>)
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	61bb      	str	r3, [r7, #24]
 800cfa2:	e01e      	b.n	800cfe2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	8adb      	ldrh	r3, [r3, #22]
 800cfa8:	88fa      	ldrh	r2, [r7, #6]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d116      	bne.n	800cfdc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cfae:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d010      	beq.n	800cfd6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00c      	beq.n	800cfd6 <tcp_bind+0xb2>
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d009      	beq.n	800cfd6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d005      	beq.n	800cfd6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d102      	bne.n	800cfdc <tcp_bind+0xb8>
              return ERR_USE;
 800cfd6:	f06f 0307 	mvn.w	r3, #7
 800cfda:	e029      	b.n	800d030 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	61bb      	str	r3, [r7, #24]
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1dd      	bne.n	800cfa4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	3301      	adds	r3, #1
 800cfec:	61fb      	str	r3, [r7, #28]
 800cfee:	69fa      	ldr	r2, [r7, #28]
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	dbcf      	blt.n	800cf96 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00c      	beq.n	800d016 <tcp_bind+0xf2>
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d008      	beq.n	800d016 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d002      	beq.n	800d010 <tcp_bind+0xec>
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	e000      	b.n	800d012 <tcp_bind+0xee>
 800d010:	2300      	movs	r3, #0
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	88fa      	ldrh	r2, [r7, #6]
 800d01a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d01c:	4b0c      	ldr	r3, [pc, #48]	; (800d050 <tcp_bind+0x12c>)
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	60da      	str	r2, [r3, #12]
 800d024:	4a0a      	ldr	r2, [pc, #40]	; (800d050 <tcp_bind+0x12c>)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	f005 fcd7 	bl	80129dc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3720      	adds	r7, #32
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	08026bb4 	.word	0x08026bb4
 800d03c:	0801a68c 	.word	0x0801a68c
 800d040:	0801a820 	.word	0x0801a820
 800d044:	0801a6d0 	.word	0x0801a6d0
 800d048:	0801a838 	.word	0x0801a838
 800d04c:	08026b7c 	.word	0x08026b7c
 800d050:	2000f520 	.word	0x2000f520

0800d054 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	4613      	mov	r3, r2
 800d060:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d106      	bne.n	800d076 <tcp_accept_null+0x22>
 800d068:	4b07      	ldr	r3, [pc, #28]	; (800d088 <tcp_accept_null+0x34>)
 800d06a:	f240 320f 	movw	r2, #783	; 0x30f
 800d06e:	4907      	ldr	r1, [pc, #28]	; (800d08c <tcp_accept_null+0x38>)
 800d070:	4807      	ldr	r0, [pc, #28]	; (800d090 <tcp_accept_null+0x3c>)
 800d072:	f00a feb9 	bl	8017de8 <iprintf>

  tcp_abort(pcb);
 800d076:	68b8      	ldr	r0, [r7, #8]
 800d078:	f7ff ff48 	bl	800cf0c <tcp_abort>

  return ERR_ABRT;
 800d07c:	f06f 030c 	mvn.w	r3, #12
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	0801a68c 	.word	0x0801a68c
 800d08c:	0801a860 	.word	0x0801a860
 800d090:	0801a6d0 	.word	0x0801a6d0

0800d094 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 f806 	bl	800d0b8 <tcp_listen_with_backlog_and_err>
 800d0ac:	4603      	mov	r3, r0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
	...

0800d0b8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b088      	sub	sp, #32
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d109      	bne.n	800d0e4 <tcp_listen_with_backlog_and_err+0x2c>
 800d0d0:	4b47      	ldr	r3, [pc, #284]	; (800d1f0 <tcp_listen_with_backlog_and_err+0x138>)
 800d0d2:	f240 3259 	movw	r2, #857	; 0x359
 800d0d6:	4947      	ldr	r1, [pc, #284]	; (800d1f4 <tcp_listen_with_backlog_and_err+0x13c>)
 800d0d8:	4847      	ldr	r0, [pc, #284]	; (800d1f8 <tcp_listen_with_backlog_and_err+0x140>)
 800d0da:	f00a fe85 	bl	8017de8 <iprintf>
 800d0de:	23f0      	movs	r3, #240	; 0xf0
 800d0e0:	76fb      	strb	r3, [r7, #27]
 800d0e2:	e079      	b.n	800d1d8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	7d1b      	ldrb	r3, [r3, #20]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d009      	beq.n	800d100 <tcp_listen_with_backlog_and_err+0x48>
 800d0ec:	4b40      	ldr	r3, [pc, #256]	; (800d1f0 <tcp_listen_with_backlog_and_err+0x138>)
 800d0ee:	f240 325a 	movw	r2, #858	; 0x35a
 800d0f2:	4942      	ldr	r1, [pc, #264]	; (800d1fc <tcp_listen_with_backlog_and_err+0x144>)
 800d0f4:	4840      	ldr	r0, [pc, #256]	; (800d1f8 <tcp_listen_with_backlog_and_err+0x140>)
 800d0f6:	f00a fe77 	bl	8017de8 <iprintf>
 800d0fa:	23f1      	movs	r3, #241	; 0xf1
 800d0fc:	76fb      	strb	r3, [r7, #27]
 800d0fe:	e06b      	b.n	800d1d8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	7d1b      	ldrb	r3, [r3, #20]
 800d104:	2b01      	cmp	r3, #1
 800d106:	d104      	bne.n	800d112 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d10c:	23f7      	movs	r3, #247	; 0xf7
 800d10e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d110:	e062      	b.n	800d1d8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d112:	2002      	movs	r0, #2
 800d114:	f7fe fa06 	bl	800b524 <memp_malloc>
 800d118:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d102      	bne.n	800d126 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d120:	23ff      	movs	r3, #255	; 0xff
 800d122:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d124:	e058      	b.n	800d1d8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	691a      	ldr	r2, [r3, #16]
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	8ada      	ldrh	r2, [r3, #22]
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	2201      	movs	r2, #1
 800d13a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	7d5a      	ldrb	r2, [r3, #21]
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	7a5a      	ldrb	r2, [r3, #9]
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	2200      	movs	r2, #0
 800d150:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	7ada      	ldrb	r2, [r3, #11]
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	7a9a      	ldrb	r2, [r3, #10]
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	8adb      	ldrh	r3, [r3, #22]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d021      	beq.n	800d1b6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d172:	4b23      	ldr	r3, [pc, #140]	; (800d200 <tcp_listen_with_backlog_and_err+0x148>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d105      	bne.n	800d188 <tcp_listen_with_backlog_and_err+0xd0>
 800d17c:	4b20      	ldr	r3, [pc, #128]	; (800d200 <tcp_listen_with_backlog_and_err+0x148>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	4a1f      	ldr	r2, [pc, #124]	; (800d200 <tcp_listen_with_backlog_and_err+0x148>)
 800d184:	6013      	str	r3, [r2, #0]
 800d186:	e013      	b.n	800d1b0 <tcp_listen_with_backlog_and_err+0xf8>
 800d188:	4b1d      	ldr	r3, [pc, #116]	; (800d200 <tcp_listen_with_backlog_and_err+0x148>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	617b      	str	r3, [r7, #20]
 800d18e:	e00c      	b.n	800d1aa <tcp_listen_with_backlog_and_err+0xf2>
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	429a      	cmp	r2, r3
 800d198:	d104      	bne.n	800d1a4 <tcp_listen_with_backlog_and_err+0xec>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	68da      	ldr	r2, [r3, #12]
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	60da      	str	r2, [r3, #12]
 800d1a2:	e005      	b.n	800d1b0 <tcp_listen_with_backlog_and_err+0xf8>
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	617b      	str	r3, [r7, #20]
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1ef      	bne.n	800d190 <tcp_listen_with_backlog_and_err+0xd8>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7ff fb6e 	bl	800c898 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	4a11      	ldr	r2, [pc, #68]	; (800d204 <tcp_listen_with_backlog_and_err+0x14c>)
 800d1c0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d1c2:	4b11      	ldr	r3, [pc, #68]	; (800d208 <tcp_listen_with_backlog_and_err+0x150>)
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	60da      	str	r2, [r3, #12]
 800d1ca:	4a0f      	ldr	r2, [pc, #60]	; (800d208 <tcp_listen_with_backlog_and_err+0x150>)
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	6013      	str	r3, [r2, #0]
 800d1d0:	f005 fc04 	bl	80129dc <tcp_timer_needed>
  res = ERR_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	7efa      	ldrb	r2, [r7, #27]
 800d1e2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d1e4:	69fb      	ldr	r3, [r7, #28]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	0801a68c 	.word	0x0801a68c
 800d1f4:	0801a880 	.word	0x0801a880
 800d1f8:	0801a6d0 	.word	0x0801a6d0
 800d1fc:	0801a8b0 	.word	0x0801a8b0
 800d200:	2000f520 	.word	0x2000f520
 800d204:	0800d055 	.word	0x0800d055
 800d208:	2000f51c 	.word	0x2000f51c

0800d20c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d106      	bne.n	800d228 <tcp_update_rcv_ann_wnd+0x1c>
 800d21a:	4b25      	ldr	r3, [pc, #148]	; (800d2b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800d21c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d220:	4924      	ldr	r1, [pc, #144]	; (800d2b4 <tcp_update_rcv_ann_wnd+0xa8>)
 800d222:	4825      	ldr	r0, [pc, #148]	; (800d2b8 <tcp_update_rcv_ann_wnd+0xac>)
 800d224:	f00a fde0 	bl	8017de8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d230:	4413      	add	r3, r2
 800d232:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d23c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d240:	bf28      	it	cs
 800d242:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d246:	b292      	uxth	r2, r2
 800d248:	4413      	add	r3, r2
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	db08      	blt.n	800d264 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	e020      	b.n	800d2a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	dd03      	ble.n	800d27a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d278:	e014      	b.n	800d2a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d28c:	d306      	bcc.n	800d29c <tcp_update_rcv_ann_wnd+0x90>
 800d28e:	4b08      	ldr	r3, [pc, #32]	; (800d2b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800d290:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d294:	4909      	ldr	r1, [pc, #36]	; (800d2bc <tcp_update_rcv_ann_wnd+0xb0>)
 800d296:	4808      	ldr	r0, [pc, #32]	; (800d2b8 <tcp_update_rcv_ann_wnd+0xac>)
 800d298:	f00a fda6 	bl	8017de8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d2a4:	2300      	movs	r3, #0
  }
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	0801a68c 	.word	0x0801a68c
 800d2b4:	0801a8e8 	.word	0x0801a8e8
 800d2b8:	0801a6d0 	.word	0x0801a6d0
 800d2bc:	0801a90c 	.word	0x0801a90c

0800d2c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d107      	bne.n	800d2e2 <tcp_recved+0x22>
 800d2d2:	4b1f      	ldr	r3, [pc, #124]	; (800d350 <tcp_recved+0x90>)
 800d2d4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d2d8:	491e      	ldr	r1, [pc, #120]	; (800d354 <tcp_recved+0x94>)
 800d2da:	481f      	ldr	r0, [pc, #124]	; (800d358 <tcp_recved+0x98>)
 800d2dc:	f00a fd84 	bl	8017de8 <iprintf>
 800d2e0:	e032      	b.n	800d348 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	7d1b      	ldrb	r3, [r3, #20]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d106      	bne.n	800d2f8 <tcp_recved+0x38>
 800d2ea:	4b19      	ldr	r3, [pc, #100]	; (800d350 <tcp_recved+0x90>)
 800d2ec:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d2f0:	491a      	ldr	r1, [pc, #104]	; (800d35c <tcp_recved+0x9c>)
 800d2f2:	4819      	ldr	r0, [pc, #100]	; (800d358 <tcp_recved+0x98>)
 800d2f4:	f00a fd78 	bl	8017de8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2fc:	887b      	ldrh	r3, [r7, #2]
 800d2fe:	4413      	add	r3, r2
 800d300:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d302:	89fb      	ldrh	r3, [r7, #14]
 800d304:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d308:	d804      	bhi.n	800d314 <tcp_recved+0x54>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d30e:	89fa      	ldrh	r2, [r7, #14]
 800d310:	429a      	cmp	r2, r3
 800d312:	d204      	bcs.n	800d31e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d31a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d31c:	e002      	b.n	800d324 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	89fa      	ldrh	r2, [r7, #14]
 800d322:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7ff ff71 	bl	800d20c <tcp_update_rcv_ann_wnd>
 800d32a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d332:	d309      	bcc.n	800d348 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	8b5b      	ldrh	r3, [r3, #26]
 800d338:	f043 0302 	orr.w	r3, r3, #2
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f004 fbc4 	bl	8011ad0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	0801a68c 	.word	0x0801a68c
 800d354:	0801a928 	.word	0x0801a928
 800d358:	0801a6d0 	.word	0x0801a6d0
 800d35c:	0801a940 	.word	0x0801a940

0800d360 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d366:	2300      	movs	r3, #0
 800d368:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d36a:	4b1e      	ldr	r3, [pc, #120]	; (800d3e4 <tcp_new_port+0x84>)
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	3301      	adds	r3, #1
 800d370:	b29a      	uxth	r2, r3
 800d372:	4b1c      	ldr	r3, [pc, #112]	; (800d3e4 <tcp_new_port+0x84>)
 800d374:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d376:	4b1b      	ldr	r3, [pc, #108]	; (800d3e4 <tcp_new_port+0x84>)
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d37e:	4293      	cmp	r3, r2
 800d380:	d103      	bne.n	800d38a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d382:	4b18      	ldr	r3, [pc, #96]	; (800d3e4 <tcp_new_port+0x84>)
 800d384:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d388:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d38a:	2300      	movs	r3, #0
 800d38c:	71fb      	strb	r3, [r7, #7]
 800d38e:	e01e      	b.n	800d3ce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	4a15      	ldr	r2, [pc, #84]	; (800d3e8 <tcp_new_port+0x88>)
 800d394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	603b      	str	r3, [r7, #0]
 800d39c:	e011      	b.n	800d3c2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	8ada      	ldrh	r2, [r3, #22]
 800d3a2:	4b10      	ldr	r3, [pc, #64]	; (800d3e4 <tcp_new_port+0x84>)
 800d3a4:	881b      	ldrh	r3, [r3, #0]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d108      	bne.n	800d3bc <tcp_new_port+0x5c>
        n++;
 800d3aa:	88bb      	ldrh	r3, [r7, #4]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d3b0:	88bb      	ldrh	r3, [r7, #4]
 800d3b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3b6:	d3d8      	bcc.n	800d36a <tcp_new_port+0xa>
          return 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e00d      	b.n	800d3d8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	603b      	str	r3, [r7, #0]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1ea      	bne.n	800d39e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	71fb      	strb	r3, [r7, #7]
 800d3ce:	79fb      	ldrb	r3, [r7, #7]
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d9dd      	bls.n	800d390 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d3d4:	4b03      	ldr	r3, [pc, #12]	; (800d3e4 <tcp_new_port+0x84>)
 800d3d6:	881b      	ldrh	r3, [r3, #0]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr
 800d3e4:	20000010 	.word	0x20000010
 800d3e8:	08026b7c 	.word	0x08026b7c

0800d3ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d3ec:	b5b0      	push	{r4, r5, r7, lr}
 800d3ee:	b090      	sub	sp, #64	; 0x40
 800d3f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d3f8:	4b94      	ldr	r3, [pc, #592]	; (800d64c <tcp_slowtmr+0x260>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	4a93      	ldr	r2, [pc, #588]	; (800d64c <tcp_slowtmr+0x260>)
 800d400:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d402:	4b93      	ldr	r3, [pc, #588]	; (800d650 <tcp_slowtmr+0x264>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	3301      	adds	r3, #1
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	4b91      	ldr	r3, [pc, #580]	; (800d650 <tcp_slowtmr+0x264>)
 800d40c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d412:	4b90      	ldr	r3, [pc, #576]	; (800d654 <tcp_slowtmr+0x268>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d418:	e29f      	b.n	800d95a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	7d1b      	ldrb	r3, [r3, #20]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d106      	bne.n	800d430 <tcp_slowtmr+0x44>
 800d422:	4b8d      	ldr	r3, [pc, #564]	; (800d658 <tcp_slowtmr+0x26c>)
 800d424:	f240 42be 	movw	r2, #1214	; 0x4be
 800d428:	498c      	ldr	r1, [pc, #560]	; (800d65c <tcp_slowtmr+0x270>)
 800d42a:	488d      	ldr	r0, [pc, #564]	; (800d660 <tcp_slowtmr+0x274>)
 800d42c:	f00a fcdc 	bl	8017de8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	7d1b      	ldrb	r3, [r3, #20]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d106      	bne.n	800d446 <tcp_slowtmr+0x5a>
 800d438:	4b87      	ldr	r3, [pc, #540]	; (800d658 <tcp_slowtmr+0x26c>)
 800d43a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d43e:	4989      	ldr	r1, [pc, #548]	; (800d664 <tcp_slowtmr+0x278>)
 800d440:	4887      	ldr	r0, [pc, #540]	; (800d660 <tcp_slowtmr+0x274>)
 800d442:	f00a fcd1 	bl	8017de8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	7d1b      	ldrb	r3, [r3, #20]
 800d44a:	2b0a      	cmp	r3, #10
 800d44c:	d106      	bne.n	800d45c <tcp_slowtmr+0x70>
 800d44e:	4b82      	ldr	r3, [pc, #520]	; (800d658 <tcp_slowtmr+0x26c>)
 800d450:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d454:	4984      	ldr	r1, [pc, #528]	; (800d668 <tcp_slowtmr+0x27c>)
 800d456:	4882      	ldr	r0, [pc, #520]	; (800d660 <tcp_slowtmr+0x274>)
 800d458:	f00a fcc6 	bl	8017de8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	7f9a      	ldrb	r2, [r3, #30]
 800d460:	4b7b      	ldr	r3, [pc, #492]	; (800d650 <tcp_slowtmr+0x264>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	429a      	cmp	r2, r3
 800d466:	d105      	bne.n	800d474 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d472:	e272      	b.n	800d95a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d474:	4b76      	ldr	r3, [pc, #472]	; (800d650 <tcp_slowtmr+0x264>)
 800d476:	781a      	ldrb	r2, [r3, #0]
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	7d1b      	ldrb	r3, [r3, #20]
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d10a      	bne.n	800d4a6 <tcp_slowtmr+0xba>
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d496:	2b05      	cmp	r3, #5
 800d498:	d905      	bls.n	800d4a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d49a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d49e:	3301      	adds	r3, #1
 800d4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4a4:	e11e      	b.n	800d6e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4ac:	2b0b      	cmp	r3, #11
 800d4ae:	d905      	bls.n	800d4bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4ba:	e113      	b.n	800d6e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d075      	beq.n	800d5b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d006      	beq.n	800d4dc <tcp_slowtmr+0xf0>
 800d4ce:	4b62      	ldr	r3, [pc, #392]	; (800d658 <tcp_slowtmr+0x26c>)
 800d4d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d4d4:	4965      	ldr	r1, [pc, #404]	; (800d66c <tcp_slowtmr+0x280>)
 800d4d6:	4862      	ldr	r0, [pc, #392]	; (800d660 <tcp_slowtmr+0x274>)
 800d4d8:	f00a fc86 	bl	8017de8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d106      	bne.n	800d4f2 <tcp_slowtmr+0x106>
 800d4e4:	4b5c      	ldr	r3, [pc, #368]	; (800d658 <tcp_slowtmr+0x26c>)
 800d4e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d4ea:	4961      	ldr	r1, [pc, #388]	; (800d670 <tcp_slowtmr+0x284>)
 800d4ec:	485c      	ldr	r0, [pc, #368]	; (800d660 <tcp_slowtmr+0x274>)
 800d4ee:	f00a fc7b 	bl	8017de8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d4f8:	2b0b      	cmp	r3, #11
 800d4fa:	d905      	bls.n	800d508 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d500:	3301      	adds	r3, #1
 800d502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d506:	e0ed      	b.n	800d6e4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d50e:	3b01      	subs	r3, #1
 800d510:	4a58      	ldr	r2, [pc, #352]	; (800d674 <tcp_slowtmr+0x288>)
 800d512:	5cd3      	ldrb	r3, [r2, r3]
 800d514:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d518:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d51c:	7c7a      	ldrb	r2, [r7, #17]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d907      	bls.n	800d532 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d524:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d528:	3301      	adds	r3, #1
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d538:	7c7a      	ldrb	r2, [r7, #17]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	f200 80d2 	bhi.w	800d6e4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d540:	2301      	movs	r3, #1
 800d542:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d108      	bne.n	800d560 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d54e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d550:	f005 f976 	bl	8012840 <tcp_zero_window_probe>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d014      	beq.n	800d584 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d55a:	2300      	movs	r3, #0
 800d55c:	623b      	str	r3, [r7, #32]
 800d55e:	e011      	b.n	800d584 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d562:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d566:	4619      	mov	r1, r3
 800d568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d56a:	f004 f82b 	bl	80115c4 <tcp_split_unsent_seg>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d107      	bne.n	800d584 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d576:	f004 faab 	bl	8011ad0 <tcp_output>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d101      	bne.n	800d584 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	2b00      	cmp	r3, #0
 800d588:	f000 80ac 	beq.w	800d6e4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d596:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d59a:	2b06      	cmp	r3, #6
 800d59c:	f200 80a2 	bhi.w	800d6e4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d5b0:	e098      	b.n	800d6e4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	db0f      	blt.n	800d5dc <tcp_slowtmr+0x1f0>
 800d5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d008      	beq.n	800d5dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	b21a      	sxth	r2, r3
 800d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	db7b      	blt.n	800d6e4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d5ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5ee:	f004 fd67 	bl	80120c0 <tcp_rexmit_rto_prepare>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d007      	beq.n	800d608 <tcp_slowtmr+0x21c>
 800d5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d171      	bne.n	800d6e4 <tcp_slowtmr+0x2f8>
 800d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d06d      	beq.n	800d6e4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60a:	7d1b      	ldrb	r3, [r3, #20]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d03a      	beq.n	800d686 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d616:	2b0c      	cmp	r3, #12
 800d618:	bf28      	it	cs
 800d61a:	230c      	movcs	r3, #12
 800d61c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d620:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d624:	10db      	asrs	r3, r3, #3
 800d626:	b21b      	sxth	r3, r3
 800d628:	461a      	mov	r2, r3
 800d62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d630:	4413      	add	r3, r2
 800d632:	7efa      	ldrb	r2, [r7, #27]
 800d634:	4910      	ldr	r1, [pc, #64]	; (800d678 <tcp_slowtmr+0x28c>)
 800d636:	5c8a      	ldrb	r2, [r1, r2]
 800d638:	4093      	lsls	r3, r2
 800d63a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d642:	4293      	cmp	r3, r2
 800d644:	dc1a      	bgt.n	800d67c <tcp_slowtmr+0x290>
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	b21a      	sxth	r2, r3
 800d64a:	e019      	b.n	800d680 <tcp_slowtmr+0x294>
 800d64c:	2000f518 	.word	0x2000f518
 800d650:	20008a8e 	.word	0x20008a8e
 800d654:	2000f514 	.word	0x2000f514
 800d658:	0801a68c 	.word	0x0801a68c
 800d65c:	0801a9d0 	.word	0x0801a9d0
 800d660:	0801a6d0 	.word	0x0801a6d0
 800d664:	0801a9fc 	.word	0x0801a9fc
 800d668:	0801aa28 	.word	0x0801aa28
 800d66c:	0801aa58 	.word	0x0801aa58
 800d670:	0801aa8c 	.word	0x0801aa8c
 800d674:	08026b74 	.word	0x08026b74
 800d678:	08026b64 	.word	0x08026b64
 800d67c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	2200      	movs	r2, #0
 800d68a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d694:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d698:	4293      	cmp	r3, r2
 800d69a:	bf28      	it	cs
 800d69c:	4613      	movcs	r3, r2
 800d69e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d6a0:	8a7b      	ldrh	r3, [r7, #18]
 800d6a2:	085b      	lsrs	r3, r3, #1
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6b6:	005b      	lsls	r3, r3, #1
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d206      	bcs.n	800d6cc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d6de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6e0:	f004 fd5e 	bl	80121a0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e6:	7d1b      	ldrb	r3, [r3, #20]
 800d6e8:	2b06      	cmp	r3, #6
 800d6ea:	d111      	bne.n	800d710 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ee:	8b5b      	ldrh	r3, [r3, #26]
 800d6f0:	f003 0310 	and.w	r3, r3, #16
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00b      	beq.n	800d710 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6f8:	4b9d      	ldr	r3, [pc, #628]	; (800d970 <tcp_slowtmr+0x584>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fe:	6a1b      	ldr	r3, [r3, #32]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	2b28      	cmp	r3, #40	; 0x28
 800d704:	d904      	bls.n	800d710 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d70a:	3301      	adds	r3, #1
 800d70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	7a5b      	ldrb	r3, [r3, #9]
 800d714:	f003 0308 	and.w	r3, r3, #8
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d04c      	beq.n	800d7b6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d720:	2b04      	cmp	r3, #4
 800d722:	d003      	beq.n	800d72c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d726:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d728:	2b07      	cmp	r3, #7
 800d72a:	d144      	bne.n	800d7b6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d72c:	4b90      	ldr	r3, [pc, #576]	; (800d970 <tcp_slowtmr+0x584>)
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	6a1b      	ldr	r3, [r3, #32]
 800d734:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d73c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d740:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d744:	498b      	ldr	r1, [pc, #556]	; (800d974 <tcp_slowtmr+0x588>)
 800d746:	fba1 1303 	umull	r1, r3, r1, r3
 800d74a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d90a      	bls.n	800d766 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d754:	3301      	adds	r3, #1
 800d756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d75a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d75e:	3301      	adds	r3, #1
 800d760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d764:	e027      	b.n	800d7b6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d766:	4b82      	ldr	r3, [pc, #520]	; (800d970 <tcp_slowtmr+0x584>)
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d778:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d77c:	4618      	mov	r0, r3
 800d77e:	4b7e      	ldr	r3, [pc, #504]	; (800d978 <tcp_slowtmr+0x58c>)
 800d780:	fb03 f300 	mul.w	r3, r3, r0
 800d784:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d786:	497b      	ldr	r1, [pc, #492]	; (800d974 <tcp_slowtmr+0x588>)
 800d788:	fba1 1303 	umull	r1, r3, r1, r3
 800d78c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d78e:	429a      	cmp	r2, r3
 800d790:	d911      	bls.n	800d7b6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d794:	f005 f814 	bl	80127c0 <tcp_keepalive>
 800d798:	4603      	mov	r3, r0
 800d79a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d79e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d107      	bne.n	800d7b6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d011      	beq.n	800d7e2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d7be:	4b6c      	ldr	r3, [pc, #432]	; (800d970 <tcp_slowtmr+0x584>)
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c4:	6a1b      	ldr	r3, [r3, #32]
 800d7c6:	1ad2      	subs	r2, r2, r3
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	440b      	add	r3, r1
 800d7d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d302      	bcc.n	800d7e2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d7dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7de:	f000 fec3 	bl	800e568 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	7d1b      	ldrb	r3, [r3, #20]
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d10b      	bne.n	800d802 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d7ea:	4b61      	ldr	r3, [pc, #388]	; (800d970 <tcp_slowtmr+0x584>)
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f0:	6a1b      	ldr	r3, [r3, #32]
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	2b28      	cmp	r3, #40	; 0x28
 800d7f6:	d904      	bls.n	800d802 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d7f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d804:	7d1b      	ldrb	r3, [r3, #20]
 800d806:	2b09      	cmp	r3, #9
 800d808:	d10b      	bne.n	800d822 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d80a:	4b59      	ldr	r3, [pc, #356]	; (800d970 <tcp_slowtmr+0x584>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	2bf0      	cmp	r3, #240	; 0xf0
 800d816:	d904      	bls.n	800d822 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d81c:	3301      	adds	r3, #1
 800d81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d826:	2b00      	cmp	r3, #0
 800d828:	d060      	beq.n	800d8ec <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d830:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d834:	f000 fce4 	bl	800e200 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d010      	beq.n	800d860 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d83e:	4b4f      	ldr	r3, [pc, #316]	; (800d97c <tcp_slowtmr+0x590>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d844:	429a      	cmp	r2, r3
 800d846:	d106      	bne.n	800d856 <tcp_slowtmr+0x46a>
 800d848:	4b4d      	ldr	r3, [pc, #308]	; (800d980 <tcp_slowtmr+0x594>)
 800d84a:	f240 526d 	movw	r2, #1389	; 0x56d
 800d84e:	494d      	ldr	r1, [pc, #308]	; (800d984 <tcp_slowtmr+0x598>)
 800d850:	484d      	ldr	r0, [pc, #308]	; (800d988 <tcp_slowtmr+0x59c>)
 800d852:	f00a fac9 	bl	8017de8 <iprintf>
        prev->next = pcb->next;
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	68da      	ldr	r2, [r3, #12]
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	60da      	str	r2, [r3, #12]
 800d85e:	e00f      	b.n	800d880 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d860:	4b46      	ldr	r3, [pc, #280]	; (800d97c <tcp_slowtmr+0x590>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d866:	429a      	cmp	r2, r3
 800d868:	d006      	beq.n	800d878 <tcp_slowtmr+0x48c>
 800d86a:	4b45      	ldr	r3, [pc, #276]	; (800d980 <tcp_slowtmr+0x594>)
 800d86c:	f240 5271 	movw	r2, #1393	; 0x571
 800d870:	4946      	ldr	r1, [pc, #280]	; (800d98c <tcp_slowtmr+0x5a0>)
 800d872:	4845      	ldr	r0, [pc, #276]	; (800d988 <tcp_slowtmr+0x59c>)
 800d874:	f00a fab8 	bl	8017de8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	4a3f      	ldr	r2, [pc, #252]	; (800d97c <tcp_slowtmr+0x590>)
 800d87e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d884:	2b00      	cmp	r3, #0
 800d886:	d013      	beq.n	800d8b0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d890:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d894:	3304      	adds	r3, #4
 800d896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d898:	8ad2      	ldrh	r2, [r2, #22]
 800d89a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d89c:	8b09      	ldrh	r1, [r1, #24]
 800d89e:	9102      	str	r1, [sp, #8]
 800d8a0:	9201      	str	r2, [sp, #4]
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	462b      	mov	r3, r5
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8ac:	f004 fed4 	bl	8012658 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	7d1b      	ldrb	r3, [r3, #20]
 800d8ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d8c6:	6838      	ldr	r0, [r7, #0]
 800d8c8:	f7fe ffe6 	bl	800c898 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d8cc:	4b30      	ldr	r3, [pc, #192]	; (800d990 <tcp_slowtmr+0x5a4>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d004      	beq.n	800d8e2 <tcp_slowtmr+0x4f6>
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f06f 010c 	mvn.w	r1, #12
 800d8de:	68b8      	ldr	r0, [r7, #8]
 800d8e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d8e2:	4b2b      	ldr	r3, [pc, #172]	; (800d990 <tcp_slowtmr+0x5a4>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d037      	beq.n	800d95a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d8ea:	e590      	b.n	800d40e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f8:	7f1b      	ldrb	r3, [r3, #28]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d900:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d904:	7f1a      	ldrb	r2, [r3, #28]
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	7f5b      	ldrb	r3, [r3, #29]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d325      	bcc.n	800d95a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d910:	2200      	movs	r2, #0
 800d912:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d914:	4b1e      	ldr	r3, [pc, #120]	; (800d990 <tcp_slowtmr+0x5a4>)
 800d916:	2200      	movs	r2, #0
 800d918:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00b      	beq.n	800d93c <tcp_slowtmr+0x550>
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d92c:	6912      	ldr	r2, [r2, #16]
 800d92e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d930:	4610      	mov	r0, r2
 800d932:	4798      	blx	r3
 800d934:	4603      	mov	r3, r0
 800d936:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d93a:	e002      	b.n	800d942 <tcp_slowtmr+0x556>
 800d93c:	2300      	movs	r3, #0
 800d93e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d942:	4b13      	ldr	r3, [pc, #76]	; (800d990 <tcp_slowtmr+0x5a4>)
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d000      	beq.n	800d94c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d94a:	e560      	b.n	800d40e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d94c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d950:	2b00      	cmp	r3, #0
 800d952:	d102      	bne.n	800d95a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d956:	f004 f8bb 	bl	8011ad0 <tcp_output>
  while (pcb != NULL) {
 800d95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f47f ad5c 	bne.w	800d41a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d962:	2300      	movs	r3, #0
 800d964:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d966:	4b0b      	ldr	r3, [pc, #44]	; (800d994 <tcp_slowtmr+0x5a8>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d96c:	e067      	b.n	800da3e <tcp_slowtmr+0x652>
 800d96e:	bf00      	nop
 800d970:	2000f518 	.word	0x2000f518
 800d974:	10624dd3 	.word	0x10624dd3
 800d978:	000124f8 	.word	0x000124f8
 800d97c:	2000f514 	.word	0x2000f514
 800d980:	0801a68c 	.word	0x0801a68c
 800d984:	0801aac4 	.word	0x0801aac4
 800d988:	0801a6d0 	.word	0x0801a6d0
 800d98c:	0801aaf0 	.word	0x0801aaf0
 800d990:	2000f510 	.word	0x2000f510
 800d994:	2000f524 	.word	0x2000f524
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	7d1b      	ldrb	r3, [r3, #20]
 800d99c:	2b0a      	cmp	r3, #10
 800d99e:	d006      	beq.n	800d9ae <tcp_slowtmr+0x5c2>
 800d9a0:	4b2a      	ldr	r3, [pc, #168]	; (800da4c <tcp_slowtmr+0x660>)
 800d9a2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d9a6:	492a      	ldr	r1, [pc, #168]	; (800da50 <tcp_slowtmr+0x664>)
 800d9a8:	482a      	ldr	r0, [pc, #168]	; (800da54 <tcp_slowtmr+0x668>)
 800d9aa:	f00a fa1d 	bl	8017de8 <iprintf>
    pcb_remove = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d9b4:	4b28      	ldr	r3, [pc, #160]	; (800da58 <tcp_slowtmr+0x66c>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ba:	6a1b      	ldr	r3, [r3, #32]
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	2bf0      	cmp	r3, #240	; 0xf0
 800d9c0:	d904      	bls.n	800d9cc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d02f      	beq.n	800da34 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d9d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9d6:	f000 fc13 	bl	800e200 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d010      	beq.n	800da02 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d9e0:	4b1e      	ldr	r3, [pc, #120]	; (800da5c <tcp_slowtmr+0x670>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d106      	bne.n	800d9f8 <tcp_slowtmr+0x60c>
 800d9ea:	4b18      	ldr	r3, [pc, #96]	; (800da4c <tcp_slowtmr+0x660>)
 800d9ec:	f240 52af 	movw	r2, #1455	; 0x5af
 800d9f0:	491b      	ldr	r1, [pc, #108]	; (800da60 <tcp_slowtmr+0x674>)
 800d9f2:	4818      	ldr	r0, [pc, #96]	; (800da54 <tcp_slowtmr+0x668>)
 800d9f4:	f00a f9f8 	bl	8017de8 <iprintf>
        prev->next = pcb->next;
 800d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fa:	68da      	ldr	r2, [r3, #12]
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	60da      	str	r2, [r3, #12]
 800da00:	e00f      	b.n	800da22 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800da02:	4b16      	ldr	r3, [pc, #88]	; (800da5c <tcp_slowtmr+0x670>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da08:	429a      	cmp	r2, r3
 800da0a:	d006      	beq.n	800da1a <tcp_slowtmr+0x62e>
 800da0c:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <tcp_slowtmr+0x660>)
 800da0e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800da12:	4914      	ldr	r1, [pc, #80]	; (800da64 <tcp_slowtmr+0x678>)
 800da14:	480f      	ldr	r0, [pc, #60]	; (800da54 <tcp_slowtmr+0x668>)
 800da16:	f00a f9e7 	bl	8017de8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	4a0f      	ldr	r2, [pc, #60]	; (800da5c <tcp_slowtmr+0x670>)
 800da20:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800da22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da24:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800da2c:	69f8      	ldr	r0, [r7, #28]
 800da2e:	f7fe ff33 	bl	800c898 <tcp_free>
 800da32:	e004      	b.n	800da3e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800da3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1a9      	bne.n	800d998 <tcp_slowtmr+0x5ac>
    }
  }
}
 800da44:	bf00      	nop
 800da46:	3730      	adds	r7, #48	; 0x30
 800da48:	46bd      	mov	sp, r7
 800da4a:	bdb0      	pop	{r4, r5, r7, pc}
 800da4c:	0801a68c 	.word	0x0801a68c
 800da50:	0801ab1c 	.word	0x0801ab1c
 800da54:	0801a6d0 	.word	0x0801a6d0
 800da58:	2000f518 	.word	0x2000f518
 800da5c:	2000f524 	.word	0x2000f524
 800da60:	0801ab4c 	.word	0x0801ab4c
 800da64:	0801ab74 	.word	0x0801ab74

0800da68 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800da6e:	4b2d      	ldr	r3, [pc, #180]	; (800db24 <tcp_fasttmr+0xbc>)
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	3301      	adds	r3, #1
 800da74:	b2da      	uxtb	r2, r3
 800da76:	4b2b      	ldr	r3, [pc, #172]	; (800db24 <tcp_fasttmr+0xbc>)
 800da78:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800da7a:	4b2b      	ldr	r3, [pc, #172]	; (800db28 <tcp_fasttmr+0xc0>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da80:	e048      	b.n	800db14 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	7f9a      	ldrb	r2, [r3, #30]
 800da86:	4b27      	ldr	r3, [pc, #156]	; (800db24 <tcp_fasttmr+0xbc>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d03f      	beq.n	800db0e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800da8e:	4b25      	ldr	r3, [pc, #148]	; (800db24 <tcp_fasttmr+0xbc>)
 800da90:	781a      	ldrb	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	8b5b      	ldrh	r3, [r3, #26]
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d010      	beq.n	800dac4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	8b5b      	ldrh	r3, [r3, #26]
 800daa6:	f043 0302 	orr.w	r3, r3, #2
 800daaa:	b29a      	uxth	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f004 f80d 	bl	8011ad0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	8b5b      	ldrh	r3, [r3, #26]
 800daba:	f023 0303 	bic.w	r3, r3, #3
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	8b5b      	ldrh	r3, [r3, #26]
 800dac8:	f003 0308 	and.w	r3, r3, #8
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d009      	beq.n	800dae4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	8b5b      	ldrh	r3, [r3, #26]
 800dad4:	f023 0308 	bic.w	r3, r3, #8
 800dad8:	b29a      	uxth	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7ff f86a 	bl	800cbb8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00a      	beq.n	800db08 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800daf2:	4b0e      	ldr	r3, [pc, #56]	; (800db2c <tcp_fasttmr+0xc4>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 f819 	bl	800db30 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dafe:	4b0b      	ldr	r3, [pc, #44]	; (800db2c <tcp_fasttmr+0xc4>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d000      	beq.n	800db08 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800db06:	e7b8      	b.n	800da7a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	607b      	str	r3, [r7, #4]
 800db0c:	e002      	b.n	800db14 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1b3      	bne.n	800da82 <tcp_fasttmr+0x1a>
    }
  }
}
 800db1a:	bf00      	nop
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	20008a8e 	.word	0x20008a8e
 800db28:	2000f514 	.word	0x2000f514
 800db2c:	2000f510 	.word	0x2000f510

0800db30 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800db30:	b590      	push	{r4, r7, lr}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d109      	bne.n	800db52 <tcp_process_refused_data+0x22>
 800db3e:	4b37      	ldr	r3, [pc, #220]	; (800dc1c <tcp_process_refused_data+0xec>)
 800db40:	f240 6209 	movw	r2, #1545	; 0x609
 800db44:	4936      	ldr	r1, [pc, #216]	; (800dc20 <tcp_process_refused_data+0xf0>)
 800db46:	4837      	ldr	r0, [pc, #220]	; (800dc24 <tcp_process_refused_data+0xf4>)
 800db48:	f00a f94e 	bl	8017de8 <iprintf>
 800db4c:	f06f 030f 	mvn.w	r3, #15
 800db50:	e060      	b.n	800dc14 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db56:	7b5b      	ldrb	r3, [r3, #13]
 800db58:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db5e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00b      	beq.n	800db88 <tcp_process_refused_data+0x58>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6918      	ldr	r0, [r3, #16]
 800db7a:	2300      	movs	r3, #0
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	6879      	ldr	r1, [r7, #4]
 800db80:	47a0      	blx	r4
 800db82:	4603      	mov	r3, r0
 800db84:	73fb      	strb	r3, [r7, #15]
 800db86:	e007      	b.n	800db98 <tcp_process_refused_data+0x68>
 800db88:	2300      	movs	r3, #0
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	6879      	ldr	r1, [r7, #4]
 800db8e:	2000      	movs	r0, #0
 800db90:	f000 f8c0 	bl	800dd14 <tcp_recv_null>
 800db94:	4603      	mov	r3, r0
 800db96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800db98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d12a      	bne.n	800dbf6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dba0:	7bbb      	ldrb	r3, [r7, #14]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d033      	beq.n	800dc12 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dbb2:	d005      	beq.n	800dbc0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbb8:	3301      	adds	r3, #1
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00b      	beq.n	800dbe2 <tcp_process_refused_data+0xb2>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6918      	ldr	r0, [r3, #16]
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	6879      	ldr	r1, [r7, #4]
 800dbda:	47a0      	blx	r4
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73fb      	strb	r3, [r7, #15]
 800dbe0:	e001      	b.n	800dbe6 <tcp_process_refused_data+0xb6>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dbe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbea:	f113 0f0d 	cmn.w	r3, #13
 800dbee:	d110      	bne.n	800dc12 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dbf0:	f06f 030c 	mvn.w	r3, #12
 800dbf4:	e00e      	b.n	800dc14 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbfa:	f113 0f0d 	cmn.w	r3, #13
 800dbfe:	d102      	bne.n	800dc06 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dc00:	f06f 030c 	mvn.w	r3, #12
 800dc04:	e006      	b.n	800dc14 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800dc0c:	f06f 0304 	mvn.w	r3, #4
 800dc10:	e000      	b.n	800dc14 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd90      	pop	{r4, r7, pc}
 800dc1c:	0801a68c 	.word	0x0801a68c
 800dc20:	0801ab9c 	.word	0x0801ab9c
 800dc24:	0801a6d0 	.word	0x0801a6d0

0800dc28 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dc30:	e007      	b.n	800dc42 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 f809 	bl	800dc50 <tcp_seg_free>
    seg = next;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1f4      	bne.n	800dc32 <tcp_segs_free+0xa>
  }
}
 800dc48:	bf00      	nop
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00c      	beq.n	800dc78 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d004      	beq.n	800dc70 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe fb58 	bl	800c320 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dc70:	6879      	ldr	r1, [r7, #4]
 800dc72:	2003      	movs	r0, #3
 800dc74:	f7fd fca8 	bl	800b5c8 <memp_free>
  }
}
 800dc78:	bf00      	nop
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d107      	bne.n	800dca2 <tcp_setprio+0x22>
 800dc92:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <tcp_setprio+0x30>)
 800dc94:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800dc98:	4906      	ldr	r1, [pc, #24]	; (800dcb4 <tcp_setprio+0x34>)
 800dc9a:	4807      	ldr	r0, [pc, #28]	; (800dcb8 <tcp_setprio+0x38>)
 800dc9c:	f00a f8a4 	bl	8017de8 <iprintf>
 800dca0:	e002      	b.n	800dca8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	78fa      	ldrb	r2, [r7, #3]
 800dca6:	755a      	strb	r2, [r3, #21]
}
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	0801a68c 	.word	0x0801a68c
 800dcb4:	0801abc4 	.word	0x0801abc4
 800dcb8:	0801a6d0 	.word	0x0801a6d0

0800dcbc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d106      	bne.n	800dcd8 <tcp_seg_copy+0x1c>
 800dcca:	4b0f      	ldr	r3, [pc, #60]	; (800dd08 <tcp_seg_copy+0x4c>)
 800dccc:	f240 6282 	movw	r2, #1666	; 0x682
 800dcd0:	490e      	ldr	r1, [pc, #56]	; (800dd0c <tcp_seg_copy+0x50>)
 800dcd2:	480f      	ldr	r0, [pc, #60]	; (800dd10 <tcp_seg_copy+0x54>)
 800dcd4:	f00a f888 	bl	8017de8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dcd8:	2003      	movs	r0, #3
 800dcda:	f7fd fc23 	bl	800b524 <memp_malloc>
 800dcde:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d101      	bne.n	800dcea <tcp_seg_copy+0x2e>
    return NULL;
 800dce6:	2300      	movs	r3, #0
 800dce8:	e00a      	b.n	800dd00 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dcea:	2210      	movs	r2, #16
 800dcec:	6879      	ldr	r1, [r7, #4]
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f00a f867 	bl	8017dc2 <memcpy>
  pbuf_ref(cseg->p);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe fbb7 	bl	800c46c <pbuf_ref>
  return cseg;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	0801a68c 	.word	0x0801a68c
 800dd0c:	0801abe0 	.word	0x0801abe0
 800dd10:	0801a6d0 	.word	0x0801a6d0

0800dd14 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
 800dd20:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d109      	bne.n	800dd3c <tcp_recv_null+0x28>
 800dd28:	4b12      	ldr	r3, [pc, #72]	; (800dd74 <tcp_recv_null+0x60>)
 800dd2a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dd2e:	4912      	ldr	r1, [pc, #72]	; (800dd78 <tcp_recv_null+0x64>)
 800dd30:	4812      	ldr	r0, [pc, #72]	; (800dd7c <tcp_recv_null+0x68>)
 800dd32:	f00a f859 	bl	8017de8 <iprintf>
 800dd36:	f06f 030f 	mvn.w	r3, #15
 800dd3a:	e016      	b.n	800dd6a <tcp_recv_null+0x56>

  if (p != NULL) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d009      	beq.n	800dd56 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	891b      	ldrh	r3, [r3, #8]
 800dd46:	4619      	mov	r1, r3
 800dd48:	68b8      	ldr	r0, [r7, #8]
 800dd4a:	f7ff fab9 	bl	800d2c0 <tcp_recved>
    pbuf_free(p);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7fe fae6 	bl	800c320 <pbuf_free>
 800dd54:	e008      	b.n	800dd68 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dd56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d104      	bne.n	800dd68 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dd5e:	68b8      	ldr	r0, [r7, #8]
 800dd60:	f7fe ff90 	bl	800cc84 <tcp_close>
 800dd64:	4603      	mov	r3, r0
 800dd66:	e000      	b.n	800dd6a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	0801a68c 	.word	0x0801a68c
 800dd78:	0801abfc 	.word	0x0801abfc
 800dd7c:	0801a6d0 	.word	0x0801a6d0

0800dd80 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	4603      	mov	r3, r0
 800dd88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dd8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	db01      	blt.n	800dd96 <tcp_kill_prio+0x16>
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	e000      	b.n	800dd98 <tcp_kill_prio+0x18>
 800dd96:	237f      	movs	r3, #127	; 0x7f
 800dd98:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dd9a:	7afb      	ldrb	r3, [r7, #11]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d034      	beq.n	800de0a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dda0:	7afb      	ldrb	r3, [r7, #11]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dda6:	2300      	movs	r3, #0
 800dda8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddae:	4b19      	ldr	r3, [pc, #100]	; (800de14 <tcp_kill_prio+0x94>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	617b      	str	r3, [r7, #20]
 800ddb4:	e01f      	b.n	800ddf6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	7d5b      	ldrb	r3, [r3, #21]
 800ddba:	7afa      	ldrb	r2, [r7, #11]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d80c      	bhi.n	800ddda <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ddc4:	7afa      	ldrb	r2, [r7, #11]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d112      	bne.n	800ddf0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ddca:	4b13      	ldr	r3, [pc, #76]	; (800de18 <tcp_kill_prio+0x98>)
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d80a      	bhi.n	800ddf0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ddda:	4b0f      	ldr	r3, [pc, #60]	; (800de18 <tcp_kill_prio+0x98>)
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	7d5b      	ldrb	r3, [r3, #21]
 800ddee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	617b      	str	r3, [r7, #20]
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1dc      	bne.n	800ddb6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d004      	beq.n	800de0c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800de02:	6938      	ldr	r0, [r7, #16]
 800de04:	f7ff f882 	bl	800cf0c <tcp_abort>
 800de08:	e000      	b.n	800de0c <tcp_kill_prio+0x8c>
    return;
 800de0a:	bf00      	nop
  }
}
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	2000f514 	.word	0x2000f514
 800de18:	2000f518 	.word	0x2000f518

0800de1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b086      	sub	sp, #24
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	2b08      	cmp	r3, #8
 800de2a:	d009      	beq.n	800de40 <tcp_kill_state+0x24>
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	2b09      	cmp	r3, #9
 800de30:	d006      	beq.n	800de40 <tcp_kill_state+0x24>
 800de32:	4b1a      	ldr	r3, [pc, #104]	; (800de9c <tcp_kill_state+0x80>)
 800de34:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800de38:	4919      	ldr	r1, [pc, #100]	; (800dea0 <tcp_kill_state+0x84>)
 800de3a:	481a      	ldr	r0, [pc, #104]	; (800dea4 <tcp_kill_state+0x88>)
 800de3c:	f009 ffd4 	bl	8017de8 <iprintf>

  inactivity = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800de44:	2300      	movs	r3, #0
 800de46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de48:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <tcp_kill_state+0x8c>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	e017      	b.n	800de80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	7d1b      	ldrb	r3, [r3, #20]
 800de54:	79fa      	ldrb	r2, [r7, #7]
 800de56:	429a      	cmp	r2, r3
 800de58:	d10f      	bne.n	800de7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de5a:	4b14      	ldr	r3, [pc, #80]	; (800deac <tcp_kill_state+0x90>)
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	6a1b      	ldr	r3, [r3, #32]
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	429a      	cmp	r2, r3
 800de68:	d807      	bhi.n	800de7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800de6a:	4b10      	ldr	r3, [pc, #64]	; (800deac <tcp_kill_state+0x90>)
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	6a1b      	ldr	r3, [r3, #32]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	617b      	str	r3, [r7, #20]
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e4      	bne.n	800de50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d003      	beq.n	800de94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800de8c:	2100      	movs	r1, #0
 800de8e:	6938      	ldr	r0, [r7, #16]
 800de90:	f7fe ff7e 	bl	800cd90 <tcp_abandon>
  }
}
 800de94:	bf00      	nop
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	0801a68c 	.word	0x0801a68c
 800dea0:	0801ac18 	.word	0x0801ac18
 800dea4:	0801a6d0 	.word	0x0801a6d0
 800dea8:	2000f514 	.word	0x2000f514
 800deac:	2000f518 	.word	0x2000f518

0800deb0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800debe:	4b12      	ldr	r3, [pc, #72]	; (800df08 <tcp_kill_timewait+0x58>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	60fb      	str	r3, [r7, #12]
 800dec4:	e012      	b.n	800deec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dec6:	4b11      	ldr	r3, [pc, #68]	; (800df0c <tcp_kill_timewait+0x5c>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6a1b      	ldr	r3, [r3, #32]
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d807      	bhi.n	800dee6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ded6:	4b0d      	ldr	r3, [pc, #52]	; (800df0c <tcp_kill_timewait+0x5c>)
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	1ad3      	subs	r3, r2, r3
 800dee0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1e9      	bne.n	800dec6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800def8:	68b8      	ldr	r0, [r7, #8]
 800defa:	f7ff f807 	bl	800cf0c <tcp_abort>
  }
}
 800defe:	bf00      	nop
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	2000f524 	.word	0x2000f524
 800df0c:	2000f518 	.word	0x2000f518

0800df10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800df16:	4b10      	ldr	r3, [pc, #64]	; (800df58 <tcp_handle_closepend+0x48>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800df1c:	e014      	b.n	800df48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	8b5b      	ldrh	r3, [r3, #26]
 800df28:	f003 0308 	and.w	r3, r3, #8
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d009      	beq.n	800df44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	8b5b      	ldrh	r3, [r3, #26]
 800df34:	f023 0308 	bic.w	r3, r3, #8
 800df38:	b29a      	uxth	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7fe fe3a 	bl	800cbb8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1e7      	bne.n	800df1e <tcp_handle_closepend+0xe>
  }
}
 800df4e:	bf00      	nop
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	2000f514 	.word	0x2000f514

0800df5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	4603      	mov	r3, r0
 800df64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df66:	2001      	movs	r0, #1
 800df68:	f7fd fadc 	bl	800b524 <memp_malloc>
 800df6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d126      	bne.n	800dfc2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800df74:	f7ff ffcc 	bl	800df10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800df78:	f7ff ff9a 	bl	800deb0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df7c:	2001      	movs	r0, #1
 800df7e:	f7fd fad1 	bl	800b524 <memp_malloc>
 800df82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d11b      	bne.n	800dfc2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800df8a:	2009      	movs	r0, #9
 800df8c:	f7ff ff46 	bl	800de1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df90:	2001      	movs	r0, #1
 800df92:	f7fd fac7 	bl	800b524 <memp_malloc>
 800df96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d111      	bne.n	800dfc2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800df9e:	2008      	movs	r0, #8
 800dfa0:	f7ff ff3c 	bl	800de1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dfa4:	2001      	movs	r0, #1
 800dfa6:	f7fd fabd 	bl	800b524 <memp_malloc>
 800dfaa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d107      	bne.n	800dfc2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dfb2:	79fb      	ldrb	r3, [r7, #7]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7ff fee3 	bl	800dd80 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dfba:	2001      	movs	r0, #1
 800dfbc:	f7fd fab2 	bl	800b524 <memp_malloc>
 800dfc0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d03f      	beq.n	800e048 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dfc8:	229c      	movs	r2, #156	; 0x9c
 800dfca:	2100      	movs	r1, #0
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f009 ff03 	bl	8017dd8 <memset>
    pcb->prio = prio;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	79fa      	ldrb	r2, [r7, #7]
 800dfd6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dfde:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dfe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	22ff      	movs	r2, #255	; 0xff
 800dff6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dffe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2206      	movs	r2, #6
 800e004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2206      	movs	r2, #6
 800e00c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e014:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2201      	movs	r2, #1
 800e01a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e01e:	4b0d      	ldr	r3, [pc, #52]	; (800e054 <tcp_alloc+0xf8>)
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e026:	4b0c      	ldr	r3, [pc, #48]	; (800e058 <tcp_alloc+0xfc>)
 800e028:	781a      	ldrb	r2, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e034:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	4a08      	ldr	r2, [pc, #32]	; (800e05c <tcp_alloc+0x100>)
 800e03c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	4a07      	ldr	r2, [pc, #28]	; (800e060 <tcp_alloc+0x104>)
 800e044:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e048:	68fb      	ldr	r3, [r7, #12]
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	2000f518 	.word	0x2000f518
 800e058:	20008a8e 	.word	0x20008a8e
 800e05c:	0800dd15 	.word	0x0800dd15
 800e060:	006ddd00 	.word	0x006ddd00

0800e064 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	4603      	mov	r3, r0
 800e06c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e06e:	2040      	movs	r0, #64	; 0x40
 800e070:	f7ff ff74 	bl	800df5c <tcp_alloc>
 800e074:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e076:	68fb      	ldr	r3, [r7, #12]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	611a      	str	r2, [r3, #16]
  }
}
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
	...

0800e0a4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00e      	beq.n	800e0d2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	7d1b      	ldrb	r3, [r3, #20]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d106      	bne.n	800e0ca <tcp_recv+0x26>
 800e0bc:	4b07      	ldr	r3, [pc, #28]	; (800e0dc <tcp_recv+0x38>)
 800e0be:	f240 72df 	movw	r2, #2015	; 0x7df
 800e0c2:	4907      	ldr	r1, [pc, #28]	; (800e0e0 <tcp_recv+0x3c>)
 800e0c4:	4807      	ldr	r0, [pc, #28]	; (800e0e4 <tcp_recv+0x40>)
 800e0c6:	f009 fe8f 	bl	8017de8 <iprintf>
    pcb->recv = recv;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	683a      	ldr	r2, [r7, #0]
 800e0ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e0d2:	bf00      	nop
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	0801a68c 	.word	0x0801a68c
 800e0e0:	0801ac28 	.word	0x0801ac28
 800e0e4:	0801a6d0 	.word	0x0801a6d0

0800e0e8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00e      	beq.n	800e116 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	7d1b      	ldrb	r3, [r3, #20]
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d106      	bne.n	800e10e <tcp_sent+0x26>
 800e100:	4b07      	ldr	r3, [pc, #28]	; (800e120 <tcp_sent+0x38>)
 800e102:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e106:	4907      	ldr	r1, [pc, #28]	; (800e124 <tcp_sent+0x3c>)
 800e108:	4807      	ldr	r0, [pc, #28]	; (800e128 <tcp_sent+0x40>)
 800e10a:	f009 fe6d 	bl	8017de8 <iprintf>
    pcb->sent = sent;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	683a      	ldr	r2, [r7, #0]
 800e112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	0801a68c 	.word	0x0801a68c
 800e124:	0801ac50 	.word	0x0801ac50
 800e128:	0801a6d0 	.word	0x0801a6d0

0800e12c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00e      	beq.n	800e15a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	7d1b      	ldrb	r3, [r3, #20]
 800e140:	2b01      	cmp	r3, #1
 800e142:	d106      	bne.n	800e152 <tcp_err+0x26>
 800e144:	4b07      	ldr	r3, [pc, #28]	; (800e164 <tcp_err+0x38>)
 800e146:	f640 020d 	movw	r2, #2061	; 0x80d
 800e14a:	4907      	ldr	r1, [pc, #28]	; (800e168 <tcp_err+0x3c>)
 800e14c:	4807      	ldr	r0, [pc, #28]	; (800e16c <tcp_err+0x40>)
 800e14e:	f009 fe4b 	bl	8017de8 <iprintf>
    pcb->errf = err;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e15a:	bf00      	nop
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	0801a68c 	.word	0x0801a68c
 800e168:	0801ac78 	.word	0x0801ac78
 800e16c:	0801a6d0 	.word	0x0801a6d0

0800e170 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d008      	beq.n	800e192 <tcp_accept+0x22>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	7d1b      	ldrb	r3, [r3, #20]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d104      	bne.n	800e192 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	619a      	str	r2, [r3, #24]
  }
}
 800e192:	bf00      	nop
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
	...

0800e1a0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d107      	bne.n	800e1c4 <tcp_poll+0x24>
 800e1b4:	4b0e      	ldr	r3, [pc, #56]	; (800e1f0 <tcp_poll+0x50>)
 800e1b6:	f640 023d 	movw	r2, #2109	; 0x83d
 800e1ba:	490e      	ldr	r1, [pc, #56]	; (800e1f4 <tcp_poll+0x54>)
 800e1bc:	480e      	ldr	r0, [pc, #56]	; (800e1f8 <tcp_poll+0x58>)
 800e1be:	f009 fe13 	bl	8017de8 <iprintf>
 800e1c2:	e011      	b.n	800e1e8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	7d1b      	ldrb	r3, [r3, #20]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d106      	bne.n	800e1da <tcp_poll+0x3a>
 800e1cc:	4b08      	ldr	r3, [pc, #32]	; (800e1f0 <tcp_poll+0x50>)
 800e1ce:	f640 023e 	movw	r2, #2110	; 0x83e
 800e1d2:	490a      	ldr	r1, [pc, #40]	; (800e1fc <tcp_poll+0x5c>)
 800e1d4:	4808      	ldr	r0, [pc, #32]	; (800e1f8 <tcp_poll+0x58>)
 800e1d6:	f009 fe07 	bl	8017de8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	79fa      	ldrb	r2, [r7, #7]
 800e1e6:	775a      	strb	r2, [r3, #29]
}
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	0801a68c 	.word	0x0801a68c
 800e1f4:	0801aca0 	.word	0x0801aca0
 800e1f8:	0801a6d0 	.word	0x0801a6d0
 800e1fc:	0801acb8 	.word	0x0801acb8

0800e200 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d107      	bne.n	800e21e <tcp_pcb_purge+0x1e>
 800e20e:	4b21      	ldr	r3, [pc, #132]	; (800e294 <tcp_pcb_purge+0x94>)
 800e210:	f640 0251 	movw	r2, #2129	; 0x851
 800e214:	4920      	ldr	r1, [pc, #128]	; (800e298 <tcp_pcb_purge+0x98>)
 800e216:	4821      	ldr	r0, [pc, #132]	; (800e29c <tcp_pcb_purge+0x9c>)
 800e218:	f009 fde6 	bl	8017de8 <iprintf>
 800e21c:	e037      	b.n	800e28e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	7d1b      	ldrb	r3, [r3, #20]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d033      	beq.n	800e28e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e22a:	2b0a      	cmp	r3, #10
 800e22c:	d02f      	beq.n	800e28e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e232:	2b01      	cmp	r3, #1
 800e234:	d02b      	beq.n	800e28e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d007      	beq.n	800e24e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e242:	4618      	mov	r0, r3
 800e244:	f7fe f86c 	bl	800c320 <pbuf_free>
      pcb->refused_data = NULL;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 f986 	bl	800e568 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e262:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e268:	4618      	mov	r0, r3
 800e26a:	f7ff fcdd 	bl	800dc28 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e272:	4618      	mov	r0, r3
 800e274:	f7ff fcd8 	bl	800dc28 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2200      	movs	r2, #0
 800e27c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	0801a68c 	.word	0x0801a68c
 800e298:	0801acd8 	.word	0x0801acd8
 800e29c:	0801a6d0 	.word	0x0801a6d0

0800e2a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d106      	bne.n	800e2be <tcp_pcb_remove+0x1e>
 800e2b0:	4b3e      	ldr	r3, [pc, #248]	; (800e3ac <tcp_pcb_remove+0x10c>)
 800e2b2:	f640 0283 	movw	r2, #2179	; 0x883
 800e2b6:	493e      	ldr	r1, [pc, #248]	; (800e3b0 <tcp_pcb_remove+0x110>)
 800e2b8:	483e      	ldr	r0, [pc, #248]	; (800e3b4 <tcp_pcb_remove+0x114>)
 800e2ba:	f009 fd95 	bl	8017de8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d106      	bne.n	800e2d2 <tcp_pcb_remove+0x32>
 800e2c4:	4b39      	ldr	r3, [pc, #228]	; (800e3ac <tcp_pcb_remove+0x10c>)
 800e2c6:	f640 0284 	movw	r2, #2180	; 0x884
 800e2ca:	493b      	ldr	r1, [pc, #236]	; (800e3b8 <tcp_pcb_remove+0x118>)
 800e2cc:	4839      	ldr	r0, [pc, #228]	; (800e3b4 <tcp_pcb_remove+0x114>)
 800e2ce:	f009 fd8b 	bl	8017de8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d105      	bne.n	800e2e8 <tcp_pcb_remove+0x48>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	68da      	ldr	r2, [r3, #12]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	601a      	str	r2, [r3, #0]
 800e2e6:	e013      	b.n	800e310 <tcp_pcb_remove+0x70>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	e00c      	b.n	800e30a <tcp_pcb_remove+0x6a>
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d104      	bne.n	800e304 <tcp_pcb_remove+0x64>
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	68da      	ldr	r2, [r3, #12]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	60da      	str	r2, [r3, #12]
 800e302:	e005      	b.n	800e310 <tcp_pcb_remove+0x70>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	60fb      	str	r3, [r7, #12]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1ef      	bne.n	800e2f0 <tcp_pcb_remove+0x50>
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	2200      	movs	r2, #0
 800e314:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e316:	6838      	ldr	r0, [r7, #0]
 800e318:	f7ff ff72 	bl	800e200 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	7d1b      	ldrb	r3, [r3, #20]
 800e320:	2b0a      	cmp	r3, #10
 800e322:	d013      	beq.n	800e34c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d00f      	beq.n	800e34c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	8b5b      	ldrh	r3, [r3, #26]
 800e330:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e334:	2b00      	cmp	r3, #0
 800e336:	d009      	beq.n	800e34c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	8b5b      	ldrh	r3, [r3, #26]
 800e33c:	f043 0302 	orr.w	r3, r3, #2
 800e340:	b29a      	uxth	r2, r3
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e346:	6838      	ldr	r0, [r7, #0]
 800e348:	f003 fbc2 	bl	8011ad0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	7d1b      	ldrb	r3, [r3, #20]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d020      	beq.n	800e396 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d006      	beq.n	800e36a <tcp_pcb_remove+0xca>
 800e35c:	4b13      	ldr	r3, [pc, #76]	; (800e3ac <tcp_pcb_remove+0x10c>)
 800e35e:	f640 0293 	movw	r2, #2195	; 0x893
 800e362:	4916      	ldr	r1, [pc, #88]	; (800e3bc <tcp_pcb_remove+0x11c>)
 800e364:	4813      	ldr	r0, [pc, #76]	; (800e3b4 <tcp_pcb_remove+0x114>)
 800e366:	f009 fd3f 	bl	8017de8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d006      	beq.n	800e380 <tcp_pcb_remove+0xe0>
 800e372:	4b0e      	ldr	r3, [pc, #56]	; (800e3ac <tcp_pcb_remove+0x10c>)
 800e374:	f640 0294 	movw	r2, #2196	; 0x894
 800e378:	4911      	ldr	r1, [pc, #68]	; (800e3c0 <tcp_pcb_remove+0x120>)
 800e37a:	480e      	ldr	r0, [pc, #56]	; (800e3b4 <tcp_pcb_remove+0x114>)
 800e37c:	f009 fd34 	bl	8017de8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e384:	2b00      	cmp	r3, #0
 800e386:	d006      	beq.n	800e396 <tcp_pcb_remove+0xf6>
 800e388:	4b08      	ldr	r3, [pc, #32]	; (800e3ac <tcp_pcb_remove+0x10c>)
 800e38a:	f640 0296 	movw	r2, #2198	; 0x896
 800e38e:	490d      	ldr	r1, [pc, #52]	; (800e3c4 <tcp_pcb_remove+0x124>)
 800e390:	4808      	ldr	r0, [pc, #32]	; (800e3b4 <tcp_pcb_remove+0x114>)
 800e392:	f009 fd29 	bl	8017de8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	2200      	movs	r2, #0
 800e39a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e3a2:	bf00      	nop
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	0801a68c 	.word	0x0801a68c
 800e3b0:	0801acf4 	.word	0x0801acf4
 800e3b4:	0801a6d0 	.word	0x0801a6d0
 800e3b8:	0801ad10 	.word	0x0801ad10
 800e3bc:	0801ad30 	.word	0x0801ad30
 800e3c0:	0801ad48 	.word	0x0801ad48
 800e3c4:	0801ad64 	.word	0x0801ad64

0800e3c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d106      	bne.n	800e3e4 <tcp_next_iss+0x1c>
 800e3d6:	4b0a      	ldr	r3, [pc, #40]	; (800e400 <tcp_next_iss+0x38>)
 800e3d8:	f640 02af 	movw	r2, #2223	; 0x8af
 800e3dc:	4909      	ldr	r1, [pc, #36]	; (800e404 <tcp_next_iss+0x3c>)
 800e3de:	480a      	ldr	r0, [pc, #40]	; (800e408 <tcp_next_iss+0x40>)
 800e3e0:	f009 fd02 	bl	8017de8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e3e4:	4b09      	ldr	r3, [pc, #36]	; (800e40c <tcp_next_iss+0x44>)
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	4b09      	ldr	r3, [pc, #36]	; (800e410 <tcp_next_iss+0x48>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	4a07      	ldr	r2, [pc, #28]	; (800e40c <tcp_next_iss+0x44>)
 800e3f0:	6013      	str	r3, [r2, #0]
  return iss;
 800e3f2:	4b06      	ldr	r3, [pc, #24]	; (800e40c <tcp_next_iss+0x44>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	0801a68c 	.word	0x0801a68c
 800e404:	0801ad7c 	.word	0x0801ad7c
 800e408:	0801a6d0 	.word	0x0801a6d0
 800e40c:	20000014 	.word	0x20000014
 800e410:	2000f518 	.word	0x2000f518

0800e414 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b086      	sub	sp, #24
 800e418:	af00      	add	r7, sp, #0
 800e41a:	4603      	mov	r3, r0
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d106      	bne.n	800e436 <tcp_eff_send_mss_netif+0x22>
 800e428:	4b14      	ldr	r3, [pc, #80]	; (800e47c <tcp_eff_send_mss_netif+0x68>)
 800e42a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e42e:	4914      	ldr	r1, [pc, #80]	; (800e480 <tcp_eff_send_mss_netif+0x6c>)
 800e430:	4814      	ldr	r0, [pc, #80]	; (800e484 <tcp_eff_send_mss_netif+0x70>)
 800e432:	f009 fcd9 	bl	8017de8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d101      	bne.n	800e440 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e43c:	89fb      	ldrh	r3, [r7, #14]
 800e43e:	e019      	b.n	800e474 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e444:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e446:	8afb      	ldrh	r3, [r7, #22]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d012      	beq.n	800e472 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e44c:	2328      	movs	r3, #40	; 0x28
 800e44e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e450:	8afa      	ldrh	r2, [r7, #22]
 800e452:	8abb      	ldrh	r3, [r7, #20]
 800e454:	429a      	cmp	r2, r3
 800e456:	d904      	bls.n	800e462 <tcp_eff_send_mss_netif+0x4e>
 800e458:	8afa      	ldrh	r2, [r7, #22]
 800e45a:	8abb      	ldrh	r3, [r7, #20]
 800e45c:	1ad3      	subs	r3, r2, r3
 800e45e:	b29b      	uxth	r3, r3
 800e460:	e000      	b.n	800e464 <tcp_eff_send_mss_netif+0x50>
 800e462:	2300      	movs	r3, #0
 800e464:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e466:	8a7a      	ldrh	r2, [r7, #18]
 800e468:	89fb      	ldrh	r3, [r7, #14]
 800e46a:	4293      	cmp	r3, r2
 800e46c:	bf28      	it	cs
 800e46e:	4613      	movcs	r3, r2
 800e470:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e472:	89fb      	ldrh	r3, [r7, #14]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3718      	adds	r7, #24
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	0801a68c 	.word	0x0801a68c
 800e480:	0801ad98 	.word	0x0801ad98
 800e484:	0801a6d0 	.word	0x0801a6d0

0800e488 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d119      	bne.n	800e4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e49c:	4b10      	ldr	r3, [pc, #64]	; (800e4e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e49e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e4a2:	4910      	ldr	r1, [pc, #64]	; (800e4e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e4a4:	4810      	ldr	r0, [pc, #64]	; (800e4e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e4a6:	f009 fc9f 	bl	8017de8 <iprintf>

  while (pcb != NULL) {
 800e4aa:	e011      	b.n	800e4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d108      	bne.n	800e4ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f7fe fd24 	bl	800cf0c <tcp_abort>
      pcb = next;
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	e002      	b.n	800e4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1ea      	bne.n	800e4ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e4d6:	bf00      	nop
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	0801a68c 	.word	0x0801a68c
 800e4e4:	0801adc0 	.word	0x0801adc0
 800e4e8:	0801a6d0 	.word	0x0801a6d0

0800e4ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d02a      	beq.n	800e552 <tcp_netif_ip_addr_changed+0x66>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d026      	beq.n	800e552 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e504:	4b15      	ldr	r3, [pc, #84]	; (800e55c <tcp_netif_ip_addr_changed+0x70>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4619      	mov	r1, r3
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7ff ffbc 	bl	800e488 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e510:	4b13      	ldr	r3, [pc, #76]	; (800e560 <tcp_netif_ip_addr_changed+0x74>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4619      	mov	r1, r3
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7ff ffb6 	bl	800e488 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d017      	beq.n	800e552 <tcp_netif_ip_addr_changed+0x66>
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d013      	beq.n	800e552 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e52a:	4b0e      	ldr	r3, [pc, #56]	; (800e564 <tcp_netif_ip_addr_changed+0x78>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	60fb      	str	r3, [r7, #12]
 800e530:	e00c      	b.n	800e54c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d103      	bne.n	800e546 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	60fb      	str	r3, [r7, #12]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1ef      	bne.n	800e532 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e552:	bf00      	nop
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	2000f514 	.word	0x2000f514
 800e560:	2000f520 	.word	0x2000f520
 800e564:	2000f51c 	.word	0x2000f51c

0800e568 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e574:	2b00      	cmp	r3, #0
 800e576:	d007      	beq.n	800e588 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7ff fb53 	bl	800dc28 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e588:	bf00      	nop
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e590:	b590      	push	{r4, r7, lr}
 800e592:	b08d      	sub	sp, #52	; 0x34
 800e594:	af04      	add	r7, sp, #16
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d105      	bne.n	800e5ac <tcp_input+0x1c>
 800e5a0:	4b9b      	ldr	r3, [pc, #620]	; (800e810 <tcp_input+0x280>)
 800e5a2:	2283      	movs	r2, #131	; 0x83
 800e5a4:	499b      	ldr	r1, [pc, #620]	; (800e814 <tcp_input+0x284>)
 800e5a6:	489c      	ldr	r0, [pc, #624]	; (800e818 <tcp_input+0x288>)
 800e5a8:	f009 fc1e 	bl	8017de8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	4a9a      	ldr	r2, [pc, #616]	; (800e81c <tcp_input+0x28c>)
 800e5b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	895b      	ldrh	r3, [r3, #10]
 800e5b8:	2b13      	cmp	r3, #19
 800e5ba:	f240 83c4 	bls.w	800ed46 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e5be:	4b98      	ldr	r3, [pc, #608]	; (800e820 <tcp_input+0x290>)
 800e5c0:	695a      	ldr	r2, [r3, #20]
 800e5c2:	4b97      	ldr	r3, [pc, #604]	; (800e820 <tcp_input+0x290>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	f008 fa79 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f040 83ba 	bne.w	800ed4a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e5d6:	4b92      	ldr	r3, [pc, #584]	; (800e820 <tcp_input+0x290>)
 800e5d8:	695b      	ldr	r3, [r3, #20]
 800e5da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e5de:	2be0      	cmp	r3, #224	; 0xe0
 800e5e0:	f000 83b3 	beq.w	800ed4a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e5e4:	4b8d      	ldr	r3, [pc, #564]	; (800e81c <tcp_input+0x28c>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	899b      	ldrh	r3, [r3, #12]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fc faad 	bl	800ab4c <lwip_htons>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	0b1b      	lsrs	r3, r3, #12
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e5fe:	7cbb      	ldrb	r3, [r7, #18]
 800e600:	2b13      	cmp	r3, #19
 800e602:	f240 83a2 	bls.w	800ed4a <tcp_input+0x7ba>
 800e606:	7cbb      	ldrb	r3, [r7, #18]
 800e608:	b29a      	uxth	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	891b      	ldrh	r3, [r3, #8]
 800e60e:	429a      	cmp	r2, r3
 800e610:	f200 839b 	bhi.w	800ed4a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e614:	7cbb      	ldrb	r3, [r7, #18]
 800e616:	b29b      	uxth	r3, r3
 800e618:	3b14      	subs	r3, #20
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	4b81      	ldr	r3, [pc, #516]	; (800e824 <tcp_input+0x294>)
 800e61e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e620:	4b81      	ldr	r3, [pc, #516]	; (800e828 <tcp_input+0x298>)
 800e622:	2200      	movs	r2, #0
 800e624:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	895a      	ldrh	r2, [r3, #10]
 800e62a:	7cbb      	ldrb	r3, [r7, #18]
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	429a      	cmp	r2, r3
 800e630:	d309      	bcc.n	800e646 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e632:	4b7c      	ldr	r3, [pc, #496]	; (800e824 <tcp_input+0x294>)
 800e634:	881a      	ldrh	r2, [r3, #0]
 800e636:	4b7d      	ldr	r3, [pc, #500]	; (800e82c <tcp_input+0x29c>)
 800e638:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e63a:	7cbb      	ldrb	r3, [r7, #18]
 800e63c:	4619      	mov	r1, r3
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f7fd fde8 	bl	800c214 <pbuf_remove_header>
 800e644:	e04e      	b.n	800e6e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d105      	bne.n	800e65a <tcp_input+0xca>
 800e64e:	4b70      	ldr	r3, [pc, #448]	; (800e810 <tcp_input+0x280>)
 800e650:	22c2      	movs	r2, #194	; 0xc2
 800e652:	4977      	ldr	r1, [pc, #476]	; (800e830 <tcp_input+0x2a0>)
 800e654:	4870      	ldr	r0, [pc, #448]	; (800e818 <tcp_input+0x288>)
 800e656:	f009 fbc7 	bl	8017de8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e65a:	2114      	movs	r1, #20
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7fd fdd9 	bl	800c214 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	895a      	ldrh	r2, [r3, #10]
 800e666:	4b71      	ldr	r3, [pc, #452]	; (800e82c <tcp_input+0x29c>)
 800e668:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e66a:	4b6e      	ldr	r3, [pc, #440]	; (800e824 <tcp_input+0x294>)
 800e66c:	881a      	ldrh	r2, [r3, #0]
 800e66e:	4b6f      	ldr	r3, [pc, #444]	; (800e82c <tcp_input+0x29c>)
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	1ad3      	subs	r3, r2, r3
 800e674:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e676:	4b6d      	ldr	r3, [pc, #436]	; (800e82c <tcp_input+0x29c>)
 800e678:	881b      	ldrh	r3, [r3, #0]
 800e67a:	4619      	mov	r1, r3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7fd fdc9 	bl	800c214 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	895b      	ldrh	r3, [r3, #10]
 800e688:	8a3a      	ldrh	r2, [r7, #16]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	f200 835f 	bhi.w	800ed4e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	4a64      	ldr	r2, [pc, #400]	; (800e828 <tcp_input+0x298>)
 800e698:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	8a3a      	ldrh	r2, [r7, #16]
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fd fdb6 	bl	800c214 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	891a      	ldrh	r2, [r3, #8]
 800e6ac:	8a3b      	ldrh	r3, [r7, #16]
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	895b      	ldrh	r3, [r3, #10]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d005      	beq.n	800e6ca <tcp_input+0x13a>
 800e6be:	4b54      	ldr	r3, [pc, #336]	; (800e810 <tcp_input+0x280>)
 800e6c0:	22df      	movs	r2, #223	; 0xdf
 800e6c2:	495c      	ldr	r1, [pc, #368]	; (800e834 <tcp_input+0x2a4>)
 800e6c4:	4854      	ldr	r0, [pc, #336]	; (800e818 <tcp_input+0x288>)
 800e6c6:	f009 fb8f 	bl	8017de8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	891a      	ldrh	r2, [r3, #8]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	891b      	ldrh	r3, [r3, #8]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d005      	beq.n	800e6e4 <tcp_input+0x154>
 800e6d8:	4b4d      	ldr	r3, [pc, #308]	; (800e810 <tcp_input+0x280>)
 800e6da:	22e0      	movs	r2, #224	; 0xe0
 800e6dc:	4956      	ldr	r1, [pc, #344]	; (800e838 <tcp_input+0x2a8>)
 800e6de:	484e      	ldr	r0, [pc, #312]	; (800e818 <tcp_input+0x288>)
 800e6e0:	f009 fb82 	bl	8017de8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e6e4:	4b4d      	ldr	r3, [pc, #308]	; (800e81c <tcp_input+0x28c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	4b4b      	ldr	r3, [pc, #300]	; (800e81c <tcp_input+0x28c>)
 800e6ee:	681c      	ldr	r4, [r3, #0]
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	f7fc fa2b 	bl	800ab4c <lwip_htons>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e6fa:	4b48      	ldr	r3, [pc, #288]	; (800e81c <tcp_input+0x28c>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	885b      	ldrh	r3, [r3, #2]
 800e700:	b29a      	uxth	r2, r3
 800e702:	4b46      	ldr	r3, [pc, #280]	; (800e81c <tcp_input+0x28c>)
 800e704:	681c      	ldr	r4, [r3, #0]
 800e706:	4610      	mov	r0, r2
 800e708:	f7fc fa20 	bl	800ab4c <lwip_htons>
 800e70c:	4603      	mov	r3, r0
 800e70e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e710:	4b42      	ldr	r3, [pc, #264]	; (800e81c <tcp_input+0x28c>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685a      	ldr	r2, [r3, #4]
 800e716:	4b41      	ldr	r3, [pc, #260]	; (800e81c <tcp_input+0x28c>)
 800e718:	681c      	ldr	r4, [r3, #0]
 800e71a:	4610      	mov	r0, r2
 800e71c:	f7fc fa2b 	bl	800ab76 <lwip_htonl>
 800e720:	4603      	mov	r3, r0
 800e722:	6063      	str	r3, [r4, #4]
 800e724:	6863      	ldr	r3, [r4, #4]
 800e726:	4a45      	ldr	r2, [pc, #276]	; (800e83c <tcp_input+0x2ac>)
 800e728:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e72a:	4b3c      	ldr	r3, [pc, #240]	; (800e81c <tcp_input+0x28c>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	689a      	ldr	r2, [r3, #8]
 800e730:	4b3a      	ldr	r3, [pc, #232]	; (800e81c <tcp_input+0x28c>)
 800e732:	681c      	ldr	r4, [r3, #0]
 800e734:	4610      	mov	r0, r2
 800e736:	f7fc fa1e 	bl	800ab76 <lwip_htonl>
 800e73a:	4603      	mov	r3, r0
 800e73c:	60a3      	str	r3, [r4, #8]
 800e73e:	68a3      	ldr	r3, [r4, #8]
 800e740:	4a3f      	ldr	r2, [pc, #252]	; (800e840 <tcp_input+0x2b0>)
 800e742:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e744:	4b35      	ldr	r3, [pc, #212]	; (800e81c <tcp_input+0x28c>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	89db      	ldrh	r3, [r3, #14]
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	4b33      	ldr	r3, [pc, #204]	; (800e81c <tcp_input+0x28c>)
 800e74e:	681c      	ldr	r4, [r3, #0]
 800e750:	4610      	mov	r0, r2
 800e752:	f7fc f9fb 	bl	800ab4c <lwip_htons>
 800e756:	4603      	mov	r3, r0
 800e758:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e75a:	4b30      	ldr	r3, [pc, #192]	; (800e81c <tcp_input+0x28c>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	899b      	ldrh	r3, [r3, #12]
 800e760:	b29b      	uxth	r3, r3
 800e762:	4618      	mov	r0, r3
 800e764:	f7fc f9f2 	bl	800ab4c <lwip_htons>
 800e768:	4603      	mov	r3, r0
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e770:	b2da      	uxtb	r2, r3
 800e772:	4b34      	ldr	r3, [pc, #208]	; (800e844 <tcp_input+0x2b4>)
 800e774:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	891a      	ldrh	r2, [r3, #8]
 800e77a:	4b33      	ldr	r3, [pc, #204]	; (800e848 <tcp_input+0x2b8>)
 800e77c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e77e:	4b31      	ldr	r3, [pc, #196]	; (800e844 <tcp_input+0x2b4>)
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	f003 0303 	and.w	r3, r3, #3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00c      	beq.n	800e7a4 <tcp_input+0x214>
    tcplen++;
 800e78a:	4b2f      	ldr	r3, [pc, #188]	; (800e848 <tcp_input+0x2b8>)
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	3301      	adds	r3, #1
 800e790:	b29a      	uxth	r2, r3
 800e792:	4b2d      	ldr	r3, [pc, #180]	; (800e848 <tcp_input+0x2b8>)
 800e794:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	891a      	ldrh	r2, [r3, #8]
 800e79a:	4b2b      	ldr	r3, [pc, #172]	; (800e848 <tcp_input+0x2b8>)
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	f200 82d7 	bhi.w	800ed52 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7a8:	4b28      	ldr	r3, [pc, #160]	; (800e84c <tcp_input+0x2bc>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	61fb      	str	r3, [r7, #28]
 800e7ae:	e09d      	b.n	800e8ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	7d1b      	ldrb	r3, [r3, #20]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d105      	bne.n	800e7c4 <tcp_input+0x234>
 800e7b8:	4b15      	ldr	r3, [pc, #84]	; (800e810 <tcp_input+0x280>)
 800e7ba:	22fb      	movs	r2, #251	; 0xfb
 800e7bc:	4924      	ldr	r1, [pc, #144]	; (800e850 <tcp_input+0x2c0>)
 800e7be:	4816      	ldr	r0, [pc, #88]	; (800e818 <tcp_input+0x288>)
 800e7c0:	f009 fb12 	bl	8017de8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	7d1b      	ldrb	r3, [r3, #20]
 800e7c8:	2b0a      	cmp	r3, #10
 800e7ca:	d105      	bne.n	800e7d8 <tcp_input+0x248>
 800e7cc:	4b10      	ldr	r3, [pc, #64]	; (800e810 <tcp_input+0x280>)
 800e7ce:	22fc      	movs	r2, #252	; 0xfc
 800e7d0:	4920      	ldr	r1, [pc, #128]	; (800e854 <tcp_input+0x2c4>)
 800e7d2:	4811      	ldr	r0, [pc, #68]	; (800e818 <tcp_input+0x288>)
 800e7d4:	f009 fb08 	bl	8017de8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	7d1b      	ldrb	r3, [r3, #20]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d105      	bne.n	800e7ec <tcp_input+0x25c>
 800e7e0:	4b0b      	ldr	r3, [pc, #44]	; (800e810 <tcp_input+0x280>)
 800e7e2:	22fd      	movs	r2, #253	; 0xfd
 800e7e4:	491c      	ldr	r1, [pc, #112]	; (800e858 <tcp_input+0x2c8>)
 800e7e6:	480c      	ldr	r0, [pc, #48]	; (800e818 <tcp_input+0x288>)
 800e7e8:	f009 fafe 	bl	8017de8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	7a1b      	ldrb	r3, [r3, #8]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d033      	beq.n	800e85c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	7a1a      	ldrb	r2, [r3, #8]
 800e7f8:	4b09      	ldr	r3, [pc, #36]	; (800e820 <tcp_input+0x290>)
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e800:	3301      	adds	r3, #1
 800e802:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e804:	429a      	cmp	r2, r3
 800e806:	d029      	beq.n	800e85c <tcp_input+0x2cc>
      prev = pcb;
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	61bb      	str	r3, [r7, #24]
      continue;
 800e80c:	e06b      	b.n	800e8e6 <tcp_input+0x356>
 800e80e:	bf00      	nop
 800e810:	0801adf4 	.word	0x0801adf4
 800e814:	0801ae28 	.word	0x0801ae28
 800e818:	0801ae40 	.word	0x0801ae40
 800e81c:	20008aa0 	.word	0x20008aa0
 800e820:	2000bde0 	.word	0x2000bde0
 800e824:	20008aa4 	.word	0x20008aa4
 800e828:	20008aa8 	.word	0x20008aa8
 800e82c:	20008aa6 	.word	0x20008aa6
 800e830:	0801ae68 	.word	0x0801ae68
 800e834:	0801ae78 	.word	0x0801ae78
 800e838:	0801ae84 	.word	0x0801ae84
 800e83c:	20008ab0 	.word	0x20008ab0
 800e840:	20008ab4 	.word	0x20008ab4
 800e844:	20008abc 	.word	0x20008abc
 800e848:	20008aba 	.word	0x20008aba
 800e84c:	2000f514 	.word	0x2000f514
 800e850:	0801aea4 	.word	0x0801aea4
 800e854:	0801aecc 	.word	0x0801aecc
 800e858:	0801aef8 	.word	0x0801aef8
    }

    if (pcb->remote_port == tcphdr->src &&
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	8b1a      	ldrh	r2, [r3, #24]
 800e860:	4b94      	ldr	r3, [pc, #592]	; (800eab4 <tcp_input+0x524>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	881b      	ldrh	r3, [r3, #0]
 800e866:	b29b      	uxth	r3, r3
 800e868:	429a      	cmp	r2, r3
 800e86a:	d13a      	bne.n	800e8e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	8ada      	ldrh	r2, [r3, #22]
 800e870:	4b90      	ldr	r3, [pc, #576]	; (800eab4 <tcp_input+0x524>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	885b      	ldrh	r3, [r3, #2]
 800e876:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e878:	429a      	cmp	r2, r3
 800e87a:	d132      	bne.n	800e8e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	4b8d      	ldr	r3, [pc, #564]	; (800eab8 <tcp_input+0x528>)
 800e882:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e884:	429a      	cmp	r2, r3
 800e886:	d12c      	bne.n	800e8e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	4b8a      	ldr	r3, [pc, #552]	; (800eab8 <tcp_input+0x528>)
 800e88e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e890:	429a      	cmp	r2, r3
 800e892:	d126      	bne.n	800e8e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	69fa      	ldr	r2, [r7, #28]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d106      	bne.n	800e8ac <tcp_input+0x31c>
 800e89e:	4b87      	ldr	r3, [pc, #540]	; (800eabc <tcp_input+0x52c>)
 800e8a0:	f240 120d 	movw	r2, #269	; 0x10d
 800e8a4:	4986      	ldr	r1, [pc, #536]	; (800eac0 <tcp_input+0x530>)
 800e8a6:	4887      	ldr	r0, [pc, #540]	; (800eac4 <tcp_input+0x534>)
 800e8a8:	f009 fa9e 	bl	8017de8 <iprintf>
      if (prev != NULL) {
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00a      	beq.n	800e8c8 <tcp_input+0x338>
        prev->next = pcb->next;
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	68da      	ldr	r2, [r3, #12]
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e8ba:	4b83      	ldr	r3, [pc, #524]	; (800eac8 <tcp_input+0x538>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e8c2:	4a81      	ldr	r2, [pc, #516]	; (800eac8 <tcp_input+0x538>)
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	69fa      	ldr	r2, [r7, #28]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d111      	bne.n	800e8f6 <tcp_input+0x366>
 800e8d2:	4b7a      	ldr	r3, [pc, #488]	; (800eabc <tcp_input+0x52c>)
 800e8d4:	f240 1215 	movw	r2, #277	; 0x115
 800e8d8:	497c      	ldr	r1, [pc, #496]	; (800eacc <tcp_input+0x53c>)
 800e8da:	487a      	ldr	r0, [pc, #488]	; (800eac4 <tcp_input+0x534>)
 800e8dc:	f009 fa84 	bl	8017de8 <iprintf>
      break;
 800e8e0:	e009      	b.n	800e8f6 <tcp_input+0x366>
    }
    prev = pcb;
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	61fb      	str	r3, [r7, #28]
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f47f af5e 	bne.w	800e7b0 <tcp_input+0x220>
 800e8f4:	e000      	b.n	800e8f8 <tcp_input+0x368>
      break;
 800e8f6:	bf00      	nop
  }

  if (pcb == NULL) {
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f040 8095 	bne.w	800ea2a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e900:	4b73      	ldr	r3, [pc, #460]	; (800ead0 <tcp_input+0x540>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	61fb      	str	r3, [r7, #28]
 800e906:	e03f      	b.n	800e988 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	7d1b      	ldrb	r3, [r3, #20]
 800e90c:	2b0a      	cmp	r3, #10
 800e90e:	d006      	beq.n	800e91e <tcp_input+0x38e>
 800e910:	4b6a      	ldr	r3, [pc, #424]	; (800eabc <tcp_input+0x52c>)
 800e912:	f240 121f 	movw	r2, #287	; 0x11f
 800e916:	496f      	ldr	r1, [pc, #444]	; (800ead4 <tcp_input+0x544>)
 800e918:	486a      	ldr	r0, [pc, #424]	; (800eac4 <tcp_input+0x534>)
 800e91a:	f009 fa65 	bl	8017de8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	7a1b      	ldrb	r3, [r3, #8]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d009      	beq.n	800e93a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	7a1a      	ldrb	r2, [r3, #8]
 800e92a:	4b63      	ldr	r3, [pc, #396]	; (800eab8 <tcp_input+0x528>)
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e932:	3301      	adds	r3, #1
 800e934:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e936:	429a      	cmp	r2, r3
 800e938:	d122      	bne.n	800e980 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	8b1a      	ldrh	r2, [r3, #24]
 800e93e:	4b5d      	ldr	r3, [pc, #372]	; (800eab4 <tcp_input+0x524>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	b29b      	uxth	r3, r3
 800e946:	429a      	cmp	r2, r3
 800e948:	d11b      	bne.n	800e982 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	8ada      	ldrh	r2, [r3, #22]
 800e94e:	4b59      	ldr	r3, [pc, #356]	; (800eab4 <tcp_input+0x524>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	885b      	ldrh	r3, [r3, #2]
 800e954:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e956:	429a      	cmp	r2, r3
 800e958:	d113      	bne.n	800e982 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	685a      	ldr	r2, [r3, #4]
 800e95e:	4b56      	ldr	r3, [pc, #344]	; (800eab8 <tcp_input+0x528>)
 800e960:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e962:	429a      	cmp	r2, r3
 800e964:	d10d      	bne.n	800e982 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	4b53      	ldr	r3, [pc, #332]	; (800eab8 <tcp_input+0x528>)
 800e96c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e96e:	429a      	cmp	r2, r3
 800e970:	d107      	bne.n	800e982 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e972:	69f8      	ldr	r0, [r7, #28]
 800e974:	f000 fb52 	bl	800f01c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7fd fcd1 	bl	800c320 <pbuf_free>
        return;
 800e97e:	e1ee      	b.n	800ed5e <tcp_input+0x7ce>
        continue;
 800e980:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	61fb      	str	r3, [r7, #28]
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1bc      	bne.n	800e908 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e992:	4b51      	ldr	r3, [pc, #324]	; (800ead8 <tcp_input+0x548>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	617b      	str	r3, [r7, #20]
 800e998:	e02a      	b.n	800e9f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	7a1b      	ldrb	r3, [r3, #8]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d00c      	beq.n	800e9bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	7a1a      	ldrb	r2, [r3, #8]
 800e9a6:	4b44      	ldr	r3, [pc, #272]	; (800eab8 <tcp_input+0x528>)
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d002      	beq.n	800e9bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	61bb      	str	r3, [r7, #24]
        continue;
 800e9ba:	e016      	b.n	800e9ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	8ada      	ldrh	r2, [r3, #22]
 800e9c0:	4b3c      	ldr	r3, [pc, #240]	; (800eab4 <tcp_input+0x524>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	885b      	ldrh	r3, [r3, #2]
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d10c      	bne.n	800e9e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	4b39      	ldr	r3, [pc, #228]	; (800eab8 <tcp_input+0x528>)
 800e9d2:	695b      	ldr	r3, [r3, #20]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d00f      	beq.n	800e9f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00d      	beq.n	800e9fa <tcp_input+0x46a>
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d009      	beq.n	800e9fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	617b      	str	r3, [r7, #20]
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1d1      	bne.n	800e99a <tcp_input+0x40a>
 800e9f6:	e000      	b.n	800e9fa <tcp_input+0x46a>
            break;
 800e9f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d014      	beq.n	800ea2a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00a      	beq.n	800ea1c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	68da      	ldr	r2, [r3, #12]
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ea0e:	4b32      	ldr	r3, [pc, #200]	; (800ead8 <tcp_input+0x548>)
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ea16:	4a30      	ldr	r2, [pc, #192]	; (800ead8 <tcp_input+0x548>)
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ea1c:	6978      	ldr	r0, [r7, #20]
 800ea1e:	f000 f9ff 	bl	800ee20 <tcp_listen_input>
      }
      pbuf_free(p);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7fd fc7c 	bl	800c320 <pbuf_free>
      return;
 800ea28:	e199      	b.n	800ed5e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f000 8160 	beq.w	800ecf2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ea32:	4b2a      	ldr	r3, [pc, #168]	; (800eadc <tcp_input+0x54c>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	891a      	ldrh	r2, [r3, #8]
 800ea3c:	4b27      	ldr	r3, [pc, #156]	; (800eadc <tcp_input+0x54c>)
 800ea3e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ea40:	4a26      	ldr	r2, [pc, #152]	; (800eadc <tcp_input+0x54c>)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ea46:	4b1b      	ldr	r3, [pc, #108]	; (800eab4 <tcp_input+0x524>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a24      	ldr	r2, [pc, #144]	; (800eadc <tcp_input+0x54c>)
 800ea4c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ea4e:	4b24      	ldr	r3, [pc, #144]	; (800eae0 <tcp_input+0x550>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ea54:	4b23      	ldr	r3, [pc, #140]	; (800eae4 <tcp_input+0x554>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ea5a:	4b23      	ldr	r3, [pc, #140]	; (800eae8 <tcp_input+0x558>)
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ea60:	4b22      	ldr	r3, [pc, #136]	; (800eaec <tcp_input+0x55c>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	f003 0308 	and.w	r3, r3, #8
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d006      	beq.n	800ea7a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	7b5b      	ldrb	r3, [r3, #13]
 800ea70:	f043 0301 	orr.w	r3, r3, #1
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d038      	beq.n	800eaf4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea82:	69f8      	ldr	r0, [r7, #28]
 800ea84:	f7ff f854 	bl	800db30 <tcp_process_refused_data>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	f113 0f0d 	cmn.w	r3, #13
 800ea8e:	d007      	beq.n	800eaa0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d02d      	beq.n	800eaf4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea98:	4b15      	ldr	r3, [pc, #84]	; (800eaf0 <tcp_input+0x560>)
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d029      	beq.n	800eaf4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f040 8104 	bne.w	800ecb2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eaaa:	69f8      	ldr	r0, [r7, #28]
 800eaac:	f003 fe26 	bl	80126fc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eab0:	e0ff      	b.n	800ecb2 <tcp_input+0x722>
 800eab2:	bf00      	nop
 800eab4:	20008aa0 	.word	0x20008aa0
 800eab8:	2000bde0 	.word	0x2000bde0
 800eabc:	0801adf4 	.word	0x0801adf4
 800eac0:	0801af20 	.word	0x0801af20
 800eac4:	0801ae40 	.word	0x0801ae40
 800eac8:	2000f514 	.word	0x2000f514
 800eacc:	0801af4c 	.word	0x0801af4c
 800ead0:	2000f524 	.word	0x2000f524
 800ead4:	0801af78 	.word	0x0801af78
 800ead8:	2000f51c 	.word	0x2000f51c
 800eadc:	20008a90 	.word	0x20008a90
 800eae0:	20008ac0 	.word	0x20008ac0
 800eae4:	20008abd 	.word	0x20008abd
 800eae8:	20008ab8 	.word	0x20008ab8
 800eaec:	20008abc 	.word	0x20008abc
 800eaf0:	20008aba 	.word	0x20008aba
      }
    }
    tcp_input_pcb = pcb;
 800eaf4:	4a9b      	ldr	r2, [pc, #620]	; (800ed64 <tcp_input+0x7d4>)
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eafa:	69f8      	ldr	r0, [r7, #28]
 800eafc:	f000 fb0a 	bl	800f114 <tcp_process>
 800eb00:	4603      	mov	r3, r0
 800eb02:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eb04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb08:	f113 0f0d 	cmn.w	r3, #13
 800eb0c:	f000 80d3 	beq.w	800ecb6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800eb10:	4b95      	ldr	r3, [pc, #596]	; (800ed68 <tcp_input+0x7d8>)
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	f003 0308 	and.w	r3, r3, #8
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d015      	beq.n	800eb48 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d008      	beq.n	800eb38 <tcp_input+0x5a8>
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb2c:	69fa      	ldr	r2, [r7, #28]
 800eb2e:	6912      	ldr	r2, [r2, #16]
 800eb30:	f06f 010d 	mvn.w	r1, #13
 800eb34:	4610      	mov	r0, r2
 800eb36:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb38:	69f9      	ldr	r1, [r7, #28]
 800eb3a:	488c      	ldr	r0, [pc, #560]	; (800ed6c <tcp_input+0x7dc>)
 800eb3c:	f7ff fbb0 	bl	800e2a0 <tcp_pcb_remove>
        tcp_free(pcb);
 800eb40:	69f8      	ldr	r0, [r7, #28]
 800eb42:	f7fd fea9 	bl	800c898 <tcp_free>
 800eb46:	e0c1      	b.n	800eccc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eb4c:	4b88      	ldr	r3, [pc, #544]	; (800ed70 <tcp_input+0x7e0>)
 800eb4e:	881b      	ldrh	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01d      	beq.n	800eb90 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eb54:	4b86      	ldr	r3, [pc, #536]	; (800ed70 <tcp_input+0x7e0>)
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00a      	beq.n	800eb7a <tcp_input+0x5ea>
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb6a:	69fa      	ldr	r2, [r7, #28]
 800eb6c:	6910      	ldr	r0, [r2, #16]
 800eb6e:	89fa      	ldrh	r2, [r7, #14]
 800eb70:	69f9      	ldr	r1, [r7, #28]
 800eb72:	4798      	blx	r3
 800eb74:	4603      	mov	r3, r0
 800eb76:	74fb      	strb	r3, [r7, #19]
 800eb78:	e001      	b.n	800eb7e <tcp_input+0x5ee>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eb7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb82:	f113 0f0d 	cmn.w	r3, #13
 800eb86:	f000 8098 	beq.w	800ecba <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800eb8a:	4b79      	ldr	r3, [pc, #484]	; (800ed70 <tcp_input+0x7e0>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800eb90:	69f8      	ldr	r0, [r7, #28]
 800eb92:	f000 f905 	bl	800eda0 <tcp_input_delayed_close>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f040 8090 	bne.w	800ecbe <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800eb9e:	4b75      	ldr	r3, [pc, #468]	; (800ed74 <tcp_input+0x7e4>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d041      	beq.n	800ec2a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d006      	beq.n	800ebbc <tcp_input+0x62c>
 800ebae:	4b72      	ldr	r3, [pc, #456]	; (800ed78 <tcp_input+0x7e8>)
 800ebb0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ebb4:	4971      	ldr	r1, [pc, #452]	; (800ed7c <tcp_input+0x7ec>)
 800ebb6:	4872      	ldr	r0, [pc, #456]	; (800ed80 <tcp_input+0x7f0>)
 800ebb8:	f009 f916 	bl	8017de8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	8b5b      	ldrh	r3, [r3, #26]
 800ebc0:	f003 0310 	and.w	r3, r3, #16
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d008      	beq.n	800ebda <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ebc8:	4b6a      	ldr	r3, [pc, #424]	; (800ed74 <tcp_input+0x7e4>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fd fba7 	bl	800c320 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ebd2:	69f8      	ldr	r0, [r7, #28]
 800ebd4:	f7fe f99a 	bl	800cf0c <tcp_abort>
            goto aborted;
 800ebd8:	e078      	b.n	800eccc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00c      	beq.n	800ebfe <tcp_input+0x66e>
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	6918      	ldr	r0, [r3, #16]
 800ebee:	4b61      	ldr	r3, [pc, #388]	; (800ed74 <tcp_input+0x7e4>)
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	69f9      	ldr	r1, [r7, #28]
 800ebf6:	47a0      	blx	r4
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	74fb      	strb	r3, [r7, #19]
 800ebfc:	e008      	b.n	800ec10 <tcp_input+0x680>
 800ebfe:	4b5d      	ldr	r3, [pc, #372]	; (800ed74 <tcp_input+0x7e4>)
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	2300      	movs	r3, #0
 800ec04:	69f9      	ldr	r1, [r7, #28]
 800ec06:	2000      	movs	r0, #0
 800ec08:	f7ff f884 	bl	800dd14 <tcp_recv_null>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ec10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec14:	f113 0f0d 	cmn.w	r3, #13
 800ec18:	d053      	beq.n	800ecc2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ec1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ec22:	4b54      	ldr	r3, [pc, #336]	; (800ed74 <tcp_input+0x7e4>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ec2a:	4b4f      	ldr	r3, [pc, #316]	; (800ed68 <tcp_input+0x7d8>)
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	f003 0320 	and.w	r3, r3, #32
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d030      	beq.n	800ec98 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d009      	beq.n	800ec52 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec42:	7b5a      	ldrb	r2, [r3, #13]
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec48:	f042 0220 	orr.w	r2, r2, #32
 800ec4c:	b2d2      	uxtb	r2, r2
 800ec4e:	735a      	strb	r2, [r3, #13]
 800ec50:	e022      	b.n	800ec98 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec5a:	d005      	beq.n	800ec68 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec60:	3301      	adds	r3, #1
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00b      	beq.n	800ec8a <tcp_input+0x6fa>
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	6918      	ldr	r0, [r3, #16]
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	2200      	movs	r2, #0
 800ec80:	69f9      	ldr	r1, [r7, #28]
 800ec82:	47a0      	blx	r4
 800ec84:	4603      	mov	r3, r0
 800ec86:	74fb      	strb	r3, [r7, #19]
 800ec88:	e001      	b.n	800ec8e <tcp_input+0x6fe>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ec8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec92:	f113 0f0d 	cmn.w	r3, #13
 800ec96:	d016      	beq.n	800ecc6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ec98:	4b32      	ldr	r3, [pc, #200]	; (800ed64 <tcp_input+0x7d4>)
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ec9e:	69f8      	ldr	r0, [r7, #28]
 800eca0:	f000 f87e 	bl	800eda0 <tcp_input_delayed_close>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d10f      	bne.n	800ecca <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ecaa:	69f8      	ldr	r0, [r7, #28]
 800ecac:	f002 ff10 	bl	8011ad0 <tcp_output>
 800ecb0:	e00c      	b.n	800eccc <tcp_input+0x73c>
        goto aborted;
 800ecb2:	bf00      	nop
 800ecb4:	e00a      	b.n	800eccc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ecb6:	bf00      	nop
 800ecb8:	e008      	b.n	800eccc <tcp_input+0x73c>
              goto aborted;
 800ecba:	bf00      	nop
 800ecbc:	e006      	b.n	800eccc <tcp_input+0x73c>
          goto aborted;
 800ecbe:	bf00      	nop
 800ecc0:	e004      	b.n	800eccc <tcp_input+0x73c>
            goto aborted;
 800ecc2:	bf00      	nop
 800ecc4:	e002      	b.n	800eccc <tcp_input+0x73c>
              goto aborted;
 800ecc6:	bf00      	nop
 800ecc8:	e000      	b.n	800eccc <tcp_input+0x73c>
          goto aborted;
 800ecca:	bf00      	nop
    tcp_input_pcb = NULL;
 800eccc:	4b25      	ldr	r3, [pc, #148]	; (800ed64 <tcp_input+0x7d4>)
 800ecce:	2200      	movs	r2, #0
 800ecd0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ecd2:	4b28      	ldr	r3, [pc, #160]	; (800ed74 <tcp_input+0x7e4>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ecd8:	4b2a      	ldr	r3, [pc, #168]	; (800ed84 <tcp_input+0x7f4>)
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d03d      	beq.n	800ed5c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800ece0:	4b28      	ldr	r3, [pc, #160]	; (800ed84 <tcp_input+0x7f4>)
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fd fb1b 	bl	800c320 <pbuf_free>
      inseg.p = NULL;
 800ecea:	4b26      	ldr	r3, [pc, #152]	; (800ed84 <tcp_input+0x7f4>)
 800ecec:	2200      	movs	r2, #0
 800ecee:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ecf0:	e034      	b.n	800ed5c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ecf2:	4b25      	ldr	r3, [pc, #148]	; (800ed88 <tcp_input+0x7f8>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	899b      	ldrh	r3, [r3, #12]
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fb ff26 	bl	800ab4c <lwip_htons>
 800ed00:	4603      	mov	r3, r0
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	f003 0304 	and.w	r3, r3, #4
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d118      	bne.n	800ed3e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed0c:	4b1f      	ldr	r3, [pc, #124]	; (800ed8c <tcp_input+0x7fc>)
 800ed0e:	6819      	ldr	r1, [r3, #0]
 800ed10:	4b1f      	ldr	r3, [pc, #124]	; (800ed90 <tcp_input+0x800>)
 800ed12:	881b      	ldrh	r3, [r3, #0]
 800ed14:	461a      	mov	r2, r3
 800ed16:	4b1f      	ldr	r3, [pc, #124]	; (800ed94 <tcp_input+0x804>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed1c:	4b1a      	ldr	r3, [pc, #104]	; (800ed88 <tcp_input+0x7f8>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed20:	885b      	ldrh	r3, [r3, #2]
 800ed22:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed24:	4a18      	ldr	r2, [pc, #96]	; (800ed88 <tcp_input+0x7f8>)
 800ed26:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed28:	8812      	ldrh	r2, [r2, #0]
 800ed2a:	b292      	uxth	r2, r2
 800ed2c:	9202      	str	r2, [sp, #8]
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	4b19      	ldr	r3, [pc, #100]	; (800ed98 <tcp_input+0x808>)
 800ed32:	9300      	str	r3, [sp, #0]
 800ed34:	4b19      	ldr	r3, [pc, #100]	; (800ed9c <tcp_input+0x80c>)
 800ed36:	4602      	mov	r2, r0
 800ed38:	2000      	movs	r0, #0
 800ed3a:	f003 fc8d 	bl	8012658 <tcp_rst>
    pbuf_free(p);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7fd faee 	bl	800c320 <pbuf_free>
  return;
 800ed44:	e00a      	b.n	800ed5c <tcp_input+0x7cc>
    goto dropped;
 800ed46:	bf00      	nop
 800ed48:	e004      	b.n	800ed54 <tcp_input+0x7c4>
dropped:
 800ed4a:	bf00      	nop
 800ed4c:	e002      	b.n	800ed54 <tcp_input+0x7c4>
      goto dropped;
 800ed4e:	bf00      	nop
 800ed50:	e000      	b.n	800ed54 <tcp_input+0x7c4>
      goto dropped;
 800ed52:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f7fd fae3 	bl	800c320 <pbuf_free>
 800ed5a:	e000      	b.n	800ed5e <tcp_input+0x7ce>
  return;
 800ed5c:	bf00      	nop
}
 800ed5e:	3724      	adds	r7, #36	; 0x24
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd90      	pop	{r4, r7, pc}
 800ed64:	2000f528 	.word	0x2000f528
 800ed68:	20008abd 	.word	0x20008abd
 800ed6c:	2000f514 	.word	0x2000f514
 800ed70:	20008ab8 	.word	0x20008ab8
 800ed74:	20008ac0 	.word	0x20008ac0
 800ed78:	0801adf4 	.word	0x0801adf4
 800ed7c:	0801afa8 	.word	0x0801afa8
 800ed80:	0801ae40 	.word	0x0801ae40
 800ed84:	20008a90 	.word	0x20008a90
 800ed88:	20008aa0 	.word	0x20008aa0
 800ed8c:	20008ab4 	.word	0x20008ab4
 800ed90:	20008aba 	.word	0x20008aba
 800ed94:	20008ab0 	.word	0x20008ab0
 800ed98:	2000bdf0 	.word	0x2000bdf0
 800ed9c:	2000bdf4 	.word	0x2000bdf4

0800eda0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d106      	bne.n	800edbc <tcp_input_delayed_close+0x1c>
 800edae:	4b17      	ldr	r3, [pc, #92]	; (800ee0c <tcp_input_delayed_close+0x6c>)
 800edb0:	f240 225a 	movw	r2, #602	; 0x25a
 800edb4:	4916      	ldr	r1, [pc, #88]	; (800ee10 <tcp_input_delayed_close+0x70>)
 800edb6:	4817      	ldr	r0, [pc, #92]	; (800ee14 <tcp_input_delayed_close+0x74>)
 800edb8:	f009 f816 	bl	8017de8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800edbc:	4b16      	ldr	r3, [pc, #88]	; (800ee18 <tcp_input_delayed_close+0x78>)
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	f003 0310 	and.w	r3, r3, #16
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d01c      	beq.n	800ee02 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	8b5b      	ldrh	r3, [r3, #26]
 800edcc:	f003 0310 	and.w	r3, r3, #16
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10d      	bne.n	800edf0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d008      	beq.n	800edf0 <tcp_input_delayed_close+0x50>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	6912      	ldr	r2, [r2, #16]
 800ede8:	f06f 010e 	mvn.w	r1, #14
 800edec:	4610      	mov	r0, r2
 800edee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800edf0:	6879      	ldr	r1, [r7, #4]
 800edf2:	480a      	ldr	r0, [pc, #40]	; (800ee1c <tcp_input_delayed_close+0x7c>)
 800edf4:	f7ff fa54 	bl	800e2a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7fd fd4d 	bl	800c898 <tcp_free>
    return 1;
 800edfe:	2301      	movs	r3, #1
 800ee00:	e000      	b.n	800ee04 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	0801adf4 	.word	0x0801adf4
 800ee10:	0801afc4 	.word	0x0801afc4
 800ee14:	0801ae40 	.word	0x0801ae40
 800ee18:	20008abd 	.word	0x20008abd
 800ee1c:	2000f514 	.word	0x2000f514

0800ee20 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ee20:	b590      	push	{r4, r7, lr}
 800ee22:	b08b      	sub	sp, #44	; 0x2c
 800ee24:	af04      	add	r7, sp, #16
 800ee26:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ee28:	4b6f      	ldr	r3, [pc, #444]	; (800efe8 <tcp_listen_input+0x1c8>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	f003 0304 	and.w	r3, r3, #4
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f040 80d3 	bne.w	800efdc <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d106      	bne.n	800ee4a <tcp_listen_input+0x2a>
 800ee3c:	4b6b      	ldr	r3, [pc, #428]	; (800efec <tcp_listen_input+0x1cc>)
 800ee3e:	f240 2281 	movw	r2, #641	; 0x281
 800ee42:	496b      	ldr	r1, [pc, #428]	; (800eff0 <tcp_listen_input+0x1d0>)
 800ee44:	486b      	ldr	r0, [pc, #428]	; (800eff4 <tcp_listen_input+0x1d4>)
 800ee46:	f008 ffcf 	bl	8017de8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ee4a:	4b67      	ldr	r3, [pc, #412]	; (800efe8 <tcp_listen_input+0x1c8>)
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	f003 0310 	and.w	r3, r3, #16
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d019      	beq.n	800ee8a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee56:	4b68      	ldr	r3, [pc, #416]	; (800eff8 <tcp_listen_input+0x1d8>)
 800ee58:	6819      	ldr	r1, [r3, #0]
 800ee5a:	4b68      	ldr	r3, [pc, #416]	; (800effc <tcp_listen_input+0x1dc>)
 800ee5c:	881b      	ldrh	r3, [r3, #0]
 800ee5e:	461a      	mov	r2, r3
 800ee60:	4b67      	ldr	r3, [pc, #412]	; (800f000 <tcp_listen_input+0x1e0>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee66:	4b67      	ldr	r3, [pc, #412]	; (800f004 <tcp_listen_input+0x1e4>)
 800ee68:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee6a:	885b      	ldrh	r3, [r3, #2]
 800ee6c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee6e:	4a65      	ldr	r2, [pc, #404]	; (800f004 <tcp_listen_input+0x1e4>)
 800ee70:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee72:	8812      	ldrh	r2, [r2, #0]
 800ee74:	b292      	uxth	r2, r2
 800ee76:	9202      	str	r2, [sp, #8]
 800ee78:	9301      	str	r3, [sp, #4]
 800ee7a:	4b63      	ldr	r3, [pc, #396]	; (800f008 <tcp_listen_input+0x1e8>)
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	4b63      	ldr	r3, [pc, #396]	; (800f00c <tcp_listen_input+0x1ec>)
 800ee80:	4602      	mov	r2, r0
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f003 fbe8 	bl	8012658 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ee88:	e0aa      	b.n	800efe0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800ee8a:	4b57      	ldr	r3, [pc, #348]	; (800efe8 <tcp_listen_input+0x1c8>)
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	f003 0302 	and.w	r3, r3, #2
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f000 80a4 	beq.w	800efe0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7d5b      	ldrb	r3, [r3, #21]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff f85d 	bl	800df5c <tcp_alloc>
 800eea2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d111      	bne.n	800eece <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00a      	beq.n	800eec8 <tcp_listen_input+0xa8>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	6910      	ldr	r0, [r2, #16]
 800eeba:	f04f 32ff 	mov.w	r2, #4294967295
 800eebe:	2100      	movs	r1, #0
 800eec0:	4798      	blx	r3
 800eec2:	4603      	mov	r3, r0
 800eec4:	73bb      	strb	r3, [r7, #14]
      return;
 800eec6:	e08c      	b.n	800efe2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eec8:	23f0      	movs	r3, #240	; 0xf0
 800eeca:	73bb      	strb	r3, [r7, #14]
      return;
 800eecc:	e089      	b.n	800efe2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800eece:	4b50      	ldr	r3, [pc, #320]	; (800f010 <tcp_listen_input+0x1f0>)
 800eed0:	695a      	ldr	r2, [r3, #20]
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800eed6:	4b4e      	ldr	r3, [pc, #312]	; (800f010 <tcp_listen_input+0x1f0>)
 800eed8:	691a      	ldr	r2, [r3, #16]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	8ada      	ldrh	r2, [r3, #22]
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800eee6:	4b47      	ldr	r3, [pc, #284]	; (800f004 <tcp_listen_input+0x1e4>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	881b      	ldrh	r3, [r3, #0]
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	2203      	movs	r2, #3
 800eef6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800eef8:	4b41      	ldr	r3, [pc, #260]	; (800f000 <tcp_listen_input+0x1e0>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	1c5a      	adds	r2, r3, #1
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ef0a:	6978      	ldr	r0, [r7, #20]
 800ef0c:	f7ff fa5c 	bl	800e3c8 <tcp_next_iss>
 800ef10:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	693a      	ldr	r2, [r7, #16]
 800ef16:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	693a      	ldr	r2, [r7, #16]
 800ef1c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	693a      	ldr	r2, [r7, #16]
 800ef22:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	693a      	ldr	r2, [r7, #16]
 800ef28:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ef2a:	4b35      	ldr	r3, [pc, #212]	; (800f000 <tcp_listen_input+0x1e0>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	1e5a      	subs	r2, r3, #1
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	691a      	ldr	r2, [r3, #16]
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	7a5b      	ldrb	r3, [r3, #9]
 800ef46:	f003 030c 	and.w	r3, r3, #12
 800ef4a:	b2da      	uxtb	r2, r3
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	7a1a      	ldrb	r2, [r3, #8]
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ef58:	4b2e      	ldr	r3, [pc, #184]	; (800f014 <tcp_listen_input+0x1f4>)
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	60da      	str	r2, [r3, #12]
 800ef60:	4a2c      	ldr	r2, [pc, #176]	; (800f014 <tcp_listen_input+0x1f4>)
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	6013      	str	r3, [r2, #0]
 800ef66:	f003 fd39 	bl	80129dc <tcp_timer_needed>
 800ef6a:	4b2b      	ldr	r3, [pc, #172]	; (800f018 <tcp_listen_input+0x1f8>)
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ef70:	6978      	ldr	r0, [r7, #20]
 800ef72:	f001 fd8f 	bl	8010a94 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ef76:	4b23      	ldr	r3, [pc, #140]	; (800f004 <tcp_listen_input+0x1e4>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	89db      	ldrh	r3, [r3, #14]
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	3304      	adds	r3, #4
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f007 fadf 	bl	801655c <ip4_route>
 800ef9e:	4601      	mov	r1, r0
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	3304      	adds	r3, #4
 800efa4:	461a      	mov	r2, r3
 800efa6:	4620      	mov	r0, r4
 800efa8:	f7ff fa34 	bl	800e414 <tcp_eff_send_mss_netif>
 800efac:	4603      	mov	r3, r0
 800efae:	461a      	mov	r2, r3
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800efb4:	2112      	movs	r1, #18
 800efb6:	6978      	ldr	r0, [r7, #20]
 800efb8:	f002 fc9c 	bl	80118f4 <tcp_enqueue_flags>
 800efbc:	4603      	mov	r3, r0
 800efbe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800efc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d004      	beq.n	800efd2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800efc8:	2100      	movs	r1, #0
 800efca:	6978      	ldr	r0, [r7, #20]
 800efcc:	f7fd fee0 	bl	800cd90 <tcp_abandon>
      return;
 800efd0:	e007      	b.n	800efe2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800efd2:	6978      	ldr	r0, [r7, #20]
 800efd4:	f002 fd7c 	bl	8011ad0 <tcp_output>
  return;
 800efd8:	bf00      	nop
 800efda:	e001      	b.n	800efe0 <tcp_listen_input+0x1c0>
    return;
 800efdc:	bf00      	nop
 800efde:	e000      	b.n	800efe2 <tcp_listen_input+0x1c2>
  return;
 800efe0:	bf00      	nop
}
 800efe2:	371c      	adds	r7, #28
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd90      	pop	{r4, r7, pc}
 800efe8:	20008abc 	.word	0x20008abc
 800efec:	0801adf4 	.word	0x0801adf4
 800eff0:	0801afec 	.word	0x0801afec
 800eff4:	0801ae40 	.word	0x0801ae40
 800eff8:	20008ab4 	.word	0x20008ab4
 800effc:	20008aba 	.word	0x20008aba
 800f000:	20008ab0 	.word	0x20008ab0
 800f004:	20008aa0 	.word	0x20008aa0
 800f008:	2000bdf0 	.word	0x2000bdf0
 800f00c:	2000bdf4 	.word	0x2000bdf4
 800f010:	2000bde0 	.word	0x2000bde0
 800f014:	2000f514 	.word	0x2000f514
 800f018:	2000f510 	.word	0x2000f510

0800f01c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af04      	add	r7, sp, #16
 800f022:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f024:	4b30      	ldr	r3, [pc, #192]	; (800f0e8 <tcp_timewait_input+0xcc>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	f003 0304 	and.w	r3, r3, #4
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d154      	bne.n	800f0da <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d106      	bne.n	800f044 <tcp_timewait_input+0x28>
 800f036:	4b2d      	ldr	r3, [pc, #180]	; (800f0ec <tcp_timewait_input+0xd0>)
 800f038:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f03c:	492c      	ldr	r1, [pc, #176]	; (800f0f0 <tcp_timewait_input+0xd4>)
 800f03e:	482d      	ldr	r0, [pc, #180]	; (800f0f4 <tcp_timewait_input+0xd8>)
 800f040:	f008 fed2 	bl	8017de8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f044:	4b28      	ldr	r3, [pc, #160]	; (800f0e8 <tcp_timewait_input+0xcc>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f003 0302 	and.w	r3, r3, #2
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d02a      	beq.n	800f0a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f050:	4b29      	ldr	r3, [pc, #164]	; (800f0f8 <tcp_timewait_input+0xdc>)
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f058:	1ad3      	subs	r3, r2, r3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	db2d      	blt.n	800f0ba <tcp_timewait_input+0x9e>
 800f05e:	4b26      	ldr	r3, [pc, #152]	; (800f0f8 <tcp_timewait_input+0xdc>)
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f066:	6879      	ldr	r1, [r7, #4]
 800f068:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f06a:	440b      	add	r3, r1
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	2b00      	cmp	r3, #0
 800f070:	dc23      	bgt.n	800f0ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f072:	4b22      	ldr	r3, [pc, #136]	; (800f0fc <tcp_timewait_input+0xe0>)
 800f074:	6819      	ldr	r1, [r3, #0]
 800f076:	4b22      	ldr	r3, [pc, #136]	; (800f100 <tcp_timewait_input+0xe4>)
 800f078:	881b      	ldrh	r3, [r3, #0]
 800f07a:	461a      	mov	r2, r3
 800f07c:	4b1e      	ldr	r3, [pc, #120]	; (800f0f8 <tcp_timewait_input+0xdc>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f082:	4b20      	ldr	r3, [pc, #128]	; (800f104 <tcp_timewait_input+0xe8>)
 800f084:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f086:	885b      	ldrh	r3, [r3, #2]
 800f088:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f08a:	4a1e      	ldr	r2, [pc, #120]	; (800f104 <tcp_timewait_input+0xe8>)
 800f08c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f08e:	8812      	ldrh	r2, [r2, #0]
 800f090:	b292      	uxth	r2, r2
 800f092:	9202      	str	r2, [sp, #8]
 800f094:	9301      	str	r3, [sp, #4]
 800f096:	4b1c      	ldr	r3, [pc, #112]	; (800f108 <tcp_timewait_input+0xec>)
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	4b1c      	ldr	r3, [pc, #112]	; (800f10c <tcp_timewait_input+0xf0>)
 800f09c:	4602      	mov	r2, r0
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f003 fada 	bl	8012658 <tcp_rst>
      return;
 800f0a4:	e01c      	b.n	800f0e0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800f0a6:	4b10      	ldr	r3, [pc, #64]	; (800f0e8 <tcp_timewait_input+0xcc>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d003      	beq.n	800f0ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f0b2:	4b17      	ldr	r3, [pc, #92]	; (800f110 <tcp_timewait_input+0xf4>)
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f0ba:	4b11      	ldr	r3, [pc, #68]	; (800f100 <tcp_timewait_input+0xe4>)
 800f0bc:	881b      	ldrh	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00d      	beq.n	800f0de <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	8b5b      	ldrh	r3, [r3, #26]
 800f0c6:	f043 0302 	orr.w	r3, r3, #2
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f002 fcfd 	bl	8011ad0 <tcp_output>
  }
  return;
 800f0d6:	bf00      	nop
 800f0d8:	e001      	b.n	800f0de <tcp_timewait_input+0xc2>
    return;
 800f0da:	bf00      	nop
 800f0dc:	e000      	b.n	800f0e0 <tcp_timewait_input+0xc4>
  return;
 800f0de:	bf00      	nop
}
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20008abc 	.word	0x20008abc
 800f0ec:	0801adf4 	.word	0x0801adf4
 800f0f0:	0801b00c 	.word	0x0801b00c
 800f0f4:	0801ae40 	.word	0x0801ae40
 800f0f8:	20008ab0 	.word	0x20008ab0
 800f0fc:	20008ab4 	.word	0x20008ab4
 800f100:	20008aba 	.word	0x20008aba
 800f104:	20008aa0 	.word	0x20008aa0
 800f108:	2000bdf0 	.word	0x2000bdf0
 800f10c:	2000bdf4 	.word	0x2000bdf4
 800f110:	2000f518 	.word	0x2000f518

0800f114 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b08d      	sub	sp, #52	; 0x34
 800f118:	af04      	add	r7, sp, #16
 800f11a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f11c:	2300      	movs	r3, #0
 800f11e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d106      	bne.n	800f138 <tcp_process+0x24>
 800f12a:	4ba5      	ldr	r3, [pc, #660]	; (800f3c0 <tcp_process+0x2ac>)
 800f12c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f130:	49a4      	ldr	r1, [pc, #656]	; (800f3c4 <tcp_process+0x2b0>)
 800f132:	48a5      	ldr	r0, [pc, #660]	; (800f3c8 <tcp_process+0x2b4>)
 800f134:	f008 fe58 	bl	8017de8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f138:	4ba4      	ldr	r3, [pc, #656]	; (800f3cc <tcp_process+0x2b8>)
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	f003 0304 	and.w	r3, r3, #4
 800f140:	2b00      	cmp	r3, #0
 800f142:	d04e      	beq.n	800f1e2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	7d1b      	ldrb	r3, [r3, #20]
 800f148:	2b02      	cmp	r3, #2
 800f14a:	d108      	bne.n	800f15e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f150:	4b9f      	ldr	r3, [pc, #636]	; (800f3d0 <tcp_process+0x2bc>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	429a      	cmp	r2, r3
 800f156:	d123      	bne.n	800f1a0 <tcp_process+0x8c>
        acceptable = 1;
 800f158:	2301      	movs	r3, #1
 800f15a:	76fb      	strb	r3, [r7, #27]
 800f15c:	e020      	b.n	800f1a0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f162:	4b9c      	ldr	r3, [pc, #624]	; (800f3d4 <tcp_process+0x2c0>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d102      	bne.n	800f170 <tcp_process+0x5c>
        acceptable = 1;
 800f16a:	2301      	movs	r3, #1
 800f16c:	76fb      	strb	r3, [r7, #27]
 800f16e:	e017      	b.n	800f1a0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f170:	4b98      	ldr	r3, [pc, #608]	; (800f3d4 <tcp_process+0x2c0>)
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f178:	1ad3      	subs	r3, r2, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	db10      	blt.n	800f1a0 <tcp_process+0x8c>
 800f17e:	4b95      	ldr	r3, [pc, #596]	; (800f3d4 <tcp_process+0x2c0>)
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f18a:	440b      	add	r3, r1
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	dc06      	bgt.n	800f1a0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	8b5b      	ldrh	r3, [r3, #26]
 800f196:	f043 0302 	orr.w	r3, r3, #2
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f1a0:	7efb      	ldrb	r3, [r7, #27]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d01b      	beq.n	800f1de <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	7d1b      	ldrb	r3, [r3, #20]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d106      	bne.n	800f1bc <tcp_process+0xa8>
 800f1ae:	4b84      	ldr	r3, [pc, #528]	; (800f3c0 <tcp_process+0x2ac>)
 800f1b0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f1b4:	4988      	ldr	r1, [pc, #544]	; (800f3d8 <tcp_process+0x2c4>)
 800f1b6:	4884      	ldr	r0, [pc, #528]	; (800f3c8 <tcp_process+0x2b4>)
 800f1b8:	f008 fe16 	bl	8017de8 <iprintf>
      recv_flags |= TF_RESET;
 800f1bc:	4b87      	ldr	r3, [pc, #540]	; (800f3dc <tcp_process+0x2c8>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	f043 0308 	orr.w	r3, r3, #8
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	4b85      	ldr	r3, [pc, #532]	; (800f3dc <tcp_process+0x2c8>)
 800f1c8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	8b5b      	ldrh	r3, [r3, #26]
 800f1ce:	f023 0301 	bic.w	r3, r3, #1
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f1d8:	f06f 030d 	mvn.w	r3, #13
 800f1dc:	e37a      	b.n	800f8d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	e378      	b.n	800f8d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f1e2:	4b7a      	ldr	r3, [pc, #488]	; (800f3cc <tcp_process+0x2b8>)
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	f003 0302 	and.w	r3, r3, #2
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d010      	beq.n	800f210 <tcp_process+0xfc>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	7d1b      	ldrb	r3, [r3, #20]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d00c      	beq.n	800f210 <tcp_process+0xfc>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	7d1b      	ldrb	r3, [r3, #20]
 800f1fa:	2b03      	cmp	r3, #3
 800f1fc:	d008      	beq.n	800f210 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	8b5b      	ldrh	r3, [r3, #26]
 800f202:	f043 0302 	orr.w	r3, r3, #2
 800f206:	b29a      	uxth	r2, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f20c:	2300      	movs	r3, #0
 800f20e:	e361      	b.n	800f8d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	8b5b      	ldrh	r3, [r3, #26]
 800f214:	f003 0310 	and.w	r3, r3, #16
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d103      	bne.n	800f224 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f21c:	4b70      	ldr	r3, [pc, #448]	; (800f3e0 <tcp_process+0x2cc>)
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f001 fc2d 	bl	8010a94 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	7d1b      	ldrb	r3, [r3, #20]
 800f23e:	3b02      	subs	r3, #2
 800f240:	2b07      	cmp	r3, #7
 800f242:	f200 8337 	bhi.w	800f8b4 <tcp_process+0x7a0>
 800f246:	a201      	add	r2, pc, #4	; (adr r2, 800f24c <tcp_process+0x138>)
 800f248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f24c:	0800f26d 	.word	0x0800f26d
 800f250:	0800f49d 	.word	0x0800f49d
 800f254:	0800f615 	.word	0x0800f615
 800f258:	0800f63f 	.word	0x0800f63f
 800f25c:	0800f763 	.word	0x0800f763
 800f260:	0800f615 	.word	0x0800f615
 800f264:	0800f7ef 	.word	0x0800f7ef
 800f268:	0800f87f 	.word	0x0800f87f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f26c:	4b57      	ldr	r3, [pc, #348]	; (800f3cc <tcp_process+0x2b8>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	f003 0310 	and.w	r3, r3, #16
 800f274:	2b00      	cmp	r3, #0
 800f276:	f000 80e4 	beq.w	800f442 <tcp_process+0x32e>
 800f27a:	4b54      	ldr	r3, [pc, #336]	; (800f3cc <tcp_process+0x2b8>)
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	f003 0302 	and.w	r3, r3, #2
 800f282:	2b00      	cmp	r3, #0
 800f284:	f000 80dd 	beq.w	800f442 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f28c:	1c5a      	adds	r2, r3, #1
 800f28e:	4b50      	ldr	r3, [pc, #320]	; (800f3d0 <tcp_process+0x2bc>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	429a      	cmp	r2, r3
 800f294:	f040 80d5 	bne.w	800f442 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f298:	4b4e      	ldr	r3, [pc, #312]	; (800f3d4 <tcp_process+0x2c0>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	1c5a      	adds	r2, r3, #1
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f2aa:	4b49      	ldr	r3, [pc, #292]	; (800f3d0 <tcp_process+0x2bc>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f2b2:	4b4c      	ldr	r3, [pc, #304]	; (800f3e4 <tcp_process+0x2d0>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	89db      	ldrh	r3, [r3, #14]
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f2cc:	4b41      	ldr	r3, [pc, #260]	; (800f3d4 <tcp_process+0x2c0>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	1e5a      	subs	r2, r3, #1
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2204      	movs	r2, #4
 800f2da:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	3304      	adds	r3, #4
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f007 f939 	bl	801655c <ip4_route>
 800f2ea:	4601      	mov	r1, r0
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f7ff f88e 	bl	800e414 <tcp_eff_send_mss_netif>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f304:	009a      	lsls	r2, r3, #2
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f30a:	005b      	lsls	r3, r3, #1
 800f30c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f310:	428b      	cmp	r3, r1
 800f312:	bf38      	it	cc
 800f314:	460b      	movcc	r3, r1
 800f316:	429a      	cmp	r2, r3
 800f318:	d204      	bcs.n	800f324 <tcp_process+0x210>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f31e:	009b      	lsls	r3, r3, #2
 800f320:	b29b      	uxth	r3, r3
 800f322:	e00d      	b.n	800f340 <tcp_process+0x22c>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f328:	005b      	lsls	r3, r3, #1
 800f32a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f32e:	4293      	cmp	r3, r2
 800f330:	d904      	bls.n	800f33c <tcp_process+0x228>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f336:	005b      	lsls	r3, r3, #1
 800f338:	b29b      	uxth	r3, r3
 800f33a:	e001      	b.n	800f340 <tcp_process+0x22c>
 800f33c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d106      	bne.n	800f35e <tcp_process+0x24a>
 800f350:	4b1b      	ldr	r3, [pc, #108]	; (800f3c0 <tcp_process+0x2ac>)
 800f352:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f356:	4924      	ldr	r1, [pc, #144]	; (800f3e8 <tcp_process+0x2d4>)
 800f358:	481b      	ldr	r0, [pc, #108]	; (800f3c8 <tcp_process+0x2b4>)
 800f35a:	f008 fd45 	bl	8017de8 <iprintf>
        --pcb->snd_queuelen;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f364:	3b01      	subs	r3, #1
 800f366:	b29a      	uxth	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f372:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d111      	bne.n	800f39e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f37e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d106      	bne.n	800f394 <tcp_process+0x280>
 800f386:	4b0e      	ldr	r3, [pc, #56]	; (800f3c0 <tcp_process+0x2ac>)
 800f388:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f38c:	4917      	ldr	r1, [pc, #92]	; (800f3ec <tcp_process+0x2d8>)
 800f38e:	480e      	ldr	r0, [pc, #56]	; (800f3c8 <tcp_process+0x2b4>)
 800f390:	f008 fd2a 	bl	8017de8 <iprintf>
          pcb->unsent = rseg->next;
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	66da      	str	r2, [r3, #108]	; 0x6c
 800f39c:	e003      	b.n	800f3a6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f3a6:	69f8      	ldr	r0, [r7, #28]
 800f3a8:	f7fe fc52 	bl	800dc50 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d11d      	bne.n	800f3f0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3ba:	861a      	strh	r2, [r3, #48]	; 0x30
 800f3bc:	e01f      	b.n	800f3fe <tcp_process+0x2ea>
 800f3be:	bf00      	nop
 800f3c0:	0801adf4 	.word	0x0801adf4
 800f3c4:	0801b02c 	.word	0x0801b02c
 800f3c8:	0801ae40 	.word	0x0801ae40
 800f3cc:	20008abc 	.word	0x20008abc
 800f3d0:	20008ab4 	.word	0x20008ab4
 800f3d4:	20008ab0 	.word	0x20008ab0
 800f3d8:	0801b048 	.word	0x0801b048
 800f3dc:	20008abd 	.word	0x20008abd
 800f3e0:	2000f518 	.word	0x2000f518
 800f3e4:	20008aa0 	.word	0x20008aa0
 800f3e8:	0801b068 	.word	0x0801b068
 800f3ec:	0801b080 	.word	0x0801b080
        } else {
          pcb->rtime = 0;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00a      	beq.n	800f41e <tcp_process+0x30a>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	6910      	ldr	r0, [r2, #16]
 800f412:	2200      	movs	r2, #0
 800f414:	6879      	ldr	r1, [r7, #4]
 800f416:	4798      	blx	r3
 800f418:	4603      	mov	r3, r0
 800f41a:	76bb      	strb	r3, [r7, #26]
 800f41c:	e001      	b.n	800f422 <tcp_process+0x30e>
 800f41e:	2300      	movs	r3, #0
 800f420:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f422:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f426:	f113 0f0d 	cmn.w	r3, #13
 800f42a:	d102      	bne.n	800f432 <tcp_process+0x31e>
          return ERR_ABRT;
 800f42c:	f06f 030c 	mvn.w	r3, #12
 800f430:	e250      	b.n	800f8d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	8b5b      	ldrh	r3, [r3, #26]
 800f436:	f043 0302 	orr.w	r3, r3, #2
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f440:	e23a      	b.n	800f8b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f442:	4b9d      	ldr	r3, [pc, #628]	; (800f6b8 <tcp_process+0x5a4>)
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	f003 0310 	and.w	r3, r3, #16
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f000 8234 	beq.w	800f8b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f450:	4b9a      	ldr	r3, [pc, #616]	; (800f6bc <tcp_process+0x5a8>)
 800f452:	6819      	ldr	r1, [r3, #0]
 800f454:	4b9a      	ldr	r3, [pc, #616]	; (800f6c0 <tcp_process+0x5ac>)
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	461a      	mov	r2, r3
 800f45a:	4b9a      	ldr	r3, [pc, #616]	; (800f6c4 <tcp_process+0x5b0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f460:	4b99      	ldr	r3, [pc, #612]	; (800f6c8 <tcp_process+0x5b4>)
 800f462:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f464:	885b      	ldrh	r3, [r3, #2]
 800f466:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f468:	4a97      	ldr	r2, [pc, #604]	; (800f6c8 <tcp_process+0x5b4>)
 800f46a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f46c:	8812      	ldrh	r2, [r2, #0]
 800f46e:	b292      	uxth	r2, r2
 800f470:	9202      	str	r2, [sp, #8]
 800f472:	9301      	str	r3, [sp, #4]
 800f474:	4b95      	ldr	r3, [pc, #596]	; (800f6cc <tcp_process+0x5b8>)
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	4b95      	ldr	r3, [pc, #596]	; (800f6d0 <tcp_process+0x5bc>)
 800f47a:	4602      	mov	r2, r0
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f003 f8eb 	bl	8012658 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f488:	2b05      	cmp	r3, #5
 800f48a:	f200 8215 	bhi.w	800f8b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f002 feab 	bl	80121f0 <tcp_rexmit_rto>
      break;
 800f49a:	e20d      	b.n	800f8b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f49c:	4b86      	ldr	r3, [pc, #536]	; (800f6b8 <tcp_process+0x5a4>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	f003 0310 	and.w	r3, r3, #16
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f000 80a1 	beq.w	800f5ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4aa:	4b84      	ldr	r3, [pc, #528]	; (800f6bc <tcp_process+0x5a8>)
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	db7e      	blt.n	800f5b8 <tcp_process+0x4a4>
 800f4ba:	4b80      	ldr	r3, [pc, #512]	; (800f6bc <tcp_process+0x5a8>)
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	dc77      	bgt.n	800f5b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2204      	movs	r2, #4
 800f4cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d102      	bne.n	800f4dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f4d6:	23fa      	movs	r3, #250	; 0xfa
 800f4d8:	76bb      	strb	r3, [r7, #26]
 800f4da:	e01d      	b.n	800f518 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4e0:	699b      	ldr	r3, [r3, #24]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <tcp_process+0x3e0>
 800f4e6:	4b7b      	ldr	r3, [pc, #492]	; (800f6d4 <tcp_process+0x5c0>)
 800f4e8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f4ec:	497a      	ldr	r1, [pc, #488]	; (800f6d8 <tcp_process+0x5c4>)
 800f4ee:	487b      	ldr	r0, [pc, #492]	; (800f6dc <tcp_process+0x5c8>)
 800f4f0:	f008 fc7a 	bl	8017de8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4f8:	699b      	ldr	r3, [r3, #24]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00a      	beq.n	800f514 <tcp_process+0x400>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	6910      	ldr	r0, [r2, #16]
 800f508:	2200      	movs	r2, #0
 800f50a:	6879      	ldr	r1, [r7, #4]
 800f50c:	4798      	blx	r3
 800f50e:	4603      	mov	r3, r0
 800f510:	76bb      	strb	r3, [r7, #26]
 800f512:	e001      	b.n	800f518 <tcp_process+0x404>
 800f514:	23f0      	movs	r3, #240	; 0xf0
 800f516:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f518:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00a      	beq.n	800f536 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f520:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f524:	f113 0f0d 	cmn.w	r3, #13
 800f528:	d002      	beq.n	800f530 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7fd fcee 	bl	800cf0c <tcp_abort>
            }
            return ERR_ABRT;
 800f530:	f06f 030c 	mvn.w	r3, #12
 800f534:	e1ce      	b.n	800f8d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 fae0 	bl	800fafc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f53c:	4b68      	ldr	r3, [pc, #416]	; (800f6e0 <tcp_process+0x5cc>)
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d005      	beq.n	800f550 <tcp_process+0x43c>
            recv_acked--;
 800f544:	4b66      	ldr	r3, [pc, #408]	; (800f6e0 <tcp_process+0x5cc>)
 800f546:	881b      	ldrh	r3, [r3, #0]
 800f548:	3b01      	subs	r3, #1
 800f54a:	b29a      	uxth	r2, r3
 800f54c:	4b64      	ldr	r3, [pc, #400]	; (800f6e0 <tcp_process+0x5cc>)
 800f54e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f554:	009a      	lsls	r2, r3, #2
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f55a:	005b      	lsls	r3, r3, #1
 800f55c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f560:	428b      	cmp	r3, r1
 800f562:	bf38      	it	cc
 800f564:	460b      	movcc	r3, r1
 800f566:	429a      	cmp	r2, r3
 800f568:	d204      	bcs.n	800f574 <tcp_process+0x460>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	b29b      	uxth	r3, r3
 800f572:	e00d      	b.n	800f590 <tcp_process+0x47c>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f578:	005b      	lsls	r3, r3, #1
 800f57a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f57e:	4293      	cmp	r3, r2
 800f580:	d904      	bls.n	800f58c <tcp_process+0x478>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	b29b      	uxth	r3, r3
 800f58a:	e001      	b.n	800f590 <tcp_process+0x47c>
 800f58c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f596:	4b53      	ldr	r3, [pc, #332]	; (800f6e4 <tcp_process+0x5d0>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	f003 0320 	and.w	r3, r3, #32
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d037      	beq.n	800f612 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	8b5b      	ldrh	r3, [r3, #26]
 800f5a6:	f043 0302 	orr.w	r3, r3, #2
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2207      	movs	r2, #7
 800f5b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f5b6:	e02c      	b.n	800f612 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5b8:	4b40      	ldr	r3, [pc, #256]	; (800f6bc <tcp_process+0x5a8>)
 800f5ba:	6819      	ldr	r1, [r3, #0]
 800f5bc:	4b40      	ldr	r3, [pc, #256]	; (800f6c0 <tcp_process+0x5ac>)
 800f5be:	881b      	ldrh	r3, [r3, #0]
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	4b40      	ldr	r3, [pc, #256]	; (800f6c4 <tcp_process+0x5b0>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5c8:	4b3f      	ldr	r3, [pc, #252]	; (800f6c8 <tcp_process+0x5b4>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5cc:	885b      	ldrh	r3, [r3, #2]
 800f5ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5d0:	4a3d      	ldr	r2, [pc, #244]	; (800f6c8 <tcp_process+0x5b4>)
 800f5d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5d4:	8812      	ldrh	r2, [r2, #0]
 800f5d6:	b292      	uxth	r2, r2
 800f5d8:	9202      	str	r2, [sp, #8]
 800f5da:	9301      	str	r3, [sp, #4]
 800f5dc:	4b3b      	ldr	r3, [pc, #236]	; (800f6cc <tcp_process+0x5b8>)
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	4b3b      	ldr	r3, [pc, #236]	; (800f6d0 <tcp_process+0x5bc>)
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f003 f837 	bl	8012658 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f5ea:	e167      	b.n	800f8bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f5ec:	4b32      	ldr	r3, [pc, #200]	; (800f6b8 <tcp_process+0x5a4>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	f003 0302 	and.w	r3, r3, #2
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f000 8161 	beq.w	800f8bc <tcp_process+0x7a8>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fe:	1e5a      	subs	r2, r3, #1
 800f600:	4b30      	ldr	r3, [pc, #192]	; (800f6c4 <tcp_process+0x5b0>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	429a      	cmp	r2, r3
 800f606:	f040 8159 	bne.w	800f8bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f002 fe12 	bl	8012234 <tcp_rexmit>
      break;
 800f610:	e154      	b.n	800f8bc <tcp_process+0x7a8>
 800f612:	e153      	b.n	800f8bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 fa71 	bl	800fafc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f61a:	4b32      	ldr	r3, [pc, #200]	; (800f6e4 <tcp_process+0x5d0>)
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	f003 0320 	and.w	r3, r3, #32
 800f622:	2b00      	cmp	r3, #0
 800f624:	f000 814c 	beq.w	800f8c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	8b5b      	ldrh	r3, [r3, #26]
 800f62c:	f043 0302 	orr.w	r3, r3, #2
 800f630:	b29a      	uxth	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2207      	movs	r2, #7
 800f63a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f63c:	e140      	b.n	800f8c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fa5c 	bl	800fafc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f644:	4b27      	ldr	r3, [pc, #156]	; (800f6e4 <tcp_process+0x5d0>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	f003 0320 	and.w	r3, r3, #32
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d071      	beq.n	800f734 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f650:	4b19      	ldr	r3, [pc, #100]	; (800f6b8 <tcp_process+0x5a4>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	f003 0310 	and.w	r3, r3, #16
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d060      	beq.n	800f71e <tcp_process+0x60a>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f660:	4b16      	ldr	r3, [pc, #88]	; (800f6bc <tcp_process+0x5a8>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	429a      	cmp	r2, r3
 800f666:	d15a      	bne.n	800f71e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d156      	bne.n	800f71e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	8b5b      	ldrh	r3, [r3, #26]
 800f674:	f043 0302 	orr.w	r3, r3, #2
 800f678:	b29a      	uxth	r2, r3
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7fe fdbe 	bl	800e200 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f684:	4b18      	ldr	r3, [pc, #96]	; (800f6e8 <tcp_process+0x5d4>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d105      	bne.n	800f69a <tcp_process+0x586>
 800f68e:	4b16      	ldr	r3, [pc, #88]	; (800f6e8 <tcp_process+0x5d4>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	4a14      	ldr	r2, [pc, #80]	; (800f6e8 <tcp_process+0x5d4>)
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	e02e      	b.n	800f6f8 <tcp_process+0x5e4>
 800f69a:	4b13      	ldr	r3, [pc, #76]	; (800f6e8 <tcp_process+0x5d4>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	617b      	str	r3, [r7, #20]
 800f6a0:	e027      	b.n	800f6f2 <tcp_process+0x5de>
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d11f      	bne.n	800f6ec <tcp_process+0x5d8>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	68da      	ldr	r2, [r3, #12]
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	60da      	str	r2, [r3, #12]
 800f6b4:	e020      	b.n	800f6f8 <tcp_process+0x5e4>
 800f6b6:	bf00      	nop
 800f6b8:	20008abc 	.word	0x20008abc
 800f6bc:	20008ab4 	.word	0x20008ab4
 800f6c0:	20008aba 	.word	0x20008aba
 800f6c4:	20008ab0 	.word	0x20008ab0
 800f6c8:	20008aa0 	.word	0x20008aa0
 800f6cc:	2000bdf0 	.word	0x2000bdf0
 800f6d0:	2000bdf4 	.word	0x2000bdf4
 800f6d4:	0801adf4 	.word	0x0801adf4
 800f6d8:	0801b094 	.word	0x0801b094
 800f6dc:	0801ae40 	.word	0x0801ae40
 800f6e0:	20008ab8 	.word	0x20008ab8
 800f6e4:	20008abd 	.word	0x20008abd
 800f6e8:	2000f514 	.word	0x2000f514
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	617b      	str	r3, [r7, #20]
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1d4      	bne.n	800f6a2 <tcp_process+0x58e>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	60da      	str	r2, [r3, #12]
 800f6fe:	4b77      	ldr	r3, [pc, #476]	; (800f8dc <tcp_process+0x7c8>)
 800f700:	2201      	movs	r2, #1
 800f702:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	220a      	movs	r2, #10
 800f708:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f70a:	4b75      	ldr	r3, [pc, #468]	; (800f8e0 <tcp_process+0x7cc>)
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	60da      	str	r2, [r3, #12]
 800f712:	4a73      	ldr	r2, [pc, #460]	; (800f8e0 <tcp_process+0x7cc>)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6013      	str	r3, [r2, #0]
 800f718:	f003 f960 	bl	80129dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f71c:	e0d2      	b.n	800f8c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	8b5b      	ldrh	r3, [r3, #26]
 800f722:	f043 0302 	orr.w	r3, r3, #2
 800f726:	b29a      	uxth	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2208      	movs	r2, #8
 800f730:	751a      	strb	r2, [r3, #20]
      break;
 800f732:	e0c7      	b.n	800f8c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f734:	4b6b      	ldr	r3, [pc, #428]	; (800f8e4 <tcp_process+0x7d0>)
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	f003 0310 	and.w	r3, r3, #16
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f000 80c1 	beq.w	800f8c4 <tcp_process+0x7b0>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f746:	4b68      	ldr	r3, [pc, #416]	; (800f8e8 <tcp_process+0x7d4>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	f040 80ba 	bne.w	800f8c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f754:	2b00      	cmp	r3, #0
 800f756:	f040 80b5 	bne.w	800f8c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2206      	movs	r2, #6
 800f75e:	751a      	strb	r2, [r3, #20]
      break;
 800f760:	e0b0      	b.n	800f8c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 f9ca 	bl	800fafc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f768:	4b60      	ldr	r3, [pc, #384]	; (800f8ec <tcp_process+0x7d8>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f003 0320 	and.w	r3, r3, #32
 800f770:	2b00      	cmp	r3, #0
 800f772:	f000 80a9 	beq.w	800f8c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	8b5b      	ldrh	r3, [r3, #26]
 800f77a:	f043 0302 	orr.w	r3, r3, #2
 800f77e:	b29a      	uxth	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7fe fd3b 	bl	800e200 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f78a:	4b59      	ldr	r3, [pc, #356]	; (800f8f0 <tcp_process+0x7dc>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	429a      	cmp	r2, r3
 800f792:	d105      	bne.n	800f7a0 <tcp_process+0x68c>
 800f794:	4b56      	ldr	r3, [pc, #344]	; (800f8f0 <tcp_process+0x7dc>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	4a55      	ldr	r2, [pc, #340]	; (800f8f0 <tcp_process+0x7dc>)
 800f79c:	6013      	str	r3, [r2, #0]
 800f79e:	e013      	b.n	800f7c8 <tcp_process+0x6b4>
 800f7a0:	4b53      	ldr	r3, [pc, #332]	; (800f8f0 <tcp_process+0x7dc>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	613b      	str	r3, [r7, #16]
 800f7a6:	e00c      	b.n	800f7c2 <tcp_process+0x6ae>
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d104      	bne.n	800f7bc <tcp_process+0x6a8>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	68da      	ldr	r2, [r3, #12]
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	60da      	str	r2, [r3, #12]
 800f7ba:	e005      	b.n	800f7c8 <tcp_process+0x6b4>
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	613b      	str	r3, [r7, #16]
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d1ef      	bne.n	800f7a8 <tcp_process+0x694>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	60da      	str	r2, [r3, #12]
 800f7ce:	4b43      	ldr	r3, [pc, #268]	; (800f8dc <tcp_process+0x7c8>)
 800f7d0:	2201      	movs	r2, #1
 800f7d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	220a      	movs	r2, #10
 800f7d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f7da:	4b41      	ldr	r3, [pc, #260]	; (800f8e0 <tcp_process+0x7cc>)
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	60da      	str	r2, [r3, #12]
 800f7e2:	4a3f      	ldr	r2, [pc, #252]	; (800f8e0 <tcp_process+0x7cc>)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6013      	str	r3, [r2, #0]
 800f7e8:	f003 f8f8 	bl	80129dc <tcp_timer_needed>
      }
      break;
 800f7ec:	e06c      	b.n	800f8c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 f984 	bl	800fafc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f7f4:	4b3b      	ldr	r3, [pc, #236]	; (800f8e4 <tcp_process+0x7d0>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	f003 0310 	and.w	r3, r3, #16
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d065      	beq.n	800f8cc <tcp_process+0x7b8>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f804:	4b38      	ldr	r3, [pc, #224]	; (800f8e8 <tcp_process+0x7d4>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d15f      	bne.n	800f8cc <tcp_process+0x7b8>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f810:	2b00      	cmp	r3, #0
 800f812:	d15b      	bne.n	800f8cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7fe fcf3 	bl	800e200 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f81a:	4b35      	ldr	r3, [pc, #212]	; (800f8f0 <tcp_process+0x7dc>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	429a      	cmp	r2, r3
 800f822:	d105      	bne.n	800f830 <tcp_process+0x71c>
 800f824:	4b32      	ldr	r3, [pc, #200]	; (800f8f0 <tcp_process+0x7dc>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	4a31      	ldr	r2, [pc, #196]	; (800f8f0 <tcp_process+0x7dc>)
 800f82c:	6013      	str	r3, [r2, #0]
 800f82e:	e013      	b.n	800f858 <tcp_process+0x744>
 800f830:	4b2f      	ldr	r3, [pc, #188]	; (800f8f0 <tcp_process+0x7dc>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	60fb      	str	r3, [r7, #12]
 800f836:	e00c      	b.n	800f852 <tcp_process+0x73e>
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d104      	bne.n	800f84c <tcp_process+0x738>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68da      	ldr	r2, [r3, #12]
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	60da      	str	r2, [r3, #12]
 800f84a:	e005      	b.n	800f858 <tcp_process+0x744>
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	60fb      	str	r3, [r7, #12]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1ef      	bne.n	800f838 <tcp_process+0x724>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	60da      	str	r2, [r3, #12]
 800f85e:	4b1f      	ldr	r3, [pc, #124]	; (800f8dc <tcp_process+0x7c8>)
 800f860:	2201      	movs	r2, #1
 800f862:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	220a      	movs	r2, #10
 800f868:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f86a:	4b1d      	ldr	r3, [pc, #116]	; (800f8e0 <tcp_process+0x7cc>)
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	60da      	str	r2, [r3, #12]
 800f872:	4a1b      	ldr	r2, [pc, #108]	; (800f8e0 <tcp_process+0x7cc>)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6013      	str	r3, [r2, #0]
 800f878:	f003 f8b0 	bl	80129dc <tcp_timer_needed>
      }
      break;
 800f87c:	e026      	b.n	800f8cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 f93c 	bl	800fafc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f884:	4b17      	ldr	r3, [pc, #92]	; (800f8e4 <tcp_process+0x7d0>)
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	f003 0310 	and.w	r3, r3, #16
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d01f      	beq.n	800f8d0 <tcp_process+0x7bc>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f894:	4b14      	ldr	r3, [pc, #80]	; (800f8e8 <tcp_process+0x7d4>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d119      	bne.n	800f8d0 <tcp_process+0x7bc>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d115      	bne.n	800f8d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f8a4:	4b11      	ldr	r3, [pc, #68]	; (800f8ec <tcp_process+0x7d8>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	f043 0310 	orr.w	r3, r3, #16
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	4b0f      	ldr	r3, [pc, #60]	; (800f8ec <tcp_process+0x7d8>)
 800f8b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f8b2:	e00d      	b.n	800f8d0 <tcp_process+0x7bc>
    default:
      break;
 800f8b4:	bf00      	nop
 800f8b6:	e00c      	b.n	800f8d2 <tcp_process+0x7be>
      break;
 800f8b8:	bf00      	nop
 800f8ba:	e00a      	b.n	800f8d2 <tcp_process+0x7be>
      break;
 800f8bc:	bf00      	nop
 800f8be:	e008      	b.n	800f8d2 <tcp_process+0x7be>
      break;
 800f8c0:	bf00      	nop
 800f8c2:	e006      	b.n	800f8d2 <tcp_process+0x7be>
      break;
 800f8c4:	bf00      	nop
 800f8c6:	e004      	b.n	800f8d2 <tcp_process+0x7be>
      break;
 800f8c8:	bf00      	nop
 800f8ca:	e002      	b.n	800f8d2 <tcp_process+0x7be>
      break;
 800f8cc:	bf00      	nop
 800f8ce:	e000      	b.n	800f8d2 <tcp_process+0x7be>
      break;
 800f8d0:	bf00      	nop
  }
  return ERR_OK;
 800f8d2:	2300      	movs	r3, #0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3724      	adds	r7, #36	; 0x24
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd90      	pop	{r4, r7, pc}
 800f8dc:	2000f510 	.word	0x2000f510
 800f8e0:	2000f524 	.word	0x2000f524
 800f8e4:	20008abc 	.word	0x20008abc
 800f8e8:	20008ab4 	.word	0x20008ab4
 800f8ec:	20008abd 	.word	0x20008abd
 800f8f0:	2000f514 	.word	0x2000f514

0800f8f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f8f4:	b590      	push	{r4, r7, lr}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d106      	bne.n	800f912 <tcp_oos_insert_segment+0x1e>
 800f904:	4b3b      	ldr	r3, [pc, #236]	; (800f9f4 <tcp_oos_insert_segment+0x100>)
 800f906:	f240 421f 	movw	r2, #1055	; 0x41f
 800f90a:	493b      	ldr	r1, [pc, #236]	; (800f9f8 <tcp_oos_insert_segment+0x104>)
 800f90c:	483b      	ldr	r0, [pc, #236]	; (800f9fc <tcp_oos_insert_segment+0x108>)
 800f90e:	f008 fa6b 	bl	8017de8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	899b      	ldrh	r3, [r3, #12]
 800f918:	b29b      	uxth	r3, r3
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fb f916 	bl	800ab4c <lwip_htons>
 800f920:	4603      	mov	r3, r0
 800f922:	b2db      	uxtb	r3, r3
 800f924:	f003 0301 	and.w	r3, r3, #1
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d028      	beq.n	800f97e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f92c:	6838      	ldr	r0, [r7, #0]
 800f92e:	f7fe f97b 	bl	800dc28 <tcp_segs_free>
    next = NULL;
 800f932:	2300      	movs	r3, #0
 800f934:	603b      	str	r3, [r7, #0]
 800f936:	e056      	b.n	800f9e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	899b      	ldrh	r3, [r3, #12]
 800f93e:	b29b      	uxth	r3, r3
 800f940:	4618      	mov	r0, r3
 800f942:	f7fb f903 	bl	800ab4c <lwip_htons>
 800f946:	4603      	mov	r3, r0
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	f003 0301 	and.w	r3, r3, #1
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00d      	beq.n	800f96e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	899b      	ldrh	r3, [r3, #12]
 800f958:	b29c      	uxth	r4, r3
 800f95a:	2001      	movs	r0, #1
 800f95c:	f7fb f8f6 	bl	800ab4c <lwip_htons>
 800f960:	4603      	mov	r3, r0
 800f962:	461a      	mov	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	4322      	orrs	r2, r4
 800f96a:	b292      	uxth	r2, r2
 800f96c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7fe f969 	bl	800dc50 <tcp_seg_free>
    while (next &&
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00e      	beq.n	800f9a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	891b      	ldrh	r3, [r3, #8]
 800f988:	461a      	mov	r2, r3
 800f98a:	4b1d      	ldr	r3, [pc, #116]	; (800fa00 <tcp_oos_insert_segment+0x10c>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	441a      	add	r2, r3
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	6839      	ldr	r1, [r7, #0]
 800f998:	8909      	ldrh	r1, [r1, #8]
 800f99a:	440b      	add	r3, r1
 800f99c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	daca      	bge.n	800f938 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d01e      	beq.n	800f9e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	891b      	ldrh	r3, [r3, #8]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	4b14      	ldr	r3, [pc, #80]	; (800fa00 <tcp_oos_insert_segment+0x10c>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	441a      	add	r2, r3
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	dd12      	ble.n	800f9e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	b29a      	uxth	r2, r3
 800f9c8:	4b0d      	ldr	r3, [pc, #52]	; (800fa00 <tcp_oos_insert_segment+0x10c>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	1ad3      	subs	r3, r2, r3
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	685a      	ldr	r2, [r3, #4]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	891b      	ldrh	r3, [r3, #8]
 800f9de:	4619      	mov	r1, r3
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	f7fc fb17 	bl	800c014 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	683a      	ldr	r2, [r7, #0]
 800f9ea:	601a      	str	r2, [r3, #0]
}
 800f9ec:	bf00      	nop
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd90      	pop	{r4, r7, pc}
 800f9f4:	0801adf4 	.word	0x0801adf4
 800f9f8:	0801b0b4 	.word	0x0801b0b4
 800f9fc:	0801ae40 	.word	0x0801ae40
 800fa00:	20008ab0 	.word	0x20008ab0

0800fa04 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fa04:	b5b0      	push	{r4, r5, r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	607a      	str	r2, [r7, #4]
 800fa10:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fa12:	e03e      	b.n	800fa92 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fc fd0a 	bl	800c43c <pbuf_clen>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa32:	8a7a      	ldrh	r2, [r7, #18]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d906      	bls.n	800fa46 <tcp_free_acked_segments+0x42>
 800fa38:	4b2a      	ldr	r3, [pc, #168]	; (800fae4 <tcp_free_acked_segments+0xe0>)
 800fa3a:	f240 4257 	movw	r2, #1111	; 0x457
 800fa3e:	492a      	ldr	r1, [pc, #168]	; (800fae8 <tcp_free_acked_segments+0xe4>)
 800fa40:	482a      	ldr	r0, [pc, #168]	; (800faec <tcp_free_acked_segments+0xe8>)
 800fa42:	f008 f9d1 	bl	8017de8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fa4c:	8a7b      	ldrh	r3, [r7, #18]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	891a      	ldrh	r2, [r3, #8]
 800fa5c:	4b24      	ldr	r3, [pc, #144]	; (800faf0 <tcp_free_acked_segments+0xec>)
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	4413      	add	r3, r2
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	4b22      	ldr	r3, [pc, #136]	; (800faf0 <tcp_free_acked_segments+0xec>)
 800fa66:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fa68:	6978      	ldr	r0, [r7, #20]
 800fa6a:	f7fe f8f1 	bl	800dc50 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00c      	beq.n	800fa92 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d109      	bne.n	800fa92 <tcp_free_acked_segments+0x8e>
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d106      	bne.n	800fa92 <tcp_free_acked_segments+0x8e>
 800fa84:	4b17      	ldr	r3, [pc, #92]	; (800fae4 <tcp_free_acked_segments+0xe0>)
 800fa86:	f240 4262 	movw	r2, #1122	; 0x462
 800fa8a:	491a      	ldr	r1, [pc, #104]	; (800faf4 <tcp_free_acked_segments+0xf0>)
 800fa8c:	4817      	ldr	r0, [pc, #92]	; (800faec <tcp_free_acked_segments+0xe8>)
 800fa8e:	f008 f9ab 	bl	8017de8 <iprintf>
  while (seg_list != NULL &&
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d020      	beq.n	800fada <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fb f869 	bl	800ab76 <lwip_htonl>
 800faa4:	4604      	mov	r4, r0
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	891b      	ldrh	r3, [r3, #8]
 800faaa:	461d      	mov	r5, r3
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	899b      	ldrh	r3, [r3, #12]
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fb f849 	bl	800ab4c <lwip_htons>
 800faba:	4603      	mov	r3, r0
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	f003 0303 	and.w	r3, r3, #3
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d001      	beq.n	800faca <tcp_free_acked_segments+0xc6>
 800fac6:	2301      	movs	r3, #1
 800fac8:	e000      	b.n	800facc <tcp_free_acked_segments+0xc8>
 800faca:	2300      	movs	r3, #0
 800facc:	442b      	add	r3, r5
 800face:	18e2      	adds	r2, r4, r3
 800fad0:	4b09      	ldr	r3, [pc, #36]	; (800faf8 <tcp_free_acked_segments+0xf4>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	dd9c      	ble.n	800fa14 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fada:	68bb      	ldr	r3, [r7, #8]
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3718      	adds	r7, #24
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bdb0      	pop	{r4, r5, r7, pc}
 800fae4:	0801adf4 	.word	0x0801adf4
 800fae8:	0801b0dc 	.word	0x0801b0dc
 800faec:	0801ae40 	.word	0x0801ae40
 800faf0:	20008ab8 	.word	0x20008ab8
 800faf4:	0801b104 	.word	0x0801b104
 800faf8:	20008ab4 	.word	0x20008ab4

0800fafc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fafc:	b5b0      	push	{r4, r5, r7, lr}
 800fafe:	b094      	sub	sp, #80	; 0x50
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fb04:	2300      	movs	r3, #0
 800fb06:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d106      	bne.n	800fb1c <tcp_receive+0x20>
 800fb0e:	4ba6      	ldr	r3, [pc, #664]	; (800fda8 <tcp_receive+0x2ac>)
 800fb10:	f240 427b 	movw	r2, #1147	; 0x47b
 800fb14:	49a5      	ldr	r1, [pc, #660]	; (800fdac <tcp_receive+0x2b0>)
 800fb16:	48a6      	ldr	r0, [pc, #664]	; (800fdb0 <tcp_receive+0x2b4>)
 800fb18:	f008 f966 	bl	8017de8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	7d1b      	ldrb	r3, [r3, #20]
 800fb20:	2b03      	cmp	r3, #3
 800fb22:	d806      	bhi.n	800fb32 <tcp_receive+0x36>
 800fb24:	4ba0      	ldr	r3, [pc, #640]	; (800fda8 <tcp_receive+0x2ac>)
 800fb26:	f240 427c 	movw	r2, #1148	; 0x47c
 800fb2a:	49a2      	ldr	r1, [pc, #648]	; (800fdb4 <tcp_receive+0x2b8>)
 800fb2c:	48a0      	ldr	r0, [pc, #640]	; (800fdb0 <tcp_receive+0x2b4>)
 800fb2e:	f008 f95b 	bl	8017de8 <iprintf>

  if (flags & TCP_ACK) {
 800fb32:	4ba1      	ldr	r3, [pc, #644]	; (800fdb8 <tcp_receive+0x2bc>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 0310 	and.w	r3, r3, #16
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f000 8263 	beq.w	8010006 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb46:	461a      	mov	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb4c:	4413      	add	r3, r2
 800fb4e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb54:	4b99      	ldr	r3, [pc, #612]	; (800fdbc <tcp_receive+0x2c0>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	db1b      	blt.n	800fb96 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb62:	4b96      	ldr	r3, [pc, #600]	; (800fdbc <tcp_receive+0x2c0>)
 800fb64:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d106      	bne.n	800fb78 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fb6e:	4b94      	ldr	r3, [pc, #592]	; (800fdc0 <tcp_receive+0x2c4>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	db0e      	blt.n	800fb96 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fb7c:	4b90      	ldr	r3, [pc, #576]	; (800fdc0 <tcp_receive+0x2c4>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d125      	bne.n	800fbd0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fb84:	4b8f      	ldr	r3, [pc, #572]	; (800fdc4 <tcp_receive+0x2c8>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	89db      	ldrh	r3, [r3, #14]
 800fb8a:	b29a      	uxth	r2, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d91c      	bls.n	800fbd0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fb96:	4b8b      	ldr	r3, [pc, #556]	; (800fdc4 <tcp_receive+0x2c8>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	89db      	ldrh	r3, [r3, #14]
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d205      	bcs.n	800fbc0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fbc0:	4b7e      	ldr	r3, [pc, #504]	; (800fdbc <tcp_receive+0x2c0>)
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fbc8:	4b7d      	ldr	r3, [pc, #500]	; (800fdc0 <tcp_receive+0x2c4>)
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fbd0:	4b7b      	ldr	r3, [pc, #492]	; (800fdc0 <tcp_receive+0x2c4>)
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	dc58      	bgt.n	800fc90 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fbde:	4b7a      	ldr	r3, [pc, #488]	; (800fdc8 <tcp_receive+0x2cc>)
 800fbe0:	881b      	ldrh	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d14b      	bne.n	800fc7e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fbf0:	4413      	add	r3, r2
 800fbf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d142      	bne.n	800fc7e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	db3d      	blt.n	800fc7e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc06:	4b6e      	ldr	r3, [pc, #440]	; (800fdc0 <tcp_receive+0x2c4>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d137      	bne.n	800fc7e <tcp_receive+0x182>
              found_dupack = 1;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc18:	2bff      	cmp	r3, #255	; 0xff
 800fc1a:	d007      	beq.n	800fc2c <tcp_receive+0x130>
                ++pcb->dupacks;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc22:	3301      	adds	r3, #1
 800fc24:	b2da      	uxtb	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc32:	2b03      	cmp	r3, #3
 800fc34:	d91b      	bls.n	800fc6e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc40:	4413      	add	r3, r2
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d30a      	bcc.n	800fc64 <tcp_receive+0x168>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc58:	4413      	add	r3, r2
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc62:	e004      	b.n	800fc6e <tcp_receive+0x172>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d902      	bls.n	800fc7e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f002 fb47 	bl	801230c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f040 8160 	bne.w	800ff46 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fc8e:	e15a      	b.n	800ff46 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc90:	4b4b      	ldr	r3, [pc, #300]	; (800fdc0 <tcp_receive+0x2c4>)
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f2c0 814d 	blt.w	800ff3c <tcp_receive+0x440>
 800fca2:	4b47      	ldr	r3, [pc, #284]	; (800fdc0 <tcp_receive+0x2c4>)
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcaa:	1ad3      	subs	r3, r2, r3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f300 8145 	bgt.w	800ff3c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	8b5b      	ldrh	r3, [r3, #26]
 800fcb6:	f003 0304 	and.w	r3, r3, #4
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d010      	beq.n	800fce0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	8b5b      	ldrh	r3, [r3, #26]
 800fcc2:	f023 0304 	bic.w	r3, r3, #4
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fcee:	10db      	asrs	r3, r3, #3
 800fcf0:	b21b      	sxth	r3, r3
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	4413      	add	r3, r2
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	b21a      	sxth	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fd08:	4b2d      	ldr	r3, [pc, #180]	; (800fdc0 <tcp_receive+0x2c4>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fd20:	4b27      	ldr	r3, [pc, #156]	; (800fdc0 <tcp_receive+0x2c4>)
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	7d1b      	ldrb	r3, [r3, #20]
 800fd2c:	2b03      	cmp	r3, #3
 800fd2e:	f240 8096 	bls.w	800fe5e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d244      	bcs.n	800fdcc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	8b5b      	ldrh	r3, [r3, #26]
 800fd46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <tcp_receive+0x256>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e000      	b.n	800fd54 <tcp_receive+0x258>
 800fd52:	2302      	movs	r3, #2
 800fd54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fd58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd62:	fb12 f303 	smulbb	r3, r2, r3
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	bf28      	it	cs
 800fd6e:	4613      	movcs	r3, r2
 800fd70:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd7a:	4413      	add	r3, r2
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d309      	bcc.n	800fd9c <tcp_receive+0x2a0>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd90:	4413      	add	r3, r2
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fd9a:	e060      	b.n	800fe5e <tcp_receive+0x362>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fda2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fda6:	e05a      	b.n	800fe5e <tcp_receive+0x362>
 800fda8:	0801adf4 	.word	0x0801adf4
 800fdac:	0801b124 	.word	0x0801b124
 800fdb0:	0801ae40 	.word	0x0801ae40
 800fdb4:	0801b140 	.word	0x0801b140
 800fdb8:	20008abc 	.word	0x20008abc
 800fdbc:	20008ab0 	.word	0x20008ab0
 800fdc0:	20008ab4 	.word	0x20008ab4
 800fdc4:	20008aa0 	.word	0x20008aa0
 800fdc8:	20008aba 	.word	0x20008aba
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fdd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fdd4:	4413      	add	r3, r2
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d309      	bcc.n	800fdf6 <tcp_receive+0x2fa>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fde8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fdea:	4413      	add	r3, r2
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fdf4:	e004      	b.n	800fe00 <tcp_receive+0x304>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d326      	bcc.n	800fe5e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe30:	4413      	add	r3, r2
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d30a      	bcc.n	800fe54 <tcp_receive+0x358>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe48:	4413      	add	r3, r2
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fe52:	e004      	b.n	800fe5e <tcp_receive+0x362>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe66:	4a98      	ldr	r2, [pc, #608]	; (80100c8 <tcp_receive+0x5cc>)
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff fdcb 	bl	800fa04 <tcp_free_acked_segments>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe7c:	4a93      	ldr	r2, [pc, #588]	; (80100cc <tcp_receive+0x5d0>)
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7ff fdc0 	bl	800fa04 <tcp_free_acked_segments>
 800fe84:	4602      	mov	r2, r0
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d104      	bne.n	800fe9c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe98:	861a      	strh	r2, [r3, #48]	; 0x30
 800fe9a:	e002      	b.n	800fea2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feac:	2b00      	cmp	r3, #0
 800feae:	d103      	bne.n	800feb8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800febe:	4b84      	ldr	r3, [pc, #528]	; (80100d0 <tcp_receive+0x5d4>)
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	4413      	add	r3, r2
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	8b5b      	ldrh	r3, [r3, #26]
 800fed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d035      	beq.n	800ff44 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d118      	bne.n	800ff12 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d00c      	beq.n	800ff02 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fa fe3e 	bl	800ab76 <lwip_htonl>
 800fefa:	4603      	mov	r3, r0
 800fefc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	dc20      	bgt.n	800ff44 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	8b5b      	ldrh	r3, [r3, #26]
 800ff06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff10:	e018      	b.n	800ff44 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fa fe29 	bl	800ab76 <lwip_htonl>
 800ff24:	4603      	mov	r3, r0
 800ff26:	1ae3      	subs	r3, r4, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	dc0b      	bgt.n	800ff44 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	8b5b      	ldrh	r3, [r3, #26]
 800ff30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff3a:	e003      	b.n	800ff44 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f002 fbdd 	bl	80126fc <tcp_send_empty_ack>
 800ff42:	e000      	b.n	800ff46 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff44:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d05b      	beq.n	8010006 <tcp_receive+0x50a>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff52:	4b60      	ldr	r3, [pc, #384]	; (80100d4 <tcp_receive+0x5d8>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	da54      	bge.n	8010006 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ff5c:	4b5e      	ldr	r3, [pc, #376]	; (80100d8 <tcp_receive+0x5dc>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ff70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ff7a:	10db      	asrs	r3, r3, #3
 800ff7c:	b21b      	sxth	r3, r3
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ff94:	4413      	add	r3, r2
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	b21a      	sxth	r2, r3
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ff9e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	da05      	bge.n	800ffb2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ffa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ffaa:	425b      	negs	r3, r3
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ffb2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ffbc:	109b      	asrs	r3, r3, #2
 800ffbe:	b21b      	sxth	r3, r3
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	1ad3      	subs	r3, r2, r3
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ffd6:	4413      	add	r3, r2
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	b21a      	sxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ffe6:	10db      	asrs	r3, r3, #3
 800ffe8:	b21b      	sxth	r3, r3
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	4413      	add	r3, r2
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	b21a      	sxth	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010006:	4b35      	ldr	r3, [pc, #212]	; (80100dc <tcp_receive+0x5e0>)
 8010008:	881b      	ldrh	r3, [r3, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	f000 84e1 	beq.w	80109d2 <tcp_receive+0xed6>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	7d1b      	ldrb	r3, [r3, #20]
 8010014:	2b06      	cmp	r3, #6
 8010016:	f200 84dc 	bhi.w	80109d2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801001e:	4b30      	ldr	r3, [pc, #192]	; (80100e0 <tcp_receive+0x5e4>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	1ad3      	subs	r3, r2, r3
 8010024:	3b01      	subs	r3, #1
 8010026:	2b00      	cmp	r3, #0
 8010028:	f2c0 808e 	blt.w	8010148 <tcp_receive+0x64c>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010030:	4b2a      	ldr	r3, [pc, #168]	; (80100dc <tcp_receive+0x5e0>)
 8010032:	881b      	ldrh	r3, [r3, #0]
 8010034:	4619      	mov	r1, r3
 8010036:	4b2a      	ldr	r3, [pc, #168]	; (80100e0 <tcp_receive+0x5e4>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	440b      	add	r3, r1
 801003c:	1ad3      	subs	r3, r2, r3
 801003e:	3301      	adds	r3, #1
 8010040:	2b00      	cmp	r3, #0
 8010042:	f300 8081 	bgt.w	8010148 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010046:	4b27      	ldr	r3, [pc, #156]	; (80100e4 <tcp_receive+0x5e8>)
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010050:	4b23      	ldr	r3, [pc, #140]	; (80100e0 <tcp_receive+0x5e4>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010058:	4b22      	ldr	r3, [pc, #136]	; (80100e4 <tcp_receive+0x5e8>)
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d106      	bne.n	801006e <tcp_receive+0x572>
 8010060:	4b21      	ldr	r3, [pc, #132]	; (80100e8 <tcp_receive+0x5ec>)
 8010062:	f240 5294 	movw	r2, #1428	; 0x594
 8010066:	4921      	ldr	r1, [pc, #132]	; (80100ec <tcp_receive+0x5f0>)
 8010068:	4821      	ldr	r0, [pc, #132]	; (80100f0 <tcp_receive+0x5f4>)
 801006a:	f007 febd 	bl	8017de8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801006e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010070:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010074:	4293      	cmp	r3, r2
 8010076:	d906      	bls.n	8010086 <tcp_receive+0x58a>
 8010078:	4b1b      	ldr	r3, [pc, #108]	; (80100e8 <tcp_receive+0x5ec>)
 801007a:	f240 5295 	movw	r2, #1429	; 0x595
 801007e:	491d      	ldr	r1, [pc, #116]	; (80100f4 <tcp_receive+0x5f8>)
 8010080:	481b      	ldr	r0, [pc, #108]	; (80100f0 <tcp_receive+0x5f4>)
 8010082:	f007 feb1 	bl	8017de8 <iprintf>
      off = (u16_t)off32;
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801008c:	4b15      	ldr	r3, [pc, #84]	; (80100e4 <tcp_receive+0x5e8>)
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	891b      	ldrh	r3, [r3, #8]
 8010092:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010096:	429a      	cmp	r2, r3
 8010098:	d906      	bls.n	80100a8 <tcp_receive+0x5ac>
 801009a:	4b13      	ldr	r3, [pc, #76]	; (80100e8 <tcp_receive+0x5ec>)
 801009c:	f240 5297 	movw	r2, #1431	; 0x597
 80100a0:	4915      	ldr	r1, [pc, #84]	; (80100f8 <tcp_receive+0x5fc>)
 80100a2:	4813      	ldr	r0, [pc, #76]	; (80100f0 <tcp_receive+0x5f4>)
 80100a4:	f007 fea0 	bl	8017de8 <iprintf>
      inseg.len -= off;
 80100a8:	4b0e      	ldr	r3, [pc, #56]	; (80100e4 <tcp_receive+0x5e8>)
 80100aa:	891a      	ldrh	r2, [r3, #8]
 80100ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80100b0:	1ad3      	subs	r3, r2, r3
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	4b0b      	ldr	r3, [pc, #44]	; (80100e4 <tcp_receive+0x5e8>)
 80100b6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80100b8:	4b0a      	ldr	r3, [pc, #40]	; (80100e4 <tcp_receive+0x5e8>)
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	891a      	ldrh	r2, [r3, #8]
 80100be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80100c2:	1ad3      	subs	r3, r2, r3
 80100c4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80100c6:	e029      	b.n	801011c <tcp_receive+0x620>
 80100c8:	0801b15c 	.word	0x0801b15c
 80100cc:	0801b164 	.word	0x0801b164
 80100d0:	20008ab8 	.word	0x20008ab8
 80100d4:	20008ab4 	.word	0x20008ab4
 80100d8:	2000f518 	.word	0x2000f518
 80100dc:	20008aba 	.word	0x20008aba
 80100e0:	20008ab0 	.word	0x20008ab0
 80100e4:	20008a90 	.word	0x20008a90
 80100e8:	0801adf4 	.word	0x0801adf4
 80100ec:	0801b16c 	.word	0x0801b16c
 80100f0:	0801ae40 	.word	0x0801ae40
 80100f4:	0801b17c 	.word	0x0801b17c
 80100f8:	0801b18c 	.word	0x0801b18c
        off -= p->len;
 80100fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100fe:	895b      	ldrh	r3, [r3, #10]
 8010100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801010a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801010c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801010e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010112:	2200      	movs	r2, #0
 8010114:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801011c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801011e:	895b      	ldrh	r3, [r3, #10]
 8010120:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010124:	429a      	cmp	r2, r3
 8010126:	d8e9      	bhi.n	80100fc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801012c:	4619      	mov	r1, r3
 801012e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010130:	f7fc f870 	bl	800c214 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010138:	4a91      	ldr	r2, [pc, #580]	; (8010380 <tcp_receive+0x884>)
 801013a:	6013      	str	r3, [r2, #0]
 801013c:	4b91      	ldr	r3, [pc, #580]	; (8010384 <tcp_receive+0x888>)
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	4a8f      	ldr	r2, [pc, #572]	; (8010380 <tcp_receive+0x884>)
 8010142:	6812      	ldr	r2, [r2, #0]
 8010144:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010146:	e00d      	b.n	8010164 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010148:	4b8d      	ldr	r3, [pc, #564]	; (8010380 <tcp_receive+0x884>)
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	2b00      	cmp	r3, #0
 8010154:	da06      	bge.n	8010164 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	8b5b      	ldrh	r3, [r3, #26]
 801015a:	f043 0302 	orr.w	r3, r3, #2
 801015e:	b29a      	uxth	r2, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010164:	4b86      	ldr	r3, [pc, #536]	; (8010380 <tcp_receive+0x884>)
 8010166:	681a      	ldr	r2, [r3, #0]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016c:	1ad3      	subs	r3, r2, r3
 801016e:	2b00      	cmp	r3, #0
 8010170:	f2c0 842a 	blt.w	80109c8 <tcp_receive+0xecc>
 8010174:	4b82      	ldr	r3, [pc, #520]	; (8010380 <tcp_receive+0x884>)
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017c:	6879      	ldr	r1, [r7, #4]
 801017e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010180:	440b      	add	r3, r1
 8010182:	1ad3      	subs	r3, r2, r3
 8010184:	3301      	adds	r3, #1
 8010186:	2b00      	cmp	r3, #0
 8010188:	f300 841e 	bgt.w	80109c8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010190:	4b7b      	ldr	r3, [pc, #492]	; (8010380 <tcp_receive+0x884>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	f040 829a 	bne.w	80106ce <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801019a:	4b7a      	ldr	r3, [pc, #488]	; (8010384 <tcp_receive+0x888>)
 801019c:	891c      	ldrh	r4, [r3, #8]
 801019e:	4b79      	ldr	r3, [pc, #484]	; (8010384 <tcp_receive+0x888>)
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	899b      	ldrh	r3, [r3, #12]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fa fcd0 	bl	800ab4c <lwip_htons>
 80101ac:	4603      	mov	r3, r0
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	f003 0303 	and.w	r3, r3, #3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d001      	beq.n	80101bc <tcp_receive+0x6c0>
 80101b8:	2301      	movs	r3, #1
 80101ba:	e000      	b.n	80101be <tcp_receive+0x6c2>
 80101bc:	2300      	movs	r3, #0
 80101be:	4423      	add	r3, r4
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	4b71      	ldr	r3, [pc, #452]	; (8010388 <tcp_receive+0x88c>)
 80101c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80101ca:	4b6f      	ldr	r3, [pc, #444]	; (8010388 <tcp_receive+0x88c>)
 80101cc:	881b      	ldrh	r3, [r3, #0]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d275      	bcs.n	80102be <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80101d2:	4b6c      	ldr	r3, [pc, #432]	; (8010384 <tcp_receive+0x888>)
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	899b      	ldrh	r3, [r3, #12]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fa fcb6 	bl	800ab4c <lwip_htons>
 80101e0:	4603      	mov	r3, r0
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	f003 0301 	and.w	r3, r3, #1
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d01f      	beq.n	801022c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80101ec:	4b65      	ldr	r3, [pc, #404]	; (8010384 <tcp_receive+0x888>)
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	899b      	ldrh	r3, [r3, #12]
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	b21b      	sxth	r3, r3
 80101f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80101fa:	b21c      	sxth	r4, r3
 80101fc:	4b61      	ldr	r3, [pc, #388]	; (8010384 <tcp_receive+0x888>)
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	899b      	ldrh	r3, [r3, #12]
 8010202:	b29b      	uxth	r3, r3
 8010204:	4618      	mov	r0, r3
 8010206:	f7fa fca1 	bl	800ab4c <lwip_htons>
 801020a:	4603      	mov	r3, r0
 801020c:	b2db      	uxtb	r3, r3
 801020e:	b29b      	uxth	r3, r3
 8010210:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010214:	b29b      	uxth	r3, r3
 8010216:	4618      	mov	r0, r3
 8010218:	f7fa fc98 	bl	800ab4c <lwip_htons>
 801021c:	4603      	mov	r3, r0
 801021e:	b21b      	sxth	r3, r3
 8010220:	4323      	orrs	r3, r4
 8010222:	b21a      	sxth	r2, r3
 8010224:	4b57      	ldr	r3, [pc, #348]	; (8010384 <tcp_receive+0x888>)
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	b292      	uxth	r2, r2
 801022a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010230:	4b54      	ldr	r3, [pc, #336]	; (8010384 <tcp_receive+0x888>)
 8010232:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010234:	4b53      	ldr	r3, [pc, #332]	; (8010384 <tcp_receive+0x888>)
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	899b      	ldrh	r3, [r3, #12]
 801023a:	b29b      	uxth	r3, r3
 801023c:	4618      	mov	r0, r3
 801023e:	f7fa fc85 	bl	800ab4c <lwip_htons>
 8010242:	4603      	mov	r3, r0
 8010244:	b2db      	uxtb	r3, r3
 8010246:	f003 0302 	and.w	r3, r3, #2
 801024a:	2b00      	cmp	r3, #0
 801024c:	d005      	beq.n	801025a <tcp_receive+0x75e>
            inseg.len -= 1;
 801024e:	4b4d      	ldr	r3, [pc, #308]	; (8010384 <tcp_receive+0x888>)
 8010250:	891b      	ldrh	r3, [r3, #8]
 8010252:	3b01      	subs	r3, #1
 8010254:	b29a      	uxth	r2, r3
 8010256:	4b4b      	ldr	r3, [pc, #300]	; (8010384 <tcp_receive+0x888>)
 8010258:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801025a:	4b4a      	ldr	r3, [pc, #296]	; (8010384 <tcp_receive+0x888>)
 801025c:	685a      	ldr	r2, [r3, #4]
 801025e:	4b49      	ldr	r3, [pc, #292]	; (8010384 <tcp_receive+0x888>)
 8010260:	891b      	ldrh	r3, [r3, #8]
 8010262:	4619      	mov	r1, r3
 8010264:	4610      	mov	r0, r2
 8010266:	f7fb fed5 	bl	800c014 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801026a:	4b46      	ldr	r3, [pc, #280]	; (8010384 <tcp_receive+0x888>)
 801026c:	891c      	ldrh	r4, [r3, #8]
 801026e:	4b45      	ldr	r3, [pc, #276]	; (8010384 <tcp_receive+0x888>)
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	899b      	ldrh	r3, [r3, #12]
 8010274:	b29b      	uxth	r3, r3
 8010276:	4618      	mov	r0, r3
 8010278:	f7fa fc68 	bl	800ab4c <lwip_htons>
 801027c:	4603      	mov	r3, r0
 801027e:	b2db      	uxtb	r3, r3
 8010280:	f003 0303 	and.w	r3, r3, #3
 8010284:	2b00      	cmp	r3, #0
 8010286:	d001      	beq.n	801028c <tcp_receive+0x790>
 8010288:	2301      	movs	r3, #1
 801028a:	e000      	b.n	801028e <tcp_receive+0x792>
 801028c:	2300      	movs	r3, #0
 801028e:	4423      	add	r3, r4
 8010290:	b29a      	uxth	r2, r3
 8010292:	4b3d      	ldr	r3, [pc, #244]	; (8010388 <tcp_receive+0x88c>)
 8010294:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010296:	4b3c      	ldr	r3, [pc, #240]	; (8010388 <tcp_receive+0x88c>)
 8010298:	881b      	ldrh	r3, [r3, #0]
 801029a:	461a      	mov	r2, r3
 801029c:	4b38      	ldr	r3, [pc, #224]	; (8010380 <tcp_receive+0x884>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	441a      	add	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a6:	6879      	ldr	r1, [r7, #4]
 80102a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80102aa:	440b      	add	r3, r1
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d006      	beq.n	80102be <tcp_receive+0x7c2>
 80102b0:	4b36      	ldr	r3, [pc, #216]	; (801038c <tcp_receive+0x890>)
 80102b2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80102b6:	4936      	ldr	r1, [pc, #216]	; (8010390 <tcp_receive+0x894>)
 80102b8:	4836      	ldr	r0, [pc, #216]	; (8010394 <tcp_receive+0x898>)
 80102ba:	f007 fd95 	bl	8017de8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f000 80e7 	beq.w	8010496 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80102c8:	4b2e      	ldr	r3, [pc, #184]	; (8010384 <tcp_receive+0x888>)
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	899b      	ldrh	r3, [r3, #12]
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fa fc3b 	bl	800ab4c <lwip_htons>
 80102d6:	4603      	mov	r3, r0
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	f003 0301 	and.w	r3, r3, #1
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d010      	beq.n	8010304 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80102e2:	e00a      	b.n	80102fa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102e8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f7fd fcab 	bl	800dc50 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d1f0      	bne.n	80102e4 <tcp_receive+0x7e8>
 8010302:	e0c8      	b.n	8010496 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010308:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801030a:	e052      	b.n	80103b2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801030c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	899b      	ldrh	r3, [r3, #12]
 8010312:	b29b      	uxth	r3, r3
 8010314:	4618      	mov	r0, r3
 8010316:	f7fa fc19 	bl	800ab4c <lwip_htons>
 801031a:	4603      	mov	r3, r0
 801031c:	b2db      	uxtb	r3, r3
 801031e:	f003 0301 	and.w	r3, r3, #1
 8010322:	2b00      	cmp	r3, #0
 8010324:	d03d      	beq.n	80103a2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010326:	4b17      	ldr	r3, [pc, #92]	; (8010384 <tcp_receive+0x888>)
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	899b      	ldrh	r3, [r3, #12]
 801032c:	b29b      	uxth	r3, r3
 801032e:	4618      	mov	r0, r3
 8010330:	f7fa fc0c 	bl	800ab4c <lwip_htons>
 8010334:	4603      	mov	r3, r0
 8010336:	b2db      	uxtb	r3, r3
 8010338:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801033c:	2b00      	cmp	r3, #0
 801033e:	d130      	bne.n	80103a2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010340:	4b10      	ldr	r3, [pc, #64]	; (8010384 <tcp_receive+0x888>)
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	899b      	ldrh	r3, [r3, #12]
 8010346:	b29c      	uxth	r4, r3
 8010348:	2001      	movs	r0, #1
 801034a:	f7fa fbff 	bl	800ab4c <lwip_htons>
 801034e:	4603      	mov	r3, r0
 8010350:	461a      	mov	r2, r3
 8010352:	4b0c      	ldr	r3, [pc, #48]	; (8010384 <tcp_receive+0x888>)
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	4322      	orrs	r2, r4
 8010358:	b292      	uxth	r2, r2
 801035a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801035c:	4b09      	ldr	r3, [pc, #36]	; (8010384 <tcp_receive+0x888>)
 801035e:	891c      	ldrh	r4, [r3, #8]
 8010360:	4b08      	ldr	r3, [pc, #32]	; (8010384 <tcp_receive+0x888>)
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	899b      	ldrh	r3, [r3, #12]
 8010366:	b29b      	uxth	r3, r3
 8010368:	4618      	mov	r0, r3
 801036a:	f7fa fbef 	bl	800ab4c <lwip_htons>
 801036e:	4603      	mov	r3, r0
 8010370:	b2db      	uxtb	r3, r3
 8010372:	f003 0303 	and.w	r3, r3, #3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00e      	beq.n	8010398 <tcp_receive+0x89c>
 801037a:	2301      	movs	r3, #1
 801037c:	e00d      	b.n	801039a <tcp_receive+0x89e>
 801037e:	bf00      	nop
 8010380:	20008ab0 	.word	0x20008ab0
 8010384:	20008a90 	.word	0x20008a90
 8010388:	20008aba 	.word	0x20008aba
 801038c:	0801adf4 	.word	0x0801adf4
 8010390:	0801b19c 	.word	0x0801b19c
 8010394:	0801ae40 	.word	0x0801ae40
 8010398:	2300      	movs	r3, #0
 801039a:	4423      	add	r3, r4
 801039c:	b29a      	uxth	r2, r3
 801039e:	4b98      	ldr	r3, [pc, #608]	; (8010600 <tcp_receive+0xb04>)
 80103a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80103a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80103a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80103ac:	6938      	ldr	r0, [r7, #16]
 80103ae:	f7fd fc4f 	bl	800dc50 <tcp_seg_free>
            while (next &&
 80103b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00e      	beq.n	80103d6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80103b8:	4b91      	ldr	r3, [pc, #580]	; (8010600 <tcp_receive+0xb04>)
 80103ba:	881b      	ldrh	r3, [r3, #0]
 80103bc:	461a      	mov	r2, r3
 80103be:	4b91      	ldr	r3, [pc, #580]	; (8010604 <tcp_receive+0xb08>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	441a      	add	r2, r3
 80103c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103cc:	8909      	ldrh	r1, [r1, #8]
 80103ce:	440b      	add	r3, r1
 80103d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	da9a      	bge.n	801030c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80103d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d059      	beq.n	8010490 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80103dc:	4b88      	ldr	r3, [pc, #544]	; (8010600 <tcp_receive+0xb04>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	461a      	mov	r2, r3
 80103e2:	4b88      	ldr	r3, [pc, #544]	; (8010604 <tcp_receive+0xb08>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	441a      	add	r2, r3
 80103e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	dd4d      	ble.n	8010490 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80103f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	4b81      	ldr	r3, [pc, #516]	; (8010604 <tcp_receive+0xb08>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	b29b      	uxth	r3, r3
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	b29a      	uxth	r2, r3
 8010406:	4b80      	ldr	r3, [pc, #512]	; (8010608 <tcp_receive+0xb0c>)
 8010408:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801040a:	4b7f      	ldr	r3, [pc, #508]	; (8010608 <tcp_receive+0xb0c>)
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	899b      	ldrh	r3, [r3, #12]
 8010410:	b29b      	uxth	r3, r3
 8010412:	4618      	mov	r0, r3
 8010414:	f7fa fb9a 	bl	800ab4c <lwip_htons>
 8010418:	4603      	mov	r3, r0
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 0302 	and.w	r3, r3, #2
 8010420:	2b00      	cmp	r3, #0
 8010422:	d005      	beq.n	8010430 <tcp_receive+0x934>
                inseg.len -= 1;
 8010424:	4b78      	ldr	r3, [pc, #480]	; (8010608 <tcp_receive+0xb0c>)
 8010426:	891b      	ldrh	r3, [r3, #8]
 8010428:	3b01      	subs	r3, #1
 801042a:	b29a      	uxth	r2, r3
 801042c:	4b76      	ldr	r3, [pc, #472]	; (8010608 <tcp_receive+0xb0c>)
 801042e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010430:	4b75      	ldr	r3, [pc, #468]	; (8010608 <tcp_receive+0xb0c>)
 8010432:	685a      	ldr	r2, [r3, #4]
 8010434:	4b74      	ldr	r3, [pc, #464]	; (8010608 <tcp_receive+0xb0c>)
 8010436:	891b      	ldrh	r3, [r3, #8]
 8010438:	4619      	mov	r1, r3
 801043a:	4610      	mov	r0, r2
 801043c:	f7fb fdea 	bl	800c014 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010440:	4b71      	ldr	r3, [pc, #452]	; (8010608 <tcp_receive+0xb0c>)
 8010442:	891c      	ldrh	r4, [r3, #8]
 8010444:	4b70      	ldr	r3, [pc, #448]	; (8010608 <tcp_receive+0xb0c>)
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	899b      	ldrh	r3, [r3, #12]
 801044a:	b29b      	uxth	r3, r3
 801044c:	4618      	mov	r0, r3
 801044e:	f7fa fb7d 	bl	800ab4c <lwip_htons>
 8010452:	4603      	mov	r3, r0
 8010454:	b2db      	uxtb	r3, r3
 8010456:	f003 0303 	and.w	r3, r3, #3
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <tcp_receive+0x966>
 801045e:	2301      	movs	r3, #1
 8010460:	e000      	b.n	8010464 <tcp_receive+0x968>
 8010462:	2300      	movs	r3, #0
 8010464:	4423      	add	r3, r4
 8010466:	b29a      	uxth	r2, r3
 8010468:	4b65      	ldr	r3, [pc, #404]	; (8010600 <tcp_receive+0xb04>)
 801046a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801046c:	4b64      	ldr	r3, [pc, #400]	; (8010600 <tcp_receive+0xb04>)
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	461a      	mov	r2, r3
 8010472:	4b64      	ldr	r3, [pc, #400]	; (8010604 <tcp_receive+0xb08>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	441a      	add	r2, r3
 8010478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	429a      	cmp	r2, r3
 8010480:	d006      	beq.n	8010490 <tcp_receive+0x994>
 8010482:	4b62      	ldr	r3, [pc, #392]	; (801060c <tcp_receive+0xb10>)
 8010484:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8010488:	4961      	ldr	r1, [pc, #388]	; (8010610 <tcp_receive+0xb14>)
 801048a:	4862      	ldr	r0, [pc, #392]	; (8010614 <tcp_receive+0xb18>)
 801048c:	f007 fcac 	bl	8017de8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010494:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010496:	4b5a      	ldr	r3, [pc, #360]	; (8010600 <tcp_receive+0xb04>)
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	4b59      	ldr	r3, [pc, #356]	; (8010604 <tcp_receive+0xb08>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	441a      	add	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80104aa:	4b55      	ldr	r3, [pc, #340]	; (8010600 <tcp_receive+0xb04>)
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d206      	bcs.n	80104c0 <tcp_receive+0x9c4>
 80104b2:	4b56      	ldr	r3, [pc, #344]	; (801060c <tcp_receive+0xb10>)
 80104b4:	f240 6207 	movw	r2, #1543	; 0x607
 80104b8:	4957      	ldr	r1, [pc, #348]	; (8010618 <tcp_receive+0xb1c>)
 80104ba:	4856      	ldr	r0, [pc, #344]	; (8010614 <tcp_receive+0xb18>)
 80104bc:	f007 fc94 	bl	8017de8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80104c4:	4b4e      	ldr	r3, [pc, #312]	; (8010600 <tcp_receive+0xb04>)
 80104c6:	881b      	ldrh	r3, [r3, #0]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7fc fe9b 	bl	800d20c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80104d6:	4b4c      	ldr	r3, [pc, #304]	; (8010608 <tcp_receive+0xb0c>)
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	891b      	ldrh	r3, [r3, #8]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d006      	beq.n	80104ee <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80104e0:	4b49      	ldr	r3, [pc, #292]	; (8010608 <tcp_receive+0xb0c>)
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	4a4d      	ldr	r2, [pc, #308]	; (801061c <tcp_receive+0xb20>)
 80104e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80104e8:	4b47      	ldr	r3, [pc, #284]	; (8010608 <tcp_receive+0xb0c>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80104ee:	4b46      	ldr	r3, [pc, #280]	; (8010608 <tcp_receive+0xb0c>)
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	899b      	ldrh	r3, [r3, #12]
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fa fb28 	bl	800ab4c <lwip_htons>
 80104fc:	4603      	mov	r3, r0
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	f003 0301 	and.w	r3, r3, #1
 8010504:	2b00      	cmp	r3, #0
 8010506:	f000 80b8 	beq.w	801067a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801050a:	4b45      	ldr	r3, [pc, #276]	; (8010620 <tcp_receive+0xb24>)
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	f043 0320 	orr.w	r3, r3, #32
 8010512:	b2da      	uxtb	r2, r3
 8010514:	4b42      	ldr	r3, [pc, #264]	; (8010620 <tcp_receive+0xb24>)
 8010516:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010518:	e0af      	b.n	801067a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801051e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	4a36      	ldr	r2, [pc, #216]	; (8010604 <tcp_receive+0xb08>)
 801052a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	891b      	ldrh	r3, [r3, #8]
 8010530:	461c      	mov	r4, r3
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	899b      	ldrh	r3, [r3, #12]
 8010538:	b29b      	uxth	r3, r3
 801053a:	4618      	mov	r0, r3
 801053c:	f7fa fb06 	bl	800ab4c <lwip_htons>
 8010540:	4603      	mov	r3, r0
 8010542:	b2db      	uxtb	r3, r3
 8010544:	f003 0303 	and.w	r3, r3, #3
 8010548:	2b00      	cmp	r3, #0
 801054a:	d001      	beq.n	8010550 <tcp_receive+0xa54>
 801054c:	2301      	movs	r3, #1
 801054e:	e000      	b.n	8010552 <tcp_receive+0xa56>
 8010550:	2300      	movs	r3, #0
 8010552:	191a      	adds	r2, r3, r4
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010558:	441a      	add	r2, r3
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010562:	461c      	mov	r4, r3
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	891b      	ldrh	r3, [r3, #8]
 8010568:	461d      	mov	r5, r3
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	899b      	ldrh	r3, [r3, #12]
 8010570:	b29b      	uxth	r3, r3
 8010572:	4618      	mov	r0, r3
 8010574:	f7fa faea 	bl	800ab4c <lwip_htons>
 8010578:	4603      	mov	r3, r0
 801057a:	b2db      	uxtb	r3, r3
 801057c:	f003 0303 	and.w	r3, r3, #3
 8010580:	2b00      	cmp	r3, #0
 8010582:	d001      	beq.n	8010588 <tcp_receive+0xa8c>
 8010584:	2301      	movs	r3, #1
 8010586:	e000      	b.n	801058a <tcp_receive+0xa8e>
 8010588:	2300      	movs	r3, #0
 801058a:	442b      	add	r3, r5
 801058c:	429c      	cmp	r4, r3
 801058e:	d206      	bcs.n	801059e <tcp_receive+0xaa2>
 8010590:	4b1e      	ldr	r3, [pc, #120]	; (801060c <tcp_receive+0xb10>)
 8010592:	f240 622c 	movw	r2, #1580	; 0x62c
 8010596:	4923      	ldr	r1, [pc, #140]	; (8010624 <tcp_receive+0xb28>)
 8010598:	481e      	ldr	r0, [pc, #120]	; (8010614 <tcp_receive+0xb18>)
 801059a:	f007 fc25 	bl	8017de8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	891b      	ldrh	r3, [r3, #8]
 80105a2:	461c      	mov	r4, r3
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	899b      	ldrh	r3, [r3, #12]
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7fa facd 	bl	800ab4c <lwip_htons>
 80105b2:	4603      	mov	r3, r0
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	f003 0303 	and.w	r3, r3, #3
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <tcp_receive+0xac6>
 80105be:	2301      	movs	r3, #1
 80105c0:	e000      	b.n	80105c4 <tcp_receive+0xac8>
 80105c2:	2300      	movs	r3, #0
 80105c4:	1919      	adds	r1, r3, r4
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80105ca:	b28b      	uxth	r3, r1
 80105cc:	1ad3      	subs	r3, r2, r3
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7fc fe19 	bl	800d20c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	891b      	ldrh	r3, [r3, #8]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d028      	beq.n	8010636 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80105e4:	4b0d      	ldr	r3, [pc, #52]	; (801061c <tcp_receive+0xb20>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d01d      	beq.n	8010628 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80105ec:	4b0b      	ldr	r3, [pc, #44]	; (801061c <tcp_receive+0xb20>)
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	4619      	mov	r1, r3
 80105f6:	4610      	mov	r0, r2
 80105f8:	f7fb ff60 	bl	800c4bc <pbuf_cat>
 80105fc:	e018      	b.n	8010630 <tcp_receive+0xb34>
 80105fe:	bf00      	nop
 8010600:	20008aba 	.word	0x20008aba
 8010604:	20008ab0 	.word	0x20008ab0
 8010608:	20008a90 	.word	0x20008a90
 801060c:	0801adf4 	.word	0x0801adf4
 8010610:	0801b1d4 	.word	0x0801b1d4
 8010614:	0801ae40 	.word	0x0801ae40
 8010618:	0801b210 	.word	0x0801b210
 801061c:	20008ac0 	.word	0x20008ac0
 8010620:	20008abd 	.word	0x20008abd
 8010624:	0801b230 	.word	0x0801b230
            } else {
              recv_data = cseg->p;
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	4a70      	ldr	r2, [pc, #448]	; (80107f0 <tcp_receive+0xcf4>)
 801062e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	2200      	movs	r2, #0
 8010634:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	899b      	ldrh	r3, [r3, #12]
 801063c:	b29b      	uxth	r3, r3
 801063e:	4618      	mov	r0, r3
 8010640:	f7fa fa84 	bl	800ab4c <lwip_htons>
 8010644:	4603      	mov	r3, r0
 8010646:	b2db      	uxtb	r3, r3
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00d      	beq.n	801066c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010650:	4b68      	ldr	r3, [pc, #416]	; (80107f4 <tcp_receive+0xcf8>)
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	f043 0320 	orr.w	r3, r3, #32
 8010658:	b2da      	uxtb	r2, r3
 801065a:	4b66      	ldr	r3, [pc, #408]	; (80107f4 <tcp_receive+0xcf8>)
 801065c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	7d1b      	ldrb	r3, [r3, #20]
 8010662:	2b04      	cmp	r3, #4
 8010664:	d102      	bne.n	801066c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2207      	movs	r2, #7
 801066a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010674:	68b8      	ldr	r0, [r7, #8]
 8010676:	f7fd faeb 	bl	800dc50 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801067e:	2b00      	cmp	r3, #0
 8010680:	d008      	beq.n	8010694 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	685a      	ldr	r2, [r3, #4]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801068e:	429a      	cmp	r2, r3
 8010690:	f43f af43 	beq.w	801051a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	8b5b      	ldrh	r3, [r3, #26]
 8010698:	f003 0301 	and.w	r3, r3, #1
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00e      	beq.n	80106be <tcp_receive+0xbc2>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	8b5b      	ldrh	r3, [r3, #26]
 80106a4:	f023 0301 	bic.w	r3, r3, #1
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	835a      	strh	r2, [r3, #26]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	8b5b      	ldrh	r3, [r3, #26]
 80106b2:	f043 0302 	orr.w	r3, r3, #2
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80106bc:	e188      	b.n	80109d0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	8b5b      	ldrh	r3, [r3, #26]
 80106c2:	f043 0301 	orr.w	r3, r3, #1
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80106cc:	e180      	b.n	80109d0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d106      	bne.n	80106e4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80106d6:	4848      	ldr	r0, [pc, #288]	; (80107f8 <tcp_receive+0xcfc>)
 80106d8:	f7fd faf0 	bl	800dcbc <tcp_seg_copy>
 80106dc:	4602      	mov	r2, r0
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	675a      	str	r2, [r3, #116]	; 0x74
 80106e2:	e16d      	b.n	80109c0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80106e4:	2300      	movs	r3, #0
 80106e6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80106ee:	e157      	b.n	80109a0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80106f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f2:	68db      	ldr	r3, [r3, #12]
 80106f4:	685a      	ldr	r2, [r3, #4]
 80106f6:	4b41      	ldr	r3, [pc, #260]	; (80107fc <tcp_receive+0xd00>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d11d      	bne.n	801073a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80106fe:	4b3e      	ldr	r3, [pc, #248]	; (80107f8 <tcp_receive+0xcfc>)
 8010700:	891a      	ldrh	r2, [r3, #8]
 8010702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010704:	891b      	ldrh	r3, [r3, #8]
 8010706:	429a      	cmp	r2, r3
 8010708:	f240 814f 	bls.w	80109aa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801070c:	483a      	ldr	r0, [pc, #232]	; (80107f8 <tcp_receive+0xcfc>)
 801070e:	f7fd fad5 	bl	800dcbc <tcp_seg_copy>
 8010712:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	2b00      	cmp	r3, #0
 8010718:	f000 8149 	beq.w	80109ae <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801071c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071e:	2b00      	cmp	r3, #0
 8010720:	d003      	beq.n	801072a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010724:	697a      	ldr	r2, [r7, #20]
 8010726:	601a      	str	r2, [r3, #0]
 8010728:	e002      	b.n	8010730 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	697a      	ldr	r2, [r7, #20]
 801072e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010732:	6978      	ldr	r0, [r7, #20]
 8010734:	f7ff f8de 	bl	800f8f4 <tcp_oos_insert_segment>
                }
                break;
 8010738:	e139      	b.n	80109ae <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801073a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801073c:	2b00      	cmp	r3, #0
 801073e:	d117      	bne.n	8010770 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010740:	4b2e      	ldr	r3, [pc, #184]	; (80107fc <tcp_receive+0xd00>)
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	2b00      	cmp	r3, #0
 801074e:	da57      	bge.n	8010800 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010750:	4829      	ldr	r0, [pc, #164]	; (80107f8 <tcp_receive+0xcfc>)
 8010752:	f7fd fab3 	bl	800dcbc <tcp_seg_copy>
 8010756:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010758:	69bb      	ldr	r3, [r7, #24]
 801075a:	2b00      	cmp	r3, #0
 801075c:	f000 8129 	beq.w	80109b2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	69ba      	ldr	r2, [r7, #24]
 8010764:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010768:	69b8      	ldr	r0, [r7, #24]
 801076a:	f7ff f8c3 	bl	800f8f4 <tcp_oos_insert_segment>
                  }
                  break;
 801076e:	e120      	b.n	80109b2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010770:	4b22      	ldr	r3, [pc, #136]	; (80107fc <tcp_receive+0xd00>)
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	1ad3      	subs	r3, r2, r3
 801077c:	3b01      	subs	r3, #1
 801077e:	2b00      	cmp	r3, #0
 8010780:	db3e      	blt.n	8010800 <tcp_receive+0xd04>
 8010782:	4b1e      	ldr	r3, [pc, #120]	; (80107fc <tcp_receive+0xd00>)
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	1ad3      	subs	r3, r2, r3
 801078e:	3301      	adds	r3, #1
 8010790:	2b00      	cmp	r3, #0
 8010792:	dc35      	bgt.n	8010800 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010794:	4818      	ldr	r0, [pc, #96]	; (80107f8 <tcp_receive+0xcfc>)
 8010796:	f7fd fa91 	bl	800dcbc <tcp_seg_copy>
 801079a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f000 8109 	beq.w	80109b6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80107a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107ac:	8912      	ldrh	r2, [r2, #8]
 80107ae:	441a      	add	r2, r3
 80107b0:	4b12      	ldr	r3, [pc, #72]	; (80107fc <tcp_receive+0xd00>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	1ad3      	subs	r3, r2, r3
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	dd12      	ble.n	80107e0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80107ba:	4b10      	ldr	r3, [pc, #64]	; (80107fc <tcp_receive+0xd00>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	b29a      	uxth	r2, r3
 80107c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80107d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d2:	685a      	ldr	r2, [r3, #4]
 80107d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d6:	891b      	ldrh	r3, [r3, #8]
 80107d8:	4619      	mov	r1, r3
 80107da:	4610      	mov	r0, r2
 80107dc:	f7fb fc1a 	bl	800c014 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80107e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e2:	69fa      	ldr	r2, [r7, #28]
 80107e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80107e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80107e8:	69f8      	ldr	r0, [r7, #28]
 80107ea:	f7ff f883 	bl	800f8f4 <tcp_oos_insert_segment>
                  }
                  break;
 80107ee:	e0e2      	b.n	80109b6 <tcp_receive+0xeba>
 80107f0:	20008ac0 	.word	0x20008ac0
 80107f4:	20008abd 	.word	0x20008abd
 80107f8:	20008a90 	.word	0x20008a90
 80107fc:	20008ab0 	.word	0x20008ab0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010802:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	f040 80c6 	bne.w	801099a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801080e:	4b80      	ldr	r3, [pc, #512]	; (8010a10 <tcp_receive+0xf14>)
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801081a:	2b00      	cmp	r3, #0
 801081c:	f340 80bd 	ble.w	801099a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	899b      	ldrh	r3, [r3, #12]
 8010826:	b29b      	uxth	r3, r3
 8010828:	4618      	mov	r0, r3
 801082a:	f7fa f98f 	bl	800ab4c <lwip_htons>
 801082e:	4603      	mov	r3, r0
 8010830:	b2db      	uxtb	r3, r3
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	f040 80bf 	bne.w	80109ba <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801083c:	4875      	ldr	r0, [pc, #468]	; (8010a14 <tcp_receive+0xf18>)
 801083e:	f7fd fa3d 	bl	800dcbc <tcp_seg_copy>
 8010842:	4602      	mov	r2, r0
 8010844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010846:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 80b6 	beq.w	80109be <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801085a:	8912      	ldrh	r2, [r2, #8]
 801085c:	441a      	add	r2, r3
 801085e:	4b6c      	ldr	r3, [pc, #432]	; (8010a10 <tcp_receive+0xf14>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	2b00      	cmp	r3, #0
 8010866:	dd12      	ble.n	801088e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010868:	4b69      	ldr	r3, [pc, #420]	; (8010a10 <tcp_receive+0xf14>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	b29a      	uxth	r2, r3
 801086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	b29b      	uxth	r3, r3
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	b29a      	uxth	r2, r3
 801087a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801087e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010880:	685a      	ldr	r2, [r3, #4]
 8010882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010884:	891b      	ldrh	r3, [r3, #8]
 8010886:	4619      	mov	r1, r3
 8010888:	4610      	mov	r0, r2
 801088a:	f7fb fbc3 	bl	800c014 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801088e:	4b62      	ldr	r3, [pc, #392]	; (8010a18 <tcp_receive+0xf1c>)
 8010890:	881b      	ldrh	r3, [r3, #0]
 8010892:	461a      	mov	r2, r3
 8010894:	4b5e      	ldr	r3, [pc, #376]	; (8010a10 <tcp_receive+0xf14>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	441a      	add	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801089e:	6879      	ldr	r1, [r7, #4]
 80108a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108a2:	440b      	add	r3, r1
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f340 8089 	ble.w	80109be <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80108ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	899b      	ldrh	r3, [r3, #12]
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fa f948 	bl	800ab4c <lwip_htons>
 80108bc:	4603      	mov	r3, r0
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	f003 0301 	and.w	r3, r3, #1
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d022      	beq.n	801090e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80108c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	899b      	ldrh	r3, [r3, #12]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	b21b      	sxth	r3, r3
 80108d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80108d8:	b21c      	sxth	r4, r3
 80108da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	899b      	ldrh	r3, [r3, #12]
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7fa f931 	bl	800ab4c <lwip_htons>
 80108ea:	4603      	mov	r3, r0
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fa f928 	bl	800ab4c <lwip_htons>
 80108fc:	4603      	mov	r3, r0
 80108fe:	b21b      	sxth	r3, r3
 8010900:	4323      	orrs	r3, r4
 8010902:	b21a      	sxth	r2, r3
 8010904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	68db      	ldr	r3, [r3, #12]
 801090a:	b292      	uxth	r2, r2
 801090c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010912:	b29a      	uxth	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010918:	4413      	add	r3, r2
 801091a:	b299      	uxth	r1, r3
 801091c:	4b3c      	ldr	r3, [pc, #240]	; (8010a10 <tcp_receive+0xf14>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	b29a      	uxth	r2, r3
 8010922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	1a8a      	subs	r2, r1, r2
 8010928:	b292      	uxth	r2, r2
 801092a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801092c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	891b      	ldrh	r3, [r3, #8]
 8010938:	4619      	mov	r1, r3
 801093a:	4610      	mov	r0, r2
 801093c:	f7fb fb6a 	bl	800c014 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	891c      	ldrh	r4, [r3, #8]
 8010946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	899b      	ldrh	r3, [r3, #12]
 801094e:	b29b      	uxth	r3, r3
 8010950:	4618      	mov	r0, r3
 8010952:	f7fa f8fb 	bl	800ab4c <lwip_htons>
 8010956:	4603      	mov	r3, r0
 8010958:	b2db      	uxtb	r3, r3
 801095a:	f003 0303 	and.w	r3, r3, #3
 801095e:	2b00      	cmp	r3, #0
 8010960:	d001      	beq.n	8010966 <tcp_receive+0xe6a>
 8010962:	2301      	movs	r3, #1
 8010964:	e000      	b.n	8010968 <tcp_receive+0xe6c>
 8010966:	2300      	movs	r3, #0
 8010968:	4423      	add	r3, r4
 801096a:	b29a      	uxth	r2, r3
 801096c:	4b2a      	ldr	r3, [pc, #168]	; (8010a18 <tcp_receive+0xf1c>)
 801096e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010970:	4b29      	ldr	r3, [pc, #164]	; (8010a18 <tcp_receive+0xf1c>)
 8010972:	881b      	ldrh	r3, [r3, #0]
 8010974:	461a      	mov	r2, r3
 8010976:	4b26      	ldr	r3, [pc, #152]	; (8010a10 <tcp_receive+0xf14>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	441a      	add	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010980:	6879      	ldr	r1, [r7, #4]
 8010982:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010984:	440b      	add	r3, r1
 8010986:	429a      	cmp	r2, r3
 8010988:	d019      	beq.n	80109be <tcp_receive+0xec2>
 801098a:	4b24      	ldr	r3, [pc, #144]	; (8010a1c <tcp_receive+0xf20>)
 801098c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010990:	4923      	ldr	r1, [pc, #140]	; (8010a20 <tcp_receive+0xf24>)
 8010992:	4824      	ldr	r0, [pc, #144]	; (8010a24 <tcp_receive+0xf28>)
 8010994:	f007 fa28 	bl	8017de8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010998:	e011      	b.n	80109be <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	63bb      	str	r3, [r7, #56]	; 0x38
 80109a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f47f aea4 	bne.w	80106f0 <tcp_receive+0xbf4>
 80109a8:	e00a      	b.n	80109c0 <tcp_receive+0xec4>
                break;
 80109aa:	bf00      	nop
 80109ac:	e008      	b.n	80109c0 <tcp_receive+0xec4>
                break;
 80109ae:	bf00      	nop
 80109b0:	e006      	b.n	80109c0 <tcp_receive+0xec4>
                  break;
 80109b2:	bf00      	nop
 80109b4:	e004      	b.n	80109c0 <tcp_receive+0xec4>
                  break;
 80109b6:	bf00      	nop
 80109b8:	e002      	b.n	80109c0 <tcp_receive+0xec4>
                  break;
 80109ba:	bf00      	nop
 80109bc:	e000      	b.n	80109c0 <tcp_receive+0xec4>
                break;
 80109be:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f001 fe9b 	bl	80126fc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80109c6:	e003      	b.n	80109d0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f001 fe97 	bl	80126fc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80109ce:	e01a      	b.n	8010a06 <tcp_receive+0xf0a>
 80109d0:	e019      	b.n	8010a06 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80109d2:	4b0f      	ldr	r3, [pc, #60]	; (8010a10 <tcp_receive+0xf14>)
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109da:	1ad3      	subs	r3, r2, r3
 80109dc:	2b00      	cmp	r3, #0
 80109de:	db0a      	blt.n	80109f6 <tcp_receive+0xefa>
 80109e0:	4b0b      	ldr	r3, [pc, #44]	; (8010a10 <tcp_receive+0xf14>)
 80109e2:	681a      	ldr	r2, [r3, #0]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e8:	6879      	ldr	r1, [r7, #4]
 80109ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80109ec:	440b      	add	r3, r1
 80109ee:	1ad3      	subs	r3, r2, r3
 80109f0:	3301      	adds	r3, #1
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	dd07      	ble.n	8010a06 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	8b5b      	ldrh	r3, [r3, #26]
 80109fa:	f043 0302 	orr.w	r3, r3, #2
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010a04:	e7ff      	b.n	8010a06 <tcp_receive+0xf0a>
 8010a06:	bf00      	nop
 8010a08:	3750      	adds	r7, #80	; 0x50
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	20008ab0 	.word	0x20008ab0
 8010a14:	20008a90 	.word	0x20008a90
 8010a18:	20008aba 	.word	0x20008aba
 8010a1c:	0801adf4 	.word	0x0801adf4
 8010a20:	0801b19c 	.word	0x0801b19c
 8010a24:	0801ae40 	.word	0x0801ae40

08010a28 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010a2e:	4b15      	ldr	r3, [pc, #84]	; (8010a84 <tcp_get_next_optbyte+0x5c>)
 8010a30:	881b      	ldrh	r3, [r3, #0]
 8010a32:	1c5a      	adds	r2, r3, #1
 8010a34:	b291      	uxth	r1, r2
 8010a36:	4a13      	ldr	r2, [pc, #76]	; (8010a84 <tcp_get_next_optbyte+0x5c>)
 8010a38:	8011      	strh	r1, [r2, #0]
 8010a3a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010a3c:	4b12      	ldr	r3, [pc, #72]	; (8010a88 <tcp_get_next_optbyte+0x60>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d004      	beq.n	8010a4e <tcp_get_next_optbyte+0x26>
 8010a44:	4b11      	ldr	r3, [pc, #68]	; (8010a8c <tcp_get_next_optbyte+0x64>)
 8010a46:	881b      	ldrh	r3, [r3, #0]
 8010a48:	88fa      	ldrh	r2, [r7, #6]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d208      	bcs.n	8010a60 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010a4e:	4b10      	ldr	r3, [pc, #64]	; (8010a90 <tcp_get_next_optbyte+0x68>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	3314      	adds	r3, #20
 8010a54:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010a56:	88fb      	ldrh	r3, [r7, #6]
 8010a58:	683a      	ldr	r2, [r7, #0]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	e00b      	b.n	8010a78 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010a60:	88fb      	ldrh	r3, [r7, #6]
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	4b09      	ldr	r3, [pc, #36]	; (8010a8c <tcp_get_next_optbyte+0x64>)
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	1ad3      	subs	r3, r2, r3
 8010a6c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010a6e:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <tcp_get_next_optbyte+0x60>)
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	797b      	ldrb	r3, [r7, #5]
 8010a74:	4413      	add	r3, r2
 8010a76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr
 8010a84:	20008aac 	.word	0x20008aac
 8010a88:	20008aa8 	.word	0x20008aa8
 8010a8c:	20008aa6 	.word	0x20008aa6
 8010a90:	20008aa0 	.word	0x20008aa0

08010a94 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <tcp_parseopt+0x1c>
 8010aa2:	4b31      	ldr	r3, [pc, #196]	; (8010b68 <tcp_parseopt+0xd4>)
 8010aa4:	f240 727d 	movw	r2, #1917	; 0x77d
 8010aa8:	4930      	ldr	r1, [pc, #192]	; (8010b6c <tcp_parseopt+0xd8>)
 8010aaa:	4831      	ldr	r0, [pc, #196]	; (8010b70 <tcp_parseopt+0xdc>)
 8010aac:	f007 f99c 	bl	8017de8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010ab0:	4b30      	ldr	r3, [pc, #192]	; (8010b74 <tcp_parseopt+0xe0>)
 8010ab2:	881b      	ldrh	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d053      	beq.n	8010b60 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010ab8:	4b2f      	ldr	r3, [pc, #188]	; (8010b78 <tcp_parseopt+0xe4>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	801a      	strh	r2, [r3, #0]
 8010abe:	e043      	b.n	8010b48 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8010ac0:	f7ff ffb2 	bl	8010a28 <tcp_get_next_optbyte>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d03c      	beq.n	8010b48 <tcp_parseopt+0xb4>
 8010ace:	2b02      	cmp	r3, #2
 8010ad0:	d002      	beq.n	8010ad8 <tcp_parseopt+0x44>
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d03f      	beq.n	8010b56 <tcp_parseopt+0xc2>
 8010ad6:	e026      	b.n	8010b26 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010ad8:	f7ff ffa6 	bl	8010a28 <tcp_get_next_optbyte>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b04      	cmp	r3, #4
 8010ae0:	d13b      	bne.n	8010b5a <tcp_parseopt+0xc6>
 8010ae2:	4b25      	ldr	r3, [pc, #148]	; (8010b78 <tcp_parseopt+0xe4>)
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	3302      	adds	r3, #2
 8010ae8:	4a22      	ldr	r2, [pc, #136]	; (8010b74 <tcp_parseopt+0xe0>)
 8010aea:	8812      	ldrh	r2, [r2, #0]
 8010aec:	4293      	cmp	r3, r2
 8010aee:	dc34      	bgt.n	8010b5a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010af0:	f7ff ff9a 	bl	8010a28 <tcp_get_next_optbyte>
 8010af4:	4603      	mov	r3, r0
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	021b      	lsls	r3, r3, #8
 8010afa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010afc:	f7ff ff94 	bl	8010a28 <tcp_get_next_optbyte>
 8010b00:	4603      	mov	r3, r0
 8010b02:	b29a      	uxth	r2, r3
 8010b04:	89bb      	ldrh	r3, [r7, #12]
 8010b06:	4313      	orrs	r3, r2
 8010b08:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010b0a:	89bb      	ldrh	r3, [r7, #12]
 8010b0c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010b10:	d804      	bhi.n	8010b1c <tcp_parseopt+0x88>
 8010b12:	89bb      	ldrh	r3, [r7, #12]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d001      	beq.n	8010b1c <tcp_parseopt+0x88>
 8010b18:	89ba      	ldrh	r2, [r7, #12]
 8010b1a:	e001      	b.n	8010b20 <tcp_parseopt+0x8c>
 8010b1c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010b24:	e010      	b.n	8010b48 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010b26:	f7ff ff7f 	bl	8010a28 <tcp_get_next_optbyte>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010b2e:	7afb      	ldrb	r3, [r7, #11]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d914      	bls.n	8010b5e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010b34:	7afb      	ldrb	r3, [r7, #11]
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	4b0f      	ldr	r3, [pc, #60]	; (8010b78 <tcp_parseopt+0xe4>)
 8010b3a:	881b      	ldrh	r3, [r3, #0]
 8010b3c:	4413      	add	r3, r2
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	3b02      	subs	r3, #2
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	4b0c      	ldr	r3, [pc, #48]	; (8010b78 <tcp_parseopt+0xe4>)
 8010b46:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010b48:	4b0b      	ldr	r3, [pc, #44]	; (8010b78 <tcp_parseopt+0xe4>)
 8010b4a:	881a      	ldrh	r2, [r3, #0]
 8010b4c:	4b09      	ldr	r3, [pc, #36]	; (8010b74 <tcp_parseopt+0xe0>)
 8010b4e:	881b      	ldrh	r3, [r3, #0]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d3b5      	bcc.n	8010ac0 <tcp_parseopt+0x2c>
 8010b54:	e004      	b.n	8010b60 <tcp_parseopt+0xcc>
          return;
 8010b56:	bf00      	nop
 8010b58:	e002      	b.n	8010b60 <tcp_parseopt+0xcc>
            return;
 8010b5a:	bf00      	nop
 8010b5c:	e000      	b.n	8010b60 <tcp_parseopt+0xcc>
            return;
 8010b5e:	bf00      	nop
      }
    }
  }
}
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	0801adf4 	.word	0x0801adf4
 8010b6c:	0801b258 	.word	0x0801b258
 8010b70:	0801ae40 	.word	0x0801ae40
 8010b74:	20008aa4 	.word	0x20008aa4
 8010b78:	20008aac 	.word	0x20008aac

08010b7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010b80:	4b05      	ldr	r3, [pc, #20]	; (8010b98 <tcp_trigger_input_pcb_close+0x1c>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	f043 0310 	orr.w	r3, r3, #16
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	4b03      	ldr	r3, [pc, #12]	; (8010b98 <tcp_trigger_input_pcb_close+0x1c>)
 8010b8c:	701a      	strb	r2, [r3, #0]
}
 8010b8e:	bf00      	nop
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr
 8010b98:	20008abd 	.word	0x20008abd

08010b9c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d00a      	beq.n	8010bc4 <tcp_route+0x28>
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	7a1b      	ldrb	r3, [r3, #8]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d006      	beq.n	8010bc4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	7a1b      	ldrb	r3, [r3, #8]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fb f826 	bl	800bc0c <netif_get_by_index>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	e003      	b.n	8010bcc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f005 fcc9 	bl	801655c <ip4_route>
 8010bca:	4603      	mov	r3, r0
  }
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3710      	adds	r7, #16
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010bd4:	b590      	push	{r4, r7, lr}
 8010bd6:	b087      	sub	sp, #28
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	603b      	str	r3, [r7, #0]
 8010be0:	4613      	mov	r3, r2
 8010be2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d105      	bne.n	8010bf6 <tcp_create_segment+0x22>
 8010bea:	4b44      	ldr	r3, [pc, #272]	; (8010cfc <tcp_create_segment+0x128>)
 8010bec:	22a3      	movs	r2, #163	; 0xa3
 8010bee:	4944      	ldr	r1, [pc, #272]	; (8010d00 <tcp_create_segment+0x12c>)
 8010bf0:	4844      	ldr	r0, [pc, #272]	; (8010d04 <tcp_create_segment+0x130>)
 8010bf2:	f007 f8f9 	bl	8017de8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d105      	bne.n	8010c08 <tcp_create_segment+0x34>
 8010bfc:	4b3f      	ldr	r3, [pc, #252]	; (8010cfc <tcp_create_segment+0x128>)
 8010bfe:	22a4      	movs	r2, #164	; 0xa4
 8010c00:	4941      	ldr	r1, [pc, #260]	; (8010d08 <tcp_create_segment+0x134>)
 8010c02:	4840      	ldr	r0, [pc, #256]	; (8010d04 <tcp_create_segment+0x130>)
 8010c04:	f007 f8f0 	bl	8017de8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010c08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	f003 0304 	and.w	r3, r3, #4
 8010c14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010c16:	2003      	movs	r0, #3
 8010c18:	f7fa fc84 	bl	800b524 <memp_malloc>
 8010c1c:	6138      	str	r0, [r7, #16]
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d104      	bne.n	8010c2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010c24:	68b8      	ldr	r0, [r7, #8]
 8010c26:	f7fb fb7b 	bl	800c320 <pbuf_free>
    return NULL;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	e061      	b.n	8010cf2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010c34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	68ba      	ldr	r2, [r7, #8]
 8010c40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	891a      	ldrh	r2, [r3, #8]
 8010c46:	7dfb      	ldrb	r3, [r7, #23]
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d205      	bcs.n	8010c5a <tcp_create_segment+0x86>
 8010c4e:	4b2b      	ldr	r3, [pc, #172]	; (8010cfc <tcp_create_segment+0x128>)
 8010c50:	22b0      	movs	r2, #176	; 0xb0
 8010c52:	492e      	ldr	r1, [pc, #184]	; (8010d0c <tcp_create_segment+0x138>)
 8010c54:	482b      	ldr	r0, [pc, #172]	; (8010d04 <tcp_create_segment+0x130>)
 8010c56:	f007 f8c7 	bl	8017de8 <iprintf>
  seg->len = p->tot_len - optlen;
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	891a      	ldrh	r2, [r3, #8]
 8010c5e:	7dfb      	ldrb	r3, [r7, #23]
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010c6a:	2114      	movs	r1, #20
 8010c6c:	68b8      	ldr	r0, [r7, #8]
 8010c6e:	f7fb fac1 	bl	800c1f4 <pbuf_add_header>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d004      	beq.n	8010c82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010c78:	6938      	ldr	r0, [r7, #16]
 8010c7a:	f7fc ffe9 	bl	800dc50 <tcp_seg_free>
    return NULL;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	e037      	b.n	8010cf2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	685a      	ldr	r2, [r3, #4]
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	8ada      	ldrh	r2, [r3, #22]
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	68dc      	ldr	r4, [r3, #12]
 8010c94:	4610      	mov	r0, r2
 8010c96:	f7f9 ff59 	bl	800ab4c <lwip_htons>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	8b1a      	ldrh	r2, [r3, #24]
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	68dc      	ldr	r4, [r3, #12]
 8010ca6:	4610      	mov	r0, r2
 8010ca8:	f7f9 ff50 	bl	800ab4c <lwip_htons>
 8010cac:	4603      	mov	r3, r0
 8010cae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	68dc      	ldr	r4, [r3, #12]
 8010cb4:	6838      	ldr	r0, [r7, #0]
 8010cb6:	f7f9 ff5e 	bl	800ab76 <lwip_htonl>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010cbe:	7dfb      	ldrb	r3, [r7, #23]
 8010cc0:	089b      	lsrs	r3, r3, #2
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	3305      	adds	r3, #5
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	031b      	lsls	r3, r3, #12
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	68dc      	ldr	r4, [r3, #12]
 8010cda:	4610      	mov	r0, r2
 8010cdc:	f7f9 ff36 	bl	800ab4c <lwip_htons>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	749a      	strb	r2, [r3, #18]
 8010cec:	2200      	movs	r2, #0
 8010cee:	74da      	strb	r2, [r3, #19]
  return seg;
 8010cf0:	693b      	ldr	r3, [r7, #16]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	371c      	adds	r7, #28
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd90      	pop	{r4, r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	0801b274 	.word	0x0801b274
 8010d00:	0801b2a8 	.word	0x0801b2a8
 8010d04:	0801b2c8 	.word	0x0801b2c8
 8010d08:	0801b2f0 	.word	0x0801b2f0
 8010d0c:	0801b314 	.word	0x0801b314

08010d10 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b086      	sub	sp, #24
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	607b      	str	r3, [r7, #4]
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73fb      	strb	r3, [r7, #15]
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	81bb      	strh	r3, [r7, #12]
 8010d20:	4613      	mov	r3, r2
 8010d22:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010d24:	89bb      	ldrh	r3, [r7, #12]
 8010d26:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d105      	bne.n	8010d3a <tcp_pbuf_prealloc+0x2a>
 8010d2e:	4b30      	ldr	r3, [pc, #192]	; (8010df0 <tcp_pbuf_prealloc+0xe0>)
 8010d30:	22e8      	movs	r2, #232	; 0xe8
 8010d32:	4930      	ldr	r1, [pc, #192]	; (8010df4 <tcp_pbuf_prealloc+0xe4>)
 8010d34:	4830      	ldr	r0, [pc, #192]	; (8010df8 <tcp_pbuf_prealloc+0xe8>)
 8010d36:	f007 f857 	bl	8017de8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010d3a:	6a3b      	ldr	r3, [r7, #32]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d105      	bne.n	8010d4c <tcp_pbuf_prealloc+0x3c>
 8010d40:	4b2b      	ldr	r3, [pc, #172]	; (8010df0 <tcp_pbuf_prealloc+0xe0>)
 8010d42:	22e9      	movs	r2, #233	; 0xe9
 8010d44:	492d      	ldr	r1, [pc, #180]	; (8010dfc <tcp_pbuf_prealloc+0xec>)
 8010d46:	482c      	ldr	r0, [pc, #176]	; (8010df8 <tcp_pbuf_prealloc+0xe8>)
 8010d48:	f007 f84e 	bl	8017de8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010d4c:	89ba      	ldrh	r2, [r7, #12]
 8010d4e:	897b      	ldrh	r3, [r7, #10]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d221      	bcs.n	8010d98 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010d54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d58:	f003 0302 	and.w	r3, r3, #2
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d111      	bne.n	8010d84 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010d60:	6a3b      	ldr	r3, [r7, #32]
 8010d62:	8b5b      	ldrh	r3, [r3, #26]
 8010d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d115      	bne.n	8010d98 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010d6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d007      	beq.n	8010d84 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010d74:	6a3b      	ldr	r3, [r7, #32]
 8010d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d103      	bne.n	8010d84 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010d7c:	6a3b      	ldr	r3, [r7, #32]
 8010d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d009      	beq.n	8010d98 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010d84:	89bb      	ldrh	r3, [r7, #12]
 8010d86:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010d8a:	f023 0203 	bic.w	r2, r3, #3
 8010d8e:	897b      	ldrh	r3, [r7, #10]
 8010d90:	4293      	cmp	r3, r2
 8010d92:	bf28      	it	cs
 8010d94:	4613      	movcs	r3, r2
 8010d96:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010d98:	8af9      	ldrh	r1, [r7, #22]
 8010d9a:	7bfb      	ldrb	r3, [r7, #15]
 8010d9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7fa ffdd 	bl	800bd60 <pbuf_alloc>
 8010da6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d101      	bne.n	8010db2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010dae:	2300      	movs	r3, #0
 8010db0:	e019      	b.n	8010de6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d006      	beq.n	8010dc8 <tcp_pbuf_prealloc+0xb8>
 8010dba:	4b0d      	ldr	r3, [pc, #52]	; (8010df0 <tcp_pbuf_prealloc+0xe0>)
 8010dbc:	f240 120b 	movw	r2, #267	; 0x10b
 8010dc0:	490f      	ldr	r1, [pc, #60]	; (8010e00 <tcp_pbuf_prealloc+0xf0>)
 8010dc2:	480d      	ldr	r0, [pc, #52]	; (8010df8 <tcp_pbuf_prealloc+0xe8>)
 8010dc4:	f007 f810 	bl	8017de8 <iprintf>
  *oversize = p->len - length;
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	895a      	ldrh	r2, [r3, #10]
 8010dcc:	89bb      	ldrh	r3, [r7, #12]
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	89ba      	ldrh	r2, [r7, #12]
 8010dda:	811a      	strh	r2, [r3, #8]
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	891a      	ldrh	r2, [r3, #8]
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	815a      	strh	r2, [r3, #10]
  return p;
 8010de4:	693b      	ldr	r3, [r7, #16]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3718      	adds	r7, #24
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	0801b274 	.word	0x0801b274
 8010df4:	0801b32c 	.word	0x0801b32c
 8010df8:	0801b2c8 	.word	0x0801b2c8
 8010dfc:	0801b350 	.word	0x0801b350
 8010e00:	0801b370 	.word	0x0801b370

08010e04 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	460b      	mov	r3, r1
 8010e0e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d106      	bne.n	8010e24 <tcp_write_checks+0x20>
 8010e16:	4b33      	ldr	r3, [pc, #204]	; (8010ee4 <tcp_write_checks+0xe0>)
 8010e18:	f240 1233 	movw	r2, #307	; 0x133
 8010e1c:	4932      	ldr	r1, [pc, #200]	; (8010ee8 <tcp_write_checks+0xe4>)
 8010e1e:	4833      	ldr	r0, [pc, #204]	; (8010eec <tcp_write_checks+0xe8>)
 8010e20:	f006 ffe2 	bl	8017de8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	7d1b      	ldrb	r3, [r3, #20]
 8010e28:	2b04      	cmp	r3, #4
 8010e2a:	d00e      	beq.n	8010e4a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010e30:	2b07      	cmp	r3, #7
 8010e32:	d00a      	beq.n	8010e4a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010e38:	2b02      	cmp	r3, #2
 8010e3a:	d006      	beq.n	8010e4a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010e40:	2b03      	cmp	r3, #3
 8010e42:	d002      	beq.n	8010e4a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010e44:	f06f 030a 	mvn.w	r3, #10
 8010e48:	e048      	b.n	8010edc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010e4a:	887b      	ldrh	r3, [r7, #2]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d101      	bne.n	8010e54 <tcp_write_checks+0x50>
    return ERR_OK;
 8010e50:	2300      	movs	r3, #0
 8010e52:	e043      	b.n	8010edc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010e5a:	887a      	ldrh	r2, [r7, #2]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d909      	bls.n	8010e74 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	8b5b      	ldrh	r3, [r3, #26]
 8010e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e72:	e033      	b.n	8010edc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e7a:	2b08      	cmp	r3, #8
 8010e7c:	d909      	bls.n	8010e92 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	8b5b      	ldrh	r3, [r3, #26]
 8010e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e86:	b29a      	uxth	r2, r3
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e90:	e024      	b.n	8010edc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d00f      	beq.n	8010ebc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d11a      	bne.n	8010eda <tcp_write_checks+0xd6>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d116      	bne.n	8010eda <tcp_write_checks+0xd6>
 8010eac:	4b0d      	ldr	r3, [pc, #52]	; (8010ee4 <tcp_write_checks+0xe0>)
 8010eae:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010eb2:	490f      	ldr	r1, [pc, #60]	; (8010ef0 <tcp_write_checks+0xec>)
 8010eb4:	480d      	ldr	r0, [pc, #52]	; (8010eec <tcp_write_checks+0xe8>)
 8010eb6:	f006 ff97 	bl	8017de8 <iprintf>
 8010eba:	e00e      	b.n	8010eda <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d103      	bne.n	8010ecc <tcp_write_checks+0xc8>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d006      	beq.n	8010eda <tcp_write_checks+0xd6>
 8010ecc:	4b05      	ldr	r3, [pc, #20]	; (8010ee4 <tcp_write_checks+0xe0>)
 8010ece:	f240 1259 	movw	r2, #345	; 0x159
 8010ed2:	4908      	ldr	r1, [pc, #32]	; (8010ef4 <tcp_write_checks+0xf0>)
 8010ed4:	4805      	ldr	r0, [pc, #20]	; (8010eec <tcp_write_checks+0xe8>)
 8010ed6:	f006 ff87 	bl	8017de8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010eda:	2300      	movs	r3, #0
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	0801b274 	.word	0x0801b274
 8010ee8:	0801b384 	.word	0x0801b384
 8010eec:	0801b2c8 	.word	0x0801b2c8
 8010ef0:	0801b3a4 	.word	0x0801b3a4
 8010ef4:	0801b3e0 	.word	0x0801b3e0

08010ef8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010ef8:	b590      	push	{r4, r7, lr}
 8010efa:	b09b      	sub	sp, #108	; 0x6c
 8010efc:	af04      	add	r7, sp, #16
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	4611      	mov	r1, r2
 8010f04:	461a      	mov	r2, r3
 8010f06:	460b      	mov	r3, r1
 8010f08:	80fb      	strh	r3, [r7, #6]
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010f12:	2300      	movs	r3, #0
 8010f14:	653b      	str	r3, [r7, #80]	; 0x50
 8010f16:	2300      	movs	r3, #0
 8010f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f1e:	2300      	movs	r3, #0
 8010f20:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010f22:	2300      	movs	r3, #0
 8010f24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010f32:	2300      	movs	r3, #0
 8010f34:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d109      	bne.n	8010f54 <tcp_write+0x5c>
 8010f40:	4ba5      	ldr	r3, [pc, #660]	; (80111d8 <tcp_write+0x2e0>)
 8010f42:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010f46:	49a5      	ldr	r1, [pc, #660]	; (80111dc <tcp_write+0x2e4>)
 8010f48:	48a5      	ldr	r0, [pc, #660]	; (80111e0 <tcp_write+0x2e8>)
 8010f4a:	f006 ff4d 	bl	8017de8 <iprintf>
 8010f4e:	f06f 030f 	mvn.w	r3, #15
 8010f52:	e32c      	b.n	80115ae <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010f5a:	085b      	lsrs	r3, r3, #1
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f62:	4293      	cmp	r3, r2
 8010f64:	bf28      	it	cs
 8010f66:	4613      	movcs	r3, r2
 8010f68:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d102      	bne.n	8010f76 <tcp_write+0x7e>
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f74:	e000      	b.n	8010f78 <tcp_write+0x80>
 8010f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f78:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d109      	bne.n	8010f94 <tcp_write+0x9c>
 8010f80:	4b95      	ldr	r3, [pc, #596]	; (80111d8 <tcp_write+0x2e0>)
 8010f82:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8010f86:	4997      	ldr	r1, [pc, #604]	; (80111e4 <tcp_write+0x2ec>)
 8010f88:	4895      	ldr	r0, [pc, #596]	; (80111e0 <tcp_write+0x2e8>)
 8010f8a:	f006 ff2d 	bl	8017de8 <iprintf>
 8010f8e:	f06f 030f 	mvn.w	r3, #15
 8010f92:	e30c      	b.n	80115ae <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010f94:	88fb      	ldrh	r3, [r7, #6]
 8010f96:	4619      	mov	r1, r3
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f7ff ff33 	bl	8010e04 <tcp_write_checks>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010fa4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d002      	beq.n	8010fb2 <tcp_write+0xba>
    return err;
 8010fac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010fb0:	e2fd      	b.n	80115ae <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fb8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f000 80f7 	beq.w	80111ba <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8010fd2:	e002      	b.n	8010fda <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1f8      	bne.n	8010fd4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fe4:	7a9b      	ldrb	r3, [r3, #10]
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	f003 0304 	and.w	r3, r3, #4
 8010fee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ff4:	891b      	ldrh	r3, [r3, #8]
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	8c3b      	ldrh	r3, [r7, #32]
 8010ffa:	440b      	add	r3, r1
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	da06      	bge.n	801100e <tcp_write+0x116>
 8011000:	4b75      	ldr	r3, [pc, #468]	; (80111d8 <tcp_write+0x2e0>)
 8011002:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011006:	4978      	ldr	r1, [pc, #480]	; (80111e8 <tcp_write+0x2f0>)
 8011008:	4875      	ldr	r0, [pc, #468]	; (80111e0 <tcp_write+0x2e8>)
 801100a:	f006 feed 	bl	8017de8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801100e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011010:	891a      	ldrh	r2, [r3, #8]
 8011012:	8c3b      	ldrh	r3, [r7, #32]
 8011014:	4413      	add	r3, r2
 8011016:	b29b      	uxth	r3, r3
 8011018:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801101a:	1ad3      	subs	r3, r2, r3
 801101c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011024:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011026:	8a7b      	ldrh	r3, [r7, #18]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d027      	beq.n	801107c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801102c:	8a7b      	ldrh	r3, [r7, #18]
 801102e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011030:	429a      	cmp	r2, r3
 8011032:	d206      	bcs.n	8011042 <tcp_write+0x14a>
 8011034:	4b68      	ldr	r3, [pc, #416]	; (80111d8 <tcp_write+0x2e0>)
 8011036:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801103a:	496c      	ldr	r1, [pc, #432]	; (80111ec <tcp_write+0x2f4>)
 801103c:	4868      	ldr	r0, [pc, #416]	; (80111e0 <tcp_write+0x2e8>)
 801103e:	f006 fed3 	bl	8017de8 <iprintf>
      seg = last_unsent;
 8011042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011044:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011046:	8a7b      	ldrh	r3, [r7, #18]
 8011048:	88fa      	ldrh	r2, [r7, #6]
 801104a:	429a      	cmp	r2, r3
 801104c:	d901      	bls.n	8011052 <tcp_write+0x15a>
 801104e:	8a7b      	ldrh	r3, [r7, #18]
 8011050:	e000      	b.n	8011054 <tcp_write+0x15c>
 8011052:	88fb      	ldrh	r3, [r7, #6]
 8011054:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011056:	4293      	cmp	r3, r2
 8011058:	bfa8      	it	ge
 801105a:	4613      	movge	r3, r2
 801105c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801105e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011062:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011064:	4413      	add	r3, r2
 8011066:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801106a:	8a7a      	ldrh	r2, [r7, #18]
 801106c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	b29b      	uxth	r3, r3
 8011072:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011074:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011076:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011078:	1ad3      	subs	r3, r2, r3
 801107a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801107c:	8a7b      	ldrh	r3, [r7, #18]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d00b      	beq.n	801109a <tcp_write+0x1a2>
 8011082:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011086:	88fb      	ldrh	r3, [r7, #6]
 8011088:	429a      	cmp	r2, r3
 801108a:	d006      	beq.n	801109a <tcp_write+0x1a2>
 801108c:	4b52      	ldr	r3, [pc, #328]	; (80111d8 <tcp_write+0x2e0>)
 801108e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011092:	4957      	ldr	r1, [pc, #348]	; (80111f0 <tcp_write+0x2f8>)
 8011094:	4852      	ldr	r0, [pc, #328]	; (80111e0 <tcp_write+0x2e8>)
 8011096:	f006 fea7 	bl	8017de8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801109a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801109e:	88fb      	ldrh	r3, [r7, #6]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	f080 8168 	bcs.w	8011376 <tcp_write+0x47e>
 80110a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f000 8164 	beq.w	8011376 <tcp_write+0x47e>
 80110ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110b0:	891b      	ldrh	r3, [r3, #8]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f000 815f 	beq.w	8011376 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80110b8:	88fa      	ldrh	r2, [r7, #6]
 80110ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110be:	1ad2      	subs	r2, r2, r3
 80110c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80110c2:	4293      	cmp	r3, r2
 80110c4:	bfa8      	it	ge
 80110c6:	4613      	movge	r3, r2
 80110c8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80110ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110cc:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80110ce:	797b      	ldrb	r3, [r7, #5]
 80110d0:	f003 0301 	and.w	r3, r3, #1
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d027      	beq.n	8011128 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80110d8:	f107 0012 	add.w	r0, r7, #18
 80110dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80110de:	8bf9      	ldrh	r1, [r7, #30]
 80110e0:	2301      	movs	r3, #1
 80110e2:	9302      	str	r3, [sp, #8]
 80110e4:	797b      	ldrb	r3, [r7, #5]
 80110e6:	9301      	str	r3, [sp, #4]
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	9300      	str	r3, [sp, #0]
 80110ec:	4603      	mov	r3, r0
 80110ee:	2000      	movs	r0, #0
 80110f0:	f7ff fe0e 	bl	8010d10 <tcp_pbuf_prealloc>
 80110f4:	6578      	str	r0, [r7, #84]	; 0x54
 80110f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f000 8226 	beq.w	801154a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80110fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011100:	6858      	ldr	r0, [r3, #4]
 8011102:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011106:	68ba      	ldr	r2, [r7, #8]
 8011108:	4413      	add	r3, r2
 801110a:	8bfa      	ldrh	r2, [r7, #30]
 801110c:	4619      	mov	r1, r3
 801110e:	f006 fe58 	bl	8017dc2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011112:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011114:	f7fb f992 	bl	800c43c <pbuf_clen>
 8011118:	4603      	mov	r3, r0
 801111a:	461a      	mov	r2, r3
 801111c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011120:	4413      	add	r3, r2
 8011122:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011126:	e041      	b.n	80111ac <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	637b      	str	r3, [r7, #52]	; 0x34
 801112e:	e002      	b.n	8011136 <tcp_write+0x23e>
 8011130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	637b      	str	r3, [r7, #52]	; 0x34
 8011136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d1f8      	bne.n	8011130 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801113e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011140:	7b1b      	ldrb	r3, [r3, #12]
 8011142:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d115      	bne.n	8011176 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011150:	8952      	ldrh	r2, [r2, #10]
 8011152:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011154:	68ba      	ldr	r2, [r7, #8]
 8011156:	429a      	cmp	r2, r3
 8011158:	d10d      	bne.n	8011176 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801115a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801115e:	2b00      	cmp	r3, #0
 8011160:	d006      	beq.n	8011170 <tcp_write+0x278>
 8011162:	4b1d      	ldr	r3, [pc, #116]	; (80111d8 <tcp_write+0x2e0>)
 8011164:	f240 2231 	movw	r2, #561	; 0x231
 8011168:	4922      	ldr	r1, [pc, #136]	; (80111f4 <tcp_write+0x2fc>)
 801116a:	481d      	ldr	r0, [pc, #116]	; (80111e0 <tcp_write+0x2e8>)
 801116c:	f006 fe3c 	bl	8017de8 <iprintf>
          extendlen = seglen;
 8011170:	8bfb      	ldrh	r3, [r7, #30]
 8011172:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011174:	e01a      	b.n	80111ac <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011176:	8bfb      	ldrh	r3, [r7, #30]
 8011178:	2201      	movs	r2, #1
 801117a:	4619      	mov	r1, r3
 801117c:	2000      	movs	r0, #0
 801117e:	f7fa fdef 	bl	800bd60 <pbuf_alloc>
 8011182:	6578      	str	r0, [r7, #84]	; 0x54
 8011184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011186:	2b00      	cmp	r3, #0
 8011188:	f000 81e1 	beq.w	801154e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801118c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	441a      	add	r2, r3
 8011194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011196:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011198:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801119a:	f7fb f94f 	bl	800c43c <pbuf_clen>
 801119e:	4603      	mov	r3, r0
 80111a0:	461a      	mov	r2, r3
 80111a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80111a6:	4413      	add	r3, r2
 80111a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80111ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111b0:	8bfb      	ldrh	r3, [r7, #30]
 80111b2:	4413      	add	r3, r2
 80111b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80111b8:	e0dd      	b.n	8011376 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f000 80d8 	beq.w	8011376 <tcp_write+0x47e>
 80111c6:	4b04      	ldr	r3, [pc, #16]	; (80111d8 <tcp_write+0x2e0>)
 80111c8:	f240 224b 	movw	r2, #587	; 0x24b
 80111cc:	490a      	ldr	r1, [pc, #40]	; (80111f8 <tcp_write+0x300>)
 80111ce:	4804      	ldr	r0, [pc, #16]	; (80111e0 <tcp_write+0x2e8>)
 80111d0:	f006 fe0a 	bl	8017de8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80111d4:	e0cf      	b.n	8011376 <tcp_write+0x47e>
 80111d6:	bf00      	nop
 80111d8:	0801b274 	.word	0x0801b274
 80111dc:	0801b414 	.word	0x0801b414
 80111e0:	0801b2c8 	.word	0x0801b2c8
 80111e4:	0801b42c 	.word	0x0801b42c
 80111e8:	0801b460 	.word	0x0801b460
 80111ec:	0801b478 	.word	0x0801b478
 80111f0:	0801b498 	.word	0x0801b498
 80111f4:	0801b4b8 	.word	0x0801b4b8
 80111f8:	0801b4e4 	.word	0x0801b4e4
    struct pbuf *p;
    u16_t left = len - pos;
 80111fc:	88fa      	ldrh	r2, [r7, #6]
 80111fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011206:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801120a:	b29b      	uxth	r3, r3
 801120c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011212:	8b7a      	ldrh	r2, [r7, #26]
 8011214:	8bbb      	ldrh	r3, [r7, #28]
 8011216:	4293      	cmp	r3, r2
 8011218:	bf28      	it	cs
 801121a:	4613      	movcs	r3, r2
 801121c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801121e:	797b      	ldrb	r3, [r7, #5]
 8011220:	f003 0301 	and.w	r3, r3, #1
 8011224:	2b00      	cmp	r3, #0
 8011226:	d036      	beq.n	8011296 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011228:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801122c:	b29a      	uxth	r2, r3
 801122e:	8b3b      	ldrh	r3, [r7, #24]
 8011230:	4413      	add	r3, r2
 8011232:	b299      	uxth	r1, r3
 8011234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011236:	2b00      	cmp	r3, #0
 8011238:	bf0c      	ite	eq
 801123a:	2301      	moveq	r3, #1
 801123c:	2300      	movne	r3, #0
 801123e:	b2db      	uxtb	r3, r3
 8011240:	f107 0012 	add.w	r0, r7, #18
 8011244:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011246:	9302      	str	r3, [sp, #8]
 8011248:	797b      	ldrb	r3, [r7, #5]
 801124a:	9301      	str	r3, [sp, #4]
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	4603      	mov	r3, r0
 8011252:	2036      	movs	r0, #54	; 0x36
 8011254:	f7ff fd5c 	bl	8010d10 <tcp_pbuf_prealloc>
 8011258:	6338      	str	r0, [r7, #48]	; 0x30
 801125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125c:	2b00      	cmp	r3, #0
 801125e:	f000 8178 	beq.w	8011552 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011264:	895b      	ldrh	r3, [r3, #10]
 8011266:	8b3a      	ldrh	r2, [r7, #24]
 8011268:	429a      	cmp	r2, r3
 801126a:	d906      	bls.n	801127a <tcp_write+0x382>
 801126c:	4b8c      	ldr	r3, [pc, #560]	; (80114a0 <tcp_write+0x5a8>)
 801126e:	f240 2267 	movw	r2, #615	; 0x267
 8011272:	498c      	ldr	r1, [pc, #560]	; (80114a4 <tcp_write+0x5ac>)
 8011274:	488c      	ldr	r0, [pc, #560]	; (80114a8 <tcp_write+0x5b0>)
 8011276:	f006 fdb7 	bl	8017de8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127c:	685a      	ldr	r2, [r3, #4]
 801127e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011282:	18d0      	adds	r0, r2, r3
 8011284:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011288:	68ba      	ldr	r2, [r7, #8]
 801128a:	4413      	add	r3, r2
 801128c:	8b3a      	ldrh	r2, [r7, #24]
 801128e:	4619      	mov	r1, r3
 8011290:	f006 fd97 	bl	8017dc2 <memcpy>
 8011294:	e02f      	b.n	80112f6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011296:	8a7b      	ldrh	r3, [r7, #18]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d006      	beq.n	80112aa <tcp_write+0x3b2>
 801129c:	4b80      	ldr	r3, [pc, #512]	; (80114a0 <tcp_write+0x5a8>)
 801129e:	f240 2271 	movw	r2, #625	; 0x271
 80112a2:	4982      	ldr	r1, [pc, #520]	; (80114ac <tcp_write+0x5b4>)
 80112a4:	4880      	ldr	r0, [pc, #512]	; (80114a8 <tcp_write+0x5b0>)
 80112a6:	f006 fd9f 	bl	8017de8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80112aa:	8b3b      	ldrh	r3, [r7, #24]
 80112ac:	2201      	movs	r2, #1
 80112ae:	4619      	mov	r1, r3
 80112b0:	2036      	movs	r0, #54	; 0x36
 80112b2:	f7fa fd55 	bl	800bd60 <pbuf_alloc>
 80112b6:	6178      	str	r0, [r7, #20]
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	f000 814b 	beq.w	8011556 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80112c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	441a      	add	r2, r3
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80112cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80112d6:	4619      	mov	r1, r3
 80112d8:	2036      	movs	r0, #54	; 0x36
 80112da:	f7fa fd41 	bl	800bd60 <pbuf_alloc>
 80112de:	6338      	str	r0, [r7, #48]	; 0x30
 80112e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d103      	bne.n	80112ee <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80112e6:	6978      	ldr	r0, [r7, #20]
 80112e8:	f7fb f81a 	bl	800c320 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80112ec:	e136      	b.n	801155c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80112ee:	6979      	ldr	r1, [r7, #20]
 80112f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112f2:	f7fb f8e3 	bl	800c4bc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80112f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112f8:	f7fb f8a0 	bl	800c43c <pbuf_clen>
 80112fc:	4603      	mov	r3, r0
 80112fe:	461a      	mov	r2, r3
 8011300:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011304:	4413      	add	r3, r2
 8011306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801130a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801130e:	2b09      	cmp	r3, #9
 8011310:	d903      	bls.n	801131a <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011314:	f7fb f804 	bl	800c320 <pbuf_free>
      goto memerr;
 8011318:	e120      	b.n	801155c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801131e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011322:	441a      	add	r2, r3
 8011324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	4613      	mov	r3, r2
 801132c:	2200      	movs	r2, #0
 801132e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	f7ff fc4f 	bl	8010bd4 <tcp_create_segment>
 8011336:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801133a:	2b00      	cmp	r3, #0
 801133c:	f000 810d 	beq.w	801155a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011342:	2b00      	cmp	r3, #0
 8011344:	d102      	bne.n	801134c <tcp_write+0x454>
      queue = seg;
 8011346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011348:	647b      	str	r3, [r7, #68]	; 0x44
 801134a:	e00c      	b.n	8011366 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801134c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801134e:	2b00      	cmp	r3, #0
 8011350:	d106      	bne.n	8011360 <tcp_write+0x468>
 8011352:	4b53      	ldr	r3, [pc, #332]	; (80114a0 <tcp_write+0x5a8>)
 8011354:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011358:	4955      	ldr	r1, [pc, #340]	; (80114b0 <tcp_write+0x5b8>)
 801135a:	4853      	ldr	r0, [pc, #332]	; (80114a8 <tcp_write+0x5b0>)
 801135c:	f006 fd44 	bl	8017de8 <iprintf>
      prev_seg->next = seg;
 8011360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011364:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011368:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801136a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801136e:	8b3b      	ldrh	r3, [r7, #24]
 8011370:	4413      	add	r3, r2
 8011372:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011376:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801137a:	88fb      	ldrh	r3, [r7, #6]
 801137c:	429a      	cmp	r2, r3
 801137e:	f4ff af3d 	bcc.w	80111fc <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011382:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011384:	2b00      	cmp	r3, #0
 8011386:	d02c      	beq.n	80113e2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801138e:	e01e      	b.n	80113ce <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011392:	891a      	ldrh	r2, [r3, #8]
 8011394:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011396:	4413      	add	r3, r2
 8011398:	b29a      	uxth	r2, r3
 801139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d110      	bne.n	80113c8 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80113a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ac:	8952      	ldrh	r2, [r2, #10]
 80113ae:	4413      	add	r3, r2
 80113b0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80113b2:	68b9      	ldr	r1, [r7, #8]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f006 fd04 	bl	8017dc2 <memcpy>
        p->len += oversize_used;
 80113ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113bc:	895a      	ldrh	r2, [r3, #10]
 80113be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80113c0:	4413      	add	r3, r2
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80113c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d1dd      	bne.n	8011390 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80113d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113d6:	891a      	ldrh	r2, [r3, #8]
 80113d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80113da:	4413      	add	r3, r2
 80113dc:	b29a      	uxth	r2, r3
 80113de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80113e2:	8a7a      	ldrh	r2, [r7, #18]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80113ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d018      	beq.n	8011422 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80113f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d106      	bne.n	8011404 <tcp_write+0x50c>
 80113f6:	4b2a      	ldr	r3, [pc, #168]	; (80114a0 <tcp_write+0x5a8>)
 80113f8:	f240 22e1 	movw	r2, #737	; 0x2e1
 80113fc:	492d      	ldr	r1, [pc, #180]	; (80114b4 <tcp_write+0x5bc>)
 80113fe:	482a      	ldr	r0, [pc, #168]	; (80114a8 <tcp_write+0x5b0>)
 8011400:	f006 fcf2 	bl	8017de8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801140a:	4618      	mov	r0, r3
 801140c:	f7fb f856 	bl	800c4bc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011412:	891a      	ldrh	r2, [r3, #8]
 8011414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011416:	891b      	ldrh	r3, [r3, #8]
 8011418:	4413      	add	r3, r2
 801141a:	b29a      	uxth	r2, r3
 801141c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801141e:	811a      	strh	r2, [r3, #8]
 8011420:	e037      	b.n	8011492 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8011422:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011424:	2b00      	cmp	r3, #0
 8011426:	d034      	beq.n	8011492 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801142a:	2b00      	cmp	r3, #0
 801142c:	d003      	beq.n	8011436 <tcp_write+0x53e>
 801142e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <tcp_write+0x54c>
 8011436:	4b1a      	ldr	r3, [pc, #104]	; (80114a0 <tcp_write+0x5a8>)
 8011438:	f240 22e7 	movw	r2, #743	; 0x2e7
 801143c:	491e      	ldr	r1, [pc, #120]	; (80114b8 <tcp_write+0x5c0>)
 801143e:	481a      	ldr	r0, [pc, #104]	; (80114a8 <tcp_write+0x5b0>)
 8011440:	f006 fcd2 	bl	8017de8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	62bb      	str	r3, [r7, #40]	; 0x28
 801144a:	e009      	b.n	8011460 <tcp_write+0x568>
      p->tot_len += extendlen;
 801144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144e:	891a      	ldrh	r2, [r3, #8]
 8011450:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011452:	4413      	add	r3, r2
 8011454:	b29a      	uxth	r2, r3
 8011456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011458:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d1f1      	bne.n	801144c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146a:	891a      	ldrh	r2, [r3, #8]
 801146c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801146e:	4413      	add	r3, r2
 8011470:	b29a      	uxth	r2, r3
 8011472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011474:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011478:	895a      	ldrh	r2, [r3, #10]
 801147a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801147c:	4413      	add	r3, r2
 801147e:	b29a      	uxth	r2, r3
 8011480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011482:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011486:	891a      	ldrh	r2, [r3, #8]
 8011488:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801148a:	4413      	add	r3, r2
 801148c:	b29a      	uxth	r2, r3
 801148e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011490:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011494:	2b00      	cmp	r3, #0
 8011496:	d111      	bne.n	80114bc <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801149c:	66da      	str	r2, [r3, #108]	; 0x6c
 801149e:	e010      	b.n	80114c2 <tcp_write+0x5ca>
 80114a0:	0801b274 	.word	0x0801b274
 80114a4:	0801b514 	.word	0x0801b514
 80114a8:	0801b2c8 	.word	0x0801b2c8
 80114ac:	0801b554 	.word	0x0801b554
 80114b0:	0801b564 	.word	0x0801b564
 80114b4:	0801b578 	.word	0x0801b578
 80114b8:	0801b5b0 	.word	0x0801b5b0
  } else {
    last_unsent->next = queue;
 80114bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114c0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80114c6:	88fb      	ldrh	r3, [r7, #6]
 80114c8:	441a      	add	r2, r3
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80114d4:	88fb      	ldrh	r3, [r7, #6]
 80114d6:	1ad3      	subs	r3, r2, r3
 80114d8:	b29a      	uxth	r2, r3
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80114e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d00e      	beq.n	8011512 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d10a      	bne.n	8011512 <tcp_write+0x61a>
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011500:	2b00      	cmp	r3, #0
 8011502:	d106      	bne.n	8011512 <tcp_write+0x61a>
 8011504:	4b2c      	ldr	r3, [pc, #176]	; (80115b8 <tcp_write+0x6c0>)
 8011506:	f240 3213 	movw	r2, #787	; 0x313
 801150a:	492c      	ldr	r1, [pc, #176]	; (80115bc <tcp_write+0x6c4>)
 801150c:	482c      	ldr	r0, [pc, #176]	; (80115c0 <tcp_write+0x6c8>)
 801150e:	f006 fc6b 	bl	8017de8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011514:	2b00      	cmp	r3, #0
 8011516:	d016      	beq.n	8011546 <tcp_write+0x64e>
 8011518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d012      	beq.n	8011546 <tcp_write+0x64e>
 8011520:	797b      	ldrb	r3, [r7, #5]
 8011522:	f003 0302 	and.w	r3, r3, #2
 8011526:	2b00      	cmp	r3, #0
 8011528:	d10d      	bne.n	8011546 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801152a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	899b      	ldrh	r3, [r3, #12]
 8011530:	b29c      	uxth	r4, r3
 8011532:	2008      	movs	r0, #8
 8011534:	f7f9 fb0a 	bl	800ab4c <lwip_htons>
 8011538:	4603      	mov	r3, r0
 801153a:	461a      	mov	r2, r3
 801153c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	4322      	orrs	r2, r4
 8011542:	b292      	uxth	r2, r2
 8011544:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011546:	2300      	movs	r3, #0
 8011548:	e031      	b.n	80115ae <tcp_write+0x6b6>
          goto memerr;
 801154a:	bf00      	nop
 801154c:	e006      	b.n	801155c <tcp_write+0x664>
            goto memerr;
 801154e:	bf00      	nop
 8011550:	e004      	b.n	801155c <tcp_write+0x664>
        goto memerr;
 8011552:	bf00      	nop
 8011554:	e002      	b.n	801155c <tcp_write+0x664>
        goto memerr;
 8011556:	bf00      	nop
 8011558:	e000      	b.n	801155c <tcp_write+0x664>
      goto memerr;
 801155a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	8b5b      	ldrh	r3, [r3, #26]
 8011560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011564:	b29a      	uxth	r2, r3
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801156a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801156c:	2b00      	cmp	r3, #0
 801156e:	d002      	beq.n	8011576 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011570:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011572:	f7fa fed5 	bl	800c320 <pbuf_free>
  }
  if (queue != NULL) {
 8011576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801157c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801157e:	f7fc fb53 	bl	800dc28 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00e      	beq.n	80115aa <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011590:	2b00      	cmp	r3, #0
 8011592:	d10a      	bne.n	80115aa <tcp_write+0x6b2>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011598:	2b00      	cmp	r3, #0
 801159a:	d106      	bne.n	80115aa <tcp_write+0x6b2>
 801159c:	4b06      	ldr	r3, [pc, #24]	; (80115b8 <tcp_write+0x6c0>)
 801159e:	f44f 724a 	mov.w	r2, #808	; 0x328
 80115a2:	4906      	ldr	r1, [pc, #24]	; (80115bc <tcp_write+0x6c4>)
 80115a4:	4806      	ldr	r0, [pc, #24]	; (80115c0 <tcp_write+0x6c8>)
 80115a6:	f006 fc1f 	bl	8017de8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80115aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	375c      	adds	r7, #92	; 0x5c
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd90      	pop	{r4, r7, pc}
 80115b6:	bf00      	nop
 80115b8:	0801b274 	.word	0x0801b274
 80115bc:	0801b5e8 	.word	0x0801b5e8
 80115c0:	0801b2c8 	.word	0x0801b2c8

080115c4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80115c4:	b590      	push	{r4, r7, lr}
 80115c6:	b08b      	sub	sp, #44	; 0x2c
 80115c8:	af02      	add	r7, sp, #8
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	460b      	mov	r3, r1
 80115ce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80115d0:	2300      	movs	r3, #0
 80115d2:	61fb      	str	r3, [r7, #28]
 80115d4:	2300      	movs	r3, #0
 80115d6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80115d8:	2300      	movs	r3, #0
 80115da:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d106      	bne.n	80115f0 <tcp_split_unsent_seg+0x2c>
 80115e2:	4b95      	ldr	r3, [pc, #596]	; (8011838 <tcp_split_unsent_seg+0x274>)
 80115e4:	f240 324b 	movw	r2, #843	; 0x34b
 80115e8:	4994      	ldr	r1, [pc, #592]	; (801183c <tcp_split_unsent_seg+0x278>)
 80115ea:	4895      	ldr	r0, [pc, #596]	; (8011840 <tcp_split_unsent_seg+0x27c>)
 80115ec:	f006 fbfc 	bl	8017de8 <iprintf>

  useg = pcb->unsent;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115f4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d102      	bne.n	8011602 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80115fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011600:	e116      	b.n	8011830 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011602:	887b      	ldrh	r3, [r7, #2]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d109      	bne.n	801161c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011608:	4b8b      	ldr	r3, [pc, #556]	; (8011838 <tcp_split_unsent_seg+0x274>)
 801160a:	f240 3253 	movw	r2, #851	; 0x353
 801160e:	498d      	ldr	r1, [pc, #564]	; (8011844 <tcp_split_unsent_seg+0x280>)
 8011610:	488b      	ldr	r0, [pc, #556]	; (8011840 <tcp_split_unsent_seg+0x27c>)
 8011612:	f006 fbe9 	bl	8017de8 <iprintf>
    return ERR_VAL;
 8011616:	f06f 0305 	mvn.w	r3, #5
 801161a:	e109      	b.n	8011830 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	891b      	ldrh	r3, [r3, #8]
 8011620:	887a      	ldrh	r2, [r7, #2]
 8011622:	429a      	cmp	r2, r3
 8011624:	d301      	bcc.n	801162a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011626:	2300      	movs	r3, #0
 8011628:	e102      	b.n	8011830 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801162e:	887a      	ldrh	r2, [r7, #2]
 8011630:	429a      	cmp	r2, r3
 8011632:	d906      	bls.n	8011642 <tcp_split_unsent_seg+0x7e>
 8011634:	4b80      	ldr	r3, [pc, #512]	; (8011838 <tcp_split_unsent_seg+0x274>)
 8011636:	f240 325b 	movw	r2, #859	; 0x35b
 801163a:	4983      	ldr	r1, [pc, #524]	; (8011848 <tcp_split_unsent_seg+0x284>)
 801163c:	4880      	ldr	r0, [pc, #512]	; (8011840 <tcp_split_unsent_seg+0x27c>)
 801163e:	f006 fbd3 	bl	8017de8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	891b      	ldrh	r3, [r3, #8]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d106      	bne.n	8011658 <tcp_split_unsent_seg+0x94>
 801164a:	4b7b      	ldr	r3, [pc, #492]	; (8011838 <tcp_split_unsent_seg+0x274>)
 801164c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011650:	497e      	ldr	r1, [pc, #504]	; (801184c <tcp_split_unsent_seg+0x288>)
 8011652:	487b      	ldr	r0, [pc, #492]	; (8011840 <tcp_split_unsent_seg+0x27c>)
 8011654:	f006 fbc8 	bl	8017de8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	7a9b      	ldrb	r3, [r3, #10]
 801165c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801165e:	7bfb      	ldrb	r3, [r7, #15]
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	b2db      	uxtb	r3, r3
 8011664:	f003 0304 	and.w	r3, r3, #4
 8011668:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	891a      	ldrh	r2, [r3, #8]
 801166e:	887b      	ldrh	r3, [r7, #2]
 8011670:	1ad3      	subs	r3, r2, r3
 8011672:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011674:	7bbb      	ldrb	r3, [r7, #14]
 8011676:	b29a      	uxth	r2, r3
 8011678:	89bb      	ldrh	r3, [r7, #12]
 801167a:	4413      	add	r3, r2
 801167c:	b29b      	uxth	r3, r3
 801167e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011682:	4619      	mov	r1, r3
 8011684:	2036      	movs	r0, #54	; 0x36
 8011686:	f7fa fb6b 	bl	800bd60 <pbuf_alloc>
 801168a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	2b00      	cmp	r3, #0
 8011690:	f000 80b7 	beq.w	8011802 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	891a      	ldrh	r2, [r3, #8]
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	891b      	ldrh	r3, [r3, #8]
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	b29a      	uxth	r2, r3
 80116a2:	887b      	ldrh	r3, [r7, #2]
 80116a4:	4413      	add	r3, r2
 80116a6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	6858      	ldr	r0, [r3, #4]
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	685a      	ldr	r2, [r3, #4]
 80116b0:	7bbb      	ldrb	r3, [r7, #14]
 80116b2:	18d1      	adds	r1, r2, r3
 80116b4:	897b      	ldrh	r3, [r7, #10]
 80116b6:	89ba      	ldrh	r2, [r7, #12]
 80116b8:	f7fb f838 	bl	800c72c <pbuf_copy_partial>
 80116bc:	4603      	mov	r3, r0
 80116be:	461a      	mov	r2, r3
 80116c0:	89bb      	ldrh	r3, [r7, #12]
 80116c2:	4293      	cmp	r3, r2
 80116c4:	f040 809f 	bne.w	8011806 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	899b      	ldrh	r3, [r3, #12]
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7f9 fa3b 	bl	800ab4c <lwip_htons>
 80116d6:	4603      	mov	r3, r0
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80116de:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80116e0:	2300      	movs	r3, #0
 80116e2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80116e4:	7efb      	ldrb	r3, [r7, #27]
 80116e6:	f003 0308 	and.w	r3, r3, #8
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d007      	beq.n	80116fe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80116ee:	7efb      	ldrb	r3, [r7, #27]
 80116f0:	f023 0308 	bic.w	r3, r3, #8
 80116f4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80116f6:	7ebb      	ldrb	r3, [r7, #26]
 80116f8:	f043 0308 	orr.w	r3, r3, #8
 80116fc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80116fe:	7efb      	ldrb	r3, [r7, #27]
 8011700:	f003 0301 	and.w	r3, r3, #1
 8011704:	2b00      	cmp	r3, #0
 8011706:	d007      	beq.n	8011718 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011708:	7efb      	ldrb	r3, [r7, #27]
 801170a:	f023 0301 	bic.w	r3, r3, #1
 801170e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011710:	7ebb      	ldrb	r3, [r7, #26]
 8011712:	f043 0301 	orr.w	r3, r3, #1
 8011716:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	4618      	mov	r0, r3
 8011720:	f7f9 fa29 	bl	800ab76 <lwip_htonl>
 8011724:	4602      	mov	r2, r0
 8011726:	887b      	ldrh	r3, [r7, #2]
 8011728:	18d1      	adds	r1, r2, r3
 801172a:	7eba      	ldrb	r2, [r7, #26]
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	460b      	mov	r3, r1
 8011732:	6939      	ldr	r1, [r7, #16]
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f7ff fa4d 	bl	8010bd4 <tcp_create_segment>
 801173a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801173c:	69fb      	ldr	r3, [r7, #28]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d063      	beq.n	801180a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	4618      	mov	r0, r3
 8011748:	f7fa fe78 	bl	800c43c <pbuf_clen>
 801174c:	4603      	mov	r3, r0
 801174e:	461a      	mov	r2, r3
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011756:	1a9b      	subs	r3, r3, r2
 8011758:	b29a      	uxth	r2, r3
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	6858      	ldr	r0, [r3, #4]
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	891a      	ldrh	r2, [r3, #8]
 801176a:	89bb      	ldrh	r3, [r7, #12]
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	b29b      	uxth	r3, r3
 8011770:	4619      	mov	r1, r3
 8011772:	f7fa fc4f 	bl	800c014 <pbuf_realloc>
  useg->len -= remainder;
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	891a      	ldrh	r2, [r3, #8]
 801177a:	89bb      	ldrh	r3, [r7, #12]
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	b29a      	uxth	r2, r3
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	899b      	ldrh	r3, [r3, #12]
 801178a:	b29c      	uxth	r4, r3
 801178c:	7efb      	ldrb	r3, [r7, #27]
 801178e:	b29b      	uxth	r3, r3
 8011790:	4618      	mov	r0, r3
 8011792:	f7f9 f9db 	bl	800ab4c <lwip_htons>
 8011796:	4603      	mov	r3, r0
 8011798:	461a      	mov	r2, r3
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	68db      	ldr	r3, [r3, #12]
 801179e:	4322      	orrs	r2, r4
 80117a0:	b292      	uxth	r2, r2
 80117a2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7fa fe47 	bl	800c43c <pbuf_clen>
 80117ae:	4603      	mov	r3, r0
 80117b0:	461a      	mov	r2, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117b8:	4413      	add	r3, r2
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fa fe38 	bl	800c43c <pbuf_clen>
 80117cc:	4603      	mov	r3, r0
 80117ce:	461a      	mov	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117d6:	4413      	add	r3, r2
 80117d8:	b29a      	uxth	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	681a      	ldr	r2, [r3, #0]
 80117e4:	69fb      	ldr	r3, [r7, #28]
 80117e6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	69fa      	ldr	r2, [r7, #28]
 80117ec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d103      	bne.n	80117fe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80117fe:	2300      	movs	r3, #0
 8011800:	e016      	b.n	8011830 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011802:	bf00      	nop
 8011804:	e002      	b.n	801180c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011806:	bf00      	nop
 8011808:	e000      	b.n	801180c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801180a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d006      	beq.n	8011820 <tcp_split_unsent_seg+0x25c>
 8011812:	4b09      	ldr	r3, [pc, #36]	; (8011838 <tcp_split_unsent_seg+0x274>)
 8011814:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011818:	490d      	ldr	r1, [pc, #52]	; (8011850 <tcp_split_unsent_seg+0x28c>)
 801181a:	4809      	ldr	r0, [pc, #36]	; (8011840 <tcp_split_unsent_seg+0x27c>)
 801181c:	f006 fae4 	bl	8017de8 <iprintf>
  if (p != NULL) {
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d002      	beq.n	801182c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011826:	6938      	ldr	r0, [r7, #16]
 8011828:	f7fa fd7a 	bl	800c320 <pbuf_free>
  }

  return ERR_MEM;
 801182c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011830:	4618      	mov	r0, r3
 8011832:	3724      	adds	r7, #36	; 0x24
 8011834:	46bd      	mov	sp, r7
 8011836:	bd90      	pop	{r4, r7, pc}
 8011838:	0801b274 	.word	0x0801b274
 801183c:	0801b608 	.word	0x0801b608
 8011840:	0801b2c8 	.word	0x0801b2c8
 8011844:	0801b62c 	.word	0x0801b62c
 8011848:	0801b650 	.word	0x0801b650
 801184c:	0801b660 	.word	0x0801b660
 8011850:	0801b670 	.word	0x0801b670

08011854 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011854:	b590      	push	{r4, r7, lr}
 8011856:	b085      	sub	sp, #20
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d106      	bne.n	8011870 <tcp_send_fin+0x1c>
 8011862:	4b21      	ldr	r3, [pc, #132]	; (80118e8 <tcp_send_fin+0x94>)
 8011864:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011868:	4920      	ldr	r1, [pc, #128]	; (80118ec <tcp_send_fin+0x98>)
 801186a:	4821      	ldr	r0, [pc, #132]	; (80118f0 <tcp_send_fin+0x9c>)
 801186c:	f006 fabc 	bl	8017de8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011874:	2b00      	cmp	r3, #0
 8011876:	d02e      	beq.n	80118d6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801187c:	60fb      	str	r3, [r7, #12]
 801187e:	e002      	b.n	8011886 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1f8      	bne.n	8011880 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	68db      	ldr	r3, [r3, #12]
 8011892:	899b      	ldrh	r3, [r3, #12]
 8011894:	b29b      	uxth	r3, r3
 8011896:	4618      	mov	r0, r3
 8011898:	f7f9 f958 	bl	800ab4c <lwip_htons>
 801189c:	4603      	mov	r3, r0
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	f003 0307 	and.w	r3, r3, #7
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d116      	bne.n	80118d6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	899b      	ldrh	r3, [r3, #12]
 80118ae:	b29c      	uxth	r4, r3
 80118b0:	2001      	movs	r0, #1
 80118b2:	f7f9 f94b 	bl	800ab4c <lwip_htons>
 80118b6:	4603      	mov	r3, r0
 80118b8:	461a      	mov	r2, r3
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	4322      	orrs	r2, r4
 80118c0:	b292      	uxth	r2, r2
 80118c2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	8b5b      	ldrh	r3, [r3, #26]
 80118c8:	f043 0320 	orr.w	r3, r3, #32
 80118cc:	b29a      	uxth	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80118d2:	2300      	movs	r3, #0
 80118d4:	e004      	b.n	80118e0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80118d6:	2101      	movs	r1, #1
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 f80b 	bl	80118f4 <tcp_enqueue_flags>
 80118de:	4603      	mov	r3, r0
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3714      	adds	r7, #20
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd90      	pop	{r4, r7, pc}
 80118e8:	0801b274 	.word	0x0801b274
 80118ec:	0801b67c 	.word	0x0801b67c
 80118f0:	0801b2c8 	.word	0x0801b2c8

080118f4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b08a      	sub	sp, #40	; 0x28
 80118f8:	af02      	add	r7, sp, #8
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011900:	2300      	movs	r3, #0
 8011902:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011904:	2300      	movs	r3, #0
 8011906:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011908:	78fb      	ldrb	r3, [r7, #3]
 801190a:	f003 0303 	and.w	r3, r3, #3
 801190e:	2b00      	cmp	r3, #0
 8011910:	d106      	bne.n	8011920 <tcp_enqueue_flags+0x2c>
 8011912:	4b67      	ldr	r3, [pc, #412]	; (8011ab0 <tcp_enqueue_flags+0x1bc>)
 8011914:	f240 4212 	movw	r2, #1042	; 0x412
 8011918:	4966      	ldr	r1, [pc, #408]	; (8011ab4 <tcp_enqueue_flags+0x1c0>)
 801191a:	4867      	ldr	r0, [pc, #412]	; (8011ab8 <tcp_enqueue_flags+0x1c4>)
 801191c:	f006 fa64 	bl	8017de8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d106      	bne.n	8011934 <tcp_enqueue_flags+0x40>
 8011926:	4b62      	ldr	r3, [pc, #392]	; (8011ab0 <tcp_enqueue_flags+0x1bc>)
 8011928:	f240 4213 	movw	r2, #1043	; 0x413
 801192c:	4963      	ldr	r1, [pc, #396]	; (8011abc <tcp_enqueue_flags+0x1c8>)
 801192e:	4862      	ldr	r0, [pc, #392]	; (8011ab8 <tcp_enqueue_flags+0x1c4>)
 8011930:	f006 fa5a 	bl	8017de8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011934:	78fb      	ldrb	r3, [r7, #3]
 8011936:	f003 0302 	and.w	r3, r3, #2
 801193a:	2b00      	cmp	r3, #0
 801193c:	d001      	beq.n	8011942 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801193e:	2301      	movs	r3, #1
 8011940:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011942:	7ffb      	ldrb	r3, [r7, #31]
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	b2db      	uxtb	r3, r3
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801194e:	7dfb      	ldrb	r3, [r7, #23]
 8011950:	b29b      	uxth	r3, r3
 8011952:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011956:	4619      	mov	r1, r3
 8011958:	2036      	movs	r0, #54	; 0x36
 801195a:	f7fa fa01 	bl	800bd60 <pbuf_alloc>
 801195e:	6138      	str	r0, [r7, #16]
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d109      	bne.n	801197a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	8b5b      	ldrh	r3, [r3, #26]
 801196a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801196e:	b29a      	uxth	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011974:	f04f 33ff 	mov.w	r3, #4294967295
 8011978:	e095      	b.n	8011aa6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	895a      	ldrh	r2, [r3, #10]
 801197e:	7dfb      	ldrb	r3, [r7, #23]
 8011980:	b29b      	uxth	r3, r3
 8011982:	429a      	cmp	r2, r3
 8011984:	d206      	bcs.n	8011994 <tcp_enqueue_flags+0xa0>
 8011986:	4b4a      	ldr	r3, [pc, #296]	; (8011ab0 <tcp_enqueue_flags+0x1bc>)
 8011988:	f240 423a 	movw	r2, #1082	; 0x43a
 801198c:	494c      	ldr	r1, [pc, #304]	; (8011ac0 <tcp_enqueue_flags+0x1cc>)
 801198e:	484a      	ldr	r0, [pc, #296]	; (8011ab8 <tcp_enqueue_flags+0x1c4>)
 8011990:	f006 fa2a 	bl	8017de8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011998:	78fa      	ldrb	r2, [r7, #3]
 801199a:	7ffb      	ldrb	r3, [r7, #31]
 801199c:	9300      	str	r3, [sp, #0]
 801199e:	460b      	mov	r3, r1
 80119a0:	6939      	ldr	r1, [r7, #16]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f7ff f916 	bl	8010bd4 <tcp_create_segment>
 80119a8:	60f8      	str	r0, [r7, #12]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d109      	bne.n	80119c4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	8b5b      	ldrh	r3, [r3, #26]
 80119b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119b8:	b29a      	uxth	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80119be:	f04f 33ff 	mov.w	r3, #4294967295
 80119c2:	e070      	b.n	8011aa6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	f003 0303 	and.w	r3, r3, #3
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d006      	beq.n	80119de <tcp_enqueue_flags+0xea>
 80119d0:	4b37      	ldr	r3, [pc, #220]	; (8011ab0 <tcp_enqueue_flags+0x1bc>)
 80119d2:	f240 4242 	movw	r2, #1090	; 0x442
 80119d6:	493b      	ldr	r1, [pc, #236]	; (8011ac4 <tcp_enqueue_flags+0x1d0>)
 80119d8:	4837      	ldr	r0, [pc, #220]	; (8011ab8 <tcp_enqueue_flags+0x1c4>)
 80119da:	f006 fa05 	bl	8017de8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	891b      	ldrh	r3, [r3, #8]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d006      	beq.n	80119f4 <tcp_enqueue_flags+0x100>
 80119e6:	4b32      	ldr	r3, [pc, #200]	; (8011ab0 <tcp_enqueue_flags+0x1bc>)
 80119e8:	f240 4243 	movw	r2, #1091	; 0x443
 80119ec:	4936      	ldr	r1, [pc, #216]	; (8011ac8 <tcp_enqueue_flags+0x1d4>)
 80119ee:	4832      	ldr	r0, [pc, #200]	; (8011ab8 <tcp_enqueue_flags+0x1c4>)
 80119f0:	f006 f9fa 	bl	8017de8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d103      	bne.n	8011a04 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a02:	e00d      	b.n	8011a20 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a08:	61bb      	str	r3, [r7, #24]
 8011a0a:	e002      	b.n	8011a12 <tcp_enqueue_flags+0x11e>
 8011a0c:	69bb      	ldr	r3, [r7, #24]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	61bb      	str	r3, [r7, #24]
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d1f8      	bne.n	8011a0c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	68fa      	ldr	r2, [r7, #12]
 8011a1e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011a28:	78fb      	ldrb	r3, [r7, #3]
 8011a2a:	f003 0302 	and.w	r3, r3, #2
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d104      	bne.n	8011a3c <tcp_enqueue_flags+0x148>
 8011a32:	78fb      	ldrb	r3, [r7, #3]
 8011a34:	f003 0301 	and.w	r3, r3, #1
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d004      	beq.n	8011a46 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a40:	1c5a      	adds	r2, r3, #1
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011a46:	78fb      	ldrb	r3, [r7, #3]
 8011a48:	f003 0301 	and.w	r3, r3, #1
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d006      	beq.n	8011a5e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	8b5b      	ldrh	r3, [r3, #26]
 8011a54:	f043 0320 	orr.w	r3, r3, #32
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fa fcea 	bl	800c43c <pbuf_clen>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a72:	4413      	add	r3, r2
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00e      	beq.n	8011aa4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d10a      	bne.n	8011aa4 <tcp_enqueue_flags+0x1b0>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d106      	bne.n	8011aa4 <tcp_enqueue_flags+0x1b0>
 8011a96:	4b06      	ldr	r3, [pc, #24]	; (8011ab0 <tcp_enqueue_flags+0x1bc>)
 8011a98:	f240 4266 	movw	r2, #1126	; 0x466
 8011a9c:	490b      	ldr	r1, [pc, #44]	; (8011acc <tcp_enqueue_flags+0x1d8>)
 8011a9e:	4806      	ldr	r0, [pc, #24]	; (8011ab8 <tcp_enqueue_flags+0x1c4>)
 8011aa0:	f006 f9a2 	bl	8017de8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011aa4:	2300      	movs	r3, #0
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3720      	adds	r7, #32
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	0801b274 	.word	0x0801b274
 8011ab4:	0801b698 	.word	0x0801b698
 8011ab8:	0801b2c8 	.word	0x0801b2c8
 8011abc:	0801b6f0 	.word	0x0801b6f0
 8011ac0:	0801b710 	.word	0x0801b710
 8011ac4:	0801b74c 	.word	0x0801b74c
 8011ac8:	0801b764 	.word	0x0801b764
 8011acc:	0801b790 	.word	0x0801b790

08011ad0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011ad0:	b5b0      	push	{r4, r5, r7, lr}
 8011ad2:	b08a      	sub	sp, #40	; 0x28
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d106      	bne.n	8011aec <tcp_output+0x1c>
 8011ade:	4ba0      	ldr	r3, [pc, #640]	; (8011d60 <tcp_output+0x290>)
 8011ae0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011ae4:	499f      	ldr	r1, [pc, #636]	; (8011d64 <tcp_output+0x294>)
 8011ae6:	48a0      	ldr	r0, [pc, #640]	; (8011d68 <tcp_output+0x298>)
 8011ae8:	f006 f97e 	bl	8017de8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	7d1b      	ldrb	r3, [r3, #20]
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d106      	bne.n	8011b02 <tcp_output+0x32>
 8011af4:	4b9a      	ldr	r3, [pc, #616]	; (8011d60 <tcp_output+0x290>)
 8011af6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8011afa:	499c      	ldr	r1, [pc, #624]	; (8011d6c <tcp_output+0x29c>)
 8011afc:	489a      	ldr	r0, [pc, #616]	; (8011d68 <tcp_output+0x298>)
 8011afe:	f006 f973 	bl	8017de8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011b02:	4b9b      	ldr	r3, [pc, #620]	; (8011d70 <tcp_output+0x2a0>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d101      	bne.n	8011b10 <tcp_output+0x40>
    return ERR_OK;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	e1d2      	b.n	8011eb6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d203      	bcs.n	8011b28 <tcp_output+0x58>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b26:	e002      	b.n	8011b2e <tcp_output+0x5e>
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b2e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b34:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d10b      	bne.n	8011b54 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	8b5b      	ldrh	r3, [r3, #26]
 8011b40:	f003 0302 	and.w	r3, r3, #2
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f000 81a9 	beq.w	8011e9c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f000 fdd6 	bl	80126fc <tcp_send_empty_ack>
 8011b50:	4603      	mov	r3, r0
 8011b52:	e1b0      	b.n	8011eb6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011b54:	6879      	ldr	r1, [r7, #4]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	3304      	adds	r3, #4
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7ff f81d 	bl	8010b9c <tcp_route>
 8011b62:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d102      	bne.n	8011b70 <tcp_output+0xa0>
    return ERR_RTE;
 8011b6a:	f06f 0303 	mvn.w	r3, #3
 8011b6e:	e1a2      	b.n	8011eb6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d003      	beq.n	8011b7e <tcp_output+0xae>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d111      	bne.n	8011ba2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d002      	beq.n	8011b8a <tcp_output+0xba>
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	3304      	adds	r3, #4
 8011b88:	e000      	b.n	8011b8c <tcp_output+0xbc>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d102      	bne.n	8011b9a <tcp_output+0xca>
      return ERR_RTE;
 8011b94:	f06f 0303 	mvn.w	r3, #3
 8011b98:	e18d      	b.n	8011eb6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7f8 ffe4 	bl	800ab76 <lwip_htonl>
 8011bae:	4602      	mov	r2, r0
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bb4:	1ad3      	subs	r3, r2, r3
 8011bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bb8:	8912      	ldrh	r2, [r2, #8]
 8011bba:	4413      	add	r3, r2
 8011bbc:	69ba      	ldr	r2, [r7, #24]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d227      	bcs.n	8011c12 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bc8:	461a      	mov	r2, r3
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	d114      	bne.n	8011bfa <tcp_output+0x12a>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d110      	bne.n	8011bfa <tcp_output+0x12a>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d10b      	bne.n	8011bfa <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2200      	movs	r2, #0
 8011be6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2201      	movs	r2, #1
 8011bee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	8b5b      	ldrh	r3, [r3, #26]
 8011bfe:	f003 0302 	and.w	r3, r3, #2
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f000 814c 	beq.w	8011ea0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f000 fd77 	bl	80126fc <tcp_send_empty_ack>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	e151      	b.n	8011eb6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c1e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011c20:	6a3b      	ldr	r3, [r7, #32]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f000 811b 	beq.w	8011e5e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8011c28:	e002      	b.n	8011c30 <tcp_output+0x160>
 8011c2a:	6a3b      	ldr	r3, [r7, #32]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	623b      	str	r3, [r7, #32]
 8011c30:	6a3b      	ldr	r3, [r7, #32]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d1f8      	bne.n	8011c2a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011c38:	e111      	b.n	8011e5e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3c:	68db      	ldr	r3, [r3, #12]
 8011c3e:	899b      	ldrh	r3, [r3, #12]
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7f8 ff82 	bl	800ab4c <lwip_htons>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	f003 0304 	and.w	r3, r3, #4
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d006      	beq.n	8011c62 <tcp_output+0x192>
 8011c54:	4b42      	ldr	r3, [pc, #264]	; (8011d60 <tcp_output+0x290>)
 8011c56:	f240 5237 	movw	r2, #1335	; 0x537
 8011c5a:	4946      	ldr	r1, [pc, #280]	; (8011d74 <tcp_output+0x2a4>)
 8011c5c:	4842      	ldr	r0, [pc, #264]	; (8011d68 <tcp_output+0x298>)
 8011c5e:	f006 f8c3 	bl	8017de8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d01f      	beq.n	8011caa <tcp_output+0x1da>
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	8b5b      	ldrh	r3, [r3, #26]
 8011c6e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d119      	bne.n	8011caa <tcp_output+0x1da>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00b      	beq.n	8011c96 <tcp_output+0x1c6>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d110      	bne.n	8011caa <tcp_output+0x1da>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c8c:	891a      	ldrh	r2, [r3, #8]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d209      	bcs.n	8011caa <tcp_output+0x1da>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d004      	beq.n	8011caa <tcp_output+0x1da>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ca6:	2b08      	cmp	r3, #8
 8011ca8:	d901      	bls.n	8011cae <tcp_output+0x1de>
 8011caa:	2301      	movs	r3, #1
 8011cac:	e000      	b.n	8011cb0 <tcp_output+0x1e0>
 8011cae:	2300      	movs	r3, #0
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d106      	bne.n	8011cc2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	8b5b      	ldrh	r3, [r3, #26]
 8011cb8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	f000 80e3 	beq.w	8011e88 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	7d1b      	ldrb	r3, [r3, #20]
 8011cc6:	2b02      	cmp	r3, #2
 8011cc8:	d00d      	beq.n	8011ce6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	899b      	ldrh	r3, [r3, #12]
 8011cd0:	b29c      	uxth	r4, r3
 8011cd2:	2010      	movs	r0, #16
 8011cd4:	f7f8 ff3a 	bl	800ab4c <lwip_htons>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	461a      	mov	r2, r3
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	4322      	orrs	r2, r4
 8011ce2:	b292      	uxth	r2, r2
 8011ce4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011ce6:	697a      	ldr	r2, [r7, #20]
 8011ce8:	6879      	ldr	r1, [r7, #4]
 8011cea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cec:	f000 f908 	bl	8011f00 <tcp_output_segment>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d009      	beq.n	8011d10 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	8b5b      	ldrh	r3, [r3, #26]
 8011d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	835a      	strh	r2, [r3, #26]
      return err;
 8011d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d0e:	e0d2      	b.n	8011eb6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	7d1b      	ldrb	r3, [r3, #20]
 8011d1c:	2b02      	cmp	r3, #2
 8011d1e:	d006      	beq.n	8011d2e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	8b5b      	ldrh	r3, [r3, #26]
 8011d24:	f023 0303 	bic.w	r3, r3, #3
 8011d28:	b29a      	uxth	r2, r3
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7f8 ff1e 	bl	800ab76 <lwip_htonl>
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	891b      	ldrh	r3, [r3, #8]
 8011d40:	461d      	mov	r5, r3
 8011d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d44:	68db      	ldr	r3, [r3, #12]
 8011d46:	899b      	ldrh	r3, [r3, #12]
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7f8 fefe 	bl	800ab4c <lwip_htons>
 8011d50:	4603      	mov	r3, r0
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	f003 0303 	and.w	r3, r3, #3
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d00d      	beq.n	8011d78 <tcp_output+0x2a8>
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	e00c      	b.n	8011d7a <tcp_output+0x2aa>
 8011d60:	0801b274 	.word	0x0801b274
 8011d64:	0801b7b8 	.word	0x0801b7b8
 8011d68:	0801b2c8 	.word	0x0801b2c8
 8011d6c:	0801b7d0 	.word	0x0801b7d0
 8011d70:	2000f528 	.word	0x2000f528
 8011d74:	0801b7f8 	.word	0x0801b7f8
 8011d78:	2300      	movs	r3, #0
 8011d7a:	442b      	add	r3, r5
 8011d7c:	4423      	add	r3, r4
 8011d7e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	1ad3      	subs	r3, r2, r3
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	da02      	bge.n	8011d92 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	68ba      	ldr	r2, [r7, #8]
 8011d90:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d94:	891b      	ldrh	r3, [r3, #8]
 8011d96:	461c      	mov	r4, r3
 8011d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	899b      	ldrh	r3, [r3, #12]
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7f8 fed3 	bl	800ab4c <lwip_htons>
 8011da6:	4603      	mov	r3, r0
 8011da8:	b2db      	uxtb	r3, r3
 8011daa:	f003 0303 	and.w	r3, r3, #3
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d001      	beq.n	8011db6 <tcp_output+0x2e6>
 8011db2:	2301      	movs	r3, #1
 8011db4:	e000      	b.n	8011db8 <tcp_output+0x2e8>
 8011db6:	2300      	movs	r3, #0
 8011db8:	4423      	add	r3, r4
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d049      	beq.n	8011e52 <tcp_output+0x382>
      seg->next = NULL;
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d105      	bne.n	8011dd8 <tcp_output+0x308>
        pcb->unacked = seg;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dd0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd4:	623b      	str	r3, [r7, #32]
 8011dd6:	e03f      	b.n	8011e58 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7f8 fec9 	bl	800ab76 <lwip_htonl>
 8011de4:	4604      	mov	r4, r0
 8011de6:	6a3b      	ldr	r3, [r7, #32]
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7f8 fec2 	bl	800ab76 <lwip_htonl>
 8011df2:	4603      	mov	r3, r0
 8011df4:	1ae3      	subs	r3, r4, r3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	da24      	bge.n	8011e44 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	3370      	adds	r3, #112	; 0x70
 8011dfe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011e00:	e002      	b.n	8011e08 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d011      	beq.n	8011e34 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7f8 feac 	bl	800ab76 <lwip_htonl>
 8011e1e:	4604      	mov	r4, r0
 8011e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e22:	68db      	ldr	r3, [r3, #12]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7f8 fea5 	bl	800ab76 <lwip_htonl>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	dbe6      	blt.n	8011e02 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	681a      	ldr	r2, [r3, #0]
 8011e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e40:	601a      	str	r2, [r3, #0]
 8011e42:	e009      	b.n	8011e58 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011e44:	6a3b      	ldr	r3, [r7, #32]
 8011e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e48:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011e4a:	6a3b      	ldr	r3, [r7, #32]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	623b      	str	r3, [r7, #32]
 8011e50:	e002      	b.n	8011e58 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e54:	f7fb fefc 	bl	800dc50 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d012      	beq.n	8011e8a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7f8 fe83 	bl	800ab76 <lwip_htonl>
 8011e70:	4602      	mov	r2, r0
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e7a:	8912      	ldrh	r2, [r2, #8]
 8011e7c:	4413      	add	r3, r2
  while (seg != NULL &&
 8011e7e:	69ba      	ldr	r2, [r7, #24]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	f4bf aeda 	bcs.w	8011c3a <tcp_output+0x16a>
 8011e86:	e000      	b.n	8011e8a <tcp_output+0x3ba>
      break;
 8011e88:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d108      	bne.n	8011ea4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2200      	movs	r2, #0
 8011e96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011e9a:	e004      	b.n	8011ea6 <tcp_output+0x3d6>
    goto output_done;
 8011e9c:	bf00      	nop
 8011e9e:	e002      	b.n	8011ea6 <tcp_output+0x3d6>
    goto output_done;
 8011ea0:	bf00      	nop
 8011ea2:	e000      	b.n	8011ea6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011ea4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	8b5b      	ldrh	r3, [r3, #26]
 8011eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3728      	adds	r7, #40	; 0x28
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8011ebe:	bf00      	nop

08011ec0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d106      	bne.n	8011edc <tcp_output_segment_busy+0x1c>
 8011ece:	4b09      	ldr	r3, [pc, #36]	; (8011ef4 <tcp_output_segment_busy+0x34>)
 8011ed0:	f240 529a 	movw	r2, #1434	; 0x59a
 8011ed4:	4908      	ldr	r1, [pc, #32]	; (8011ef8 <tcp_output_segment_busy+0x38>)
 8011ed6:	4809      	ldr	r0, [pc, #36]	; (8011efc <tcp_output_segment_busy+0x3c>)
 8011ed8:	f005 ff86 	bl	8017de8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	7b9b      	ldrb	r3, [r3, #14]
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	d001      	beq.n	8011eea <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e000      	b.n	8011eec <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011eea:	2300      	movs	r3, #0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3708      	adds	r7, #8
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	0801b274 	.word	0x0801b274
 8011ef8:	0801b810 	.word	0x0801b810
 8011efc:	0801b2c8 	.word	0x0801b2c8

08011f00 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011f00:	b5b0      	push	{r4, r5, r7, lr}
 8011f02:	b08c      	sub	sp, #48	; 0x30
 8011f04:	af04      	add	r7, sp, #16
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d106      	bne.n	8011f20 <tcp_output_segment+0x20>
 8011f12:	4b64      	ldr	r3, [pc, #400]	; (80120a4 <tcp_output_segment+0x1a4>)
 8011f14:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011f18:	4963      	ldr	r1, [pc, #396]	; (80120a8 <tcp_output_segment+0x1a8>)
 8011f1a:	4864      	ldr	r0, [pc, #400]	; (80120ac <tcp_output_segment+0x1ac>)
 8011f1c:	f005 ff64 	bl	8017de8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d106      	bne.n	8011f34 <tcp_output_segment+0x34>
 8011f26:	4b5f      	ldr	r3, [pc, #380]	; (80120a4 <tcp_output_segment+0x1a4>)
 8011f28:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011f2c:	4960      	ldr	r1, [pc, #384]	; (80120b0 <tcp_output_segment+0x1b0>)
 8011f2e:	485f      	ldr	r0, [pc, #380]	; (80120ac <tcp_output_segment+0x1ac>)
 8011f30:	f005 ff5a 	bl	8017de8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d106      	bne.n	8011f48 <tcp_output_segment+0x48>
 8011f3a:	4b5a      	ldr	r3, [pc, #360]	; (80120a4 <tcp_output_segment+0x1a4>)
 8011f3c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011f40:	495c      	ldr	r1, [pc, #368]	; (80120b4 <tcp_output_segment+0x1b4>)
 8011f42:	485a      	ldr	r0, [pc, #360]	; (80120ac <tcp_output_segment+0x1ac>)
 8011f44:	f005 ff50 	bl	8017de8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	f7ff ffb9 	bl	8011ec0 <tcp_output_segment_busy>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d001      	beq.n	8011f58 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011f54:	2300      	movs	r3, #0
 8011f56:	e0a0      	b.n	801209a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	68dc      	ldr	r4, [r3, #12]
 8011f60:	4610      	mov	r0, r2
 8011f62:	f7f8 fe08 	bl	800ab76 <lwip_htonl>
 8011f66:	4603      	mov	r3, r0
 8011f68:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	68dc      	ldr	r4, [r3, #12]
 8011f72:	4610      	mov	r0, r2
 8011f74:	f7f8 fdea 	bl	800ab4c <lwip_htons>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f80:	68ba      	ldr	r2, [r7, #8]
 8011f82:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011f84:	441a      	add	r2, r3
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	3314      	adds	r3, #20
 8011f90:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	7a9b      	ldrb	r3, [r3, #10]
 8011f96:	f003 0301 	and.w	r3, r3, #1
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d015      	beq.n	8011fca <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	3304      	adds	r3, #4
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	6879      	ldr	r1, [r7, #4]
 8011fa6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011faa:	f7fc fa33 	bl	800e414 <tcp_eff_send_mss_netif>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011fb2:	8b7b      	ldrh	r3, [r7, #26]
 8011fb4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7f8 fddc 	bl	800ab76 <lwip_htonl>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	3304      	adds	r3, #4
 8011fc8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	da02      	bge.n	8011fda <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d10c      	bne.n	8011ffc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011fe2:	4b35      	ldr	r3, [pc, #212]	; (80120b8 <tcp_output_segment+0x1b8>)
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7f8 fdc0 	bl	800ab76 <lwip_htonl>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	461a      	mov	r2, r3
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	8959      	ldrh	r1, [r3, #10]
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	685b      	ldr	r3, [r3, #4]
 8012016:	8b3a      	ldrh	r2, [r7, #24]
 8012018:	1a8a      	subs	r2, r1, r2
 801201a:	b292      	uxth	r2, r2
 801201c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	8919      	ldrh	r1, [r3, #8]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	8b3a      	ldrh	r2, [r7, #24]
 801202a:	1a8a      	subs	r2, r1, r2
 801202c:	b292      	uxth	r2, r2
 801202e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	68fa      	ldr	r2, [r7, #12]
 8012036:	68d2      	ldr	r2, [r2, #12]
 8012038:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	2200      	movs	r2, #0
 8012040:	741a      	strb	r2, [r3, #16]
 8012042:	2200      	movs	r2, #0
 8012044:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	68db      	ldr	r3, [r3, #12]
 801204a:	f103 0214 	add.w	r2, r3, #20
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	7a9b      	ldrb	r3, [r3, #10]
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	f003 0304 	and.w	r3, r3, #4
 8012058:	4413      	add	r3, r2
 801205a:	69fa      	ldr	r2, [r7, #28]
 801205c:	429a      	cmp	r2, r3
 801205e:	d006      	beq.n	801206e <tcp_output_segment+0x16e>
 8012060:	4b10      	ldr	r3, [pc, #64]	; (80120a4 <tcp_output_segment+0x1a4>)
 8012062:	f240 621c 	movw	r2, #1564	; 0x61c
 8012066:	4915      	ldr	r1, [pc, #84]	; (80120bc <tcp_output_segment+0x1bc>)
 8012068:	4810      	ldr	r0, [pc, #64]	; (80120ac <tcp_output_segment+0x1ac>)
 801206a:	f005 febd 	bl	8017de8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	6858      	ldr	r0, [r3, #4]
 8012072:	68b9      	ldr	r1, [r7, #8]
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	1d1c      	adds	r4, r3, #4
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	7add      	ldrb	r5, [r3, #11]
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	7a9b      	ldrb	r3, [r3, #10]
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	9202      	str	r2, [sp, #8]
 8012084:	2206      	movs	r2, #6
 8012086:	9201      	str	r2, [sp, #4]
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	462b      	mov	r3, r5
 801208c:	4622      	mov	r2, r4
 801208e:	f004 fc3f 	bl	8016910 <ip4_output_if>
 8012092:	4603      	mov	r3, r0
 8012094:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3720      	adds	r7, #32
 801209e:	46bd      	mov	sp, r7
 80120a0:	bdb0      	pop	{r4, r5, r7, pc}
 80120a2:	bf00      	nop
 80120a4:	0801b274 	.word	0x0801b274
 80120a8:	0801b838 	.word	0x0801b838
 80120ac:	0801b2c8 	.word	0x0801b2c8
 80120b0:	0801b858 	.word	0x0801b858
 80120b4:	0801b878 	.word	0x0801b878
 80120b8:	2000f518 	.word	0x2000f518
 80120bc:	0801b89c 	.word	0x0801b89c

080120c0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80120c0:	b5b0      	push	{r4, r5, r7, lr}
 80120c2:	b084      	sub	sp, #16
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d106      	bne.n	80120dc <tcp_rexmit_rto_prepare+0x1c>
 80120ce:	4b31      	ldr	r3, [pc, #196]	; (8012194 <tcp_rexmit_rto_prepare+0xd4>)
 80120d0:	f240 6263 	movw	r2, #1635	; 0x663
 80120d4:	4930      	ldr	r1, [pc, #192]	; (8012198 <tcp_rexmit_rto_prepare+0xd8>)
 80120d6:	4831      	ldr	r0, [pc, #196]	; (801219c <tcp_rexmit_rto_prepare+0xdc>)
 80120d8:	f005 fe86 	bl	8017de8 <iprintf>

  if (pcb->unacked == NULL) {
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d102      	bne.n	80120ea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80120e4:	f06f 0305 	mvn.w	r3, #5
 80120e8:	e050      	b.n	801218c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120ee:	60fb      	str	r3, [r7, #12]
 80120f0:	e00b      	b.n	801210a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f7ff fee4 	bl	8011ec0 <tcp_output_segment_busy>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d002      	beq.n	8012104 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80120fe:	f06f 0305 	mvn.w	r3, #5
 8012102:	e043      	b.n	801218c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	60fb      	str	r3, [r7, #12]
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d1ef      	bne.n	80120f2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012112:	68f8      	ldr	r0, [r7, #12]
 8012114:	f7ff fed4 	bl	8011ec0 <tcp_output_segment_busy>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d002      	beq.n	8012124 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801211e:	f06f 0305 	mvn.w	r3, #5
 8012122:	e033      	b.n	801218c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	8b5b      	ldrh	r3, [r3, #26]
 801213e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012142:	b29a      	uxth	r2, r3
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	68db      	ldr	r3, [r3, #12]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	4618      	mov	r0, r3
 8012150:	f7f8 fd11 	bl	800ab76 <lwip_htonl>
 8012154:	4604      	mov	r4, r0
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	891b      	ldrh	r3, [r3, #8]
 801215a:	461d      	mov	r5, r3
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	68db      	ldr	r3, [r3, #12]
 8012160:	899b      	ldrh	r3, [r3, #12]
 8012162:	b29b      	uxth	r3, r3
 8012164:	4618      	mov	r0, r3
 8012166:	f7f8 fcf1 	bl	800ab4c <lwip_htons>
 801216a:	4603      	mov	r3, r0
 801216c:	b2db      	uxtb	r3, r3
 801216e:	f003 0303 	and.w	r3, r3, #3
 8012172:	2b00      	cmp	r3, #0
 8012174:	d001      	beq.n	801217a <tcp_rexmit_rto_prepare+0xba>
 8012176:	2301      	movs	r3, #1
 8012178:	e000      	b.n	801217c <tcp_rexmit_rto_prepare+0xbc>
 801217a:	2300      	movs	r3, #0
 801217c:	442b      	add	r3, r5
 801217e:	18e2      	adds	r2, r4, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801218a:	2300      	movs	r3, #0
}
 801218c:	4618      	mov	r0, r3
 801218e:	3710      	adds	r7, #16
 8012190:	46bd      	mov	sp, r7
 8012192:	bdb0      	pop	{r4, r5, r7, pc}
 8012194:	0801b274 	.word	0x0801b274
 8012198:	0801b8b0 	.word	0x0801b8b0
 801219c:	0801b2c8 	.word	0x0801b2c8

080121a0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d106      	bne.n	80121bc <tcp_rexmit_rto_commit+0x1c>
 80121ae:	4b0d      	ldr	r3, [pc, #52]	; (80121e4 <tcp_rexmit_rto_commit+0x44>)
 80121b0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80121b4:	490c      	ldr	r1, [pc, #48]	; (80121e8 <tcp_rexmit_rto_commit+0x48>)
 80121b6:	480d      	ldr	r0, [pc, #52]	; (80121ec <tcp_rexmit_rto_commit+0x4c>)
 80121b8:	f005 fe16 	bl	8017de8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80121c2:	2bff      	cmp	r3, #255	; 0xff
 80121c4:	d007      	beq.n	80121d6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80121cc:	3301      	adds	r3, #1
 80121ce:	b2da      	uxtb	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f7ff fc7a 	bl	8011ad0 <tcp_output>
}
 80121dc:	bf00      	nop
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	0801b274 	.word	0x0801b274
 80121e8:	0801b8d4 	.word	0x0801b8d4
 80121ec:	0801b2c8 	.word	0x0801b2c8

080121f0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d106      	bne.n	801220c <tcp_rexmit_rto+0x1c>
 80121fe:	4b0a      	ldr	r3, [pc, #40]	; (8012228 <tcp_rexmit_rto+0x38>)
 8012200:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012204:	4909      	ldr	r1, [pc, #36]	; (801222c <tcp_rexmit_rto+0x3c>)
 8012206:	480a      	ldr	r0, [pc, #40]	; (8012230 <tcp_rexmit_rto+0x40>)
 8012208:	f005 fdee 	bl	8017de8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff ff57 	bl	80120c0 <tcp_rexmit_rto_prepare>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d102      	bne.n	801221e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f7ff ffc1 	bl	80121a0 <tcp_rexmit_rto_commit>
  }
}
 801221e:	bf00      	nop
 8012220:	3708      	adds	r7, #8
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	0801b274 	.word	0x0801b274
 801222c:	0801b8f8 	.word	0x0801b8f8
 8012230:	0801b2c8 	.word	0x0801b2c8

08012234 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012234:	b590      	push	{r4, r7, lr}
 8012236:	b085      	sub	sp, #20
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d106      	bne.n	8012250 <tcp_rexmit+0x1c>
 8012242:	4b2f      	ldr	r3, [pc, #188]	; (8012300 <tcp_rexmit+0xcc>)
 8012244:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012248:	492e      	ldr	r1, [pc, #184]	; (8012304 <tcp_rexmit+0xd0>)
 801224a:	482f      	ldr	r0, [pc, #188]	; (8012308 <tcp_rexmit+0xd4>)
 801224c:	f005 fdcc 	bl	8017de8 <iprintf>

  if (pcb->unacked == NULL) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012254:	2b00      	cmp	r3, #0
 8012256:	d102      	bne.n	801225e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012258:	f06f 0305 	mvn.w	r3, #5
 801225c:	e04c      	b.n	80122f8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012262:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012264:	68b8      	ldr	r0, [r7, #8]
 8012266:	f7ff fe2b 	bl	8011ec0 <tcp_output_segment_busy>
 801226a:	4603      	mov	r3, r0
 801226c:	2b00      	cmp	r3, #0
 801226e:	d002      	beq.n	8012276 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012270:	f06f 0305 	mvn.w	r3, #5
 8012274:	e040      	b.n	80122f8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	336c      	adds	r3, #108	; 0x6c
 8012282:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012284:	e002      	b.n	801228c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d011      	beq.n	80122b8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	4618      	mov	r0, r3
 801229e:	f7f8 fc6a 	bl	800ab76 <lwip_htonl>
 80122a2:	4604      	mov	r4, r0
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	68db      	ldr	r3, [r3, #12]
 80122a8:	685b      	ldr	r3, [r3, #4]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7f8 fc63 	bl	800ab76 <lwip_htonl>
 80122b0:	4603      	mov	r3, r0
 80122b2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	dbe6      	blt.n	8012286 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	68ba      	ldr	r2, [r7, #8]
 80122c4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d103      	bne.n	80122d6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2200      	movs	r2, #0
 80122d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122dc:	2bff      	cmp	r3, #255	; 0xff
 80122de:	d007      	beq.n	80122f0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122e6:	3301      	adds	r3, #1
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2200      	movs	r2, #0
 80122f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3714      	adds	r7, #20
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd90      	pop	{r4, r7, pc}
 8012300:	0801b274 	.word	0x0801b274
 8012304:	0801b914 	.word	0x0801b914
 8012308:	0801b2c8 	.word	0x0801b2c8

0801230c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d106      	bne.n	8012328 <tcp_rexmit_fast+0x1c>
 801231a:	4b2e      	ldr	r3, [pc, #184]	; (80123d4 <tcp_rexmit_fast+0xc8>)
 801231c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012320:	492d      	ldr	r1, [pc, #180]	; (80123d8 <tcp_rexmit_fast+0xcc>)
 8012322:	482e      	ldr	r0, [pc, #184]	; (80123dc <tcp_rexmit_fast+0xd0>)
 8012324:	f005 fd60 	bl	8017de8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801232c:	2b00      	cmp	r3, #0
 801232e:	d04d      	beq.n	80123cc <tcp_rexmit_fast+0xc0>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	8b5b      	ldrh	r3, [r3, #26]
 8012334:	f003 0304 	and.w	r3, r3, #4
 8012338:	2b00      	cmp	r3, #0
 801233a:	d147      	bne.n	80123cc <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f7ff ff79 	bl	8012234 <tcp_rexmit>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d141      	bne.n	80123cc <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012354:	429a      	cmp	r2, r3
 8012356:	d207      	bcs.n	8012368 <tcp_rexmit_fast+0x5c>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801235e:	0fda      	lsrs	r2, r3, #31
 8012360:	4413      	add	r3, r2
 8012362:	105b      	asrs	r3, r3, #1
 8012364:	b29b      	uxth	r3, r3
 8012366:	e006      	b.n	8012376 <tcp_rexmit_fast+0x6a>
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801236e:	0fda      	lsrs	r2, r3, #31
 8012370:	4413      	add	r3, r2
 8012372:	105b      	asrs	r3, r3, #1
 8012374:	b29b      	uxth	r3, r3
 8012376:	687a      	ldr	r2, [r7, #4]
 8012378:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012382:	461a      	mov	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012388:	005b      	lsls	r3, r3, #1
 801238a:	429a      	cmp	r2, r3
 801238c:	d206      	bcs.n	801239c <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012392:	005b      	lsls	r3, r3, #1
 8012394:	b29a      	uxth	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123a6:	4619      	mov	r1, r3
 80123a8:	0049      	lsls	r1, r1, #1
 80123aa:	440b      	add	r3, r1
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	4413      	add	r3, r2
 80123b0:	b29a      	uxth	r2, r3
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	8b5b      	ldrh	r3, [r3, #26]
 80123bc:	f043 0304 	orr.w	r3, r3, #4
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2200      	movs	r2, #0
 80123ca:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80123cc:	bf00      	nop
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	0801b274 	.word	0x0801b274
 80123d8:	0801b92c 	.word	0x0801b92c
 80123dc:	0801b2c8 	.word	0x0801b2c8

080123e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b086      	sub	sp, #24
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	60f8      	str	r0, [r7, #12]
 80123e8:	607b      	str	r3, [r7, #4]
 80123ea:	460b      	mov	r3, r1
 80123ec:	817b      	strh	r3, [r7, #10]
 80123ee:	4613      	mov	r3, r2
 80123f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80123f2:	897a      	ldrh	r2, [r7, #10]
 80123f4:	893b      	ldrh	r3, [r7, #8]
 80123f6:	4413      	add	r3, r2
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	3314      	adds	r3, #20
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012402:	4619      	mov	r1, r3
 8012404:	2022      	movs	r0, #34	; 0x22
 8012406:	f7f9 fcab 	bl	800bd60 <pbuf_alloc>
 801240a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d04e      	beq.n	80124b0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	895b      	ldrh	r3, [r3, #10]
 8012416:	461a      	mov	r2, r3
 8012418:	897b      	ldrh	r3, [r7, #10]
 801241a:	3314      	adds	r3, #20
 801241c:	429a      	cmp	r2, r3
 801241e:	da06      	bge.n	801242e <tcp_output_alloc_header_common+0x4e>
 8012420:	4b26      	ldr	r3, [pc, #152]	; (80124bc <tcp_output_alloc_header_common+0xdc>)
 8012422:	f240 7224 	movw	r2, #1828	; 0x724
 8012426:	4926      	ldr	r1, [pc, #152]	; (80124c0 <tcp_output_alloc_header_common+0xe0>)
 8012428:	4826      	ldr	r0, [pc, #152]	; (80124c4 <tcp_output_alloc_header_common+0xe4>)
 801242a:	f005 fcdd 	bl	8017de8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012434:	8c3b      	ldrh	r3, [r7, #32]
 8012436:	4618      	mov	r0, r3
 8012438:	f7f8 fb88 	bl	800ab4c <lwip_htons>
 801243c:	4603      	mov	r3, r0
 801243e:	461a      	mov	r2, r3
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012446:	4618      	mov	r0, r3
 8012448:	f7f8 fb80 	bl	800ab4c <lwip_htons>
 801244c:	4603      	mov	r3, r0
 801244e:	461a      	mov	r2, r3
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	687a      	ldr	r2, [r7, #4]
 8012458:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f7f8 fb8b 	bl	800ab76 <lwip_htonl>
 8012460:	4602      	mov	r2, r0
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012466:	897b      	ldrh	r3, [r7, #10]
 8012468:	089b      	lsrs	r3, r3, #2
 801246a:	b29b      	uxth	r3, r3
 801246c:	3305      	adds	r3, #5
 801246e:	b29b      	uxth	r3, r3
 8012470:	031b      	lsls	r3, r3, #12
 8012472:	b29a      	uxth	r2, r3
 8012474:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012478:	b29b      	uxth	r3, r3
 801247a:	4313      	orrs	r3, r2
 801247c:	b29b      	uxth	r3, r3
 801247e:	4618      	mov	r0, r3
 8012480:	f7f8 fb64 	bl	800ab4c <lwip_htons>
 8012484:	4603      	mov	r3, r0
 8012486:	461a      	mov	r2, r3
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801248c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801248e:	4618      	mov	r0, r3
 8012490:	f7f8 fb5c 	bl	800ab4c <lwip_htons>
 8012494:	4603      	mov	r3, r0
 8012496:	461a      	mov	r2, r3
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	2200      	movs	r2, #0
 80124a0:	741a      	strb	r2, [r3, #16]
 80124a2:	2200      	movs	r2, #0
 80124a4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	2200      	movs	r2, #0
 80124aa:	749a      	strb	r2, [r3, #18]
 80124ac:	2200      	movs	r2, #0
 80124ae:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80124b0:	697b      	ldr	r3, [r7, #20]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3718      	adds	r7, #24
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	0801b274 	.word	0x0801b274
 80124c0:	0801b94c 	.word	0x0801b94c
 80124c4:	0801b2c8 	.word	0x0801b2c8

080124c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80124c8:	b5b0      	push	{r4, r5, r7, lr}
 80124ca:	b08a      	sub	sp, #40	; 0x28
 80124cc:	af04      	add	r7, sp, #16
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	607b      	str	r3, [r7, #4]
 80124d2:	460b      	mov	r3, r1
 80124d4:	817b      	strh	r3, [r7, #10]
 80124d6:	4613      	mov	r3, r2
 80124d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d106      	bne.n	80124ee <tcp_output_alloc_header+0x26>
 80124e0:	4b15      	ldr	r3, [pc, #84]	; (8012538 <tcp_output_alloc_header+0x70>)
 80124e2:	f240 7242 	movw	r2, #1858	; 0x742
 80124e6:	4915      	ldr	r1, [pc, #84]	; (801253c <tcp_output_alloc_header+0x74>)
 80124e8:	4815      	ldr	r0, [pc, #84]	; (8012540 <tcp_output_alloc_header+0x78>)
 80124ea:	f005 fc7d 	bl	8017de8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	8adb      	ldrh	r3, [r3, #22]
 80124f6:	68fa      	ldr	r2, [r7, #12]
 80124f8:	8b12      	ldrh	r2, [r2, #24]
 80124fa:	68f9      	ldr	r1, [r7, #12]
 80124fc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80124fe:	893d      	ldrh	r5, [r7, #8]
 8012500:	897c      	ldrh	r4, [r7, #10]
 8012502:	9103      	str	r1, [sp, #12]
 8012504:	2110      	movs	r1, #16
 8012506:	9102      	str	r1, [sp, #8]
 8012508:	9201      	str	r2, [sp, #4]
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	462a      	mov	r2, r5
 8012510:	4621      	mov	r1, r4
 8012512:	f7ff ff65 	bl	80123e0 <tcp_output_alloc_header_common>
 8012516:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d006      	beq.n	801252c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012522:	68fa      	ldr	r2, [r7, #12]
 8012524:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012526:	441a      	add	r2, r3
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801252c:	697b      	ldr	r3, [r7, #20]
}
 801252e:	4618      	mov	r0, r3
 8012530:	3718      	adds	r7, #24
 8012532:	46bd      	mov	sp, r7
 8012534:	bdb0      	pop	{r4, r5, r7, pc}
 8012536:	bf00      	nop
 8012538:	0801b274 	.word	0x0801b274
 801253c:	0801b97c 	.word	0x0801b97c
 8012540:	0801b2c8 	.word	0x0801b2c8

08012544 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b088      	sub	sp, #32
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	4611      	mov	r1, r2
 8012550:	461a      	mov	r2, r3
 8012552:	460b      	mov	r3, r1
 8012554:	71fb      	strb	r3, [r7, #7]
 8012556:	4613      	mov	r3, r2
 8012558:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801255a:	2300      	movs	r3, #0
 801255c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d106      	bne.n	8012572 <tcp_output_fill_options+0x2e>
 8012564:	4b13      	ldr	r3, [pc, #76]	; (80125b4 <tcp_output_fill_options+0x70>)
 8012566:	f240 7256 	movw	r2, #1878	; 0x756
 801256a:	4913      	ldr	r1, [pc, #76]	; (80125b8 <tcp_output_fill_options+0x74>)
 801256c:	4813      	ldr	r0, [pc, #76]	; (80125bc <tcp_output_fill_options+0x78>)
 801256e:	f005 fc3b 	bl	8017de8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	3314      	adds	r3, #20
 801257c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	f103 0214 	add.w	r2, r3, #20
 8012584:	8bfb      	ldrh	r3, [r7, #30]
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	4619      	mov	r1, r3
 801258a:	79fb      	ldrb	r3, [r7, #7]
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	f003 0304 	and.w	r3, r3, #4
 8012592:	440b      	add	r3, r1
 8012594:	4413      	add	r3, r2
 8012596:	697a      	ldr	r2, [r7, #20]
 8012598:	429a      	cmp	r2, r3
 801259a:	d006      	beq.n	80125aa <tcp_output_fill_options+0x66>
 801259c:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <tcp_output_fill_options+0x70>)
 801259e:	f240 7275 	movw	r2, #1909	; 0x775
 80125a2:	4907      	ldr	r1, [pc, #28]	; (80125c0 <tcp_output_fill_options+0x7c>)
 80125a4:	4805      	ldr	r0, [pc, #20]	; (80125bc <tcp_output_fill_options+0x78>)
 80125a6:	f005 fc1f 	bl	8017de8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80125aa:	bf00      	nop
 80125ac:	3720      	adds	r7, #32
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	0801b274 	.word	0x0801b274
 80125b8:	0801b9a4 	.word	0x0801b9a4
 80125bc:	0801b2c8 	.word	0x0801b2c8
 80125c0:	0801b89c 	.word	0x0801b89c

080125c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b08a      	sub	sp, #40	; 0x28
 80125c8:	af04      	add	r7, sp, #16
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	607a      	str	r2, [r7, #4]
 80125d0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d106      	bne.n	80125e6 <tcp_output_control_segment+0x22>
 80125d8:	4b1c      	ldr	r3, [pc, #112]	; (801264c <tcp_output_control_segment+0x88>)
 80125da:	f240 7287 	movw	r2, #1927	; 0x787
 80125de:	491c      	ldr	r1, [pc, #112]	; (8012650 <tcp_output_control_segment+0x8c>)
 80125e0:	481c      	ldr	r0, [pc, #112]	; (8012654 <tcp_output_control_segment+0x90>)
 80125e2:	f005 fc01 	bl	8017de8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80125e6:	683a      	ldr	r2, [r7, #0]
 80125e8:	6879      	ldr	r1, [r7, #4]
 80125ea:	68f8      	ldr	r0, [r7, #12]
 80125ec:	f7fe fad6 	bl	8010b9c <tcp_route>
 80125f0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d102      	bne.n	80125fe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80125f8:	23fc      	movs	r3, #252	; 0xfc
 80125fa:	75fb      	strb	r3, [r7, #23]
 80125fc:	e01c      	b.n	8012638 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d006      	beq.n	8012612 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	7adb      	ldrb	r3, [r3, #11]
 8012608:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	7a9b      	ldrb	r3, [r3, #10]
 801260e:	757b      	strb	r3, [r7, #21]
 8012610:	e003      	b.n	801261a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012612:	23ff      	movs	r3, #255	; 0xff
 8012614:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012616:	2300      	movs	r3, #0
 8012618:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801261a:	7dba      	ldrb	r2, [r7, #22]
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	9302      	str	r3, [sp, #8]
 8012620:	2306      	movs	r3, #6
 8012622:	9301      	str	r3, [sp, #4]
 8012624:	7d7b      	ldrb	r3, [r7, #21]
 8012626:	9300      	str	r3, [sp, #0]
 8012628:	4613      	mov	r3, r2
 801262a:	683a      	ldr	r2, [r7, #0]
 801262c:	6879      	ldr	r1, [r7, #4]
 801262e:	68b8      	ldr	r0, [r7, #8]
 8012630:	f004 f96e 	bl	8016910 <ip4_output_if>
 8012634:	4603      	mov	r3, r0
 8012636:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012638:	68b8      	ldr	r0, [r7, #8]
 801263a:	f7f9 fe71 	bl	800c320 <pbuf_free>
  return err;
 801263e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012642:	4618      	mov	r0, r3
 8012644:	3718      	adds	r7, #24
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	0801b274 	.word	0x0801b274
 8012650:	0801b9cc 	.word	0x0801b9cc
 8012654:	0801b2c8 	.word	0x0801b2c8

08012658 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012658:	b590      	push	{r4, r7, lr}
 801265a:	b08b      	sub	sp, #44	; 0x2c
 801265c:	af04      	add	r7, sp, #16
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	607a      	str	r2, [r7, #4]
 8012664:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d106      	bne.n	801267a <tcp_rst+0x22>
 801266c:	4b1f      	ldr	r3, [pc, #124]	; (80126ec <tcp_rst+0x94>)
 801266e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012672:	491f      	ldr	r1, [pc, #124]	; (80126f0 <tcp_rst+0x98>)
 8012674:	481f      	ldr	r0, [pc, #124]	; (80126f4 <tcp_rst+0x9c>)
 8012676:	f005 fbb7 	bl	8017de8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267c:	2b00      	cmp	r3, #0
 801267e:	d106      	bne.n	801268e <tcp_rst+0x36>
 8012680:	4b1a      	ldr	r3, [pc, #104]	; (80126ec <tcp_rst+0x94>)
 8012682:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012686:	491c      	ldr	r1, [pc, #112]	; (80126f8 <tcp_rst+0xa0>)
 8012688:	481a      	ldr	r0, [pc, #104]	; (80126f4 <tcp_rst+0x9c>)
 801268a:	f005 fbad 	bl	8017de8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801268e:	2300      	movs	r3, #0
 8012690:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012692:	f246 0308 	movw	r3, #24584	; 0x6008
 8012696:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012698:	7dfb      	ldrb	r3, [r7, #23]
 801269a:	b29c      	uxth	r4, r3
 801269c:	68b8      	ldr	r0, [r7, #8]
 801269e:	f7f8 fa6a 	bl	800ab76 <lwip_htonl>
 80126a2:	4602      	mov	r2, r0
 80126a4:	8abb      	ldrh	r3, [r7, #20]
 80126a6:	9303      	str	r3, [sp, #12]
 80126a8:	2314      	movs	r3, #20
 80126aa:	9302      	str	r3, [sp, #8]
 80126ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80126ae:	9301      	str	r3, [sp, #4]
 80126b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80126b2:	9300      	str	r3, [sp, #0]
 80126b4:	4613      	mov	r3, r2
 80126b6:	2200      	movs	r2, #0
 80126b8:	4621      	mov	r1, r4
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7ff fe90 	bl	80123e0 <tcp_output_alloc_header_common>
 80126c0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00c      	beq.n	80126e2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	2200      	movs	r2, #0
 80126cc:	6939      	ldr	r1, [r7, #16]
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f7ff ff38 	bl	8012544 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80126d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d6:	683a      	ldr	r2, [r7, #0]
 80126d8:	6939      	ldr	r1, [r7, #16]
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f7ff ff72 	bl	80125c4 <tcp_output_control_segment>
 80126e0:	e000      	b.n	80126e4 <tcp_rst+0x8c>
    return;
 80126e2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80126e4:	371c      	adds	r7, #28
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd90      	pop	{r4, r7, pc}
 80126ea:	bf00      	nop
 80126ec:	0801b274 	.word	0x0801b274
 80126f0:	0801b9f8 	.word	0x0801b9f8
 80126f4:	0801b2c8 	.word	0x0801b2c8
 80126f8:	0801ba14 	.word	0x0801ba14

080126fc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80126fc:	b590      	push	{r4, r7, lr}
 80126fe:	b087      	sub	sp, #28
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012704:	2300      	movs	r3, #0
 8012706:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012708:	2300      	movs	r3, #0
 801270a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d106      	bne.n	8012720 <tcp_send_empty_ack+0x24>
 8012712:	4b28      	ldr	r3, [pc, #160]	; (80127b4 <tcp_send_empty_ack+0xb8>)
 8012714:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012718:	4927      	ldr	r1, [pc, #156]	; (80127b8 <tcp_send_empty_ack+0xbc>)
 801271a:	4828      	ldr	r0, [pc, #160]	; (80127bc <tcp_send_empty_ack+0xc0>)
 801271c:	f005 fb64 	bl	8017de8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012720:	7dfb      	ldrb	r3, [r7, #23]
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	b2db      	uxtb	r3, r3
 8012726:	f003 0304 	and.w	r3, r3, #4
 801272a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801272c:	7d7b      	ldrb	r3, [r7, #21]
 801272e:	b29c      	uxth	r4, r3
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012734:	4618      	mov	r0, r3
 8012736:	f7f8 fa1e 	bl	800ab76 <lwip_htonl>
 801273a:	4603      	mov	r3, r0
 801273c:	2200      	movs	r2, #0
 801273e:	4621      	mov	r1, r4
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7ff fec1 	bl	80124c8 <tcp_output_alloc_header>
 8012746:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012748:	693b      	ldr	r3, [r7, #16]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d109      	bne.n	8012762 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	8b5b      	ldrh	r3, [r3, #26]
 8012752:	f043 0303 	orr.w	r3, r3, #3
 8012756:	b29a      	uxth	r2, r3
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801275c:	f06f 0301 	mvn.w	r3, #1
 8012760:	e023      	b.n	80127aa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012762:	7dbb      	ldrb	r3, [r7, #22]
 8012764:	7dfa      	ldrb	r2, [r7, #23]
 8012766:	6939      	ldr	r1, [r7, #16]
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7ff feeb 	bl	8012544 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801276e:	687a      	ldr	r2, [r7, #4]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	3304      	adds	r3, #4
 8012774:	6939      	ldr	r1, [r7, #16]
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f7ff ff24 	bl	80125c4 <tcp_output_control_segment>
 801277c:	4603      	mov	r3, r0
 801277e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d007      	beq.n	8012798 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	8b5b      	ldrh	r3, [r3, #26]
 801278c:	f043 0303 	orr.w	r3, r3, #3
 8012790:	b29a      	uxth	r2, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	835a      	strh	r2, [r3, #26]
 8012796:	e006      	b.n	80127a6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	8b5b      	ldrh	r3, [r3, #26]
 801279c:	f023 0303 	bic.w	r3, r3, #3
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80127a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	371c      	adds	r7, #28
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd90      	pop	{r4, r7, pc}
 80127b2:	bf00      	nop
 80127b4:	0801b274 	.word	0x0801b274
 80127b8:	0801ba30 	.word	0x0801ba30
 80127bc:	0801b2c8 	.word	0x0801b2c8

080127c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80127c0:	b590      	push	{r4, r7, lr}
 80127c2:	b087      	sub	sp, #28
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80127c8:	2300      	movs	r3, #0
 80127ca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d106      	bne.n	80127e0 <tcp_keepalive+0x20>
 80127d2:	4b18      	ldr	r3, [pc, #96]	; (8012834 <tcp_keepalive+0x74>)
 80127d4:	f640 0224 	movw	r2, #2084	; 0x824
 80127d8:	4917      	ldr	r1, [pc, #92]	; (8012838 <tcp_keepalive+0x78>)
 80127da:	4818      	ldr	r0, [pc, #96]	; (801283c <tcp_keepalive+0x7c>)
 80127dc:	f005 fb04 	bl	8017de8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80127e0:	7dfb      	ldrb	r3, [r7, #23]
 80127e2:	b29c      	uxth	r4, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127e8:	3b01      	subs	r3, #1
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7f8 f9c3 	bl	800ab76 <lwip_htonl>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2200      	movs	r2, #0
 80127f4:	4621      	mov	r1, r4
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f7ff fe66 	bl	80124c8 <tcp_output_alloc_header>
 80127fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d102      	bne.n	801280a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012804:	f04f 33ff 	mov.w	r3, #4294967295
 8012808:	e010      	b.n	801282c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801280a:	7dfb      	ldrb	r3, [r7, #23]
 801280c:	2200      	movs	r2, #0
 801280e:	6939      	ldr	r1, [r7, #16]
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f7ff fe97 	bl	8012544 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	3304      	adds	r3, #4
 801281c:	6939      	ldr	r1, [r7, #16]
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f7ff fed0 	bl	80125c4 <tcp_output_control_segment>
 8012824:	4603      	mov	r3, r0
 8012826:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012828:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801282c:	4618      	mov	r0, r3
 801282e:	371c      	adds	r7, #28
 8012830:	46bd      	mov	sp, r7
 8012832:	bd90      	pop	{r4, r7, pc}
 8012834:	0801b274 	.word	0x0801b274
 8012838:	0801ba50 	.word	0x0801ba50
 801283c:	0801b2c8 	.word	0x0801b2c8

08012840 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012840:	b590      	push	{r4, r7, lr}
 8012842:	b08b      	sub	sp, #44	; 0x2c
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012848:	2300      	movs	r3, #0
 801284a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d106      	bne.n	8012862 <tcp_zero_window_probe+0x22>
 8012854:	4b4c      	ldr	r3, [pc, #304]	; (8012988 <tcp_zero_window_probe+0x148>)
 8012856:	f640 024f 	movw	r2, #2127	; 0x84f
 801285a:	494c      	ldr	r1, [pc, #304]	; (801298c <tcp_zero_window_probe+0x14c>)
 801285c:	484c      	ldr	r0, [pc, #304]	; (8012990 <tcp_zero_window_probe+0x150>)
 801285e:	f005 fac3 	bl	8017de8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012866:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012868:	6a3b      	ldr	r3, [r7, #32]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d101      	bne.n	8012872 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801286e:	2300      	movs	r3, #0
 8012870:	e086      	b.n	8012980 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012878:	2bff      	cmp	r3, #255	; 0xff
 801287a:	d007      	beq.n	801288c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012882:	3301      	adds	r3, #1
 8012884:	b2da      	uxtb	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	899b      	ldrh	r3, [r3, #12]
 8012892:	b29b      	uxth	r3, r3
 8012894:	4618      	mov	r0, r3
 8012896:	f7f8 f959 	bl	800ab4c <lwip_htons>
 801289a:	4603      	mov	r3, r0
 801289c:	b2db      	uxtb	r3, r3
 801289e:	f003 0301 	and.w	r3, r3, #1
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d005      	beq.n	80128b2 <tcp_zero_window_probe+0x72>
 80128a6:	6a3b      	ldr	r3, [r7, #32]
 80128a8:	891b      	ldrh	r3, [r3, #8]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d101      	bne.n	80128b2 <tcp_zero_window_probe+0x72>
 80128ae:	2301      	movs	r3, #1
 80128b0:	e000      	b.n	80128b4 <tcp_zero_window_probe+0x74>
 80128b2:	2300      	movs	r3, #0
 80128b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80128b6:	7ffb      	ldrb	r3, [r7, #31]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	bf0c      	ite	eq
 80128bc:	2301      	moveq	r3, #1
 80128be:	2300      	movne	r3, #0
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80128c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128c8:	b299      	uxth	r1, r3
 80128ca:	6a3b      	ldr	r3, [r7, #32]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	8bba      	ldrh	r2, [r7, #28]
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f7ff fdf8 	bl	80124c8 <tcp_output_alloc_header>
 80128d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d102      	bne.n	80128e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80128e0:	f04f 33ff 	mov.w	r3, #4294967295
 80128e4:	e04c      	b.n	8012980 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80128e6:	69bb      	ldr	r3, [r7, #24]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80128ec:	7ffb      	ldrb	r3, [r7, #31]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d011      	beq.n	8012916 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	899b      	ldrh	r3, [r3, #12]
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	b21b      	sxth	r3, r3
 80128fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80128fe:	b21c      	sxth	r4, r3
 8012900:	2011      	movs	r0, #17
 8012902:	f7f8 f923 	bl	800ab4c <lwip_htons>
 8012906:	4603      	mov	r3, r0
 8012908:	b21b      	sxth	r3, r3
 801290a:	4323      	orrs	r3, r4
 801290c:	b21b      	sxth	r3, r3
 801290e:	b29a      	uxth	r2, r3
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	819a      	strh	r2, [r3, #12]
 8012914:	e010      	b.n	8012938 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	3314      	adds	r3, #20
 801291c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801291e:	6a3b      	ldr	r3, [r7, #32]
 8012920:	6858      	ldr	r0, [r3, #4]
 8012922:	6a3b      	ldr	r3, [r7, #32]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	891a      	ldrh	r2, [r3, #8]
 8012928:	6a3b      	ldr	r3, [r7, #32]
 801292a:	891b      	ldrh	r3, [r3, #8]
 801292c:	1ad3      	subs	r3, r2, r3
 801292e:	b29b      	uxth	r3, r3
 8012930:	2201      	movs	r2, #1
 8012932:	6939      	ldr	r1, [r7, #16]
 8012934:	f7f9 fefa 	bl	800c72c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012938:	6a3b      	ldr	r3, [r7, #32]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	4618      	mov	r0, r3
 8012940:	f7f8 f919 	bl	800ab76 <lwip_htonl>
 8012944:	4603      	mov	r3, r0
 8012946:	3301      	adds	r3, #1
 8012948:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	2b00      	cmp	r3, #0
 8012954:	da02      	bge.n	801295c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	68fa      	ldr	r2, [r7, #12]
 801295a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801295c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012960:	2200      	movs	r2, #0
 8012962:	69b9      	ldr	r1, [r7, #24]
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f7ff fded 	bl	8012544 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	3304      	adds	r3, #4
 8012970:	69b9      	ldr	r1, [r7, #24]
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f7ff fe26 	bl	80125c4 <tcp_output_control_segment>
 8012978:	4603      	mov	r3, r0
 801297a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801297c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012980:	4618      	mov	r0, r3
 8012982:	372c      	adds	r7, #44	; 0x2c
 8012984:	46bd      	mov	sp, r7
 8012986:	bd90      	pop	{r4, r7, pc}
 8012988:	0801b274 	.word	0x0801b274
 801298c:	0801ba6c 	.word	0x0801ba6c
 8012990:	0801b2c8 	.word	0x0801b2c8

08012994 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801299c:	f7f9 ffb4 	bl	800c908 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80129a0:	4b0a      	ldr	r3, [pc, #40]	; (80129cc <tcpip_tcp_timer+0x38>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d103      	bne.n	80129b0 <tcpip_tcp_timer+0x1c>
 80129a8:	4b09      	ldr	r3, [pc, #36]	; (80129d0 <tcpip_tcp_timer+0x3c>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d005      	beq.n	80129bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80129b0:	2200      	movs	r2, #0
 80129b2:	4908      	ldr	r1, [pc, #32]	; (80129d4 <tcpip_tcp_timer+0x40>)
 80129b4:	20fa      	movs	r0, #250	; 0xfa
 80129b6:	f000 f8f1 	bl	8012b9c <sys_timeout>
 80129ba:	e002      	b.n	80129c2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80129bc:	4b06      	ldr	r3, [pc, #24]	; (80129d8 <tcpip_tcp_timer+0x44>)
 80129be:	2200      	movs	r2, #0
 80129c0:	601a      	str	r2, [r3, #0]
  }
}
 80129c2:	bf00      	nop
 80129c4:	3708      	adds	r7, #8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	2000f514 	.word	0x2000f514
 80129d0:	2000f524 	.word	0x2000f524
 80129d4:	08012995 	.word	0x08012995
 80129d8:	20008acc 	.word	0x20008acc

080129dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80129e0:	4b0a      	ldr	r3, [pc, #40]	; (8012a0c <tcp_timer_needed+0x30>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d10f      	bne.n	8012a08 <tcp_timer_needed+0x2c>
 80129e8:	4b09      	ldr	r3, [pc, #36]	; (8012a10 <tcp_timer_needed+0x34>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d103      	bne.n	80129f8 <tcp_timer_needed+0x1c>
 80129f0:	4b08      	ldr	r3, [pc, #32]	; (8012a14 <tcp_timer_needed+0x38>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d007      	beq.n	8012a08 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80129f8:	4b04      	ldr	r3, [pc, #16]	; (8012a0c <tcp_timer_needed+0x30>)
 80129fa:	2201      	movs	r2, #1
 80129fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80129fe:	2200      	movs	r2, #0
 8012a00:	4905      	ldr	r1, [pc, #20]	; (8012a18 <tcp_timer_needed+0x3c>)
 8012a02:	20fa      	movs	r0, #250	; 0xfa
 8012a04:	f000 f8ca 	bl	8012b9c <sys_timeout>
  }
}
 8012a08:	bf00      	nop
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	20008acc 	.word	0x20008acc
 8012a10:	2000f514 	.word	0x2000f514
 8012a14:	2000f524 	.word	0x2000f524
 8012a18:	08012995 	.word	0x08012995

08012a1c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b086      	sub	sp, #24
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	60b9      	str	r1, [r7, #8]
 8012a26:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012a28:	200a      	movs	r0, #10
 8012a2a:	f7f8 fd7b 	bl	800b524 <memp_malloc>
 8012a2e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d109      	bne.n	8012a4a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d151      	bne.n	8012ae0 <sys_timeout_abs+0xc4>
 8012a3c:	4b2a      	ldr	r3, [pc, #168]	; (8012ae8 <sys_timeout_abs+0xcc>)
 8012a3e:	22be      	movs	r2, #190	; 0xbe
 8012a40:	492a      	ldr	r1, [pc, #168]	; (8012aec <sys_timeout_abs+0xd0>)
 8012a42:	482b      	ldr	r0, [pc, #172]	; (8012af0 <sys_timeout_abs+0xd4>)
 8012a44:	f005 f9d0 	bl	8017de8 <iprintf>
    return;
 8012a48:	e04a      	b.n	8012ae0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	68ba      	ldr	r2, [r7, #8]
 8012a54:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	68fa      	ldr	r2, [r7, #12]
 8012a60:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012a62:	4b24      	ldr	r3, [pc, #144]	; (8012af4 <sys_timeout_abs+0xd8>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d103      	bne.n	8012a72 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012a6a:	4a22      	ldr	r2, [pc, #136]	; (8012af4 <sys_timeout_abs+0xd8>)
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	6013      	str	r3, [r2, #0]
    return;
 8012a70:	e037      	b.n	8012ae2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	685a      	ldr	r2, [r3, #4]
 8012a76:	4b1f      	ldr	r3, [pc, #124]	; (8012af4 <sys_timeout_abs+0xd8>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	1ad3      	subs	r3, r2, r3
 8012a7e:	0fdb      	lsrs	r3, r3, #31
 8012a80:	f003 0301 	and.w	r3, r3, #1
 8012a84:	b2db      	uxtb	r3, r3
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d007      	beq.n	8012a9a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012a8a:	4b1a      	ldr	r3, [pc, #104]	; (8012af4 <sys_timeout_abs+0xd8>)
 8012a8c:	681a      	ldr	r2, [r3, #0]
 8012a8e:	693b      	ldr	r3, [r7, #16]
 8012a90:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012a92:	4a18      	ldr	r2, [pc, #96]	; (8012af4 <sys_timeout_abs+0xd8>)
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	6013      	str	r3, [r2, #0]
 8012a98:	e023      	b.n	8012ae2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012a9a:	4b16      	ldr	r3, [pc, #88]	; (8012af4 <sys_timeout_abs+0xd8>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	617b      	str	r3, [r7, #20]
 8012aa0:	e01a      	b.n	8012ad8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d00b      	beq.n	8012ac2 <sys_timeout_abs+0xa6>
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	685a      	ldr	r2, [r3, #4]
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	1ad3      	subs	r3, r2, r3
 8012ab6:	0fdb      	lsrs	r3, r3, #31
 8012ab8:	f003 0301 	and.w	r3, r3, #1
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d007      	beq.n	8012ad2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	693a      	ldr	r2, [r7, #16]
 8012ace:	601a      	str	r2, [r3, #0]
        break;
 8012ad0:	e007      	b.n	8012ae2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	617b      	str	r3, [r7, #20]
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d1e1      	bne.n	8012aa2 <sys_timeout_abs+0x86>
 8012ade:	e000      	b.n	8012ae2 <sys_timeout_abs+0xc6>
    return;
 8012ae0:	bf00      	nop
      }
    }
  }
}
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	0801ba90 	.word	0x0801ba90
 8012aec:	0801bac4 	.word	0x0801bac4
 8012af0:	0801bb04 	.word	0x0801bb04
 8012af4:	20008ac4 	.word	0x20008ac4

08012af8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b086      	sub	sp, #24
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	4798      	blx	r3

  now = sys_now();
 8012b0a:	f7f1 fe9d 	bl	8004848 <sys_now>
 8012b0e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	4b0f      	ldr	r3, [pc, #60]	; (8012b54 <lwip_cyclic_timer+0x5c>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4413      	add	r3, r2
 8012b1a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012b1c:	68fa      	ldr	r2, [r7, #12]
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	1ad3      	subs	r3, r2, r3
 8012b22:	0fdb      	lsrs	r3, r3, #31
 8012b24:	f003 0301 	and.w	r3, r3, #1
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d009      	beq.n	8012b42 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	4413      	add	r3, r2
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	4907      	ldr	r1, [pc, #28]	; (8012b58 <lwip_cyclic_timer+0x60>)
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7ff ff6e 	bl	8012a1c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012b40:	e004      	b.n	8012b4c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	4904      	ldr	r1, [pc, #16]	; (8012b58 <lwip_cyclic_timer+0x60>)
 8012b46:	68f8      	ldr	r0, [r7, #12]
 8012b48:	f7ff ff68 	bl	8012a1c <sys_timeout_abs>
}
 8012b4c:	bf00      	nop
 8012b4e:	3718      	adds	r7, #24
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	20008ac8 	.word	0x20008ac8
 8012b58:	08012af9 	.word	0x08012af9

08012b5c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012b62:	2301      	movs	r3, #1
 8012b64:	607b      	str	r3, [r7, #4]
 8012b66:	e00e      	b.n	8012b86 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012b68:	4a0a      	ldr	r2, [pc, #40]	; (8012b94 <sys_timeouts_init+0x38>)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	00db      	lsls	r3, r3, #3
 8012b74:	4a07      	ldr	r2, [pc, #28]	; (8012b94 <sys_timeouts_init+0x38>)
 8012b76:	4413      	add	r3, r2
 8012b78:	461a      	mov	r2, r3
 8012b7a:	4907      	ldr	r1, [pc, #28]	; (8012b98 <sys_timeouts_init+0x3c>)
 8012b7c:	f000 f80e 	bl	8012b9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	3301      	adds	r3, #1
 8012b84:	607b      	str	r3, [r7, #4]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2b04      	cmp	r3, #4
 8012b8a:	d9ed      	bls.n	8012b68 <sys_timeouts_init+0xc>
  }
}
 8012b8c:	bf00      	nop
 8012b8e:	3708      	adds	r7, #8
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}
 8012b94:	08026b8c 	.word	0x08026b8c
 8012b98:	08012af9 	.word	0x08012af9

08012b9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b086      	sub	sp, #24
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012bae:	d306      	bcc.n	8012bbe <sys_timeout+0x22>
 8012bb0:	4b0a      	ldr	r3, [pc, #40]	; (8012bdc <sys_timeout+0x40>)
 8012bb2:	f240 1229 	movw	r2, #297	; 0x129
 8012bb6:	490a      	ldr	r1, [pc, #40]	; (8012be0 <sys_timeout+0x44>)
 8012bb8:	480a      	ldr	r0, [pc, #40]	; (8012be4 <sys_timeout+0x48>)
 8012bba:	f005 f915 	bl	8017de8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012bbe:	f7f1 fe43 	bl	8004848 <sys_now>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	4413      	add	r3, r2
 8012bc8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	68b9      	ldr	r1, [r7, #8]
 8012bce:	6978      	ldr	r0, [r7, #20]
 8012bd0:	f7ff ff24 	bl	8012a1c <sys_timeout_abs>
#endif
}
 8012bd4:	bf00      	nop
 8012bd6:	3718      	adds	r7, #24
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	0801ba90 	.word	0x0801ba90
 8012be0:	0801bb2c 	.word	0x0801bb2c
 8012be4:	0801bb04 	.word	0x0801bb04

08012be8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b084      	sub	sp, #16
 8012bec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012bee:	f7f1 fe2b 	bl	8004848 <sys_now>
 8012bf2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012bf4:	4b17      	ldr	r3, [pc, #92]	; (8012c54 <sys_check_timeouts+0x6c>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d022      	beq.n	8012c46 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	0fdb      	lsrs	r3, r3, #31
 8012c0a:	f003 0301 	and.w	r3, r3, #1
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d11a      	bne.n	8012c4a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	4a0e      	ldr	r2, [pc, #56]	; (8012c54 <sys_check_timeouts+0x6c>)
 8012c1a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	689b      	ldr	r3, [r3, #8]
 8012c20:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	4a0a      	ldr	r2, [pc, #40]	; (8012c58 <sys_check_timeouts+0x70>)
 8012c2e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012c30:	68b9      	ldr	r1, [r7, #8]
 8012c32:	200a      	movs	r0, #10
 8012c34:	f7f8 fcc8 	bl	800b5c8 <memp_free>
    if (handler != NULL) {
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d0da      	beq.n	8012bf4 <sys_check_timeouts+0xc>
      handler(arg);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6838      	ldr	r0, [r7, #0]
 8012c42:	4798      	blx	r3
  do {
 8012c44:	e7d6      	b.n	8012bf4 <sys_check_timeouts+0xc>
      return;
 8012c46:	bf00      	nop
 8012c48:	e000      	b.n	8012c4c <sys_check_timeouts+0x64>
      return;
 8012c4a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012c4c:	3710      	adds	r7, #16
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	20008ac4 	.word	0x20008ac4
 8012c58:	20008ac8 	.word	0x20008ac8

08012c5c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012c62:	4b16      	ldr	r3, [pc, #88]	; (8012cbc <sys_timeouts_sleeptime+0x60>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d102      	bne.n	8012c70 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c6e:	e020      	b.n	8012cb2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012c70:	f7f1 fdea 	bl	8004848 <sys_now>
 8012c74:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012c76:	4b11      	ldr	r3, [pc, #68]	; (8012cbc <sys_timeouts_sleeptime+0x60>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	685a      	ldr	r2, [r3, #4]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	1ad3      	subs	r3, r2, r3
 8012c80:	0fdb      	lsrs	r3, r3, #31
 8012c82:	f003 0301 	and.w	r3, r3, #1
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d001      	beq.n	8012c90 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	e010      	b.n	8012cb2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012c90:	4b0a      	ldr	r3, [pc, #40]	; (8012cbc <sys_timeouts_sleeptime+0x60>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	685a      	ldr	r2, [r3, #4]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	1ad3      	subs	r3, r2, r3
 8012c9a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	da06      	bge.n	8012cb0 <sys_timeouts_sleeptime+0x54>
 8012ca2:	4b07      	ldr	r3, [pc, #28]	; (8012cc0 <sys_timeouts_sleeptime+0x64>)
 8012ca4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012ca8:	4906      	ldr	r1, [pc, #24]	; (8012cc4 <sys_timeouts_sleeptime+0x68>)
 8012caa:	4807      	ldr	r0, [pc, #28]	; (8012cc8 <sys_timeouts_sleeptime+0x6c>)
 8012cac:	f005 f89c 	bl	8017de8 <iprintf>
    return ret;
 8012cb0:	683b      	ldr	r3, [r7, #0]
  }
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3708      	adds	r7, #8
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	20008ac4 	.word	0x20008ac4
 8012cc0:	0801ba90 	.word	0x0801ba90
 8012cc4:	0801bb64 	.word	0x0801bb64
 8012cc8:	0801bb04 	.word	0x0801bb04

08012ccc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012cd0:	f005 f8a2 	bl	8017e18 <rand>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	4b01      	ldr	r3, [pc, #4]	; (8012cec <udp_init+0x20>)
 8012ce6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012ce8:	bf00      	nop
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	20000018 	.word	0x20000018

08012cf0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012cfa:	4b17      	ldr	r3, [pc, #92]	; (8012d58 <udp_new_port+0x68>)
 8012cfc:	881b      	ldrh	r3, [r3, #0]
 8012cfe:	1c5a      	adds	r2, r3, #1
 8012d00:	b291      	uxth	r1, r2
 8012d02:	4a15      	ldr	r2, [pc, #84]	; (8012d58 <udp_new_port+0x68>)
 8012d04:	8011      	strh	r1, [r2, #0]
 8012d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	d103      	bne.n	8012d16 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012d0e:	4b12      	ldr	r3, [pc, #72]	; (8012d58 <udp_new_port+0x68>)
 8012d10:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012d14:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d16:	4b11      	ldr	r3, [pc, #68]	; (8012d5c <udp_new_port+0x6c>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	603b      	str	r3, [r7, #0]
 8012d1c:	e011      	b.n	8012d42 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	8a5a      	ldrh	r2, [r3, #18]
 8012d22:	4b0d      	ldr	r3, [pc, #52]	; (8012d58 <udp_new_port+0x68>)
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d108      	bne.n	8012d3c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012d2a:	88fb      	ldrh	r3, [r7, #6]
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	80fb      	strh	r3, [r7, #6]
 8012d30:	88fb      	ldrh	r3, [r7, #6]
 8012d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012d36:	d3e0      	bcc.n	8012cfa <udp_new_port+0xa>
        return 0;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	e007      	b.n	8012d4c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	68db      	ldr	r3, [r3, #12]
 8012d40:	603b      	str	r3, [r7, #0]
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d1ea      	bne.n	8012d1e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012d48:	4b03      	ldr	r3, [pc, #12]	; (8012d58 <udp_new_port+0x68>)
 8012d4a:	881b      	ldrh	r3, [r3, #0]
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	370c      	adds	r7, #12
 8012d50:	46bd      	mov	sp, r7
 8012d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d56:	4770      	bx	lr
 8012d58:	20000018 	.word	0x20000018
 8012d5c:	2000f52c 	.word	0x2000f52c

08012d60 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d105      	bne.n	8012d80 <udp_input_local_match+0x20>
 8012d74:	4b27      	ldr	r3, [pc, #156]	; (8012e14 <udp_input_local_match+0xb4>)
 8012d76:	2287      	movs	r2, #135	; 0x87
 8012d78:	4927      	ldr	r1, [pc, #156]	; (8012e18 <udp_input_local_match+0xb8>)
 8012d7a:	4828      	ldr	r0, [pc, #160]	; (8012e1c <udp_input_local_match+0xbc>)
 8012d7c:	f005 f834 	bl	8017de8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d105      	bne.n	8012d92 <udp_input_local_match+0x32>
 8012d86:	4b23      	ldr	r3, [pc, #140]	; (8012e14 <udp_input_local_match+0xb4>)
 8012d88:	2288      	movs	r2, #136	; 0x88
 8012d8a:	4925      	ldr	r1, [pc, #148]	; (8012e20 <udp_input_local_match+0xc0>)
 8012d8c:	4823      	ldr	r0, [pc, #140]	; (8012e1c <udp_input_local_match+0xbc>)
 8012d8e:	f005 f82b 	bl	8017de8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	7a1b      	ldrb	r3, [r3, #8]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d00b      	beq.n	8012db2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	7a1a      	ldrb	r2, [r3, #8]
 8012d9e:	4b21      	ldr	r3, [pc, #132]	; (8012e24 <udp_input_local_match+0xc4>)
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012da6:	3301      	adds	r3, #1
 8012da8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d001      	beq.n	8012db2 <udp_input_local_match+0x52>
    return 0;
 8012dae:	2300      	movs	r3, #0
 8012db0:	e02b      	b.n	8012e0a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012db2:	79fb      	ldrb	r3, [r7, #7]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d018      	beq.n	8012dea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d013      	beq.n	8012de6 <udp_input_local_match+0x86>
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d00f      	beq.n	8012de6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012dc6:	4b17      	ldr	r3, [pc, #92]	; (8012e24 <udp_input_local_match+0xc4>)
 8012dc8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dce:	d00a      	beq.n	8012de6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	4b13      	ldr	r3, [pc, #76]	; (8012e24 <udp_input_local_match+0xc4>)
 8012dd6:	695b      	ldr	r3, [r3, #20]
 8012dd8:	405a      	eors	r2, r3
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	3308      	adds	r3, #8
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d110      	bne.n	8012e08 <udp_input_local_match+0xa8>
          return 1;
 8012de6:	2301      	movs	r3, #1
 8012de8:	e00f      	b.n	8012e0a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d009      	beq.n	8012e04 <udp_input_local_match+0xa4>
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d005      	beq.n	8012e04 <udp_input_local_match+0xa4>
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	681a      	ldr	r2, [r3, #0]
 8012dfc:	4b09      	ldr	r3, [pc, #36]	; (8012e24 <udp_input_local_match+0xc4>)
 8012dfe:	695b      	ldr	r3, [r3, #20]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d101      	bne.n	8012e08 <udp_input_local_match+0xa8>
        return 1;
 8012e04:	2301      	movs	r3, #1
 8012e06:	e000      	b.n	8012e0a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012e08:	2300      	movs	r3, #0
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3710      	adds	r7, #16
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop
 8012e14:	0801bb78 	.word	0x0801bb78
 8012e18:	0801bba8 	.word	0x0801bba8
 8012e1c:	0801bbcc 	.word	0x0801bbcc
 8012e20:	0801bbf4 	.word	0x0801bbf4
 8012e24:	2000bde0 	.word	0x2000bde0

08012e28 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012e28:	b590      	push	{r4, r7, lr}
 8012e2a:	b08d      	sub	sp, #52	; 0x34
 8012e2c:	af02      	add	r7, sp, #8
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012e32:	2300      	movs	r3, #0
 8012e34:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d105      	bne.n	8012e48 <udp_input+0x20>
 8012e3c:	4b7c      	ldr	r3, [pc, #496]	; (8013030 <udp_input+0x208>)
 8012e3e:	22cf      	movs	r2, #207	; 0xcf
 8012e40:	497c      	ldr	r1, [pc, #496]	; (8013034 <udp_input+0x20c>)
 8012e42:	487d      	ldr	r0, [pc, #500]	; (8013038 <udp_input+0x210>)
 8012e44:	f004 ffd0 	bl	8017de8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d105      	bne.n	8012e5a <udp_input+0x32>
 8012e4e:	4b78      	ldr	r3, [pc, #480]	; (8013030 <udp_input+0x208>)
 8012e50:	22d0      	movs	r2, #208	; 0xd0
 8012e52:	497a      	ldr	r1, [pc, #488]	; (801303c <udp_input+0x214>)
 8012e54:	4878      	ldr	r0, [pc, #480]	; (8013038 <udp_input+0x210>)
 8012e56:	f004 ffc7 	bl	8017de8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	895b      	ldrh	r3, [r3, #10]
 8012e5e:	2b07      	cmp	r3, #7
 8012e60:	d803      	bhi.n	8012e6a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7f9 fa5c 	bl	800c320 <pbuf_free>
    goto end;
 8012e68:	e0de      	b.n	8013028 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	685b      	ldr	r3, [r3, #4]
 8012e6e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012e70:	4b73      	ldr	r3, [pc, #460]	; (8013040 <udp_input+0x218>)
 8012e72:	695a      	ldr	r2, [r3, #20]
 8012e74:	4b72      	ldr	r3, [pc, #456]	; (8013040 <udp_input+0x218>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4619      	mov	r1, r3
 8012e7a:	4610      	mov	r0, r2
 8012e7c:	f003 fe20 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 8012e80:	4603      	mov	r3, r0
 8012e82:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	881b      	ldrh	r3, [r3, #0]
 8012e88:	b29b      	uxth	r3, r3
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7f7 fe5e 	bl	800ab4c <lwip_htons>
 8012e90:	4603      	mov	r3, r0
 8012e92:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	885b      	ldrh	r3, [r3, #2]
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7f7 fe56 	bl	800ab4c <lwip_htons>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012eac:	2300      	movs	r3, #0
 8012eae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eb0:	4b64      	ldr	r3, [pc, #400]	; (8013044 <udp_input+0x21c>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8012eb6:	e054      	b.n	8012f62 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eba:	8a5b      	ldrh	r3, [r3, #18]
 8012ebc:	89fa      	ldrh	r2, [r7, #14]
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d14a      	bne.n	8012f58 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012ec2:	7cfb      	ldrb	r3, [r7, #19]
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	6839      	ldr	r1, [r7, #0]
 8012ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012eca:	f7ff ff49 	bl	8012d60 <udp_input_local_match>
 8012ece:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d041      	beq.n	8012f58 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed6:	7c1b      	ldrb	r3, [r3, #16]
 8012ed8:	f003 0304 	and.w	r3, r3, #4
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d11d      	bne.n	8012f1c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d102      	bne.n	8012eec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee8:	61fb      	str	r3, [r7, #28]
 8012eea:	e017      	b.n	8012f1c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012eec:	7cfb      	ldrb	r3, [r7, #19]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d014      	beq.n	8012f1c <udp_input+0xf4>
 8012ef2:	4b53      	ldr	r3, [pc, #332]	; (8013040 <udp_input+0x218>)
 8012ef4:	695b      	ldr	r3, [r3, #20]
 8012ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012efa:	d10f      	bne.n	8012f1c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	3304      	adds	r3, #4
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d008      	beq.n	8012f1c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	3304      	adds	r3, #4
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d101      	bne.n	8012f1c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1e:	8a9b      	ldrh	r3, [r3, #20]
 8012f20:	8a3a      	ldrh	r2, [r7, #16]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d118      	bne.n	8012f58 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f28:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d005      	beq.n	8012f3a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f30:	685a      	ldr	r2, [r3, #4]
 8012f32:	4b43      	ldr	r3, [pc, #268]	; (8013040 <udp_input+0x218>)
 8012f34:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d10e      	bne.n	8012f58 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012f3a:	6a3b      	ldr	r3, [r7, #32]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d014      	beq.n	8012f6a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f42:	68da      	ldr	r2, [r3, #12]
 8012f44:	6a3b      	ldr	r3, [r7, #32]
 8012f46:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012f48:	4b3e      	ldr	r3, [pc, #248]	; (8013044 <udp_input+0x21c>)
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f4e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012f50:	4a3c      	ldr	r2, [pc, #240]	; (8013044 <udp_input+0x21c>)
 8012f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f54:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012f56:	e008      	b.n	8012f6a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	68db      	ldr	r3, [r3, #12]
 8012f60:	627b      	str	r3, [r7, #36]	; 0x24
 8012f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d1a7      	bne.n	8012eb8 <udp_input+0x90>
 8012f68:	e000      	b.n	8012f6c <udp_input+0x144>
        break;
 8012f6a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d101      	bne.n	8012f76 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <udp_input+0x15a>
    for_us = 1;
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	76fb      	strb	r3, [r7, #27]
 8012f80:	e00a      	b.n	8012f98 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	3304      	adds	r3, #4
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	4b2d      	ldr	r3, [pc, #180]	; (8013040 <udp_input+0x218>)
 8012f8a:	695b      	ldr	r3, [r3, #20]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	bf0c      	ite	eq
 8012f90:	2301      	moveq	r3, #1
 8012f92:	2300      	movne	r3, #0
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012f98:	7efb      	ldrb	r3, [r7, #27]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d041      	beq.n	8013022 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012f9e:	2108      	movs	r1, #8
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f7f9 f937 	bl	800c214 <pbuf_remove_header>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00a      	beq.n	8012fc2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012fac:	4b20      	ldr	r3, [pc, #128]	; (8013030 <udp_input+0x208>)
 8012fae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012fb2:	4925      	ldr	r1, [pc, #148]	; (8013048 <udp_input+0x220>)
 8012fb4:	4820      	ldr	r0, [pc, #128]	; (8013038 <udp_input+0x210>)
 8012fb6:	f004 ff17 	bl	8017de8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f7f9 f9b0 	bl	800c320 <pbuf_free>
      goto end;
 8012fc0:	e032      	b.n	8013028 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d012      	beq.n	8012fee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fca:	699b      	ldr	r3, [r3, #24]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d00a      	beq.n	8012fe6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd2:	699c      	ldr	r4, [r3, #24]
 8012fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd6:	69d8      	ldr	r0, [r3, #28]
 8012fd8:	8a3b      	ldrh	r3, [r7, #16]
 8012fda:	9300      	str	r3, [sp, #0]
 8012fdc:	4b1b      	ldr	r3, [pc, #108]	; (801304c <udp_input+0x224>)
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fe2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012fe4:	e021      	b.n	801302a <udp_input+0x202>
        pbuf_free(p);
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7f9 f99a 	bl	800c320 <pbuf_free>
        goto end;
 8012fec:	e01c      	b.n	8013028 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012fee:	7cfb      	ldrb	r3, [r7, #19]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d112      	bne.n	801301a <udp_input+0x1f2>
 8012ff4:	4b12      	ldr	r3, [pc, #72]	; (8013040 <udp_input+0x218>)
 8012ff6:	695b      	ldr	r3, [r3, #20]
 8012ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ffc:	2be0      	cmp	r3, #224	; 0xe0
 8012ffe:	d00c      	beq.n	801301a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013000:	4b0f      	ldr	r3, [pc, #60]	; (8013040 <udp_input+0x218>)
 8013002:	899b      	ldrh	r3, [r3, #12]
 8013004:	3308      	adds	r3, #8
 8013006:	b29b      	uxth	r3, r3
 8013008:	b21b      	sxth	r3, r3
 801300a:	4619      	mov	r1, r3
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7f9 f974 	bl	800c2fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013012:	2103      	movs	r1, #3
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f003 fa17 	bl	8016448 <icmp_dest_unreach>
      pbuf_free(p);
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f7f9 f980 	bl	800c320 <pbuf_free>
  return;
 8013020:	e003      	b.n	801302a <udp_input+0x202>
    pbuf_free(p);
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7f9 f97c 	bl	800c320 <pbuf_free>
  return;
 8013028:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801302a:	372c      	adds	r7, #44	; 0x2c
 801302c:	46bd      	mov	sp, r7
 801302e:	bd90      	pop	{r4, r7, pc}
 8013030:	0801bb78 	.word	0x0801bb78
 8013034:	0801bc1c 	.word	0x0801bc1c
 8013038:	0801bbcc 	.word	0x0801bbcc
 801303c:	0801bc34 	.word	0x0801bc34
 8013040:	2000bde0 	.word	0x2000bde0
 8013044:	2000f52c 	.word	0x2000f52c
 8013048:	0801bc50 	.word	0x0801bc50
 801304c:	2000bdf0 	.word	0x2000bdf0

08013050 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b088      	sub	sp, #32
 8013054:	af02      	add	r7, sp, #8
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	607a      	str	r2, [r7, #4]
 801305c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d109      	bne.n	8013078 <udp_sendto_if+0x28>
 8013064:	4b2e      	ldr	r3, [pc, #184]	; (8013120 <udp_sendto_if+0xd0>)
 8013066:	f44f 7220 	mov.w	r2, #640	; 0x280
 801306a:	492e      	ldr	r1, [pc, #184]	; (8013124 <udp_sendto_if+0xd4>)
 801306c:	482e      	ldr	r0, [pc, #184]	; (8013128 <udp_sendto_if+0xd8>)
 801306e:	f004 febb 	bl	8017de8 <iprintf>
 8013072:	f06f 030f 	mvn.w	r3, #15
 8013076:	e04f      	b.n	8013118 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d109      	bne.n	8013092 <udp_sendto_if+0x42>
 801307e:	4b28      	ldr	r3, [pc, #160]	; (8013120 <udp_sendto_if+0xd0>)
 8013080:	f240 2281 	movw	r2, #641	; 0x281
 8013084:	4929      	ldr	r1, [pc, #164]	; (801312c <udp_sendto_if+0xdc>)
 8013086:	4828      	ldr	r0, [pc, #160]	; (8013128 <udp_sendto_if+0xd8>)
 8013088:	f004 feae 	bl	8017de8 <iprintf>
 801308c:	f06f 030f 	mvn.w	r3, #15
 8013090:	e042      	b.n	8013118 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d109      	bne.n	80130ac <udp_sendto_if+0x5c>
 8013098:	4b21      	ldr	r3, [pc, #132]	; (8013120 <udp_sendto_if+0xd0>)
 801309a:	f240 2282 	movw	r2, #642	; 0x282
 801309e:	4924      	ldr	r1, [pc, #144]	; (8013130 <udp_sendto_if+0xe0>)
 80130a0:	4821      	ldr	r0, [pc, #132]	; (8013128 <udp_sendto_if+0xd8>)
 80130a2:	f004 fea1 	bl	8017de8 <iprintf>
 80130a6:	f06f 030f 	mvn.w	r3, #15
 80130aa:	e035      	b.n	8013118 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80130ac:	6a3b      	ldr	r3, [r7, #32]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d109      	bne.n	80130c6 <udp_sendto_if+0x76>
 80130b2:	4b1b      	ldr	r3, [pc, #108]	; (8013120 <udp_sendto_if+0xd0>)
 80130b4:	f240 2283 	movw	r2, #643	; 0x283
 80130b8:	491e      	ldr	r1, [pc, #120]	; (8013134 <udp_sendto_if+0xe4>)
 80130ba:	481b      	ldr	r0, [pc, #108]	; (8013128 <udp_sendto_if+0xd8>)
 80130bc:	f004 fe94 	bl	8017de8 <iprintf>
 80130c0:	f06f 030f 	mvn.w	r3, #15
 80130c4:	e028      	b.n	8013118 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d009      	beq.n	80130e0 <udp_sendto_if+0x90>
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d005      	beq.n	80130e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80130dc:	2be0      	cmp	r3, #224	; 0xe0
 80130de:	d103      	bne.n	80130e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80130e0:	6a3b      	ldr	r3, [r7, #32]
 80130e2:	3304      	adds	r3, #4
 80130e4:	617b      	str	r3, [r7, #20]
 80130e6:	e00b      	b.n	8013100 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	6a3b      	ldr	r3, [r7, #32]
 80130ee:	3304      	adds	r3, #4
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d002      	beq.n	80130fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80130f6:	f06f 0303 	mvn.w	r3, #3
 80130fa:	e00d      	b.n	8013118 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013100:	887a      	ldrh	r2, [r7, #2]
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	9301      	str	r3, [sp, #4]
 8013106:	6a3b      	ldr	r3, [r7, #32]
 8013108:	9300      	str	r3, [sp, #0]
 801310a:	4613      	mov	r3, r2
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	68b9      	ldr	r1, [r7, #8]
 8013110:	68f8      	ldr	r0, [r7, #12]
 8013112:	f000 f811 	bl	8013138 <udp_sendto_if_src>
 8013116:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013118:	4618      	mov	r0, r3
 801311a:	3718      	adds	r7, #24
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	0801bb78 	.word	0x0801bb78
 8013124:	0801bcec 	.word	0x0801bcec
 8013128:	0801bbcc 	.word	0x0801bbcc
 801312c:	0801bd08 	.word	0x0801bd08
 8013130:	0801bd24 	.word	0x0801bd24
 8013134:	0801bd44 	.word	0x0801bd44

08013138 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b08c      	sub	sp, #48	; 0x30
 801313c:	af04      	add	r7, sp, #16
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	60b9      	str	r1, [r7, #8]
 8013142:	607a      	str	r2, [r7, #4]
 8013144:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d109      	bne.n	8013160 <udp_sendto_if_src+0x28>
 801314c:	4b65      	ldr	r3, [pc, #404]	; (80132e4 <udp_sendto_if_src+0x1ac>)
 801314e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013152:	4965      	ldr	r1, [pc, #404]	; (80132e8 <udp_sendto_if_src+0x1b0>)
 8013154:	4865      	ldr	r0, [pc, #404]	; (80132ec <udp_sendto_if_src+0x1b4>)
 8013156:	f004 fe47 	bl	8017de8 <iprintf>
 801315a:	f06f 030f 	mvn.w	r3, #15
 801315e:	e0bc      	b.n	80132da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d109      	bne.n	801317a <udp_sendto_if_src+0x42>
 8013166:	4b5f      	ldr	r3, [pc, #380]	; (80132e4 <udp_sendto_if_src+0x1ac>)
 8013168:	f240 22d2 	movw	r2, #722	; 0x2d2
 801316c:	4960      	ldr	r1, [pc, #384]	; (80132f0 <udp_sendto_if_src+0x1b8>)
 801316e:	485f      	ldr	r0, [pc, #380]	; (80132ec <udp_sendto_if_src+0x1b4>)
 8013170:	f004 fe3a 	bl	8017de8 <iprintf>
 8013174:	f06f 030f 	mvn.w	r3, #15
 8013178:	e0af      	b.n	80132da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d109      	bne.n	8013194 <udp_sendto_if_src+0x5c>
 8013180:	4b58      	ldr	r3, [pc, #352]	; (80132e4 <udp_sendto_if_src+0x1ac>)
 8013182:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013186:	495b      	ldr	r1, [pc, #364]	; (80132f4 <udp_sendto_if_src+0x1bc>)
 8013188:	4858      	ldr	r0, [pc, #352]	; (80132ec <udp_sendto_if_src+0x1b4>)
 801318a:	f004 fe2d 	bl	8017de8 <iprintf>
 801318e:	f06f 030f 	mvn.w	r3, #15
 8013192:	e0a2      	b.n	80132da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013196:	2b00      	cmp	r3, #0
 8013198:	d109      	bne.n	80131ae <udp_sendto_if_src+0x76>
 801319a:	4b52      	ldr	r3, [pc, #328]	; (80132e4 <udp_sendto_if_src+0x1ac>)
 801319c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80131a0:	4955      	ldr	r1, [pc, #340]	; (80132f8 <udp_sendto_if_src+0x1c0>)
 80131a2:	4852      	ldr	r0, [pc, #328]	; (80132ec <udp_sendto_if_src+0x1b4>)
 80131a4:	f004 fe20 	bl	8017de8 <iprintf>
 80131a8:	f06f 030f 	mvn.w	r3, #15
 80131ac:	e095      	b.n	80132da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80131ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d109      	bne.n	80131c8 <udp_sendto_if_src+0x90>
 80131b4:	4b4b      	ldr	r3, [pc, #300]	; (80132e4 <udp_sendto_if_src+0x1ac>)
 80131b6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80131ba:	4950      	ldr	r1, [pc, #320]	; (80132fc <udp_sendto_if_src+0x1c4>)
 80131bc:	484b      	ldr	r0, [pc, #300]	; (80132ec <udp_sendto_if_src+0x1b4>)
 80131be:	f004 fe13 	bl	8017de8 <iprintf>
 80131c2:	f06f 030f 	mvn.w	r3, #15
 80131c6:	e088      	b.n	80132da <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	8a5b      	ldrh	r3, [r3, #18]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d10f      	bne.n	80131f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80131d0:	68f9      	ldr	r1, [r7, #12]
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	8a5b      	ldrh	r3, [r3, #18]
 80131d6:	461a      	mov	r2, r3
 80131d8:	68f8      	ldr	r0, [r7, #12]
 80131da:	f000 f893 	bl	8013304 <udp_bind>
 80131de:	4603      	mov	r3, r0
 80131e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80131e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d002      	beq.n	80131f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80131ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80131ee:	e074      	b.n	80132da <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	891b      	ldrh	r3, [r3, #8]
 80131f4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d902      	bls.n	8013202 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80131fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013200:	e06b      	b.n	80132da <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013202:	2108      	movs	r1, #8
 8013204:	68b8      	ldr	r0, [r7, #8]
 8013206:	f7f8 fff5 	bl	800c1f4 <pbuf_add_header>
 801320a:	4603      	mov	r3, r0
 801320c:	2b00      	cmp	r3, #0
 801320e:	d015      	beq.n	801323c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013210:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013214:	2108      	movs	r1, #8
 8013216:	2022      	movs	r0, #34	; 0x22
 8013218:	f7f8 fda2 	bl	800bd60 <pbuf_alloc>
 801321c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d102      	bne.n	801322a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013224:	f04f 33ff 	mov.w	r3, #4294967295
 8013228:	e057      	b.n	80132da <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	891b      	ldrh	r3, [r3, #8]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d006      	beq.n	8013240 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013232:	68b9      	ldr	r1, [r7, #8]
 8013234:	69f8      	ldr	r0, [r7, #28]
 8013236:	f7f9 f997 	bl	800c568 <pbuf_chain>
 801323a:	e001      	b.n	8013240 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013240:	69fb      	ldr	r3, [r7, #28]
 8013242:	895b      	ldrh	r3, [r3, #10]
 8013244:	2b07      	cmp	r3, #7
 8013246:	d806      	bhi.n	8013256 <udp_sendto_if_src+0x11e>
 8013248:	4b26      	ldr	r3, [pc, #152]	; (80132e4 <udp_sendto_if_src+0x1ac>)
 801324a:	f240 320e 	movw	r2, #782	; 0x30e
 801324e:	492c      	ldr	r1, [pc, #176]	; (8013300 <udp_sendto_if_src+0x1c8>)
 8013250:	4826      	ldr	r0, [pc, #152]	; (80132ec <udp_sendto_if_src+0x1b4>)
 8013252:	f004 fdc9 	bl	8017de8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013256:	69fb      	ldr	r3, [r7, #28]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	8a5b      	ldrh	r3, [r3, #18]
 8013260:	4618      	mov	r0, r3
 8013262:	f7f7 fc73 	bl	800ab4c <lwip_htons>
 8013266:	4603      	mov	r3, r0
 8013268:	461a      	mov	r2, r3
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801326e:	887b      	ldrh	r3, [r7, #2]
 8013270:	4618      	mov	r0, r3
 8013272:	f7f7 fc6b 	bl	800ab4c <lwip_htons>
 8013276:	4603      	mov	r3, r0
 8013278:	461a      	mov	r2, r3
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	2200      	movs	r2, #0
 8013282:	719a      	strb	r2, [r3, #6]
 8013284:	2200      	movs	r2, #0
 8013286:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013288:	69fb      	ldr	r3, [r7, #28]
 801328a:	891b      	ldrh	r3, [r3, #8]
 801328c:	4618      	mov	r0, r3
 801328e:	f7f7 fc5d 	bl	800ab4c <lwip_htons>
 8013292:	4603      	mov	r3, r0
 8013294:	461a      	mov	r2, r3
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801329a:	2311      	movs	r3, #17
 801329c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	7adb      	ldrb	r3, [r3, #11]
 80132a2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	7a9b      	ldrb	r3, [r3, #10]
 80132a8:	7cb9      	ldrb	r1, [r7, #18]
 80132aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132ac:	9202      	str	r2, [sp, #8]
 80132ae:	7cfa      	ldrb	r2, [r7, #19]
 80132b0:	9201      	str	r2, [sp, #4]
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	460b      	mov	r3, r1
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80132ba:	69f8      	ldr	r0, [r7, #28]
 80132bc:	f003 fb52 	bl	8016964 <ip4_output_if_src>
 80132c0:	4603      	mov	r3, r0
 80132c2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80132c4:	69fa      	ldr	r2, [r7, #28]
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d004      	beq.n	80132d6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80132cc:	69f8      	ldr	r0, [r7, #28]
 80132ce:	f7f9 f827 	bl	800c320 <pbuf_free>
    q = NULL;
 80132d2:	2300      	movs	r3, #0
 80132d4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80132d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3720      	adds	r7, #32
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	0801bb78 	.word	0x0801bb78
 80132e8:	0801bd64 	.word	0x0801bd64
 80132ec:	0801bbcc 	.word	0x0801bbcc
 80132f0:	0801bd84 	.word	0x0801bd84
 80132f4:	0801bda4 	.word	0x0801bda4
 80132f8:	0801bdc8 	.word	0x0801bdc8
 80132fc:	0801bdec 	.word	0x0801bdec
 8013300:	0801be10 	.word	0x0801be10

08013304 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b086      	sub	sp, #24
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	4613      	mov	r3, r2
 8013310:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d101      	bne.n	801331c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013318:	4b39      	ldr	r3, [pc, #228]	; (8013400 <udp_bind+0xfc>)
 801331a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d109      	bne.n	8013336 <udp_bind+0x32>
 8013322:	4b38      	ldr	r3, [pc, #224]	; (8013404 <udp_bind+0x100>)
 8013324:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013328:	4937      	ldr	r1, [pc, #220]	; (8013408 <udp_bind+0x104>)
 801332a:	4838      	ldr	r0, [pc, #224]	; (801340c <udp_bind+0x108>)
 801332c:	f004 fd5c 	bl	8017de8 <iprintf>
 8013330:	f06f 030f 	mvn.w	r3, #15
 8013334:	e060      	b.n	80133f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013336:	2300      	movs	r3, #0
 8013338:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801333a:	4b35      	ldr	r3, [pc, #212]	; (8013410 <udp_bind+0x10c>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	617b      	str	r3, [r7, #20]
 8013340:	e009      	b.n	8013356 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	429a      	cmp	r2, r3
 8013348:	d102      	bne.n	8013350 <udp_bind+0x4c>
      rebind = 1;
 801334a:	2301      	movs	r3, #1
 801334c:	74fb      	strb	r3, [r7, #19]
      break;
 801334e:	e005      	b.n	801335c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	68db      	ldr	r3, [r3, #12]
 8013354:	617b      	str	r3, [r7, #20]
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d1f2      	bne.n	8013342 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801335c:	88fb      	ldrh	r3, [r7, #6]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d109      	bne.n	8013376 <udp_bind+0x72>
    port = udp_new_port();
 8013362:	f7ff fcc5 	bl	8012cf0 <udp_new_port>
 8013366:	4603      	mov	r3, r0
 8013368:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801336a:	88fb      	ldrh	r3, [r7, #6]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d12c      	bne.n	80133ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013370:	f06f 0307 	mvn.w	r3, #7
 8013374:	e040      	b.n	80133f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013376:	4b26      	ldr	r3, [pc, #152]	; (8013410 <udp_bind+0x10c>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	617b      	str	r3, [r7, #20]
 801337c:	e022      	b.n	80133c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801337e:	68fa      	ldr	r2, [r7, #12]
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	429a      	cmp	r2, r3
 8013384:	d01b      	beq.n	80133be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	8a5b      	ldrh	r3, [r3, #18]
 801338a:	88fa      	ldrh	r2, [r7, #6]
 801338c:	429a      	cmp	r2, r3
 801338e:	d116      	bne.n	80133be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	681a      	ldr	r2, [r3, #0]
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013398:	429a      	cmp	r2, r3
 801339a:	d00d      	beq.n	80133b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d00a      	beq.n	80133b8 <udp_bind+0xb4>
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d006      	beq.n	80133b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80133aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d003      	beq.n	80133b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d102      	bne.n	80133be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80133b8:	f06f 0307 	mvn.w	r3, #7
 80133bc:	e01c      	b.n	80133f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	68db      	ldr	r3, [r3, #12]
 80133c2:	617b      	str	r3, [r7, #20]
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d1d9      	bne.n	801337e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d002      	beq.n	80133d6 <udp_bind+0xd2>
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	e000      	b.n	80133d8 <udp_bind+0xd4>
 80133d6:	2300      	movs	r3, #0
 80133d8:	68fa      	ldr	r2, [r7, #12]
 80133da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	88fa      	ldrh	r2, [r7, #6]
 80133e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80133e2:	7cfb      	ldrb	r3, [r7, #19]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d106      	bne.n	80133f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80133e8:	4b09      	ldr	r3, [pc, #36]	; (8013410 <udp_bind+0x10c>)
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80133f0:	4a07      	ldr	r2, [pc, #28]	; (8013410 <udp_bind+0x10c>)
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80133f6:	2300      	movs	r3, #0
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3718      	adds	r7, #24
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}
 8013400:	08026bb4 	.word	0x08026bb4
 8013404:	0801bb78 	.word	0x0801bb78
 8013408:	0801be40 	.word	0x0801be40
 801340c:	0801bbcc 	.word	0x0801bbcc
 8013410:	2000f52c 	.word	0x2000f52c

08013414 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b086      	sub	sp, #24
 8013418:	af00      	add	r7, sp, #0
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	4613      	mov	r3, r2
 8013420:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d109      	bne.n	801343c <udp_connect+0x28>
 8013428:	4b2c      	ldr	r3, [pc, #176]	; (80134dc <udp_connect+0xc8>)
 801342a:	f240 4235 	movw	r2, #1077	; 0x435
 801342e:	492c      	ldr	r1, [pc, #176]	; (80134e0 <udp_connect+0xcc>)
 8013430:	482c      	ldr	r0, [pc, #176]	; (80134e4 <udp_connect+0xd0>)
 8013432:	f004 fcd9 	bl	8017de8 <iprintf>
 8013436:	f06f 030f 	mvn.w	r3, #15
 801343a:	e04b      	b.n	80134d4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d109      	bne.n	8013456 <udp_connect+0x42>
 8013442:	4b26      	ldr	r3, [pc, #152]	; (80134dc <udp_connect+0xc8>)
 8013444:	f240 4236 	movw	r2, #1078	; 0x436
 8013448:	4927      	ldr	r1, [pc, #156]	; (80134e8 <udp_connect+0xd4>)
 801344a:	4826      	ldr	r0, [pc, #152]	; (80134e4 <udp_connect+0xd0>)
 801344c:	f004 fccc 	bl	8017de8 <iprintf>
 8013450:	f06f 030f 	mvn.w	r3, #15
 8013454:	e03e      	b.n	80134d4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	8a5b      	ldrh	r3, [r3, #18]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d10f      	bne.n	801347e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801345e:	68f9      	ldr	r1, [r7, #12]
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	8a5b      	ldrh	r3, [r3, #18]
 8013464:	461a      	mov	r2, r3
 8013466:	68f8      	ldr	r0, [r7, #12]
 8013468:	f7ff ff4c 	bl	8013304 <udp_bind>
 801346c:	4603      	mov	r3, r0
 801346e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013470:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d002      	beq.n	801347e <udp_connect+0x6a>
      return err;
 8013478:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801347c:	e02a      	b.n	80134d4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <udp_connect+0x76>
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	e000      	b.n	801348c <udp_connect+0x78>
 801348a:	2300      	movs	r3, #0
 801348c:	68fa      	ldr	r2, [r7, #12]
 801348e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	88fa      	ldrh	r2, [r7, #6]
 8013494:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	7c1b      	ldrb	r3, [r3, #16]
 801349a:	f043 0304 	orr.w	r3, r3, #4
 801349e:	b2da      	uxtb	r2, r3
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80134a4:	4b11      	ldr	r3, [pc, #68]	; (80134ec <udp_connect+0xd8>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	617b      	str	r3, [r7, #20]
 80134aa:	e008      	b.n	80134be <udp_connect+0xaa>
    if (pcb == ipcb) {
 80134ac:	68fa      	ldr	r2, [r7, #12]
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d101      	bne.n	80134b8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80134b4:	2300      	movs	r3, #0
 80134b6:	e00d      	b.n	80134d4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	617b      	str	r3, [r7, #20]
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d1f3      	bne.n	80134ac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80134c4:	4b09      	ldr	r3, [pc, #36]	; (80134ec <udp_connect+0xd8>)
 80134c6:	681a      	ldr	r2, [r3, #0]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80134cc:	4a07      	ldr	r2, [pc, #28]	; (80134ec <udp_connect+0xd8>)
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80134d2:	2300      	movs	r3, #0
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3718      	adds	r7, #24
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	0801bb78 	.word	0x0801bb78
 80134e0:	0801be58 	.word	0x0801be58
 80134e4:	0801bbcc 	.word	0x0801bbcc
 80134e8:	0801be74 	.word	0x0801be74
 80134ec:	2000f52c 	.word	0x2000f52c

080134f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d107      	bne.n	8013512 <udp_recv+0x22>
 8013502:	4b08      	ldr	r3, [pc, #32]	; (8013524 <udp_recv+0x34>)
 8013504:	f240 428a 	movw	r2, #1162	; 0x48a
 8013508:	4907      	ldr	r1, [pc, #28]	; (8013528 <udp_recv+0x38>)
 801350a:	4808      	ldr	r0, [pc, #32]	; (801352c <udp_recv+0x3c>)
 801350c:	f004 fc6c 	bl	8017de8 <iprintf>
 8013510:	e005      	b.n	801351e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	68ba      	ldr	r2, [r7, #8]
 8013516:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	61da      	str	r2, [r3, #28]
}
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	0801bb78 	.word	0x0801bb78
 8013528:	0801beac 	.word	0x0801beac
 801352c:	0801bbcc 	.word	0x0801bbcc

08013530 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b084      	sub	sp, #16
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d107      	bne.n	801354e <udp_remove+0x1e>
 801353e:	4b19      	ldr	r3, [pc, #100]	; (80135a4 <udp_remove+0x74>)
 8013540:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013544:	4918      	ldr	r1, [pc, #96]	; (80135a8 <udp_remove+0x78>)
 8013546:	4819      	ldr	r0, [pc, #100]	; (80135ac <udp_remove+0x7c>)
 8013548:	f004 fc4e 	bl	8017de8 <iprintf>
 801354c:	e026      	b.n	801359c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801354e:	4b18      	ldr	r3, [pc, #96]	; (80135b0 <udp_remove+0x80>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	429a      	cmp	r2, r3
 8013556:	d105      	bne.n	8013564 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013558:	4b15      	ldr	r3, [pc, #84]	; (80135b0 <udp_remove+0x80>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	4a14      	ldr	r2, [pc, #80]	; (80135b0 <udp_remove+0x80>)
 8013560:	6013      	str	r3, [r2, #0]
 8013562:	e017      	b.n	8013594 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013564:	4b12      	ldr	r3, [pc, #72]	; (80135b0 <udp_remove+0x80>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	60fb      	str	r3, [r7, #12]
 801356a:	e010      	b.n	801358e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	68db      	ldr	r3, [r3, #12]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d009      	beq.n	8013588 <udp_remove+0x58>
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	687a      	ldr	r2, [r7, #4]
 801357a:	429a      	cmp	r2, r3
 801357c:	d104      	bne.n	8013588 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	68da      	ldr	r2, [r3, #12]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	60da      	str	r2, [r3, #12]
        break;
 8013586:	e005      	b.n	8013594 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	68db      	ldr	r3, [r3, #12]
 801358c:	60fb      	str	r3, [r7, #12]
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d1eb      	bne.n	801356c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013594:	6879      	ldr	r1, [r7, #4]
 8013596:	2000      	movs	r0, #0
 8013598:	f7f8 f816 	bl	800b5c8 <memp_free>
}
 801359c:	3710      	adds	r7, #16
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	0801bb78 	.word	0x0801bb78
 80135a8:	0801bec4 	.word	0x0801bec4
 80135ac:	0801bbcc 	.word	0x0801bbcc
 80135b0:	2000f52c 	.word	0x2000f52c

080135b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80135ba:	2000      	movs	r0, #0
 80135bc:	f7f7 ffb2 	bl	800b524 <memp_malloc>
 80135c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d007      	beq.n	80135d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80135c8:	2220      	movs	r2, #32
 80135ca:	2100      	movs	r1, #0
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f004 fc03 	bl	8017dd8 <memset>
    pcb->ttl = UDP_TTL;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	22ff      	movs	r2, #255	; 0xff
 80135d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80135d8:	687b      	ldr	r3, [r7, #4]
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3708      	adds	r7, #8
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}

080135e2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80135e2:	b580      	push	{r7, lr}
 80135e4:	b084      	sub	sp, #16
 80135e6:	af00      	add	r7, sp, #0
 80135e8:	4603      	mov	r3, r0
 80135ea:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80135ec:	f7ff ffe2 	bl	80135b4 <udp_new>
 80135f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80135f2:	68fb      	ldr	r3, [r7, #12]
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3710      	adds	r7, #16
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b085      	sub	sp, #20
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d01e      	beq.n	801364a <udp_netif_ip_addr_changed+0x4e>
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d01a      	beq.n	801364a <udp_netif_ip_addr_changed+0x4e>
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d017      	beq.n	801364a <udp_netif_ip_addr_changed+0x4e>
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d013      	beq.n	801364a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013622:	4b0d      	ldr	r3, [pc, #52]	; (8013658 <udp_netif_ip_addr_changed+0x5c>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	60fb      	str	r3, [r7, #12]
 8013628:	e00c      	b.n	8013644 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	429a      	cmp	r2, r3
 8013634:	d103      	bne.n	801363e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	68db      	ldr	r3, [r3, #12]
 8013642:	60fb      	str	r3, [r7, #12]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d1ef      	bne.n	801362a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801364a:	bf00      	nop
 801364c:	3714      	adds	r7, #20
 801364e:	46bd      	mov	sp, r7
 8013650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013654:	4770      	bx	lr
 8013656:	bf00      	nop
 8013658:	2000f52c 	.word	0x2000f52c

0801365c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013660:	4b20      	ldr	r3, [pc, #128]	; (80136e4 <dhcp_inc_pcb_refcount+0x88>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d133      	bne.n	80136d0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013668:	4b1f      	ldr	r3, [pc, #124]	; (80136e8 <dhcp_inc_pcb_refcount+0x8c>)
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d005      	beq.n	801367c <dhcp_inc_pcb_refcount+0x20>
 8013670:	4b1e      	ldr	r3, [pc, #120]	; (80136ec <dhcp_inc_pcb_refcount+0x90>)
 8013672:	22e5      	movs	r2, #229	; 0xe5
 8013674:	491e      	ldr	r1, [pc, #120]	; (80136f0 <dhcp_inc_pcb_refcount+0x94>)
 8013676:	481f      	ldr	r0, [pc, #124]	; (80136f4 <dhcp_inc_pcb_refcount+0x98>)
 8013678:	f004 fbb6 	bl	8017de8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801367c:	f7ff ff9a 	bl	80135b4 <udp_new>
 8013680:	4602      	mov	r2, r0
 8013682:	4b19      	ldr	r3, [pc, #100]	; (80136e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013684:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8013686:	4b18      	ldr	r3, [pc, #96]	; (80136e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d102      	bne.n	8013694 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801368e:	f04f 33ff 	mov.w	r3, #4294967295
 8013692:	e024      	b.n	80136de <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013694:	4b14      	ldr	r3, [pc, #80]	; (80136e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	7a5a      	ldrb	r2, [r3, #9]
 801369a:	4b13      	ldr	r3, [pc, #76]	; (80136e8 <dhcp_inc_pcb_refcount+0x8c>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f042 0220 	orr.w	r2, r2, #32
 80136a2:	b2d2      	uxtb	r2, r2
 80136a4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80136a6:	4b10      	ldr	r3, [pc, #64]	; (80136e8 <dhcp_inc_pcb_refcount+0x8c>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	2244      	movs	r2, #68	; 0x44
 80136ac:	4912      	ldr	r1, [pc, #72]	; (80136f8 <dhcp_inc_pcb_refcount+0x9c>)
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7ff fe28 	bl	8013304 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80136b4:	4b0c      	ldr	r3, [pc, #48]	; (80136e8 <dhcp_inc_pcb_refcount+0x8c>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2243      	movs	r2, #67	; 0x43
 80136ba:	490f      	ldr	r1, [pc, #60]	; (80136f8 <dhcp_inc_pcb_refcount+0x9c>)
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff fea9 	bl	8013414 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80136c2:	4b09      	ldr	r3, [pc, #36]	; (80136e8 <dhcp_inc_pcb_refcount+0x8c>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2200      	movs	r2, #0
 80136c8:	490c      	ldr	r1, [pc, #48]	; (80136fc <dhcp_inc_pcb_refcount+0xa0>)
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7ff ff10 	bl	80134f0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80136d0:	4b04      	ldr	r3, [pc, #16]	; (80136e4 <dhcp_inc_pcb_refcount+0x88>)
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	3301      	adds	r3, #1
 80136d6:	b2da      	uxtb	r2, r3
 80136d8:	4b02      	ldr	r3, [pc, #8]	; (80136e4 <dhcp_inc_pcb_refcount+0x88>)
 80136da:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80136dc:	2300      	movs	r3, #0
}
 80136de:	4618      	mov	r0, r3
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	20008ad4 	.word	0x20008ad4
 80136e8:	20008ad0 	.word	0x20008ad0
 80136ec:	0801bedc 	.word	0x0801bedc
 80136f0:	0801bf14 	.word	0x0801bf14
 80136f4:	0801bf3c 	.word	0x0801bf3c
 80136f8:	08026bb4 	.word	0x08026bb4
 80136fc:	08014fb5 	.word	0x08014fb5

08013700 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013704:	4b0e      	ldr	r3, [pc, #56]	; (8013740 <dhcp_dec_pcb_refcount+0x40>)
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d105      	bne.n	8013718 <dhcp_dec_pcb_refcount+0x18>
 801370c:	4b0d      	ldr	r3, [pc, #52]	; (8013744 <dhcp_dec_pcb_refcount+0x44>)
 801370e:	22ff      	movs	r2, #255	; 0xff
 8013710:	490d      	ldr	r1, [pc, #52]	; (8013748 <dhcp_dec_pcb_refcount+0x48>)
 8013712:	480e      	ldr	r0, [pc, #56]	; (801374c <dhcp_dec_pcb_refcount+0x4c>)
 8013714:	f004 fb68 	bl	8017de8 <iprintf>
  dhcp_pcb_refcount--;
 8013718:	4b09      	ldr	r3, [pc, #36]	; (8013740 <dhcp_dec_pcb_refcount+0x40>)
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	3b01      	subs	r3, #1
 801371e:	b2da      	uxtb	r2, r3
 8013720:	4b07      	ldr	r3, [pc, #28]	; (8013740 <dhcp_dec_pcb_refcount+0x40>)
 8013722:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013724:	4b06      	ldr	r3, [pc, #24]	; (8013740 <dhcp_dec_pcb_refcount+0x40>)
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d107      	bne.n	801373c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801372c:	4b08      	ldr	r3, [pc, #32]	; (8013750 <dhcp_dec_pcb_refcount+0x50>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	4618      	mov	r0, r3
 8013732:	f7ff fefd 	bl	8013530 <udp_remove>
    dhcp_pcb = NULL;
 8013736:	4b06      	ldr	r3, [pc, #24]	; (8013750 <dhcp_dec_pcb_refcount+0x50>)
 8013738:	2200      	movs	r2, #0
 801373a:	601a      	str	r2, [r3, #0]
  }
}
 801373c:	bf00      	nop
 801373e:	bd80      	pop	{r7, pc}
 8013740:	20008ad4 	.word	0x20008ad4
 8013744:	0801bedc 	.word	0x0801bedc
 8013748:	0801bf64 	.word	0x0801bf64
 801374c:	0801bf3c 	.word	0x0801bf3c
 8013750:	20008ad0 	.word	0x20008ad0

08013754 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013760:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013762:	210c      	movs	r1, #12
 8013764:	68f8      	ldr	r0, [r7, #12]
 8013766:	f001 f867 	bl	8014838 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801376a:	4b06      	ldr	r3, [pc, #24]	; (8013784 <dhcp_handle_nak+0x30>)
 801376c:	4a05      	ldr	r2, [pc, #20]	; (8013784 <dhcp_handle_nak+0x30>)
 801376e:	4905      	ldr	r1, [pc, #20]	; (8013784 <dhcp_handle_nak+0x30>)
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7f8 f8cb 	bl	800b90c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f000 fc5a 	bl	8014030 <dhcp_discover>
}
 801377c:	bf00      	nop
 801377e:	3710      	adds	r7, #16
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	08026bb4 	.word	0x08026bb4

08013788 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013794:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013796:	2108      	movs	r1, #8
 8013798:	68f8      	ldr	r0, [r7, #12]
 801379a:	f001 f84d 	bl	8014838 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	331c      	adds	r3, #28
 80137a2:	2200      	movs	r2, #0
 80137a4:	4619      	mov	r1, r3
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f002 fb4c 	bl	8015e44 <etharp_query>
 80137ac:	4603      	mov	r3, r0
 80137ae:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	799b      	ldrb	r3, [r3, #6]
 80137b4:	2bff      	cmp	r3, #255	; 0xff
 80137b6:	d005      	beq.n	80137c4 <dhcp_check+0x3c>
    dhcp->tries++;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	799b      	ldrb	r3, [r3, #6]
 80137bc:	3301      	adds	r3, #1
 80137be:	b2da      	uxtb	r2, r3
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80137c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80137c8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80137ca:	893b      	ldrh	r3, [r7, #8]
 80137cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80137d0:	4a06      	ldr	r2, [pc, #24]	; (80137ec <dhcp_check+0x64>)
 80137d2:	fb82 1203 	smull	r1, r2, r2, r3
 80137d6:	1152      	asrs	r2, r2, #5
 80137d8:	17db      	asrs	r3, r3, #31
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	b29a      	uxth	r2, r3
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80137e2:	bf00      	nop
 80137e4:	3710      	adds	r7, #16
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	10624dd3 	.word	0x10624dd3

080137f0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b084      	sub	sp, #16
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013800:	4b0c      	ldr	r3, [pc, #48]	; (8013834 <dhcp_handle_offer+0x44>)
 8013802:	789b      	ldrb	r3, [r3, #2]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d011      	beq.n	801382c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2200      	movs	r2, #0
 801380c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801380e:	4b0a      	ldr	r3, [pc, #40]	; (8013838 <dhcp_handle_offer+0x48>)
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	4618      	mov	r0, r3
 8013814:	f7f7 f9af 	bl	800ab76 <lwip_htonl>
 8013818:	4602      	mov	r2, r0
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	691a      	ldr	r2, [r3, #16]
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f000 f808 	bl	801383c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801382c:	bf00      	nop
 801382e:	3710      	adds	r7, #16
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}
 8013834:	2000f530 	.word	0x2000f530
 8013838:	2000f538 	.word	0x2000f538

0801383c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801383c:	b5b0      	push	{r4, r5, r7, lr}
 801383e:	b08a      	sub	sp, #40	; 0x28
 8013840:	af02      	add	r7, sp, #8
 8013842:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d109      	bne.n	801385e <dhcp_select+0x22>
 801384a:	4b71      	ldr	r3, [pc, #452]	; (8013a10 <dhcp_select+0x1d4>)
 801384c:	f240 1277 	movw	r2, #375	; 0x177
 8013850:	4970      	ldr	r1, [pc, #448]	; (8013a14 <dhcp_select+0x1d8>)
 8013852:	4871      	ldr	r0, [pc, #452]	; (8013a18 <dhcp_select+0x1dc>)
 8013854:	f004 fac8 	bl	8017de8 <iprintf>
 8013858:	f06f 030f 	mvn.w	r3, #15
 801385c:	e0d3      	b.n	8013a06 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013862:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d109      	bne.n	801387e <dhcp_select+0x42>
 801386a:	4b69      	ldr	r3, [pc, #420]	; (8013a10 <dhcp_select+0x1d4>)
 801386c:	f240 1279 	movw	r2, #377	; 0x179
 8013870:	496a      	ldr	r1, [pc, #424]	; (8013a1c <dhcp_select+0x1e0>)
 8013872:	4869      	ldr	r0, [pc, #420]	; (8013a18 <dhcp_select+0x1dc>)
 8013874:	f004 fab8 	bl	8017de8 <iprintf>
 8013878:	f06f 0305 	mvn.w	r3, #5
 801387c:	e0c3      	b.n	8013a06 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801387e:	2101      	movs	r1, #1
 8013880:	69b8      	ldr	r0, [r7, #24]
 8013882:	f000 ffd9 	bl	8014838 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013886:	f107 030c 	add.w	r3, r7, #12
 801388a:	2203      	movs	r2, #3
 801388c:	69b9      	ldr	r1, [r7, #24]
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f001 fc5c 	bl	801514c <dhcp_create_msg>
 8013894:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	2b00      	cmp	r3, #0
 801389a:	f000 8085 	beq.w	80139a8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80138a4:	89b8      	ldrh	r0, [r7, #12]
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138ac:	2302      	movs	r3, #2
 80138ae:	2239      	movs	r2, #57	; 0x39
 80138b0:	f000 ffdc 	bl	801486c <dhcp_option>
 80138b4:	4603      	mov	r3, r0
 80138b6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80138b8:	89b8      	ldrh	r0, [r7, #12]
 80138ba:	693b      	ldr	r3, [r7, #16]
 80138bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138c4:	461a      	mov	r2, r3
 80138c6:	f001 f82b 	bl	8014920 <dhcp_option_short>
 80138ca:	4603      	mov	r3, r0
 80138cc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80138ce:	89b8      	ldrh	r0, [r7, #12]
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138d6:	2304      	movs	r3, #4
 80138d8:	2232      	movs	r2, #50	; 0x32
 80138da:	f000 ffc7 	bl	801486c <dhcp_option>
 80138de:	4603      	mov	r3, r0
 80138e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80138e2:	89bc      	ldrh	r4, [r7, #12]
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	69db      	ldr	r3, [r3, #28]
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7f7 f941 	bl	800ab76 <lwip_htonl>
 80138f4:	4603      	mov	r3, r0
 80138f6:	461a      	mov	r2, r3
 80138f8:	4629      	mov	r1, r5
 80138fa:	4620      	mov	r0, r4
 80138fc:	f001 f842 	bl	8014984 <dhcp_option_long>
 8013900:	4603      	mov	r3, r0
 8013902:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013904:	89b8      	ldrh	r0, [r7, #12]
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801390c:	2304      	movs	r3, #4
 801390e:	2236      	movs	r2, #54	; 0x36
 8013910:	f000 ffac 	bl	801486c <dhcp_option>
 8013914:	4603      	mov	r3, r0
 8013916:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013918:	89bc      	ldrh	r4, [r7, #12]
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013920:	69bb      	ldr	r3, [r7, #24]
 8013922:	699b      	ldr	r3, [r3, #24]
 8013924:	4618      	mov	r0, r3
 8013926:	f7f7 f926 	bl	800ab76 <lwip_htonl>
 801392a:	4603      	mov	r3, r0
 801392c:	461a      	mov	r2, r3
 801392e:	4629      	mov	r1, r5
 8013930:	4620      	mov	r0, r4
 8013932:	f001 f827 	bl	8014984 <dhcp_option_long>
 8013936:	4603      	mov	r3, r0
 8013938:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801393a:	89b8      	ldrh	r0, [r7, #12]
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013942:	2303      	movs	r3, #3
 8013944:	2237      	movs	r2, #55	; 0x37
 8013946:	f000 ff91 	bl	801486c <dhcp_option>
 801394a:	4603      	mov	r3, r0
 801394c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801394e:	2300      	movs	r3, #0
 8013950:	77bb      	strb	r3, [r7, #30]
 8013952:	e00e      	b.n	8013972 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013954:	89b8      	ldrh	r0, [r7, #12]
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801395c:	7fbb      	ldrb	r3, [r7, #30]
 801395e:	4a30      	ldr	r2, [pc, #192]	; (8013a20 <dhcp_select+0x1e4>)
 8013960:	5cd3      	ldrb	r3, [r2, r3]
 8013962:	461a      	mov	r2, r3
 8013964:	f000 ffb6 	bl	80148d4 <dhcp_option_byte>
 8013968:	4603      	mov	r3, r0
 801396a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801396c:	7fbb      	ldrb	r3, [r7, #30]
 801396e:	3301      	adds	r3, #1
 8013970:	77bb      	strb	r3, [r7, #30]
 8013972:	7fbb      	ldrb	r3, [r7, #30]
 8013974:	2b02      	cmp	r3, #2
 8013976:	d9ed      	bls.n	8013954 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013978:	89b8      	ldrh	r0, [r7, #12]
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	33f0      	adds	r3, #240	; 0xf0
 801397e:	697a      	ldr	r2, [r7, #20]
 8013980:	4619      	mov	r1, r3
 8013982:	f001 fcb9 	bl	80152f8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013986:	4b27      	ldr	r3, [pc, #156]	; (8013a24 <dhcp_select+0x1e8>)
 8013988:	6818      	ldr	r0, [r3, #0]
 801398a:	4b27      	ldr	r3, [pc, #156]	; (8013a28 <dhcp_select+0x1ec>)
 801398c:	9301      	str	r3, [sp, #4]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	9300      	str	r3, [sp, #0]
 8013992:	2343      	movs	r3, #67	; 0x43
 8013994:	4a25      	ldr	r2, [pc, #148]	; (8013a2c <dhcp_select+0x1f0>)
 8013996:	6979      	ldr	r1, [r7, #20]
 8013998:	f7ff fbce 	bl	8013138 <udp_sendto_if_src>
 801399c:	4603      	mov	r3, r0
 801399e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80139a0:	6978      	ldr	r0, [r7, #20]
 80139a2:	f7f8 fcbd 	bl	800c320 <pbuf_free>
 80139a6:	e001      	b.n	80139ac <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80139a8:	23ff      	movs	r3, #255	; 0xff
 80139aa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80139ac:	69bb      	ldr	r3, [r7, #24]
 80139ae:	799b      	ldrb	r3, [r3, #6]
 80139b0:	2bff      	cmp	r3, #255	; 0xff
 80139b2:	d005      	beq.n	80139c0 <dhcp_select+0x184>
    dhcp->tries++;
 80139b4:	69bb      	ldr	r3, [r7, #24]
 80139b6:	799b      	ldrb	r3, [r3, #6]
 80139b8:	3301      	adds	r3, #1
 80139ba:	b2da      	uxtb	r2, r3
 80139bc:	69bb      	ldr	r3, [r7, #24]
 80139be:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	799b      	ldrb	r3, [r3, #6]
 80139c4:	2b05      	cmp	r3, #5
 80139c6:	d80d      	bhi.n	80139e4 <dhcp_select+0x1a8>
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	799b      	ldrb	r3, [r3, #6]
 80139cc:	461a      	mov	r2, r3
 80139ce:	2301      	movs	r3, #1
 80139d0:	4093      	lsls	r3, r2
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	461a      	mov	r2, r3
 80139d6:	0152      	lsls	r2, r2, #5
 80139d8:	1ad2      	subs	r2, r2, r3
 80139da:	0092      	lsls	r2, r2, #2
 80139dc:	4413      	add	r3, r2
 80139de:	00db      	lsls	r3, r3, #3
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	e001      	b.n	80139e8 <dhcp_select+0x1ac>
 80139e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80139e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80139ea:	89fb      	ldrh	r3, [r7, #14]
 80139ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80139f0:	4a0f      	ldr	r2, [pc, #60]	; (8013a30 <dhcp_select+0x1f4>)
 80139f2:	fb82 1203 	smull	r1, r2, r2, r3
 80139f6:	1152      	asrs	r2, r2, #5
 80139f8:	17db      	asrs	r3, r3, #31
 80139fa:	1ad3      	subs	r3, r2, r3
 80139fc:	b29a      	uxth	r2, r3
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013a02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3720      	adds	r7, #32
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	0801bedc 	.word	0x0801bedc
 8013a14:	0801bf88 	.word	0x0801bf88
 8013a18:	0801bf3c 	.word	0x0801bf3c
 8013a1c:	0801bfa4 	.word	0x0801bfa4
 8013a20:	2000001c 	.word	0x2000001c
 8013a24:	20008ad0 	.word	0x20008ad0
 8013a28:	08026bb4 	.word	0x08026bb4
 8013a2c:	08026bb8 	.word	0x08026bb8
 8013a30:	10624dd3 	.word	0x10624dd3

08013a34 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013a3a:	4b27      	ldr	r3, [pc, #156]	; (8013ad8 <dhcp_coarse_tmr+0xa4>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	607b      	str	r3, [r7, #4]
 8013a40:	e042      	b.n	8013ac8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a46:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d039      	beq.n	8013ac2 <dhcp_coarse_tmr+0x8e>
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	795b      	ldrb	r3, [r3, #5]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d035      	beq.n	8013ac2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	8a9b      	ldrh	r3, [r3, #20]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d012      	beq.n	8013a84 <dhcp_coarse_tmr+0x50>
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	8a5b      	ldrh	r3, [r3, #18]
 8013a62:	3301      	adds	r3, #1
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	825a      	strh	r2, [r3, #18]
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	8a5a      	ldrh	r2, [r3, #18]
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	8a9b      	ldrh	r3, [r3, #20]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d106      	bne.n	8013a84 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f000 fe44 	bl	8014704 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f000 f969 	bl	8013d54 <dhcp_start>
 8013a82:	e01e      	b.n	8013ac2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	8a1b      	ldrh	r3, [r3, #16]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00b      	beq.n	8013aa4 <dhcp_coarse_tmr+0x70>
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	8a1b      	ldrh	r3, [r3, #16]
 8013a90:	1e5a      	subs	r2, r3, #1
 8013a92:	b291      	uxth	r1, r2
 8013a94:	683a      	ldr	r2, [r7, #0]
 8013a96:	8211      	strh	r1, [r2, #16]
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d103      	bne.n	8013aa4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f000 f8c6 	bl	8013c2e <dhcp_t2_timeout>
 8013aa2:	e00e      	b.n	8013ac2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	89db      	ldrh	r3, [r3, #14]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00a      	beq.n	8013ac2 <dhcp_coarse_tmr+0x8e>
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	89db      	ldrh	r3, [r3, #14]
 8013ab0:	1e5a      	subs	r2, r3, #1
 8013ab2:	b291      	uxth	r1, r2
 8013ab4:	683a      	ldr	r2, [r7, #0]
 8013ab6:	81d1      	strh	r1, [r2, #14]
 8013ab8:	2b01      	cmp	r3, #1
 8013aba:	d102      	bne.n	8013ac2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f000 f888 	bl	8013bd2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	607b      	str	r3, [r7, #4]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d1b9      	bne.n	8013a42 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013ace:	bf00      	nop
 8013ad0:	3708      	adds	r7, #8
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
 8013ad6:	bf00      	nop
 8013ad8:	2000f504 	.word	0x2000f504

08013adc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013ae2:	4b16      	ldr	r3, [pc, #88]	; (8013b3c <dhcp_fine_tmr+0x60>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	607b      	str	r3, [r7, #4]
 8013ae8:	e020      	b.n	8013b2c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aee:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d017      	beq.n	8013b26 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	891b      	ldrh	r3, [r3, #8]
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d906      	bls.n	8013b0c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	891b      	ldrh	r3, [r3, #8]
 8013b02:	3b01      	subs	r3, #1
 8013b04:	b29a      	uxth	r2, r3
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	811a      	strh	r2, [r3, #8]
 8013b0a:	e00c      	b.n	8013b26 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	891b      	ldrh	r3, [r3, #8]
 8013b10:	2b01      	cmp	r3, #1
 8013b12:	d108      	bne.n	8013b26 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	891b      	ldrh	r3, [r3, #8]
 8013b18:	3b01      	subs	r3, #1
 8013b1a:	b29a      	uxth	r2, r3
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f000 f80d 	bl	8013b40 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	607b      	str	r3, [r7, #4]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d1db      	bne.n	8013aea <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013b32:	bf00      	nop
 8013b34:	3708      	adds	r7, #8
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
 8013b3a:	bf00      	nop
 8013b3c:	2000f504 	.word	0x2000f504

08013b40 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b4c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	795b      	ldrb	r3, [r3, #5]
 8013b52:	2b0c      	cmp	r3, #12
 8013b54:	d003      	beq.n	8013b5e <dhcp_timeout+0x1e>
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	795b      	ldrb	r3, [r3, #5]
 8013b5a:	2b06      	cmp	r3, #6
 8013b5c:	d103      	bne.n	8013b66 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f000 fa66 	bl	8014030 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013b64:	e031      	b.n	8013bca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	795b      	ldrb	r3, [r3, #5]
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d10e      	bne.n	8013b8c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	799b      	ldrb	r3, [r3, #6]
 8013b72:	2b05      	cmp	r3, #5
 8013b74:	d803      	bhi.n	8013b7e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f7ff fe60 	bl	801383c <dhcp_select>
}
 8013b7c:	e025      	b.n	8013bca <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 fdc0 	bl	8014704 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 f8e5 	bl	8013d54 <dhcp_start>
}
 8013b8a:	e01e      	b.n	8013bca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	795b      	ldrb	r3, [r3, #5]
 8013b90:	2b08      	cmp	r3, #8
 8013b92:	d10b      	bne.n	8013bac <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	799b      	ldrb	r3, [r3, #6]
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d803      	bhi.n	8013ba4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f7ff fdf3 	bl	8013788 <dhcp_check>
}
 8013ba2:	e012      	b.n	8013bca <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 fae5 	bl	8014174 <dhcp_bind>
}
 8013baa:	e00e      	b.n	8013bca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	795b      	ldrb	r3, [r3, #5]
 8013bb0:	2b03      	cmp	r3, #3
 8013bb2:	d10a      	bne.n	8013bca <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	799b      	ldrb	r3, [r3, #6]
 8013bb8:	2b01      	cmp	r3, #1
 8013bba:	d803      	bhi.n	8013bc4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f000 fceb 	bl	8014598 <dhcp_reboot>
}
 8013bc2:	e002      	b.n	8013bca <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f000 fa33 	bl	8014030 <dhcp_discover>
}
 8013bca:	bf00      	nop
 8013bcc:	3710      	adds	r7, #16
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}

08013bd2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b084      	sub	sp, #16
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bde:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	795b      	ldrb	r3, [r3, #5]
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d007      	beq.n	8013bf8 <dhcp_t1_timeout+0x26>
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	795b      	ldrb	r3, [r3, #5]
 8013bec:	2b0a      	cmp	r3, #10
 8013bee:	d003      	beq.n	8013bf8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013bf4:	2b05      	cmp	r3, #5
 8013bf6:	d116      	bne.n	8013c26 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f000 fb95 	bl	8014328 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	899b      	ldrh	r3, [r3, #12]
 8013c02:	461a      	mov	r2, r3
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	8a5b      	ldrh	r3, [r3, #18]
 8013c08:	1ad3      	subs	r3, r2, r3
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	dd0b      	ble.n	8013c26 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	899b      	ldrh	r3, [r3, #12]
 8013c12:	461a      	mov	r2, r3
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	8a5b      	ldrh	r3, [r3, #18]
 8013c18:	1ad3      	subs	r3, r2, r3
 8013c1a:	0fda      	lsrs	r2, r3, #31
 8013c1c:	4413      	add	r3, r2
 8013c1e:	105b      	asrs	r3, r3, #1
 8013c20:	b29a      	uxth	r2, r3
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013c26:	bf00      	nop
 8013c28:	3710      	adds	r7, #16
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}

08013c2e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013c2e:	b580      	push	{r7, lr}
 8013c30:	b084      	sub	sp, #16
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c3a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	795b      	ldrb	r3, [r3, #5]
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d00b      	beq.n	8013c5c <dhcp_t2_timeout+0x2e>
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	795b      	ldrb	r3, [r3, #5]
 8013c48:	2b0a      	cmp	r3, #10
 8013c4a:	d007      	beq.n	8013c5c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013c50:	2b05      	cmp	r3, #5
 8013c52:	d003      	beq.n	8013c5c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	795b      	ldrb	r3, [r3, #5]
 8013c58:	2b04      	cmp	r3, #4
 8013c5a:	d116      	bne.n	8013c8a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f000 fbff 	bl	8014460 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	8a9b      	ldrh	r3, [r3, #20]
 8013c66:	461a      	mov	r2, r3
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	8a5b      	ldrh	r3, [r3, #18]
 8013c6c:	1ad3      	subs	r3, r2, r3
 8013c6e:	2b01      	cmp	r3, #1
 8013c70:	dd0b      	ble.n	8013c8a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	8a9b      	ldrh	r3, [r3, #20]
 8013c76:	461a      	mov	r2, r3
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	8a5b      	ldrh	r3, [r3, #18]
 8013c7c:	1ad3      	subs	r3, r2, r3
 8013c7e:	0fda      	lsrs	r2, r3, #31
 8013c80:	4413      	add	r3, r2
 8013c82:	105b      	asrs	r3, r3, #1
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013c8a:	bf00      	nop
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
	...

08013c94 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b084      	sub	sp, #16
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ca2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	2200      	movs	r2, #0
 8013cae:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013cb0:	4b26      	ldr	r3, [pc, #152]	; (8013d4c <dhcp_handle_ack+0xb8>)
 8013cb2:	78db      	ldrb	r3, [r3, #3]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d003      	beq.n	8013cc0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013cb8:	4b25      	ldr	r3, [pc, #148]	; (8013d50 <dhcp_handle_ack+0xbc>)
 8013cba:	68da      	ldr	r2, [r3, #12]
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013cc0:	4b22      	ldr	r3, [pc, #136]	; (8013d4c <dhcp_handle_ack+0xb8>)
 8013cc2:	791b      	ldrb	r3, [r3, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d004      	beq.n	8013cd2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013cc8:	4b21      	ldr	r3, [pc, #132]	; (8013d50 <dhcp_handle_ack+0xbc>)
 8013cca:	691a      	ldr	r2, [r3, #16]
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	62da      	str	r2, [r3, #44]	; 0x2c
 8013cd0:	e004      	b.n	8013cdc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cd6:	085a      	lsrs	r2, r3, #1
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013cdc:	4b1b      	ldr	r3, [pc, #108]	; (8013d4c <dhcp_handle_ack+0xb8>)
 8013cde:	795b      	ldrb	r3, [r3, #5]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d004      	beq.n	8013cee <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013ce4:	4b1a      	ldr	r3, [pc, #104]	; (8013d50 <dhcp_handle_ack+0xbc>)
 8013ce6:	695a      	ldr	r2, [r3, #20]
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	631a      	str	r2, [r3, #48]	; 0x30
 8013cec:	e007      	b.n	8013cfe <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013cf2:	4613      	mov	r3, r2
 8013cf4:	00db      	lsls	r3, r3, #3
 8013cf6:	1a9b      	subs	r3, r3, r2
 8013cf8:	08da      	lsrs	r2, r3, #3
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	691a      	ldr	r2, [r3, #16]
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013d06:	4b11      	ldr	r3, [pc, #68]	; (8013d4c <dhcp_handle_ack+0xb8>)
 8013d08:	799b      	ldrb	r3, [r3, #6]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d00b      	beq.n	8013d26 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013d0e:	4b10      	ldr	r3, [pc, #64]	; (8013d50 <dhcp_handle_ack+0xbc>)
 8013d10:	699b      	ldr	r3, [r3, #24]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7f6 ff2f 	bl	800ab76 <lwip_htonl>
 8013d18:	4602      	mov	r2, r0
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2201      	movs	r2, #1
 8013d22:	71da      	strb	r2, [r3, #7]
 8013d24:	e002      	b.n	8013d2c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2200      	movs	r2, #0
 8013d2a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013d2c:	4b07      	ldr	r3, [pc, #28]	; (8013d4c <dhcp_handle_ack+0xb8>)
 8013d2e:	79db      	ldrb	r3, [r3, #7]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d007      	beq.n	8013d44 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013d34:	4b06      	ldr	r3, [pc, #24]	; (8013d50 <dhcp_handle_ack+0xbc>)
 8013d36:	69db      	ldr	r3, [r3, #28]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7f6 ff1c 	bl	800ab76 <lwip_htonl>
 8013d3e:	4602      	mov	r2, r0
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013d44:	bf00      	nop
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	2000f530 	.word	0x2000f530
 8013d50:	2000f538 	.word	0x2000f538

08013d54 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d109      	bne.n	8013d76 <dhcp_start+0x22>
 8013d62:	4b37      	ldr	r3, [pc, #220]	; (8013e40 <dhcp_start+0xec>)
 8013d64:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013d68:	4936      	ldr	r1, [pc, #216]	; (8013e44 <dhcp_start+0xf0>)
 8013d6a:	4837      	ldr	r0, [pc, #220]	; (8013e48 <dhcp_start+0xf4>)
 8013d6c:	f004 f83c 	bl	8017de8 <iprintf>
 8013d70:	f06f 030f 	mvn.w	r3, #15
 8013d74:	e060      	b.n	8013e38 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d7c:	f003 0301 	and.w	r3, r3, #1
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d109      	bne.n	8013d98 <dhcp_start+0x44>
 8013d84:	4b2e      	ldr	r3, [pc, #184]	; (8013e40 <dhcp_start+0xec>)
 8013d86:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013d8a:	4930      	ldr	r1, [pc, #192]	; (8013e4c <dhcp_start+0xf8>)
 8013d8c:	482e      	ldr	r0, [pc, #184]	; (8013e48 <dhcp_start+0xf4>)
 8013d8e:	f004 f82b 	bl	8017de8 <iprintf>
 8013d92:	f06f 030f 	mvn.w	r3, #15
 8013d96:	e04f      	b.n	8013e38 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d9c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013da2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013da6:	d202      	bcs.n	8013dae <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013da8:	f04f 33ff 	mov.w	r3, #4294967295
 8013dac:	e044      	b.n	8013e38 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d10d      	bne.n	8013dd0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013db4:	2034      	movs	r0, #52	; 0x34
 8013db6:	f7f7 fa33 	bl	800b220 <mem_malloc>
 8013dba:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d102      	bne.n	8013dc8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8013dc6:	e037      	b.n	8013e38 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	68fa      	ldr	r2, [r7, #12]
 8013dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8013dce:	e005      	b.n	8013ddc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	791b      	ldrb	r3, [r3, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d001      	beq.n	8013ddc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013dd8:	f7ff fc92 	bl	8013700 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013ddc:	2234      	movs	r2, #52	; 0x34
 8013dde:	2100      	movs	r1, #0
 8013de0:	68f8      	ldr	r0, [r7, #12]
 8013de2:	f003 fff9 	bl	8017dd8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013de6:	f7ff fc39 	bl	801365c <dhcp_inc_pcb_refcount>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d002      	beq.n	8013df6 <dhcp_start+0xa2>
    return ERR_MEM;
 8013df0:	f04f 33ff 	mov.w	r3, #4294967295
 8013df4:	e020      	b.n	8013e38 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2201      	movs	r2, #1
 8013dfa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013e02:	f003 0304 	and.w	r3, r3, #4
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d105      	bne.n	8013e16 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013e0a:	2102      	movs	r1, #2
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f000 fd13 	bl	8014838 <dhcp_set_state>
    return ERR_OK;
 8013e12:	2300      	movs	r3, #0
 8013e14:	e010      	b.n	8013e38 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f000 f90a 	bl	8014030 <dhcp_discover>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013e20:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d005      	beq.n	8013e34 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f000 fc6b 	bl	8014704 <dhcp_release_and_stop>
    return ERR_MEM;
 8013e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e32:	e001      	b.n	8013e38 <dhcp_start+0xe4>
  }
  return result;
 8013e34:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3710      	adds	r7, #16
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	0801bedc 	.word	0x0801bedc
 8013e44:	0801bfc0 	.word	0x0801bfc0
 8013e48:	0801bf3c 	.word	0x0801bf3c
 8013e4c:	0801c004 	.word	0x0801c004

08013e50 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b084      	sub	sp, #16
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e5c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d037      	beq.n	8013ed4 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	795b      	ldrb	r3, [r3, #5]
 8013e68:	2b0a      	cmp	r3, #10
 8013e6a:	d820      	bhi.n	8013eae <dhcp_network_changed+0x5e>
 8013e6c:	a201      	add	r2, pc, #4	; (adr r2, 8013e74 <dhcp_network_changed+0x24>)
 8013e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e72:	bf00      	nop
 8013e74:	08013ed9 	.word	0x08013ed9
 8013e78:	08013eaf 	.word	0x08013eaf
 8013e7c:	08013eaf 	.word	0x08013eaf
 8013e80:	08013ea1 	.word	0x08013ea1
 8013e84:	08013ea1 	.word	0x08013ea1
 8013e88:	08013ea1 	.word	0x08013ea1
 8013e8c:	08013eaf 	.word	0x08013eaf
 8013e90:	08013eaf 	.word	0x08013eaf
 8013e94:	08013eaf 	.word	0x08013eaf
 8013e98:	08013eaf 	.word	0x08013eaf
 8013e9c:	08013ea1 	.word	0x08013ea1
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f000 fb76 	bl	8014598 <dhcp_reboot>
      break;
 8013eac:	e015      	b.n	8013eda <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	795b      	ldrb	r3, [r3, #5]
 8013eb2:	2b0c      	cmp	r3, #12
 8013eb4:	d906      	bls.n	8013ec4 <dhcp_network_changed+0x74>
 8013eb6:	4b0a      	ldr	r3, [pc, #40]	; (8013ee0 <dhcp_network_changed+0x90>)
 8013eb8:	f240 326d 	movw	r2, #877	; 0x36d
 8013ebc:	4909      	ldr	r1, [pc, #36]	; (8013ee4 <dhcp_network_changed+0x94>)
 8013ebe:	480a      	ldr	r0, [pc, #40]	; (8013ee8 <dhcp_network_changed+0x98>)
 8013ec0:	f003 ff92 	bl	8017de8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 f8b0 	bl	8014030 <dhcp_discover>
      break;
 8013ed0:	bf00      	nop
 8013ed2:	e002      	b.n	8013eda <dhcp_network_changed+0x8a>
    return;
 8013ed4:	bf00      	nop
 8013ed6:	e000      	b.n	8013eda <dhcp_network_changed+0x8a>
      break;
 8013ed8:	bf00      	nop
  }
}
 8013eda:	3710      	adds	r7, #16
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	0801bedc 	.word	0x0801bedc
 8013ee4:	0801c028 	.word	0x0801c028
 8013ee8:	0801bf3c 	.word	0x0801bf3c

08013eec <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d107      	bne.n	8013f0c <dhcp_arp_reply+0x20>
 8013efc:	4b0e      	ldr	r3, [pc, #56]	; (8013f38 <dhcp_arp_reply+0x4c>)
 8013efe:	f240 328b 	movw	r2, #907	; 0x38b
 8013f02:	490e      	ldr	r1, [pc, #56]	; (8013f3c <dhcp_arp_reply+0x50>)
 8013f04:	480e      	ldr	r0, [pc, #56]	; (8013f40 <dhcp_arp_reply+0x54>)
 8013f06:	f003 ff6f 	bl	8017de8 <iprintf>
 8013f0a:	e012      	b.n	8013f32 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f10:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d00c      	beq.n	8013f32 <dhcp_arp_reply+0x46>
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	795b      	ldrb	r3, [r3, #5]
 8013f1c:	2b08      	cmp	r3, #8
 8013f1e:	d108      	bne.n	8013f32 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	69db      	ldr	r3, [r3, #28]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d102      	bne.n	8013f32 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f000 f809 	bl	8013f44 <dhcp_decline>
    }
  }
}
 8013f32:	3710      	adds	r7, #16
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	0801bedc 	.word	0x0801bedc
 8013f3c:	0801bfc0 	.word	0x0801bfc0
 8013f40:	0801bf3c 	.word	0x0801bf3c

08013f44 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013f44:	b5b0      	push	{r4, r5, r7, lr}
 8013f46:	b08a      	sub	sp, #40	; 0x28
 8013f48:	af02      	add	r7, sp, #8
 8013f4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f50:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013f52:	210c      	movs	r1, #12
 8013f54:	69b8      	ldr	r0, [r7, #24]
 8013f56:	f000 fc6f 	bl	8014838 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013f5a:	f107 030c 	add.w	r3, r7, #12
 8013f5e:	2204      	movs	r2, #4
 8013f60:	69b9      	ldr	r1, [r7, #24]
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f001 f8f2 	bl	801514c <dhcp_create_msg>
 8013f68:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013f6a:	697b      	ldr	r3, [r7, #20]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d035      	beq.n	8013fdc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013f76:	89b8      	ldrh	r0, [r7, #12]
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f7e:	2304      	movs	r3, #4
 8013f80:	2232      	movs	r2, #50	; 0x32
 8013f82:	f000 fc73 	bl	801486c <dhcp_option>
 8013f86:	4603      	mov	r3, r0
 8013f88:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013f8a:	89bc      	ldrh	r4, [r7, #12]
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	69db      	ldr	r3, [r3, #28]
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7f6 fded 	bl	800ab76 <lwip_htonl>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f000 fcee 	bl	8014984 <dhcp_option_long>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013fac:	89b8      	ldrh	r0, [r7, #12]
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	33f0      	adds	r3, #240	; 0xf0
 8013fb2:	697a      	ldr	r2, [r7, #20]
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	f001 f99f 	bl	80152f8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013fba:	4b19      	ldr	r3, [pc, #100]	; (8014020 <dhcp_decline+0xdc>)
 8013fbc:	6818      	ldr	r0, [r3, #0]
 8013fbe:	4b19      	ldr	r3, [pc, #100]	; (8014024 <dhcp_decline+0xe0>)
 8013fc0:	9301      	str	r3, [sp, #4]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	2343      	movs	r3, #67	; 0x43
 8013fc8:	4a17      	ldr	r2, [pc, #92]	; (8014028 <dhcp_decline+0xe4>)
 8013fca:	6979      	ldr	r1, [r7, #20]
 8013fcc:	f7ff f8b4 	bl	8013138 <udp_sendto_if_src>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013fd4:	6978      	ldr	r0, [r7, #20]
 8013fd6:	f7f8 f9a3 	bl	800c320 <pbuf_free>
 8013fda:	e001      	b.n	8013fe0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013fdc:	23ff      	movs	r3, #255	; 0xff
 8013fde:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	799b      	ldrb	r3, [r3, #6]
 8013fe4:	2bff      	cmp	r3, #255	; 0xff
 8013fe6:	d005      	beq.n	8013ff4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	799b      	ldrb	r3, [r3, #6]
 8013fec:	3301      	adds	r3, #1
 8013fee:	b2da      	uxtb	r2, r3
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013ff4:	f242 7310 	movw	r3, #10000	; 0x2710
 8013ff8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013ffa:	89fb      	ldrh	r3, [r7, #14]
 8013ffc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014000:	4a0a      	ldr	r2, [pc, #40]	; (801402c <dhcp_decline+0xe8>)
 8014002:	fb82 1203 	smull	r1, r2, r2, r3
 8014006:	1152      	asrs	r2, r2, #5
 8014008:	17db      	asrs	r3, r3, #31
 801400a:	1ad3      	subs	r3, r2, r3
 801400c:	b29a      	uxth	r2, r3
 801400e:	69bb      	ldr	r3, [r7, #24]
 8014010:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014012:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014016:	4618      	mov	r0, r3
 8014018:	3720      	adds	r7, #32
 801401a:	46bd      	mov	sp, r7
 801401c:	bdb0      	pop	{r4, r5, r7, pc}
 801401e:	bf00      	nop
 8014020:	20008ad0 	.word	0x20008ad0
 8014024:	08026bb4 	.word	0x08026bb4
 8014028:	08026bb8 	.word	0x08026bb8
 801402c:	10624dd3 	.word	0x10624dd3

08014030 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b08a      	sub	sp, #40	; 0x28
 8014034:	af02      	add	r7, sp, #8
 8014036:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801403c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801403e:	2300      	movs	r3, #0
 8014040:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014042:	69bb      	ldr	r3, [r7, #24]
 8014044:	2200      	movs	r2, #0
 8014046:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014048:	2106      	movs	r1, #6
 801404a:	69b8      	ldr	r0, [r7, #24]
 801404c:	f000 fbf4 	bl	8014838 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014050:	f107 0308 	add.w	r3, r7, #8
 8014054:	2201      	movs	r2, #1
 8014056:	69b9      	ldr	r1, [r7, #24]
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f001 f877 	bl	801514c <dhcp_create_msg>
 801405e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d04b      	beq.n	80140fe <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801406c:	8938      	ldrh	r0, [r7, #8]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014074:	2302      	movs	r3, #2
 8014076:	2239      	movs	r2, #57	; 0x39
 8014078:	f000 fbf8 	bl	801486c <dhcp_option>
 801407c:	4603      	mov	r3, r0
 801407e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014080:	8938      	ldrh	r0, [r7, #8]
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801408c:	461a      	mov	r2, r3
 801408e:	f000 fc47 	bl	8014920 <dhcp_option_short>
 8014092:	4603      	mov	r3, r0
 8014094:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014096:	8938      	ldrh	r0, [r7, #8]
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801409e:	2303      	movs	r3, #3
 80140a0:	2237      	movs	r2, #55	; 0x37
 80140a2:	f000 fbe3 	bl	801486c <dhcp_option>
 80140a6:	4603      	mov	r3, r0
 80140a8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80140aa:	2300      	movs	r3, #0
 80140ac:	77fb      	strb	r3, [r7, #31]
 80140ae:	e00e      	b.n	80140ce <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80140b0:	8938      	ldrh	r0, [r7, #8]
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140b8:	7ffb      	ldrb	r3, [r7, #31]
 80140ba:	4a29      	ldr	r2, [pc, #164]	; (8014160 <dhcp_discover+0x130>)
 80140bc:	5cd3      	ldrb	r3, [r2, r3]
 80140be:	461a      	mov	r2, r3
 80140c0:	f000 fc08 	bl	80148d4 <dhcp_option_byte>
 80140c4:	4603      	mov	r3, r0
 80140c6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80140c8:	7ffb      	ldrb	r3, [r7, #31]
 80140ca:	3301      	adds	r3, #1
 80140cc:	77fb      	strb	r3, [r7, #31]
 80140ce:	7ffb      	ldrb	r3, [r7, #31]
 80140d0:	2b02      	cmp	r3, #2
 80140d2:	d9ed      	bls.n	80140b0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80140d4:	8938      	ldrh	r0, [r7, #8]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	33f0      	adds	r3, #240	; 0xf0
 80140da:	693a      	ldr	r2, [r7, #16]
 80140dc:	4619      	mov	r1, r3
 80140de:	f001 f90b 	bl	80152f8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80140e2:	4b20      	ldr	r3, [pc, #128]	; (8014164 <dhcp_discover+0x134>)
 80140e4:	6818      	ldr	r0, [r3, #0]
 80140e6:	4b20      	ldr	r3, [pc, #128]	; (8014168 <dhcp_discover+0x138>)
 80140e8:	9301      	str	r3, [sp, #4]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	9300      	str	r3, [sp, #0]
 80140ee:	2343      	movs	r3, #67	; 0x43
 80140f0:	4a1e      	ldr	r2, [pc, #120]	; (801416c <dhcp_discover+0x13c>)
 80140f2:	6939      	ldr	r1, [r7, #16]
 80140f4:	f7ff f820 	bl	8013138 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80140f8:	6938      	ldr	r0, [r7, #16]
 80140fa:	f7f8 f911 	bl	800c320 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80140fe:	69bb      	ldr	r3, [r7, #24]
 8014100:	799b      	ldrb	r3, [r3, #6]
 8014102:	2bff      	cmp	r3, #255	; 0xff
 8014104:	d005      	beq.n	8014112 <dhcp_discover+0xe2>
    dhcp->tries++;
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	799b      	ldrb	r3, [r3, #6]
 801410a:	3301      	adds	r3, #1
 801410c:	b2da      	uxtb	r2, r3
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014112:	69bb      	ldr	r3, [r7, #24]
 8014114:	799b      	ldrb	r3, [r3, #6]
 8014116:	2b05      	cmp	r3, #5
 8014118:	d80d      	bhi.n	8014136 <dhcp_discover+0x106>
 801411a:	69bb      	ldr	r3, [r7, #24]
 801411c:	799b      	ldrb	r3, [r3, #6]
 801411e:	461a      	mov	r2, r3
 8014120:	2301      	movs	r3, #1
 8014122:	4093      	lsls	r3, r2
 8014124:	b29b      	uxth	r3, r3
 8014126:	461a      	mov	r2, r3
 8014128:	0152      	lsls	r2, r2, #5
 801412a:	1ad2      	subs	r2, r2, r3
 801412c:	0092      	lsls	r2, r2, #2
 801412e:	4413      	add	r3, r2
 8014130:	00db      	lsls	r3, r3, #3
 8014132:	b29b      	uxth	r3, r3
 8014134:	e001      	b.n	801413a <dhcp_discover+0x10a>
 8014136:	f64e 2360 	movw	r3, #60000	; 0xea60
 801413a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801413c:	897b      	ldrh	r3, [r7, #10]
 801413e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014142:	4a0b      	ldr	r2, [pc, #44]	; (8014170 <dhcp_discover+0x140>)
 8014144:	fb82 1203 	smull	r1, r2, r2, r3
 8014148:	1152      	asrs	r2, r2, #5
 801414a:	17db      	asrs	r3, r3, #31
 801414c:	1ad3      	subs	r3, r2, r3
 801414e:	b29a      	uxth	r2, r3
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014158:	4618      	mov	r0, r3
 801415a:	3720      	adds	r7, #32
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	2000001c 	.word	0x2000001c
 8014164:	20008ad0 	.word	0x20008ad0
 8014168:	08026bb4 	.word	0x08026bb4
 801416c:	08026bb8 	.word	0x08026bb8
 8014170:	10624dd3 	.word	0x10624dd3

08014174 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b088      	sub	sp, #32
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d107      	bne.n	8014192 <dhcp_bind+0x1e>
 8014182:	4b64      	ldr	r3, [pc, #400]	; (8014314 <dhcp_bind+0x1a0>)
 8014184:	f240 4215 	movw	r2, #1045	; 0x415
 8014188:	4963      	ldr	r1, [pc, #396]	; (8014318 <dhcp_bind+0x1a4>)
 801418a:	4864      	ldr	r0, [pc, #400]	; (801431c <dhcp_bind+0x1a8>)
 801418c:	f003 fe2c 	bl	8017de8 <iprintf>
 8014190:	e0bc      	b.n	801430c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014196:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014198:	69bb      	ldr	r3, [r7, #24]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d107      	bne.n	80141ae <dhcp_bind+0x3a>
 801419e:	4b5d      	ldr	r3, [pc, #372]	; (8014314 <dhcp_bind+0x1a0>)
 80141a0:	f240 4217 	movw	r2, #1047	; 0x417
 80141a4:	495e      	ldr	r1, [pc, #376]	; (8014320 <dhcp_bind+0x1ac>)
 80141a6:	485d      	ldr	r0, [pc, #372]	; (801431c <dhcp_bind+0x1a8>)
 80141a8:	f003 fe1e 	bl	8017de8 <iprintf>
 80141ac:	e0ae      	b.n	801430c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80141ae:	69bb      	ldr	r3, [r7, #24]
 80141b0:	2200      	movs	r2, #0
 80141b2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80141b4:	69bb      	ldr	r3, [r7, #24]
 80141b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141bc:	d019      	beq.n	80141f2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80141be:	69bb      	ldr	r3, [r7, #24]
 80141c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141c2:	331e      	adds	r3, #30
 80141c4:	4a57      	ldr	r2, [pc, #348]	; (8014324 <dhcp_bind+0x1b0>)
 80141c6:	fba2 2303 	umull	r2, r3, r2, r3
 80141ca:	095b      	lsrs	r3, r3, #5
 80141cc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80141ce:	69fb      	ldr	r3, [r7, #28]
 80141d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80141d4:	d302      	bcc.n	80141dc <dhcp_bind+0x68>
      timeout = 0xffff;
 80141d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141da:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80141dc:	69fb      	ldr	r3, [r7, #28]
 80141de:	b29a      	uxth	r2, r3
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80141e4:	69bb      	ldr	r3, [r7, #24]
 80141e6:	8a9b      	ldrh	r3, [r3, #20]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d102      	bne.n	80141f2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80141ec:	69bb      	ldr	r3, [r7, #24]
 80141ee:	2201      	movs	r2, #1
 80141f0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80141f2:	69bb      	ldr	r3, [r7, #24]
 80141f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141fa:	d01d      	beq.n	8014238 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80141fc:	69bb      	ldr	r3, [r7, #24]
 80141fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014200:	331e      	adds	r3, #30
 8014202:	4a48      	ldr	r2, [pc, #288]	; (8014324 <dhcp_bind+0x1b0>)
 8014204:	fba2 2303 	umull	r2, r3, r2, r3
 8014208:	095b      	lsrs	r3, r3, #5
 801420a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801420c:	69fb      	ldr	r3, [r7, #28]
 801420e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014212:	d302      	bcc.n	801421a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014218:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801421a:	69fb      	ldr	r3, [r7, #28]
 801421c:	b29a      	uxth	r2, r3
 801421e:	69bb      	ldr	r3, [r7, #24]
 8014220:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014222:	69bb      	ldr	r3, [r7, #24]
 8014224:	895b      	ldrh	r3, [r3, #10]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d102      	bne.n	8014230 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801422a:	69bb      	ldr	r3, [r7, #24]
 801422c:	2201      	movs	r2, #1
 801422e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	895a      	ldrh	r2, [r3, #10]
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014240:	d01d      	beq.n	801427e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014242:	69bb      	ldr	r3, [r7, #24]
 8014244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014246:	331e      	adds	r3, #30
 8014248:	4a36      	ldr	r2, [pc, #216]	; (8014324 <dhcp_bind+0x1b0>)
 801424a:	fba2 2303 	umull	r2, r3, r2, r3
 801424e:	095b      	lsrs	r3, r3, #5
 8014250:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014252:	69fb      	ldr	r3, [r7, #28]
 8014254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014258:	d302      	bcc.n	8014260 <dhcp_bind+0xec>
      timeout = 0xffff;
 801425a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801425e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	b29a      	uxth	r2, r3
 8014264:	69bb      	ldr	r3, [r7, #24]
 8014266:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	899b      	ldrh	r3, [r3, #12]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d102      	bne.n	8014276 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014270:	69bb      	ldr	r3, [r7, #24]
 8014272:	2201      	movs	r2, #1
 8014274:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	899a      	ldrh	r2, [r3, #12]
 801427a:	69bb      	ldr	r3, [r7, #24]
 801427c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	895a      	ldrh	r2, [r3, #10]
 8014282:	69bb      	ldr	r3, [r7, #24]
 8014284:	899b      	ldrh	r3, [r3, #12]
 8014286:	429a      	cmp	r2, r3
 8014288:	d306      	bcc.n	8014298 <dhcp_bind+0x124>
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	899b      	ldrh	r3, [r3, #12]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d002      	beq.n	8014298 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	2200      	movs	r2, #0
 8014296:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014298:	69bb      	ldr	r3, [r7, #24]
 801429a:	79db      	ldrb	r3, [r3, #7]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d003      	beq.n	80142a8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	6a1b      	ldr	r3, [r3, #32]
 80142a4:	613b      	str	r3, [r7, #16]
 80142a6:	e014      	b.n	80142d2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	331c      	adds	r3, #28
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80142b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	db02      	blt.n	80142be <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80142b8:	23ff      	movs	r3, #255	; 0xff
 80142ba:	613b      	str	r3, [r7, #16]
 80142bc:	e009      	b.n	80142d2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80142be:	7dfb      	ldrb	r3, [r7, #23]
 80142c0:	2bbf      	cmp	r3, #191	; 0xbf
 80142c2:	d903      	bls.n	80142cc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80142c4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80142c8:	613b      	str	r3, [r7, #16]
 80142ca:	e002      	b.n	80142d2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80142cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142d0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142d6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d108      	bne.n	80142f0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80142de:	69bb      	ldr	r3, [r7, #24]
 80142e0:	69da      	ldr	r2, [r3, #28]
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	4013      	ands	r3, r2
 80142e6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80142ee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80142f0:	210a      	movs	r1, #10
 80142f2:	69b8      	ldr	r0, [r7, #24]
 80142f4:	f000 faa0 	bl	8014838 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	f103 011c 	add.w	r1, r3, #28
 80142fe:	f107 030c 	add.w	r3, r7, #12
 8014302:	f107 0210 	add.w	r2, r7, #16
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f7f7 fb00 	bl	800b90c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801430c:	3720      	adds	r7, #32
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	0801bedc 	.word	0x0801bedc
 8014318:	0801c03c 	.word	0x0801c03c
 801431c:	0801bf3c 	.word	0x0801bf3c
 8014320:	0801c058 	.word	0x0801c058
 8014324:	88888889 	.word	0x88888889

08014328 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b08a      	sub	sp, #40	; 0x28
 801432c:	af02      	add	r7, sp, #8
 801432e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014334:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014336:	2105      	movs	r1, #5
 8014338:	69b8      	ldr	r0, [r7, #24]
 801433a:	f000 fa7d 	bl	8014838 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801433e:	f107 030c 	add.w	r3, r7, #12
 8014342:	2203      	movs	r2, #3
 8014344:	69b9      	ldr	r1, [r7, #24]
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f000 ff00 	bl	801514c <dhcp_create_msg>
 801434c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d04e      	beq.n	80143f2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801435a:	89b8      	ldrh	r0, [r7, #12]
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014362:	2302      	movs	r3, #2
 8014364:	2239      	movs	r2, #57	; 0x39
 8014366:	f000 fa81 	bl	801486c <dhcp_option>
 801436a:	4603      	mov	r3, r0
 801436c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801436e:	89b8      	ldrh	r0, [r7, #12]
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801437a:	461a      	mov	r2, r3
 801437c:	f000 fad0 	bl	8014920 <dhcp_option_short>
 8014380:	4603      	mov	r3, r0
 8014382:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014384:	89b8      	ldrh	r0, [r7, #12]
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801438c:	2303      	movs	r3, #3
 801438e:	2237      	movs	r2, #55	; 0x37
 8014390:	f000 fa6c 	bl	801486c <dhcp_option>
 8014394:	4603      	mov	r3, r0
 8014396:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014398:	2300      	movs	r3, #0
 801439a:	77bb      	strb	r3, [r7, #30]
 801439c:	e00e      	b.n	80143bc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801439e:	89b8      	ldrh	r0, [r7, #12]
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143a6:	7fbb      	ldrb	r3, [r7, #30]
 80143a8:	4a2a      	ldr	r2, [pc, #168]	; (8014454 <dhcp_renew+0x12c>)
 80143aa:	5cd3      	ldrb	r3, [r2, r3]
 80143ac:	461a      	mov	r2, r3
 80143ae:	f000 fa91 	bl	80148d4 <dhcp_option_byte>
 80143b2:	4603      	mov	r3, r0
 80143b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143b6:	7fbb      	ldrb	r3, [r7, #30]
 80143b8:	3301      	adds	r3, #1
 80143ba:	77bb      	strb	r3, [r7, #30]
 80143bc:	7fbb      	ldrb	r3, [r7, #30]
 80143be:	2b02      	cmp	r3, #2
 80143c0:	d9ed      	bls.n	801439e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80143c2:	89b8      	ldrh	r0, [r7, #12]
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	33f0      	adds	r3, #240	; 0xf0
 80143c8:	697a      	ldr	r2, [r7, #20]
 80143ca:	4619      	mov	r1, r3
 80143cc:	f000 ff94 	bl	80152f8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80143d0:	4b21      	ldr	r3, [pc, #132]	; (8014458 <dhcp_renew+0x130>)
 80143d2:	6818      	ldr	r0, [r3, #0]
 80143d4:	69bb      	ldr	r3, [r7, #24]
 80143d6:	f103 0218 	add.w	r2, r3, #24
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	9300      	str	r3, [sp, #0]
 80143de:	2343      	movs	r3, #67	; 0x43
 80143e0:	6979      	ldr	r1, [r7, #20]
 80143e2:	f7fe fe35 	bl	8013050 <udp_sendto_if>
 80143e6:	4603      	mov	r3, r0
 80143e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80143ea:	6978      	ldr	r0, [r7, #20]
 80143ec:	f7f7 ff98 	bl	800c320 <pbuf_free>
 80143f0:	e001      	b.n	80143f6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80143f2:	23ff      	movs	r3, #255	; 0xff
 80143f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	799b      	ldrb	r3, [r3, #6]
 80143fa:	2bff      	cmp	r3, #255	; 0xff
 80143fc:	d005      	beq.n	801440a <dhcp_renew+0xe2>
    dhcp->tries++;
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	799b      	ldrb	r3, [r3, #6]
 8014402:	3301      	adds	r3, #1
 8014404:	b2da      	uxtb	r2, r3
 8014406:	69bb      	ldr	r3, [r7, #24]
 8014408:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801440a:	69bb      	ldr	r3, [r7, #24]
 801440c:	799b      	ldrb	r3, [r3, #6]
 801440e:	2b09      	cmp	r3, #9
 8014410:	d80a      	bhi.n	8014428 <dhcp_renew+0x100>
 8014412:	69bb      	ldr	r3, [r7, #24]
 8014414:	799b      	ldrb	r3, [r3, #6]
 8014416:	b29b      	uxth	r3, r3
 8014418:	461a      	mov	r2, r3
 801441a:	0152      	lsls	r2, r2, #5
 801441c:	1ad2      	subs	r2, r2, r3
 801441e:	0092      	lsls	r2, r2, #2
 8014420:	4413      	add	r3, r2
 8014422:	011b      	lsls	r3, r3, #4
 8014424:	b29b      	uxth	r3, r3
 8014426:	e001      	b.n	801442c <dhcp_renew+0x104>
 8014428:	f644 6320 	movw	r3, #20000	; 0x4e20
 801442c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801442e:	89fb      	ldrh	r3, [r7, #14]
 8014430:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014434:	4a09      	ldr	r2, [pc, #36]	; (801445c <dhcp_renew+0x134>)
 8014436:	fb82 1203 	smull	r1, r2, r2, r3
 801443a:	1152      	asrs	r2, r2, #5
 801443c:	17db      	asrs	r3, r3, #31
 801443e:	1ad3      	subs	r3, r2, r3
 8014440:	b29a      	uxth	r2, r3
 8014442:	69bb      	ldr	r3, [r7, #24]
 8014444:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014446:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801444a:	4618      	mov	r0, r3
 801444c:	3720      	adds	r7, #32
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}
 8014452:	bf00      	nop
 8014454:	2000001c 	.word	0x2000001c
 8014458:	20008ad0 	.word	0x20008ad0
 801445c:	10624dd3 	.word	0x10624dd3

08014460 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b08a      	sub	sp, #40	; 0x28
 8014464:	af02      	add	r7, sp, #8
 8014466:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801446c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801446e:	2104      	movs	r1, #4
 8014470:	69b8      	ldr	r0, [r7, #24]
 8014472:	f000 f9e1 	bl	8014838 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014476:	f107 030c 	add.w	r3, r7, #12
 801447a:	2203      	movs	r2, #3
 801447c:	69b9      	ldr	r1, [r7, #24]
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f000 fe64 	bl	801514c <dhcp_create_msg>
 8014484:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d04c      	beq.n	8014526 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014492:	89b8      	ldrh	r0, [r7, #12]
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801449a:	2302      	movs	r3, #2
 801449c:	2239      	movs	r2, #57	; 0x39
 801449e:	f000 f9e5 	bl	801486c <dhcp_option>
 80144a2:	4603      	mov	r3, r0
 80144a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80144a6:	89b8      	ldrh	r0, [r7, #12]
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144b2:	461a      	mov	r2, r3
 80144b4:	f000 fa34 	bl	8014920 <dhcp_option_short>
 80144b8:	4603      	mov	r3, r0
 80144ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80144bc:	89b8      	ldrh	r0, [r7, #12]
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144c4:	2303      	movs	r3, #3
 80144c6:	2237      	movs	r2, #55	; 0x37
 80144c8:	f000 f9d0 	bl	801486c <dhcp_option>
 80144cc:	4603      	mov	r3, r0
 80144ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80144d0:	2300      	movs	r3, #0
 80144d2:	77bb      	strb	r3, [r7, #30]
 80144d4:	e00e      	b.n	80144f4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80144d6:	89b8      	ldrh	r0, [r7, #12]
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144de:	7fbb      	ldrb	r3, [r7, #30]
 80144e0:	4a29      	ldr	r2, [pc, #164]	; (8014588 <dhcp_rebind+0x128>)
 80144e2:	5cd3      	ldrb	r3, [r2, r3]
 80144e4:	461a      	mov	r2, r3
 80144e6:	f000 f9f5 	bl	80148d4 <dhcp_option_byte>
 80144ea:	4603      	mov	r3, r0
 80144ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80144ee:	7fbb      	ldrb	r3, [r7, #30]
 80144f0:	3301      	adds	r3, #1
 80144f2:	77bb      	strb	r3, [r7, #30]
 80144f4:	7fbb      	ldrb	r3, [r7, #30]
 80144f6:	2b02      	cmp	r3, #2
 80144f8:	d9ed      	bls.n	80144d6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80144fa:	89b8      	ldrh	r0, [r7, #12]
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	33f0      	adds	r3, #240	; 0xf0
 8014500:	697a      	ldr	r2, [r7, #20]
 8014502:	4619      	mov	r1, r3
 8014504:	f000 fef8 	bl	80152f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014508:	4b20      	ldr	r3, [pc, #128]	; (801458c <dhcp_rebind+0x12c>)
 801450a:	6818      	ldr	r0, [r3, #0]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	2343      	movs	r3, #67	; 0x43
 8014512:	4a1f      	ldr	r2, [pc, #124]	; (8014590 <dhcp_rebind+0x130>)
 8014514:	6979      	ldr	r1, [r7, #20]
 8014516:	f7fe fd9b 	bl	8013050 <udp_sendto_if>
 801451a:	4603      	mov	r3, r0
 801451c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801451e:	6978      	ldr	r0, [r7, #20]
 8014520:	f7f7 fefe 	bl	800c320 <pbuf_free>
 8014524:	e001      	b.n	801452a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014526:	23ff      	movs	r3, #255	; 0xff
 8014528:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801452a:	69bb      	ldr	r3, [r7, #24]
 801452c:	799b      	ldrb	r3, [r3, #6]
 801452e:	2bff      	cmp	r3, #255	; 0xff
 8014530:	d005      	beq.n	801453e <dhcp_rebind+0xde>
    dhcp->tries++;
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	799b      	ldrb	r3, [r3, #6]
 8014536:	3301      	adds	r3, #1
 8014538:	b2da      	uxtb	r2, r3
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801453e:	69bb      	ldr	r3, [r7, #24]
 8014540:	799b      	ldrb	r3, [r3, #6]
 8014542:	2b09      	cmp	r3, #9
 8014544:	d80a      	bhi.n	801455c <dhcp_rebind+0xfc>
 8014546:	69bb      	ldr	r3, [r7, #24]
 8014548:	799b      	ldrb	r3, [r3, #6]
 801454a:	b29b      	uxth	r3, r3
 801454c:	461a      	mov	r2, r3
 801454e:	0152      	lsls	r2, r2, #5
 8014550:	1ad2      	subs	r2, r2, r3
 8014552:	0092      	lsls	r2, r2, #2
 8014554:	4413      	add	r3, r2
 8014556:	00db      	lsls	r3, r3, #3
 8014558:	b29b      	uxth	r3, r3
 801455a:	e001      	b.n	8014560 <dhcp_rebind+0x100>
 801455c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014560:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014562:	89fb      	ldrh	r3, [r7, #14]
 8014564:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014568:	4a0a      	ldr	r2, [pc, #40]	; (8014594 <dhcp_rebind+0x134>)
 801456a:	fb82 1203 	smull	r1, r2, r2, r3
 801456e:	1152      	asrs	r2, r2, #5
 8014570:	17db      	asrs	r3, r3, #31
 8014572:	1ad3      	subs	r3, r2, r3
 8014574:	b29a      	uxth	r2, r3
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801457a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801457e:	4618      	mov	r0, r3
 8014580:	3720      	adds	r7, #32
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	2000001c 	.word	0x2000001c
 801458c:	20008ad0 	.word	0x20008ad0
 8014590:	08026bb8 	.word	0x08026bb8
 8014594:	10624dd3 	.word	0x10624dd3

08014598 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014598:	b5b0      	push	{r4, r5, r7, lr}
 801459a:	b08a      	sub	sp, #40	; 0x28
 801459c:	af02      	add	r7, sp, #8
 801459e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80145a6:	2103      	movs	r1, #3
 80145a8:	69b8      	ldr	r0, [r7, #24]
 80145aa:	f000 f945 	bl	8014838 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80145ae:	f107 030c 	add.w	r3, r7, #12
 80145b2:	2203      	movs	r2, #3
 80145b4:	69b9      	ldr	r1, [r7, #24]
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f000 fdc8 	bl	801514c <dhcp_create_msg>
 80145bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d066      	beq.n	8014692 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80145ca:	89b8      	ldrh	r0, [r7, #12]
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145d2:	2302      	movs	r3, #2
 80145d4:	2239      	movs	r2, #57	; 0x39
 80145d6:	f000 f949 	bl	801486c <dhcp_option>
 80145da:	4603      	mov	r3, r0
 80145dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80145de:	89b8      	ldrh	r0, [r7, #12]
 80145e0:	693b      	ldr	r3, [r7, #16]
 80145e2:	33f0      	adds	r3, #240	; 0xf0
 80145e4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80145e8:	4619      	mov	r1, r3
 80145ea:	f000 f999 	bl	8014920 <dhcp_option_short>
 80145ee:	4603      	mov	r3, r0
 80145f0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80145f2:	89b8      	ldrh	r0, [r7, #12]
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145fa:	2304      	movs	r3, #4
 80145fc:	2232      	movs	r2, #50	; 0x32
 80145fe:	f000 f935 	bl	801486c <dhcp_option>
 8014602:	4603      	mov	r3, r0
 8014604:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014606:	89bc      	ldrh	r4, [r7, #12]
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801460e:	69bb      	ldr	r3, [r7, #24]
 8014610:	69db      	ldr	r3, [r3, #28]
 8014612:	4618      	mov	r0, r3
 8014614:	f7f6 faaf 	bl	800ab76 <lwip_htonl>
 8014618:	4603      	mov	r3, r0
 801461a:	461a      	mov	r2, r3
 801461c:	4629      	mov	r1, r5
 801461e:	4620      	mov	r0, r4
 8014620:	f000 f9b0 	bl	8014984 <dhcp_option_long>
 8014624:	4603      	mov	r3, r0
 8014626:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014628:	89b8      	ldrh	r0, [r7, #12]
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014630:	2303      	movs	r3, #3
 8014632:	2237      	movs	r2, #55	; 0x37
 8014634:	f000 f91a 	bl	801486c <dhcp_option>
 8014638:	4603      	mov	r3, r0
 801463a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801463c:	2300      	movs	r3, #0
 801463e:	77bb      	strb	r3, [r7, #30]
 8014640:	e00e      	b.n	8014660 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014642:	89b8      	ldrh	r0, [r7, #12]
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801464a:	7fbb      	ldrb	r3, [r7, #30]
 801464c:	4a29      	ldr	r2, [pc, #164]	; (80146f4 <dhcp_reboot+0x15c>)
 801464e:	5cd3      	ldrb	r3, [r2, r3]
 8014650:	461a      	mov	r2, r3
 8014652:	f000 f93f 	bl	80148d4 <dhcp_option_byte>
 8014656:	4603      	mov	r3, r0
 8014658:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801465a:	7fbb      	ldrb	r3, [r7, #30]
 801465c:	3301      	adds	r3, #1
 801465e:	77bb      	strb	r3, [r7, #30]
 8014660:	7fbb      	ldrb	r3, [r7, #30]
 8014662:	2b02      	cmp	r3, #2
 8014664:	d9ed      	bls.n	8014642 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014666:	89b8      	ldrh	r0, [r7, #12]
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	33f0      	adds	r3, #240	; 0xf0
 801466c:	697a      	ldr	r2, [r7, #20]
 801466e:	4619      	mov	r1, r3
 8014670:	f000 fe42 	bl	80152f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014674:	4b20      	ldr	r3, [pc, #128]	; (80146f8 <dhcp_reboot+0x160>)
 8014676:	6818      	ldr	r0, [r3, #0]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	9300      	str	r3, [sp, #0]
 801467c:	2343      	movs	r3, #67	; 0x43
 801467e:	4a1f      	ldr	r2, [pc, #124]	; (80146fc <dhcp_reboot+0x164>)
 8014680:	6979      	ldr	r1, [r7, #20]
 8014682:	f7fe fce5 	bl	8013050 <udp_sendto_if>
 8014686:	4603      	mov	r3, r0
 8014688:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801468a:	6978      	ldr	r0, [r7, #20]
 801468c:	f7f7 fe48 	bl	800c320 <pbuf_free>
 8014690:	e001      	b.n	8014696 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014692:	23ff      	movs	r3, #255	; 0xff
 8014694:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014696:	69bb      	ldr	r3, [r7, #24]
 8014698:	799b      	ldrb	r3, [r3, #6]
 801469a:	2bff      	cmp	r3, #255	; 0xff
 801469c:	d005      	beq.n	80146aa <dhcp_reboot+0x112>
    dhcp->tries++;
 801469e:	69bb      	ldr	r3, [r7, #24]
 80146a0:	799b      	ldrb	r3, [r3, #6]
 80146a2:	3301      	adds	r3, #1
 80146a4:	b2da      	uxtb	r2, r3
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	799b      	ldrb	r3, [r3, #6]
 80146ae:	2b09      	cmp	r3, #9
 80146b0:	d80a      	bhi.n	80146c8 <dhcp_reboot+0x130>
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	799b      	ldrb	r3, [r3, #6]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	461a      	mov	r2, r3
 80146ba:	0152      	lsls	r2, r2, #5
 80146bc:	1ad2      	subs	r2, r2, r3
 80146be:	0092      	lsls	r2, r2, #2
 80146c0:	4413      	add	r3, r2
 80146c2:	00db      	lsls	r3, r3, #3
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	e001      	b.n	80146cc <dhcp_reboot+0x134>
 80146c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80146cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80146ce:	89fb      	ldrh	r3, [r7, #14]
 80146d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80146d4:	4a0a      	ldr	r2, [pc, #40]	; (8014700 <dhcp_reboot+0x168>)
 80146d6:	fb82 1203 	smull	r1, r2, r2, r3
 80146da:	1152      	asrs	r2, r2, #5
 80146dc:	17db      	asrs	r3, r3, #31
 80146de:	1ad3      	subs	r3, r2, r3
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80146e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3720      	adds	r7, #32
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bdb0      	pop	{r4, r5, r7, pc}
 80146f2:	bf00      	nop
 80146f4:	2000001c 	.word	0x2000001c
 80146f8:	20008ad0 	.word	0x20008ad0
 80146fc:	08026bb8 	.word	0x08026bb8
 8014700:	10624dd3 	.word	0x10624dd3

08014704 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014704:	b5b0      	push	{r4, r5, r7, lr}
 8014706:	b08a      	sub	sp, #40	; 0x28
 8014708:	af02      	add	r7, sp, #8
 801470a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014710:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014712:	69fb      	ldr	r3, [r7, #28]
 8014714:	2b00      	cmp	r3, #0
 8014716:	f000 8084 	beq.w	8014822 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801471a:	69fb      	ldr	r3, [r7, #28]
 801471c:	795b      	ldrb	r3, [r3, #5]
 801471e:	2b00      	cmp	r3, #0
 8014720:	f000 8081 	beq.w	8014826 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	699b      	ldr	r3, [r3, #24]
 8014728:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	2200      	movs	r2, #0
 801472e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014730:	69fb      	ldr	r3, [r7, #28]
 8014732:	2200      	movs	r2, #0
 8014734:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	2200      	movs	r2, #0
 801473a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801473c:	69fb      	ldr	r3, [r7, #28]
 801473e:	2200      	movs	r2, #0
 8014740:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014742:	69fb      	ldr	r3, [r7, #28]
 8014744:	2200      	movs	r2, #0
 8014746:	631a      	str	r2, [r3, #48]	; 0x30
 8014748:	69fb      	ldr	r3, [r7, #28]
 801474a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014750:	69fb      	ldr	r3, [r7, #28]
 8014752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014754:	69fb      	ldr	r3, [r7, #28]
 8014756:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	2200      	movs	r2, #0
 801475c:	829a      	strh	r2, [r3, #20]
 801475e:	69fb      	ldr	r3, [r7, #28]
 8014760:	8a9a      	ldrh	r2, [r3, #20]
 8014762:	69fb      	ldr	r3, [r7, #28]
 8014764:	825a      	strh	r2, [r3, #18]
 8014766:	69fb      	ldr	r3, [r7, #28]
 8014768:	8a5a      	ldrh	r2, [r3, #18]
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	821a      	strh	r2, [r3, #16]
 801476e:	69fb      	ldr	r3, [r7, #28]
 8014770:	8a1a      	ldrh	r2, [r3, #16]
 8014772:	69fb      	ldr	r3, [r7, #28]
 8014774:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f000 fdec 	bl	8015354 <dhcp_supplied_address>
 801477c:	4603      	mov	r3, r0
 801477e:	2b00      	cmp	r3, #0
 8014780:	d03b      	beq.n	80147fa <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014782:	f107 030e 	add.w	r3, r7, #14
 8014786:	2207      	movs	r2, #7
 8014788:	69f9      	ldr	r1, [r7, #28]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fcde 	bl	801514c <dhcp_create_msg>
 8014790:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014792:	69bb      	ldr	r3, [r7, #24]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d030      	beq.n	80147fa <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	685b      	ldr	r3, [r3, #4]
 801479c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801479e:	89f8      	ldrh	r0, [r7, #14]
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147a6:	2304      	movs	r3, #4
 80147a8:	2236      	movs	r2, #54	; 0x36
 80147aa:	f000 f85f 	bl	801486c <dhcp_option>
 80147ae:	4603      	mov	r3, r0
 80147b0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80147b2:	89fc      	ldrh	r4, [r7, #14]
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80147ba:	693b      	ldr	r3, [r7, #16]
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f6 f9da 	bl	800ab76 <lwip_htonl>
 80147c2:	4603      	mov	r3, r0
 80147c4:	461a      	mov	r2, r3
 80147c6:	4629      	mov	r1, r5
 80147c8:	4620      	mov	r0, r4
 80147ca:	f000 f8db 	bl	8014984 <dhcp_option_long>
 80147ce:	4603      	mov	r3, r0
 80147d0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80147d2:	89f8      	ldrh	r0, [r7, #14]
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	33f0      	adds	r3, #240	; 0xf0
 80147d8:	69ba      	ldr	r2, [r7, #24]
 80147da:	4619      	mov	r1, r3
 80147dc:	f000 fd8c 	bl	80152f8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80147e0:	4b13      	ldr	r3, [pc, #76]	; (8014830 <dhcp_release_and_stop+0x12c>)
 80147e2:	6818      	ldr	r0, [r3, #0]
 80147e4:	f107 0210 	add.w	r2, r7, #16
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	9300      	str	r3, [sp, #0]
 80147ec:	2343      	movs	r3, #67	; 0x43
 80147ee:	69b9      	ldr	r1, [r7, #24]
 80147f0:	f7fe fc2e 	bl	8013050 <udp_sendto_if>
      pbuf_free(p_out);
 80147f4:	69b8      	ldr	r0, [r7, #24]
 80147f6:	f7f7 fd93 	bl	800c320 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80147fa:	4b0e      	ldr	r3, [pc, #56]	; (8014834 <dhcp_release_and_stop+0x130>)
 80147fc:	4a0d      	ldr	r2, [pc, #52]	; (8014834 <dhcp_release_and_stop+0x130>)
 80147fe:	490d      	ldr	r1, [pc, #52]	; (8014834 <dhcp_release_and_stop+0x130>)
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f7f7 f883 	bl	800b90c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014806:	2100      	movs	r1, #0
 8014808:	69f8      	ldr	r0, [r7, #28]
 801480a:	f000 f815 	bl	8014838 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	791b      	ldrb	r3, [r3, #4]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d008      	beq.n	8014828 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014816:	f7fe ff73 	bl	8013700 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	2200      	movs	r2, #0
 801481e:	711a      	strb	r2, [r3, #4]
 8014820:	e002      	b.n	8014828 <dhcp_release_and_stop+0x124>
    return;
 8014822:	bf00      	nop
 8014824:	e000      	b.n	8014828 <dhcp_release_and_stop+0x124>
    return;
 8014826:	bf00      	nop
  }
}
 8014828:	3720      	adds	r7, #32
 801482a:	46bd      	mov	sp, r7
 801482c:	bdb0      	pop	{r4, r5, r7, pc}
 801482e:	bf00      	nop
 8014830:	20008ad0 	.word	0x20008ad0
 8014834:	08026bb4 	.word	0x08026bb4

08014838 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014838:	b480      	push	{r7}
 801483a:	b083      	sub	sp, #12
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	460b      	mov	r3, r1
 8014842:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	795b      	ldrb	r3, [r3, #5]
 8014848:	78fa      	ldrb	r2, [r7, #3]
 801484a:	429a      	cmp	r2, r3
 801484c:	d008      	beq.n	8014860 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	78fa      	ldrb	r2, [r7, #3]
 8014852:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2200      	movs	r2, #0
 8014858:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2200      	movs	r2, #0
 801485e:	811a      	strh	r2, [r3, #8]
  }
}
 8014860:	bf00      	nop
 8014862:	370c      	adds	r7, #12
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr

0801486c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6039      	str	r1, [r7, #0]
 8014874:	4611      	mov	r1, r2
 8014876:	461a      	mov	r2, r3
 8014878:	4603      	mov	r3, r0
 801487a:	80fb      	strh	r3, [r7, #6]
 801487c:	460b      	mov	r3, r1
 801487e:	717b      	strb	r3, [r7, #5]
 8014880:	4613      	mov	r3, r2
 8014882:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014884:	88fa      	ldrh	r2, [r7, #6]
 8014886:	793b      	ldrb	r3, [r7, #4]
 8014888:	4413      	add	r3, r2
 801488a:	3302      	adds	r3, #2
 801488c:	2b44      	cmp	r3, #68	; 0x44
 801488e:	d906      	bls.n	801489e <dhcp_option+0x32>
 8014890:	4b0d      	ldr	r3, [pc, #52]	; (80148c8 <dhcp_option+0x5c>)
 8014892:	f240 529a 	movw	r2, #1434	; 0x59a
 8014896:	490d      	ldr	r1, [pc, #52]	; (80148cc <dhcp_option+0x60>)
 8014898:	480d      	ldr	r0, [pc, #52]	; (80148d0 <dhcp_option+0x64>)
 801489a:	f003 faa5 	bl	8017de8 <iprintf>
  options[options_out_len++] = option_type;
 801489e:	88fb      	ldrh	r3, [r7, #6]
 80148a0:	1c5a      	adds	r2, r3, #1
 80148a2:	80fa      	strh	r2, [r7, #6]
 80148a4:	461a      	mov	r2, r3
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	4413      	add	r3, r2
 80148aa:	797a      	ldrb	r2, [r7, #5]
 80148ac:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80148ae:	88fb      	ldrh	r3, [r7, #6]
 80148b0:	1c5a      	adds	r2, r3, #1
 80148b2:	80fa      	strh	r2, [r7, #6]
 80148b4:	461a      	mov	r2, r3
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	4413      	add	r3, r2
 80148ba:	793a      	ldrb	r2, [r7, #4]
 80148bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80148be:	88fb      	ldrh	r3, [r7, #6]
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3708      	adds	r7, #8
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	0801bedc 	.word	0x0801bedc
 80148cc:	0801c070 	.word	0x0801c070
 80148d0:	0801bf3c 	.word	0x0801bf3c

080148d4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	4603      	mov	r3, r0
 80148dc:	6039      	str	r1, [r7, #0]
 80148de:	80fb      	strh	r3, [r7, #6]
 80148e0:	4613      	mov	r3, r2
 80148e2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80148e4:	88fb      	ldrh	r3, [r7, #6]
 80148e6:	2b43      	cmp	r3, #67	; 0x43
 80148e8:	d906      	bls.n	80148f8 <dhcp_option_byte+0x24>
 80148ea:	4b0a      	ldr	r3, [pc, #40]	; (8014914 <dhcp_option_byte+0x40>)
 80148ec:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80148f0:	4909      	ldr	r1, [pc, #36]	; (8014918 <dhcp_option_byte+0x44>)
 80148f2:	480a      	ldr	r0, [pc, #40]	; (801491c <dhcp_option_byte+0x48>)
 80148f4:	f003 fa78 	bl	8017de8 <iprintf>
  options[options_out_len++] = value;
 80148f8:	88fb      	ldrh	r3, [r7, #6]
 80148fa:	1c5a      	adds	r2, r3, #1
 80148fc:	80fa      	strh	r2, [r7, #6]
 80148fe:	461a      	mov	r2, r3
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	4413      	add	r3, r2
 8014904:	797a      	ldrb	r2, [r7, #5]
 8014906:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014908:	88fb      	ldrh	r3, [r7, #6]
}
 801490a:	4618      	mov	r0, r3
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
 8014912:	bf00      	nop
 8014914:	0801bedc 	.word	0x0801bedc
 8014918:	0801c0b4 	.word	0x0801c0b4
 801491c:	0801bf3c 	.word	0x0801bf3c

08014920 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	4603      	mov	r3, r0
 8014928:	6039      	str	r1, [r7, #0]
 801492a:	80fb      	strh	r3, [r7, #6]
 801492c:	4613      	mov	r3, r2
 801492e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014930:	88fb      	ldrh	r3, [r7, #6]
 8014932:	3302      	adds	r3, #2
 8014934:	2b44      	cmp	r3, #68	; 0x44
 8014936:	d906      	bls.n	8014946 <dhcp_option_short+0x26>
 8014938:	4b0f      	ldr	r3, [pc, #60]	; (8014978 <dhcp_option_short+0x58>)
 801493a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801493e:	490f      	ldr	r1, [pc, #60]	; (801497c <dhcp_option_short+0x5c>)
 8014940:	480f      	ldr	r0, [pc, #60]	; (8014980 <dhcp_option_short+0x60>)
 8014942:	f003 fa51 	bl	8017de8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014946:	88bb      	ldrh	r3, [r7, #4]
 8014948:	0a1b      	lsrs	r3, r3, #8
 801494a:	b29a      	uxth	r2, r3
 801494c:	88fb      	ldrh	r3, [r7, #6]
 801494e:	1c59      	adds	r1, r3, #1
 8014950:	80f9      	strh	r1, [r7, #6]
 8014952:	4619      	mov	r1, r3
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	440b      	add	r3, r1
 8014958:	b2d2      	uxtb	r2, r2
 801495a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801495c:	88fb      	ldrh	r3, [r7, #6]
 801495e:	1c5a      	adds	r2, r3, #1
 8014960:	80fa      	strh	r2, [r7, #6]
 8014962:	461a      	mov	r2, r3
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	4413      	add	r3, r2
 8014968:	88ba      	ldrh	r2, [r7, #4]
 801496a:	b2d2      	uxtb	r2, r2
 801496c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801496e:	88fb      	ldrh	r3, [r7, #6]
}
 8014970:	4618      	mov	r0, r3
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	0801bedc 	.word	0x0801bedc
 801497c:	0801c0ec 	.word	0x0801c0ec
 8014980:	0801bf3c 	.word	0x0801bf3c

08014984 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	4603      	mov	r3, r0
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]
 8014990:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014992:	89fb      	ldrh	r3, [r7, #14]
 8014994:	3304      	adds	r3, #4
 8014996:	2b44      	cmp	r3, #68	; 0x44
 8014998:	d906      	bls.n	80149a8 <dhcp_option_long+0x24>
 801499a:	4b19      	ldr	r3, [pc, #100]	; (8014a00 <dhcp_option_long+0x7c>)
 801499c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80149a0:	4918      	ldr	r1, [pc, #96]	; (8014a04 <dhcp_option_long+0x80>)
 80149a2:	4819      	ldr	r0, [pc, #100]	; (8014a08 <dhcp_option_long+0x84>)
 80149a4:	f003 fa20 	bl	8017de8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	0e1a      	lsrs	r2, r3, #24
 80149ac:	89fb      	ldrh	r3, [r7, #14]
 80149ae:	1c59      	adds	r1, r3, #1
 80149b0:	81f9      	strh	r1, [r7, #14]
 80149b2:	4619      	mov	r1, r3
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	440b      	add	r3, r1
 80149b8:	b2d2      	uxtb	r2, r2
 80149ba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	0c1a      	lsrs	r2, r3, #16
 80149c0:	89fb      	ldrh	r3, [r7, #14]
 80149c2:	1c59      	adds	r1, r3, #1
 80149c4:	81f9      	strh	r1, [r7, #14]
 80149c6:	4619      	mov	r1, r3
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	440b      	add	r3, r1
 80149cc:	b2d2      	uxtb	r2, r2
 80149ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	0a1a      	lsrs	r2, r3, #8
 80149d4:	89fb      	ldrh	r3, [r7, #14]
 80149d6:	1c59      	adds	r1, r3, #1
 80149d8:	81f9      	strh	r1, [r7, #14]
 80149da:	4619      	mov	r1, r3
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	440b      	add	r3, r1
 80149e0:	b2d2      	uxtb	r2, r2
 80149e2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80149e4:	89fb      	ldrh	r3, [r7, #14]
 80149e6:	1c5a      	adds	r2, r3, #1
 80149e8:	81fa      	strh	r2, [r7, #14]
 80149ea:	461a      	mov	r2, r3
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	4413      	add	r3, r2
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	b2d2      	uxtb	r2, r2
 80149f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80149f6:	89fb      	ldrh	r3, [r7, #14]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3710      	adds	r7, #16
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	0801bedc 	.word	0x0801bedc
 8014a04:	0801c128 	.word	0x0801c128
 8014a08:	0801bf3c 	.word	0x0801bf3c

08014a0c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b090      	sub	sp, #64	; 0x40
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014a16:	2300      	movs	r3, #0
 8014a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014a1e:	2208      	movs	r2, #8
 8014a20:	2100      	movs	r1, #0
 8014a22:	48be      	ldr	r0, [pc, #760]	; (8014d1c <dhcp_parse_reply+0x310>)
 8014a24:	f003 f9d8 	bl	8017dd8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	895b      	ldrh	r3, [r3, #10]
 8014a2c:	2b2b      	cmp	r3, #43	; 0x2b
 8014a2e:	d802      	bhi.n	8014a36 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014a30:	f06f 0301 	mvn.w	r3, #1
 8014a34:	e2a8      	b.n	8014f88 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014a3c:	23f0      	movs	r3, #240	; 0xf0
 8014a3e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	891b      	ldrh	r3, [r3, #8]
 8014a44:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014a4a:	e00c      	b.n	8014a66 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4e:	895b      	ldrh	r3, [r3, #10]
 8014a50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014a52:	1ad3      	subs	r3, r2, r3
 8014a54:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a58:	895b      	ldrh	r3, [r3, #10]
 8014a5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d004      	beq.n	8014a76 <dhcp_parse_reply+0x6a>
 8014a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6e:	895b      	ldrh	r3, [r3, #10]
 8014a70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d2ea      	bcs.n	8014a4c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d102      	bne.n	8014a82 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014a7c:	f06f 0301 	mvn.w	r3, #1
 8014a80:	e282      	b.n	8014f88 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014a82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a84:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014a86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014a88:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8c:	685b      	ldr	r3, [r3, #4]
 8014a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014a90:	e23a      	b.n	8014f08 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014a92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a96:	4413      	add	r3, r2
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014aa8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014aaa:	3302      	adds	r3, #2
 8014aac:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014aae:	8bfa      	ldrh	r2, [r7, #30]
 8014ab0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d202      	bcs.n	8014abc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014ab6:	f06f 0301 	mvn.w	r3, #1
 8014aba:	e265      	b.n	8014f88 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014abc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014abe:	3301      	adds	r3, #1
 8014ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ac2:	8952      	ldrh	r2, [r2, #10]
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	da07      	bge.n	8014ad8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014ac8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014aca:	3301      	adds	r3, #1
 8014acc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ace:	4413      	add	r3, r2
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ad6:	e00b      	b.n	8014af0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d004      	beq.n	8014aea <dhcp_parse_reply+0xde>
 8014ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	e000      	b.n	8014aec <dhcp_parse_reply+0xe0>
 8014aea:	2300      	movs	r3, #0
 8014aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014af8:	7dfb      	ldrb	r3, [r7, #23]
 8014afa:	2b3b      	cmp	r3, #59	; 0x3b
 8014afc:	f200 812d 	bhi.w	8014d5a <dhcp_parse_reply+0x34e>
 8014b00:	a201      	add	r2, pc, #4	; (adr r2, 8014b08 <dhcp_parse_reply+0xfc>)
 8014b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b06:	bf00      	nop
 8014b08:	08014bf9 	.word	0x08014bf9
 8014b0c:	08014c09 	.word	0x08014c09
 8014b10:	08014d5b 	.word	0x08014d5b
 8014b14:	08014c2b 	.word	0x08014c2b
 8014b18:	08014d5b 	.word	0x08014d5b
 8014b1c:	08014d5b 	.word	0x08014d5b
 8014b20:	08014d5b 	.word	0x08014d5b
 8014b24:	08014d5b 	.word	0x08014d5b
 8014b28:	08014d5b 	.word	0x08014d5b
 8014b2c:	08014d5b 	.word	0x08014d5b
 8014b30:	08014d5b 	.word	0x08014d5b
 8014b34:	08014d5b 	.word	0x08014d5b
 8014b38:	08014d5b 	.word	0x08014d5b
 8014b3c:	08014d5b 	.word	0x08014d5b
 8014b40:	08014d5b 	.word	0x08014d5b
 8014b44:	08014d5b 	.word	0x08014d5b
 8014b48:	08014d5b 	.word	0x08014d5b
 8014b4c:	08014d5b 	.word	0x08014d5b
 8014b50:	08014d5b 	.word	0x08014d5b
 8014b54:	08014d5b 	.word	0x08014d5b
 8014b58:	08014d5b 	.word	0x08014d5b
 8014b5c:	08014d5b 	.word	0x08014d5b
 8014b60:	08014d5b 	.word	0x08014d5b
 8014b64:	08014d5b 	.word	0x08014d5b
 8014b68:	08014d5b 	.word	0x08014d5b
 8014b6c:	08014d5b 	.word	0x08014d5b
 8014b70:	08014d5b 	.word	0x08014d5b
 8014b74:	08014d5b 	.word	0x08014d5b
 8014b78:	08014d5b 	.word	0x08014d5b
 8014b7c:	08014d5b 	.word	0x08014d5b
 8014b80:	08014d5b 	.word	0x08014d5b
 8014b84:	08014d5b 	.word	0x08014d5b
 8014b88:	08014d5b 	.word	0x08014d5b
 8014b8c:	08014d5b 	.word	0x08014d5b
 8014b90:	08014d5b 	.word	0x08014d5b
 8014b94:	08014d5b 	.word	0x08014d5b
 8014b98:	08014d5b 	.word	0x08014d5b
 8014b9c:	08014d5b 	.word	0x08014d5b
 8014ba0:	08014d5b 	.word	0x08014d5b
 8014ba4:	08014d5b 	.word	0x08014d5b
 8014ba8:	08014d5b 	.word	0x08014d5b
 8014bac:	08014d5b 	.word	0x08014d5b
 8014bb0:	08014d5b 	.word	0x08014d5b
 8014bb4:	08014d5b 	.word	0x08014d5b
 8014bb8:	08014d5b 	.word	0x08014d5b
 8014bbc:	08014d5b 	.word	0x08014d5b
 8014bc0:	08014d5b 	.word	0x08014d5b
 8014bc4:	08014d5b 	.word	0x08014d5b
 8014bc8:	08014d5b 	.word	0x08014d5b
 8014bcc:	08014d5b 	.word	0x08014d5b
 8014bd0:	08014d5b 	.word	0x08014d5b
 8014bd4:	08014c57 	.word	0x08014c57
 8014bd8:	08014c79 	.word	0x08014c79
 8014bdc:	08014cb5 	.word	0x08014cb5
 8014be0:	08014cd7 	.word	0x08014cd7
 8014be4:	08014d5b 	.word	0x08014d5b
 8014be8:	08014d5b 	.word	0x08014d5b
 8014bec:	08014d5b 	.word	0x08014d5b
 8014bf0:	08014cf9 	.word	0x08014cf9
 8014bf4:	08014d39 	.word	0x08014d39
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014c06:	e0ac      	b.n	8014d62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c0c:	2b04      	cmp	r3, #4
 8014c0e:	d009      	beq.n	8014c24 <dhcp_parse_reply+0x218>
 8014c10:	4b43      	ldr	r3, [pc, #268]	; (8014d20 <dhcp_parse_reply+0x314>)
 8014c12:	f240 622e 	movw	r2, #1582	; 0x62e
 8014c16:	4943      	ldr	r1, [pc, #268]	; (8014d24 <dhcp_parse_reply+0x318>)
 8014c18:	4843      	ldr	r0, [pc, #268]	; (8014d28 <dhcp_parse_reply+0x31c>)
 8014c1a:	f003 f8e5 	bl	8017de8 <iprintf>
 8014c1e:	f06f 0305 	mvn.w	r3, #5
 8014c22:	e1b1      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014c24:	2306      	movs	r3, #6
 8014c26:	623b      	str	r3, [r7, #32]
        break;
 8014c28:	e09b      	b.n	8014d62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014c2a:	2304      	movs	r3, #4
 8014c2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014c30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d209      	bcs.n	8014c50 <dhcp_parse_reply+0x244>
 8014c3c:	4b38      	ldr	r3, [pc, #224]	; (8014d20 <dhcp_parse_reply+0x314>)
 8014c3e:	f240 6233 	movw	r2, #1587	; 0x633
 8014c42:	493a      	ldr	r1, [pc, #232]	; (8014d2c <dhcp_parse_reply+0x320>)
 8014c44:	4838      	ldr	r0, [pc, #224]	; (8014d28 <dhcp_parse_reply+0x31c>)
 8014c46:	f003 f8cf 	bl	8017de8 <iprintf>
 8014c4a:	f06f 0305 	mvn.w	r3, #5
 8014c4e:	e19b      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014c50:	2307      	movs	r3, #7
 8014c52:	623b      	str	r3, [r7, #32]
        break;
 8014c54:	e085      	b.n	8014d62 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c5a:	2b04      	cmp	r3, #4
 8014c5c:	d009      	beq.n	8014c72 <dhcp_parse_reply+0x266>
 8014c5e:	4b30      	ldr	r3, [pc, #192]	; (8014d20 <dhcp_parse_reply+0x314>)
 8014c60:	f240 6241 	movw	r2, #1601	; 0x641
 8014c64:	492f      	ldr	r1, [pc, #188]	; (8014d24 <dhcp_parse_reply+0x318>)
 8014c66:	4830      	ldr	r0, [pc, #192]	; (8014d28 <dhcp_parse_reply+0x31c>)
 8014c68:	f003 f8be 	bl	8017de8 <iprintf>
 8014c6c:	f06f 0305 	mvn.w	r3, #5
 8014c70:	e18a      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014c72:	2303      	movs	r3, #3
 8014c74:	623b      	str	r3, [r7, #32]
        break;
 8014c76:	e074      	b.n	8014d62 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c7c:	2b01      	cmp	r3, #1
 8014c7e:	d009      	beq.n	8014c94 <dhcp_parse_reply+0x288>
 8014c80:	4b27      	ldr	r3, [pc, #156]	; (8014d20 <dhcp_parse_reply+0x314>)
 8014c82:	f240 624f 	movw	r2, #1615	; 0x64f
 8014c86:	492a      	ldr	r1, [pc, #168]	; (8014d30 <dhcp_parse_reply+0x324>)
 8014c88:	4827      	ldr	r0, [pc, #156]	; (8014d28 <dhcp_parse_reply+0x31c>)
 8014c8a:	f003 f8ad 	bl	8017de8 <iprintf>
 8014c8e:	f06f 0305 	mvn.w	r3, #5
 8014c92:	e179      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014c94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014c96:	2bf0      	cmp	r3, #240	; 0xf0
 8014c98:	d009      	beq.n	8014cae <dhcp_parse_reply+0x2a2>
 8014c9a:	4b21      	ldr	r3, [pc, #132]	; (8014d20 <dhcp_parse_reply+0x314>)
 8014c9c:	f240 6251 	movw	r2, #1617	; 0x651
 8014ca0:	4924      	ldr	r1, [pc, #144]	; (8014d34 <dhcp_parse_reply+0x328>)
 8014ca2:	4821      	ldr	r0, [pc, #132]	; (8014d28 <dhcp_parse_reply+0x31c>)
 8014ca4:	f003 f8a0 	bl	8017de8 <iprintf>
 8014ca8:	f06f 0305 	mvn.w	r3, #5
 8014cac:	e16c      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	623b      	str	r3, [r7, #32]
        break;
 8014cb2:	e056      	b.n	8014d62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cb8:	2b01      	cmp	r3, #1
 8014cba:	d009      	beq.n	8014cd0 <dhcp_parse_reply+0x2c4>
 8014cbc:	4b18      	ldr	r3, [pc, #96]	; (8014d20 <dhcp_parse_reply+0x314>)
 8014cbe:	f240 6255 	movw	r2, #1621	; 0x655
 8014cc2:	491b      	ldr	r1, [pc, #108]	; (8014d30 <dhcp_parse_reply+0x324>)
 8014cc4:	4818      	ldr	r0, [pc, #96]	; (8014d28 <dhcp_parse_reply+0x31c>)
 8014cc6:	f003 f88f 	bl	8017de8 <iprintf>
 8014cca:	f06f 0305 	mvn.w	r3, #5
 8014cce:	e15b      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	623b      	str	r3, [r7, #32]
        break;
 8014cd4:	e045      	b.n	8014d62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cda:	2b04      	cmp	r3, #4
 8014cdc:	d009      	beq.n	8014cf2 <dhcp_parse_reply+0x2e6>
 8014cde:	4b10      	ldr	r3, [pc, #64]	; (8014d20 <dhcp_parse_reply+0x314>)
 8014ce0:	f240 6259 	movw	r2, #1625	; 0x659
 8014ce4:	490f      	ldr	r1, [pc, #60]	; (8014d24 <dhcp_parse_reply+0x318>)
 8014ce6:	4810      	ldr	r0, [pc, #64]	; (8014d28 <dhcp_parse_reply+0x31c>)
 8014ce8:	f003 f87e 	bl	8017de8 <iprintf>
 8014cec:	f06f 0305 	mvn.w	r3, #5
 8014cf0:	e14a      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014cf2:	2302      	movs	r3, #2
 8014cf4:	623b      	str	r3, [r7, #32]
        break;
 8014cf6:	e034      	b.n	8014d62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cfc:	2b04      	cmp	r3, #4
 8014cfe:	d009      	beq.n	8014d14 <dhcp_parse_reply+0x308>
 8014d00:	4b07      	ldr	r3, [pc, #28]	; (8014d20 <dhcp_parse_reply+0x314>)
 8014d02:	f240 625d 	movw	r2, #1629	; 0x65d
 8014d06:	4907      	ldr	r1, [pc, #28]	; (8014d24 <dhcp_parse_reply+0x318>)
 8014d08:	4807      	ldr	r0, [pc, #28]	; (8014d28 <dhcp_parse_reply+0x31c>)
 8014d0a:	f003 f86d 	bl	8017de8 <iprintf>
 8014d0e:	f06f 0305 	mvn.w	r3, #5
 8014d12:	e139      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014d14:	2304      	movs	r3, #4
 8014d16:	623b      	str	r3, [r7, #32]
        break;
 8014d18:	e023      	b.n	8014d62 <dhcp_parse_reply+0x356>
 8014d1a:	bf00      	nop
 8014d1c:	2000f530 	.word	0x2000f530
 8014d20:	0801bedc 	.word	0x0801bedc
 8014d24:	0801c164 	.word	0x0801c164
 8014d28:	0801bf3c 	.word	0x0801bf3c
 8014d2c:	0801c170 	.word	0x0801c170
 8014d30:	0801c184 	.word	0x0801c184
 8014d34:	0801c190 	.word	0x0801c190
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d3c:	2b04      	cmp	r3, #4
 8014d3e:	d009      	beq.n	8014d54 <dhcp_parse_reply+0x348>
 8014d40:	4b93      	ldr	r3, [pc, #588]	; (8014f90 <dhcp_parse_reply+0x584>)
 8014d42:	f240 6261 	movw	r2, #1633	; 0x661
 8014d46:	4993      	ldr	r1, [pc, #588]	; (8014f94 <dhcp_parse_reply+0x588>)
 8014d48:	4893      	ldr	r0, [pc, #588]	; (8014f98 <dhcp_parse_reply+0x58c>)
 8014d4a:	f003 f84d 	bl	8017de8 <iprintf>
 8014d4e:	f06f 0305 	mvn.w	r3, #5
 8014d52:	e119      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014d54:	2305      	movs	r3, #5
 8014d56:	623b      	str	r3, [r7, #32]
        break;
 8014d58:	e003      	b.n	8014d62 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014d60:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014d62:	7dfb      	ldrb	r3, [r7, #23]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d103      	bne.n	8014d70 <dhcp_parse_reply+0x364>
      offset++;
 8014d68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014d6e:	e0a1      	b.n	8014eb4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014d70:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d76:	4413      	add	r3, r2
 8014d78:	3302      	adds	r3, #2
 8014d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d7e:	db02      	blt.n	8014d86 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8014d80:	f06f 0301 	mvn.w	r3, #1
 8014d84:	e100      	b.n	8014f88 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d8e:	4413      	add	r3, r2
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	3302      	adds	r3, #2
 8014d94:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	f000 808a 	beq.w	8014eb4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014da0:	2300      	movs	r3, #0
 8014da2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014da4:	6a3b      	ldr	r3, [r7, #32]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	db02      	blt.n	8014db0 <dhcp_parse_reply+0x3a4>
 8014daa:	6a3b      	ldr	r3, [r7, #32]
 8014dac:	2b07      	cmp	r3, #7
 8014dae:	dd06      	ble.n	8014dbe <dhcp_parse_reply+0x3b2>
 8014db0:	4b77      	ldr	r3, [pc, #476]	; (8014f90 <dhcp_parse_reply+0x584>)
 8014db2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014db6:	4979      	ldr	r1, [pc, #484]	; (8014f9c <dhcp_parse_reply+0x590>)
 8014db8:	4877      	ldr	r0, [pc, #476]	; (8014f98 <dhcp_parse_reply+0x58c>)
 8014dba:	f003 f815 	bl	8017de8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014dbe:	4a78      	ldr	r2, [pc, #480]	; (8014fa0 <dhcp_parse_reply+0x594>)
 8014dc0:	6a3b      	ldr	r3, [r7, #32]
 8014dc2:	4413      	add	r3, r2
 8014dc4:	781b      	ldrb	r3, [r3, #0]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d174      	bne.n	8014eb4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8014dca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014dce:	2b04      	cmp	r3, #4
 8014dd0:	bf28      	it	cs
 8014dd2:	2304      	movcs	r3, #4
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014dd8:	8bfb      	ldrh	r3, [r7, #30]
 8014dda:	8aba      	ldrh	r2, [r7, #20]
 8014ddc:	f107 0108 	add.w	r1, r7, #8
 8014de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014de2:	f7f7 fca3 	bl	800c72c <pbuf_copy_partial>
 8014de6:	4603      	mov	r3, r0
 8014de8:	461a      	mov	r2, r3
 8014dea:	8abb      	ldrh	r3, [r7, #20]
 8014dec:	4293      	cmp	r3, r2
 8014dee:	d002      	beq.n	8014df6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8014df0:	f06f 0301 	mvn.w	r3, #1
 8014df4:	e0c8      	b.n	8014f88 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8014df6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014dfa:	2b04      	cmp	r3, #4
 8014dfc:	d933      	bls.n	8014e66 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014dfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e02:	f003 0303 	and.w	r3, r3, #3
 8014e06:	b2db      	uxtb	r3, r3
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d009      	beq.n	8014e20 <dhcp_parse_reply+0x414>
 8014e0c:	4b60      	ldr	r3, [pc, #384]	; (8014f90 <dhcp_parse_reply+0x584>)
 8014e0e:	f240 6281 	movw	r2, #1665	; 0x681
 8014e12:	4964      	ldr	r1, [pc, #400]	; (8014fa4 <dhcp_parse_reply+0x598>)
 8014e14:	4860      	ldr	r0, [pc, #384]	; (8014f98 <dhcp_parse_reply+0x58c>)
 8014e16:	f002 ffe7 	bl	8017de8 <iprintf>
 8014e1a:	f06f 0305 	mvn.w	r3, #5
 8014e1e:	e0b3      	b.n	8014f88 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014e20:	4a5f      	ldr	r2, [pc, #380]	; (8014fa0 <dhcp_parse_reply+0x594>)
 8014e22:	6a3b      	ldr	r3, [r7, #32]
 8014e24:	4413      	add	r3, r2
 8014e26:	2201      	movs	r2, #1
 8014e28:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f5 fea2 	bl	800ab76 <lwip_htonl>
 8014e32:	4601      	mov	r1, r0
 8014e34:	4a5c      	ldr	r2, [pc, #368]	; (8014fa8 <dhcp_parse_reply+0x59c>)
 8014e36:	6a3b      	ldr	r3, [r7, #32]
 8014e38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e40:	3b04      	subs	r3, #4
 8014e42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014e46:	8bfb      	ldrh	r3, [r7, #30]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014e4c:	8a7a      	ldrh	r2, [r7, #18]
 8014e4e:	8bfb      	ldrh	r3, [r7, #30]
 8014e50:	429a      	cmp	r2, r3
 8014e52:	d202      	bcs.n	8014e5a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014e54:	f06f 0301 	mvn.w	r3, #1
 8014e58:	e096      	b.n	8014f88 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014e5a:	8a7b      	ldrh	r3, [r7, #18]
 8014e5c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014e5e:	6a3b      	ldr	r3, [r7, #32]
 8014e60:	3301      	adds	r3, #1
 8014e62:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014e64:	e79e      	b.n	8014da4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014e66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e6a:	2b04      	cmp	r3, #4
 8014e6c:	d106      	bne.n	8014e7c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7f5 fe80 	bl	800ab76 <lwip_htonl>
 8014e76:	4603      	mov	r3, r0
 8014e78:	60bb      	str	r3, [r7, #8]
 8014e7a:	e011      	b.n	8014ea0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d009      	beq.n	8014e98 <dhcp_parse_reply+0x48c>
 8014e84:	4b42      	ldr	r3, [pc, #264]	; (8014f90 <dhcp_parse_reply+0x584>)
 8014e86:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014e8a:	4948      	ldr	r1, [pc, #288]	; (8014fac <dhcp_parse_reply+0x5a0>)
 8014e8c:	4842      	ldr	r0, [pc, #264]	; (8014f98 <dhcp_parse_reply+0x58c>)
 8014e8e:	f002 ffab 	bl	8017de8 <iprintf>
 8014e92:	f06f 0305 	mvn.w	r3, #5
 8014e96:	e077      	b.n	8014f88 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014e98:	f107 0308 	add.w	r3, r7, #8
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014ea0:	4a3f      	ldr	r2, [pc, #252]	; (8014fa0 <dhcp_parse_reply+0x594>)
 8014ea2:	6a3b      	ldr	r3, [r7, #32]
 8014ea4:	4413      	add	r3, r2
 8014ea6:	2201      	movs	r2, #1
 8014ea8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014eaa:	68ba      	ldr	r2, [r7, #8]
 8014eac:	493e      	ldr	r1, [pc, #248]	; (8014fa8 <dhcp_parse_reply+0x59c>)
 8014eae:	6a3b      	ldr	r3, [r7, #32]
 8014eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eb6:	895b      	ldrh	r3, [r3, #10]
 8014eb8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d324      	bcc.n	8014f08 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8014ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec0:	895b      	ldrh	r3, [r3, #10]
 8014ec2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ec4:	1ad3      	subs	r3, r2, r3
 8014ec6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eca:	895b      	ldrh	r3, [r3, #10]
 8014ecc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014ece:	1ad3      	subs	r3, r2, r3
 8014ed0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014ed2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ed4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d213      	bcs.n	8014f02 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8014eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d109      	bne.n	8014efa <dhcp_parse_reply+0x4ee>
 8014ee6:	4b2a      	ldr	r3, [pc, #168]	; (8014f90 <dhcp_parse_reply+0x584>)
 8014ee8:	f240 629d 	movw	r2, #1693	; 0x69d
 8014eec:	4930      	ldr	r1, [pc, #192]	; (8014fb0 <dhcp_parse_reply+0x5a4>)
 8014eee:	482a      	ldr	r0, [pc, #168]	; (8014f98 <dhcp_parse_reply+0x58c>)
 8014ef0:	f002 ff7a 	bl	8017de8 <iprintf>
 8014ef4:	f06f 0305 	mvn.w	r3, #5
 8014ef8:	e046      	b.n	8014f88 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8014efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014f00:	e002      	b.n	8014f08 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014f02:	f06f 0301 	mvn.w	r3, #1
 8014f06:	e03f      	b.n	8014f88 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d00a      	beq.n	8014f24 <dhcp_parse_reply+0x518>
 8014f0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014f10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d206      	bcs.n	8014f24 <dhcp_parse_reply+0x518>
 8014f16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f1a:	4413      	add	r3, r2
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	2bff      	cmp	r3, #255	; 0xff
 8014f20:	f47f adb7 	bne.w	8014a92 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014f24:	4b1e      	ldr	r3, [pc, #120]	; (8014fa0 <dhcp_parse_reply+0x594>)
 8014f26:	781b      	ldrb	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d018      	beq.n	8014f5e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014f2c:	4b1e      	ldr	r3, [pc, #120]	; (8014fa8 <dhcp_parse_reply+0x59c>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014f32:	4b1b      	ldr	r3, [pc, #108]	; (8014fa0 <dhcp_parse_reply+0x594>)
 8014f34:	2200      	movs	r2, #0
 8014f36:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2b01      	cmp	r3, #1
 8014f3c:	d102      	bne.n	8014f44 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8014f3e:	2301      	movs	r3, #1
 8014f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f42:	e00c      	b.n	8014f5e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2b02      	cmp	r3, #2
 8014f48:	d102      	bne.n	8014f50 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f4e:	e006      	b.n	8014f5e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2b03      	cmp	r3, #3
 8014f54:	d103      	bne.n	8014f5e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014f56:	2301      	movs	r3, #1
 8014f58:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d006      	beq.n	8014f72 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014f64:	2300      	movs	r3, #0
 8014f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014f68:	236c      	movs	r3, #108	; 0x6c
 8014f6a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014f6c:	23ec      	movs	r3, #236	; 0xec
 8014f6e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014f70:	e569      	b.n	8014a46 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d006      	beq.n	8014f86 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014f7c:	232c      	movs	r3, #44	; 0x2c
 8014f7e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014f80:	236c      	movs	r3, #108	; 0x6c
 8014f82:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014f84:	e55f      	b.n	8014a46 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014f86:	2300      	movs	r3, #0
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	3740      	adds	r7, #64	; 0x40
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	0801bedc 	.word	0x0801bedc
 8014f94:	0801c164 	.word	0x0801c164
 8014f98:	0801bf3c 	.word	0x0801bf3c
 8014f9c:	0801c1a8 	.word	0x0801c1a8
 8014fa0:	2000f530 	.word	0x2000f530
 8014fa4:	0801c1bc 	.word	0x0801c1bc
 8014fa8:	2000f538 	.word	0x2000f538
 8014fac:	0801c1d4 	.word	0x0801c1d4
 8014fb0:	0801c1e8 	.word	0x0801c1e8

08014fb4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b08a      	sub	sp, #40	; 0x28
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
 8014fc0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014fc2:	4b5f      	ldr	r3, [pc, #380]	; (8015140 <dhcp_recv+0x18c>)
 8014fc4:	685b      	ldr	r3, [r3, #4]
 8014fc6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fc8:	6a3b      	ldr	r3, [r7, #32]
 8014fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fcc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	685b      	ldr	r3, [r3, #4]
 8014fd2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	f000 809d 	beq.w	8015116 <dhcp_recv+0x162>
 8014fdc:	69fb      	ldr	r3, [r7, #28]
 8014fde:	791b      	ldrb	r3, [r3, #4]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	f000 8098 	beq.w	8015116 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	895b      	ldrh	r3, [r3, #10]
 8014fea:	2b2b      	cmp	r3, #43	; 0x2b
 8014fec:	f240 8095 	bls.w	801511a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014ff0:	69bb      	ldr	r3, [r7, #24]
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	2b02      	cmp	r3, #2
 8014ff6:	f040 8092 	bne.w	801511e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015000:	e012      	b.n	8015028 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015006:	6a3a      	ldr	r2, [r7, #32]
 8015008:	4413      	add	r3, r2
 801500a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801500e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015012:	69b9      	ldr	r1, [r7, #24]
 8015014:	440b      	add	r3, r1
 8015016:	7f1b      	ldrb	r3, [r3, #28]
 8015018:	429a      	cmp	r2, r3
 801501a:	f040 8082 	bne.w	8015122 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801501e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015022:	3301      	adds	r3, #1
 8015024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015028:	6a3b      	ldr	r3, [r7, #32]
 801502a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801502e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015032:	429a      	cmp	r2, r3
 8015034:	d203      	bcs.n	801503e <dhcp_recv+0x8a>
 8015036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801503a:	2b05      	cmp	r3, #5
 801503c:	d9e1      	bls.n	8015002 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801503e:	69bb      	ldr	r3, [r7, #24]
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	4618      	mov	r0, r3
 8015044:	f7f5 fd97 	bl	800ab76 <lwip_htonl>
 8015048:	4602      	mov	r2, r0
 801504a:	69fb      	ldr	r3, [r7, #28]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	429a      	cmp	r2, r3
 8015050:	d169      	bne.n	8015126 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015052:	69f9      	ldr	r1, [r7, #28]
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f7ff fcd9 	bl	8014a0c <dhcp_parse_reply>
 801505a:	4603      	mov	r3, r0
 801505c:	2b00      	cmp	r3, #0
 801505e:	d164      	bne.n	801512a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015060:	4b38      	ldr	r3, [pc, #224]	; (8015144 <dhcp_recv+0x190>)
 8015062:	785b      	ldrb	r3, [r3, #1]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d062      	beq.n	801512e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	685b      	ldr	r3, [r3, #4]
 801506c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801506e:	4b36      	ldr	r3, [pc, #216]	; (8015148 <dhcp_recv+0x194>)
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015074:	7cfb      	ldrb	r3, [r7, #19]
 8015076:	2b05      	cmp	r3, #5
 8015078:	d12a      	bne.n	80150d0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801507a:	69fb      	ldr	r3, [r7, #28]
 801507c:	795b      	ldrb	r3, [r3, #5]
 801507e:	2b01      	cmp	r3, #1
 8015080:	d112      	bne.n	80150a8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015082:	6979      	ldr	r1, [r7, #20]
 8015084:	6a38      	ldr	r0, [r7, #32]
 8015086:	f7fe fe05 	bl	8013c94 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801508a:	6a3b      	ldr	r3, [r7, #32]
 801508c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015090:	f003 0308 	and.w	r3, r3, #8
 8015094:	2b00      	cmp	r3, #0
 8015096:	d003      	beq.n	80150a0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015098:	6a38      	ldr	r0, [r7, #32]
 801509a:	f7fe fb75 	bl	8013788 <dhcp_check>
 801509e:	e047      	b.n	8015130 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80150a0:	6a38      	ldr	r0, [r7, #32]
 80150a2:	f7ff f867 	bl	8014174 <dhcp_bind>
 80150a6:	e043      	b.n	8015130 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	795b      	ldrb	r3, [r3, #5]
 80150ac:	2b03      	cmp	r3, #3
 80150ae:	d007      	beq.n	80150c0 <dhcp_recv+0x10c>
 80150b0:	69fb      	ldr	r3, [r7, #28]
 80150b2:	795b      	ldrb	r3, [r3, #5]
 80150b4:	2b04      	cmp	r3, #4
 80150b6:	d003      	beq.n	80150c0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80150b8:	69fb      	ldr	r3, [r7, #28]
 80150ba:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80150bc:	2b05      	cmp	r3, #5
 80150be:	d137      	bne.n	8015130 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 80150c0:	6979      	ldr	r1, [r7, #20]
 80150c2:	6a38      	ldr	r0, [r7, #32]
 80150c4:	f7fe fde6 	bl	8013c94 <dhcp_handle_ack>
      dhcp_bind(netif);
 80150c8:	6a38      	ldr	r0, [r7, #32]
 80150ca:	f7ff f853 	bl	8014174 <dhcp_bind>
 80150ce:	e02f      	b.n	8015130 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80150d0:	7cfb      	ldrb	r3, [r7, #19]
 80150d2:	2b06      	cmp	r3, #6
 80150d4:	d113      	bne.n	80150fe <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80150d6:	69fb      	ldr	r3, [r7, #28]
 80150d8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80150da:	2b03      	cmp	r3, #3
 80150dc:	d00b      	beq.n	80150f6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80150de:	69fb      	ldr	r3, [r7, #28]
 80150e0:	795b      	ldrb	r3, [r3, #5]
 80150e2:	2b01      	cmp	r3, #1
 80150e4:	d007      	beq.n	80150f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80150ea:	2b04      	cmp	r3, #4
 80150ec:	d003      	beq.n	80150f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80150ee:	69fb      	ldr	r3, [r7, #28]
 80150f0:	795b      	ldrb	r3, [r3, #5]
 80150f2:	2b05      	cmp	r3, #5
 80150f4:	d103      	bne.n	80150fe <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80150f6:	6a38      	ldr	r0, [r7, #32]
 80150f8:	f7fe fb2c 	bl	8013754 <dhcp_handle_nak>
 80150fc:	e018      	b.n	8015130 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80150fe:	7cfb      	ldrb	r3, [r7, #19]
 8015100:	2b02      	cmp	r3, #2
 8015102:	d108      	bne.n	8015116 <dhcp_recv+0x162>
 8015104:	69fb      	ldr	r3, [r7, #28]
 8015106:	795b      	ldrb	r3, [r3, #5]
 8015108:	2b06      	cmp	r3, #6
 801510a:	d104      	bne.n	8015116 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801510c:	6979      	ldr	r1, [r7, #20]
 801510e:	6a38      	ldr	r0, [r7, #32]
 8015110:	f7fe fb6e 	bl	80137f0 <dhcp_handle_offer>
 8015114:	e00c      	b.n	8015130 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8015116:	bf00      	nop
 8015118:	e00a      	b.n	8015130 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801511a:	bf00      	nop
 801511c:	e008      	b.n	8015130 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801511e:	bf00      	nop
 8015120:	e006      	b.n	8015130 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8015122:	bf00      	nop
 8015124:	e004      	b.n	8015130 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015126:	bf00      	nop
 8015128:	e002      	b.n	8015130 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801512a:	bf00      	nop
 801512c:	e000      	b.n	8015130 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801512e:	bf00      	nop
  pbuf_free(p);
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f7f7 f8f5 	bl	800c320 <pbuf_free>
}
 8015136:	bf00      	nop
 8015138:	3728      	adds	r7, #40	; 0x28
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	2000bde0 	.word	0x2000bde0
 8015144:	2000f530 	.word	0x2000f530
 8015148:	2000f538 	.word	0x2000f538

0801514c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b088      	sub	sp, #32
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	603b      	str	r3, [r7, #0]
 8015158:	4613      	mov	r3, r2
 801515a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d108      	bne.n	8015174 <dhcp_create_msg+0x28>
 8015162:	4b5f      	ldr	r3, [pc, #380]	; (80152e0 <dhcp_create_msg+0x194>)
 8015164:	f240 7269 	movw	r2, #1897	; 0x769
 8015168:	495e      	ldr	r1, [pc, #376]	; (80152e4 <dhcp_create_msg+0x198>)
 801516a:	485f      	ldr	r0, [pc, #380]	; (80152e8 <dhcp_create_msg+0x19c>)
 801516c:	f002 fe3c 	bl	8017de8 <iprintf>
 8015170:	2300      	movs	r3, #0
 8015172:	e0b1      	b.n	80152d8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d108      	bne.n	801518c <dhcp_create_msg+0x40>
 801517a:	4b59      	ldr	r3, [pc, #356]	; (80152e0 <dhcp_create_msg+0x194>)
 801517c:	f240 726a 	movw	r2, #1898	; 0x76a
 8015180:	495a      	ldr	r1, [pc, #360]	; (80152ec <dhcp_create_msg+0x1a0>)
 8015182:	4859      	ldr	r0, [pc, #356]	; (80152e8 <dhcp_create_msg+0x19c>)
 8015184:	f002 fe30 	bl	8017de8 <iprintf>
 8015188:	2300      	movs	r3, #0
 801518a:	e0a5      	b.n	80152d8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801518c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015190:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015194:	2036      	movs	r0, #54	; 0x36
 8015196:	f7f6 fde3 	bl	800bd60 <pbuf_alloc>
 801519a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801519c:	69bb      	ldr	r3, [r7, #24]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d101      	bne.n	80151a6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	e098      	b.n	80152d8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80151a6:	69bb      	ldr	r3, [r7, #24]
 80151a8:	895b      	ldrh	r3, [r3, #10]
 80151aa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80151ae:	d206      	bcs.n	80151be <dhcp_create_msg+0x72>
 80151b0:	4b4b      	ldr	r3, [pc, #300]	; (80152e0 <dhcp_create_msg+0x194>)
 80151b2:	f240 7272 	movw	r2, #1906	; 0x772
 80151b6:	494e      	ldr	r1, [pc, #312]	; (80152f0 <dhcp_create_msg+0x1a4>)
 80151b8:	484b      	ldr	r0, [pc, #300]	; (80152e8 <dhcp_create_msg+0x19c>)
 80151ba:	f002 fe15 	bl	8017de8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80151be:	79fb      	ldrb	r3, [r7, #7]
 80151c0:	2b03      	cmp	r3, #3
 80151c2:	d103      	bne.n	80151cc <dhcp_create_msg+0x80>
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	795b      	ldrb	r3, [r3, #5]
 80151c8:	2b03      	cmp	r3, #3
 80151ca:	d10d      	bne.n	80151e8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	799b      	ldrb	r3, [r3, #6]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d105      	bne.n	80151e0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80151d4:	f002 fe20 	bl	8017e18 <rand>
 80151d8:	4603      	mov	r3, r0
 80151da:	461a      	mov	r2, r3
 80151dc:	4b45      	ldr	r3, [pc, #276]	; (80152f4 <dhcp_create_msg+0x1a8>)
 80151de:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80151e0:	4b44      	ldr	r3, [pc, #272]	; (80152f4 <dhcp_create_msg+0x1a8>)
 80151e2:	681a      	ldr	r2, [r3, #0]
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80151e8:	69bb      	ldr	r3, [r7, #24]
 80151ea:	685b      	ldr	r3, [r3, #4]
 80151ec:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80151ee:	f44f 729a 	mov.w	r2, #308	; 0x134
 80151f2:	2100      	movs	r1, #0
 80151f4:	6978      	ldr	r0, [r7, #20]
 80151f6:	f002 fdef 	bl	8017dd8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	2201      	movs	r2, #1
 80151fe:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	2201      	movs	r2, #1
 8015204:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	4618      	mov	r0, r3
 8015216:	f7f5 fcae 	bl	800ab76 <lwip_htonl>
 801521a:	4602      	mov	r2, r0
 801521c:	697b      	ldr	r3, [r7, #20]
 801521e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015220:	79fb      	ldrb	r3, [r7, #7]
 8015222:	2b08      	cmp	r3, #8
 8015224:	d010      	beq.n	8015248 <dhcp_create_msg+0xfc>
 8015226:	79fb      	ldrb	r3, [r7, #7]
 8015228:	2b04      	cmp	r3, #4
 801522a:	d00d      	beq.n	8015248 <dhcp_create_msg+0xfc>
 801522c:	79fb      	ldrb	r3, [r7, #7]
 801522e:	2b07      	cmp	r3, #7
 8015230:	d00a      	beq.n	8015248 <dhcp_create_msg+0xfc>
 8015232:	79fb      	ldrb	r3, [r7, #7]
 8015234:	2b03      	cmp	r3, #3
 8015236:	d10c      	bne.n	8015252 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801523c:	2b05      	cmp	r3, #5
 801523e:	d003      	beq.n	8015248 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	795b      	ldrb	r3, [r3, #5]
 8015244:	2b04      	cmp	r3, #4
 8015246:	d104      	bne.n	8015252 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	3304      	adds	r3, #4
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	697b      	ldr	r3, [r7, #20]
 8015250:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015252:	2300      	movs	r3, #0
 8015254:	83fb      	strh	r3, [r7, #30]
 8015256:	e00c      	b.n	8015272 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015258:	8bfa      	ldrh	r2, [r7, #30]
 801525a:	8bfb      	ldrh	r3, [r7, #30]
 801525c:	68f9      	ldr	r1, [r7, #12]
 801525e:	440a      	add	r2, r1
 8015260:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015264:	697a      	ldr	r2, [r7, #20]
 8015266:	4413      	add	r3, r2
 8015268:	460a      	mov	r2, r1
 801526a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801526c:	8bfb      	ldrh	r3, [r7, #30]
 801526e:	3301      	adds	r3, #1
 8015270:	83fb      	strh	r3, [r7, #30]
 8015272:	8bfb      	ldrh	r3, [r7, #30]
 8015274:	2b05      	cmp	r3, #5
 8015276:	d9ef      	bls.n	8015258 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	2200      	movs	r2, #0
 801527c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015280:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015284:	2200      	movs	r2, #0
 8015286:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801528a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801528e:	2200      	movs	r2, #0
 8015290:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015294:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015298:	2200      	movs	r2, #0
 801529a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801529e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152a8:	2301      	movs	r3, #1
 80152aa:	2235      	movs	r2, #53	; 0x35
 80152ac:	2000      	movs	r0, #0
 80152ae:	f7ff fadd 	bl	801486c <dhcp_option>
 80152b2:	4603      	mov	r3, r0
 80152b4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152bc:	79fa      	ldrb	r2, [r7, #7]
 80152be:	8a7b      	ldrh	r3, [r7, #18]
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7ff fb07 	bl	80148d4 <dhcp_option_byte>
 80152c6:	4603      	mov	r3, r0
 80152c8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d002      	beq.n	80152d6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	8a7a      	ldrh	r2, [r7, #18]
 80152d4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80152d6:	69bb      	ldr	r3, [r7, #24]
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3720      	adds	r7, #32
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	0801bedc 	.word	0x0801bedc
 80152e4:	0801c1fc 	.word	0x0801c1fc
 80152e8:	0801bf3c 	.word	0x0801bf3c
 80152ec:	0801c21c 	.word	0x0801c21c
 80152f0:	0801c23c 	.word	0x0801c23c
 80152f4:	20008ad8 	.word	0x20008ad8

080152f8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	4603      	mov	r3, r0
 8015300:	60b9      	str	r1, [r7, #8]
 8015302:	607a      	str	r2, [r7, #4]
 8015304:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015306:	89fb      	ldrh	r3, [r7, #14]
 8015308:	1c5a      	adds	r2, r3, #1
 801530a:	81fa      	strh	r2, [r7, #14]
 801530c:	461a      	mov	r2, r3
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	4413      	add	r3, r2
 8015312:	22ff      	movs	r2, #255	; 0xff
 8015314:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015316:	e007      	b.n	8015328 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015318:	89fb      	ldrh	r3, [r7, #14]
 801531a:	1c5a      	adds	r2, r3, #1
 801531c:	81fa      	strh	r2, [r7, #14]
 801531e:	461a      	mov	r2, r3
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	4413      	add	r3, r2
 8015324:	2200      	movs	r2, #0
 8015326:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015328:	89fb      	ldrh	r3, [r7, #14]
 801532a:	2b43      	cmp	r3, #67	; 0x43
 801532c:	d904      	bls.n	8015338 <dhcp_option_trailer+0x40>
 801532e:	89fb      	ldrh	r3, [r7, #14]
 8015330:	f003 0303 	and.w	r3, r3, #3
 8015334:	2b00      	cmp	r3, #0
 8015336:	d002      	beq.n	801533e <dhcp_option_trailer+0x46>
 8015338:	89fb      	ldrh	r3, [r7, #14]
 801533a:	2b43      	cmp	r3, #67	; 0x43
 801533c:	d9ec      	bls.n	8015318 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801533e:	89fb      	ldrh	r3, [r7, #14]
 8015340:	33f0      	adds	r3, #240	; 0xf0
 8015342:	b29b      	uxth	r3, r3
 8015344:	4619      	mov	r1, r3
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7f6 fe64 	bl	800c014 <pbuf_realloc>
}
 801534c:	bf00      	nop
 801534e:	3710      	adds	r7, #16
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015354:	b480      	push	{r7}
 8015356:	b085      	sub	sp, #20
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d017      	beq.n	8015392 <dhcp_supplied_address+0x3e>
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015366:	2b00      	cmp	r3, #0
 8015368:	d013      	beq.n	8015392 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801536e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	795b      	ldrb	r3, [r3, #5]
 8015374:	2b0a      	cmp	r3, #10
 8015376:	d007      	beq.n	8015388 <dhcp_supplied_address+0x34>
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	795b      	ldrb	r3, [r3, #5]
 801537c:	2b05      	cmp	r3, #5
 801537e:	d003      	beq.n	8015388 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015384:	2b04      	cmp	r3, #4
 8015386:	d101      	bne.n	801538c <dhcp_supplied_address+0x38>
 8015388:	2301      	movs	r3, #1
 801538a:	e000      	b.n	801538e <dhcp_supplied_address+0x3a>
 801538c:	2300      	movs	r3, #0
 801538e:	b2db      	uxtb	r3, r3
 8015390:	e000      	b.n	8015394 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015392:	2300      	movs	r3, #0
}
 8015394:	4618      	mov	r0, r3
 8015396:	3714      	adds	r7, #20
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr

080153a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80153a8:	4915      	ldr	r1, [pc, #84]	; (8015400 <etharp_free_entry+0x60>)
 80153aa:	687a      	ldr	r2, [r7, #4]
 80153ac:	4613      	mov	r3, r2
 80153ae:	005b      	lsls	r3, r3, #1
 80153b0:	4413      	add	r3, r2
 80153b2:	00db      	lsls	r3, r3, #3
 80153b4:	440b      	add	r3, r1
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d013      	beq.n	80153e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80153bc:	4910      	ldr	r1, [pc, #64]	; (8015400 <etharp_free_entry+0x60>)
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	4613      	mov	r3, r2
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	4413      	add	r3, r2
 80153c6:	00db      	lsls	r3, r3, #3
 80153c8:	440b      	add	r3, r1
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7f6 ffa7 	bl	800c320 <pbuf_free>
    arp_table[i].q = NULL;
 80153d2:	490b      	ldr	r1, [pc, #44]	; (8015400 <etharp_free_entry+0x60>)
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	4613      	mov	r3, r2
 80153d8:	005b      	lsls	r3, r3, #1
 80153da:	4413      	add	r3, r2
 80153dc:	00db      	lsls	r3, r3, #3
 80153de:	440b      	add	r3, r1
 80153e0:	2200      	movs	r2, #0
 80153e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80153e4:	4906      	ldr	r1, [pc, #24]	; (8015400 <etharp_free_entry+0x60>)
 80153e6:	687a      	ldr	r2, [r7, #4]
 80153e8:	4613      	mov	r3, r2
 80153ea:	005b      	lsls	r3, r3, #1
 80153ec:	4413      	add	r3, r2
 80153ee:	00db      	lsls	r3, r3, #3
 80153f0:	440b      	add	r3, r1
 80153f2:	3314      	adds	r3, #20
 80153f4:	2200      	movs	r2, #0
 80153f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80153f8:	bf00      	nop
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	20008adc 	.word	0x20008adc

08015404 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801540a:	2300      	movs	r3, #0
 801540c:	607b      	str	r3, [r7, #4]
 801540e:	e096      	b.n	801553e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015410:	494f      	ldr	r1, [pc, #316]	; (8015550 <etharp_tmr+0x14c>)
 8015412:	687a      	ldr	r2, [r7, #4]
 8015414:	4613      	mov	r3, r2
 8015416:	005b      	lsls	r3, r3, #1
 8015418:	4413      	add	r3, r2
 801541a:	00db      	lsls	r3, r3, #3
 801541c:	440b      	add	r3, r1
 801541e:	3314      	adds	r3, #20
 8015420:	781b      	ldrb	r3, [r3, #0]
 8015422:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015424:	78fb      	ldrb	r3, [r7, #3]
 8015426:	2b00      	cmp	r3, #0
 8015428:	f000 8086 	beq.w	8015538 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801542c:	4948      	ldr	r1, [pc, #288]	; (8015550 <etharp_tmr+0x14c>)
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	4613      	mov	r3, r2
 8015432:	005b      	lsls	r3, r3, #1
 8015434:	4413      	add	r3, r2
 8015436:	00db      	lsls	r3, r3, #3
 8015438:	440b      	add	r3, r1
 801543a:	3312      	adds	r3, #18
 801543c:	881b      	ldrh	r3, [r3, #0]
 801543e:	3301      	adds	r3, #1
 8015440:	b298      	uxth	r0, r3
 8015442:	4943      	ldr	r1, [pc, #268]	; (8015550 <etharp_tmr+0x14c>)
 8015444:	687a      	ldr	r2, [r7, #4]
 8015446:	4613      	mov	r3, r2
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	4413      	add	r3, r2
 801544c:	00db      	lsls	r3, r3, #3
 801544e:	440b      	add	r3, r1
 8015450:	3312      	adds	r3, #18
 8015452:	4602      	mov	r2, r0
 8015454:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015456:	493e      	ldr	r1, [pc, #248]	; (8015550 <etharp_tmr+0x14c>)
 8015458:	687a      	ldr	r2, [r7, #4]
 801545a:	4613      	mov	r3, r2
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	4413      	add	r3, r2
 8015460:	00db      	lsls	r3, r3, #3
 8015462:	440b      	add	r3, r1
 8015464:	3312      	adds	r3, #18
 8015466:	881b      	ldrh	r3, [r3, #0]
 8015468:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801546c:	d215      	bcs.n	801549a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801546e:	4938      	ldr	r1, [pc, #224]	; (8015550 <etharp_tmr+0x14c>)
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	4613      	mov	r3, r2
 8015474:	005b      	lsls	r3, r3, #1
 8015476:	4413      	add	r3, r2
 8015478:	00db      	lsls	r3, r3, #3
 801547a:	440b      	add	r3, r1
 801547c:	3314      	adds	r3, #20
 801547e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015480:	2b01      	cmp	r3, #1
 8015482:	d10e      	bne.n	80154a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015484:	4932      	ldr	r1, [pc, #200]	; (8015550 <etharp_tmr+0x14c>)
 8015486:	687a      	ldr	r2, [r7, #4]
 8015488:	4613      	mov	r3, r2
 801548a:	005b      	lsls	r3, r3, #1
 801548c:	4413      	add	r3, r2
 801548e:	00db      	lsls	r3, r3, #3
 8015490:	440b      	add	r3, r1
 8015492:	3312      	adds	r3, #18
 8015494:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015496:	2b04      	cmp	r3, #4
 8015498:	d903      	bls.n	80154a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f7ff ff80 	bl	80153a0 <etharp_free_entry>
 80154a0:	e04a      	b.n	8015538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80154a2:	492b      	ldr	r1, [pc, #172]	; (8015550 <etharp_tmr+0x14c>)
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	4613      	mov	r3, r2
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	4413      	add	r3, r2
 80154ac:	00db      	lsls	r3, r3, #3
 80154ae:	440b      	add	r3, r1
 80154b0:	3314      	adds	r3, #20
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	2b03      	cmp	r3, #3
 80154b6:	d10a      	bne.n	80154ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80154b8:	4925      	ldr	r1, [pc, #148]	; (8015550 <etharp_tmr+0x14c>)
 80154ba:	687a      	ldr	r2, [r7, #4]
 80154bc:	4613      	mov	r3, r2
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	4413      	add	r3, r2
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	440b      	add	r3, r1
 80154c6:	3314      	adds	r3, #20
 80154c8:	2204      	movs	r2, #4
 80154ca:	701a      	strb	r2, [r3, #0]
 80154cc:	e034      	b.n	8015538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80154ce:	4920      	ldr	r1, [pc, #128]	; (8015550 <etharp_tmr+0x14c>)
 80154d0:	687a      	ldr	r2, [r7, #4]
 80154d2:	4613      	mov	r3, r2
 80154d4:	005b      	lsls	r3, r3, #1
 80154d6:	4413      	add	r3, r2
 80154d8:	00db      	lsls	r3, r3, #3
 80154da:	440b      	add	r3, r1
 80154dc:	3314      	adds	r3, #20
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	2b04      	cmp	r3, #4
 80154e2:	d10a      	bne.n	80154fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80154e4:	491a      	ldr	r1, [pc, #104]	; (8015550 <etharp_tmr+0x14c>)
 80154e6:	687a      	ldr	r2, [r7, #4]
 80154e8:	4613      	mov	r3, r2
 80154ea:	005b      	lsls	r3, r3, #1
 80154ec:	4413      	add	r3, r2
 80154ee:	00db      	lsls	r3, r3, #3
 80154f0:	440b      	add	r3, r1
 80154f2:	3314      	adds	r3, #20
 80154f4:	2202      	movs	r2, #2
 80154f6:	701a      	strb	r2, [r3, #0]
 80154f8:	e01e      	b.n	8015538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80154fa:	4915      	ldr	r1, [pc, #84]	; (8015550 <etharp_tmr+0x14c>)
 80154fc:	687a      	ldr	r2, [r7, #4]
 80154fe:	4613      	mov	r3, r2
 8015500:	005b      	lsls	r3, r3, #1
 8015502:	4413      	add	r3, r2
 8015504:	00db      	lsls	r3, r3, #3
 8015506:	440b      	add	r3, r1
 8015508:	3314      	adds	r3, #20
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	2b01      	cmp	r3, #1
 801550e:	d113      	bne.n	8015538 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015510:	490f      	ldr	r1, [pc, #60]	; (8015550 <etharp_tmr+0x14c>)
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	4613      	mov	r3, r2
 8015516:	005b      	lsls	r3, r3, #1
 8015518:	4413      	add	r3, r2
 801551a:	00db      	lsls	r3, r3, #3
 801551c:	440b      	add	r3, r1
 801551e:	3308      	adds	r3, #8
 8015520:	6818      	ldr	r0, [r3, #0]
 8015522:	687a      	ldr	r2, [r7, #4]
 8015524:	4613      	mov	r3, r2
 8015526:	005b      	lsls	r3, r3, #1
 8015528:	4413      	add	r3, r2
 801552a:	00db      	lsls	r3, r3, #3
 801552c:	4a08      	ldr	r2, [pc, #32]	; (8015550 <etharp_tmr+0x14c>)
 801552e:	4413      	add	r3, r2
 8015530:	3304      	adds	r3, #4
 8015532:	4619      	mov	r1, r3
 8015534:	f000 fe72 	bl	801621c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	3301      	adds	r3, #1
 801553c:	607b      	str	r3, [r7, #4]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2b09      	cmp	r3, #9
 8015542:	f77f af65 	ble.w	8015410 <etharp_tmr+0xc>
      }
    }
  }
}
 8015546:	bf00      	nop
 8015548:	3708      	adds	r7, #8
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}
 801554e:	bf00      	nop
 8015550:	20008adc 	.word	0x20008adc

08015554 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b08a      	sub	sp, #40	; 0x28
 8015558:	af00      	add	r7, sp, #0
 801555a:	60f8      	str	r0, [r7, #12]
 801555c:	460b      	mov	r3, r1
 801555e:	607a      	str	r2, [r7, #4]
 8015560:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015562:	230a      	movs	r3, #10
 8015564:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015566:	230a      	movs	r3, #10
 8015568:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801556a:	230a      	movs	r3, #10
 801556c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801556e:	2300      	movs	r3, #0
 8015570:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015572:	230a      	movs	r3, #10
 8015574:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015576:	2300      	movs	r3, #0
 8015578:	83bb      	strh	r3, [r7, #28]
 801557a:	2300      	movs	r3, #0
 801557c:	837b      	strh	r3, [r7, #26]
 801557e:	2300      	movs	r3, #0
 8015580:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015582:	2300      	movs	r3, #0
 8015584:	843b      	strh	r3, [r7, #32]
 8015586:	e0ae      	b.n	80156e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801558c:	49a6      	ldr	r1, [pc, #664]	; (8015828 <etharp_find_entry+0x2d4>)
 801558e:	4613      	mov	r3, r2
 8015590:	005b      	lsls	r3, r3, #1
 8015592:	4413      	add	r3, r2
 8015594:	00db      	lsls	r3, r3, #3
 8015596:	440b      	add	r3, r1
 8015598:	3314      	adds	r3, #20
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801559e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80155a2:	2b0a      	cmp	r3, #10
 80155a4:	d105      	bne.n	80155b2 <etharp_find_entry+0x5e>
 80155a6:	7dfb      	ldrb	r3, [r7, #23]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d102      	bne.n	80155b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80155ac:	8c3b      	ldrh	r3, [r7, #32]
 80155ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80155b0:	e095      	b.n	80156de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80155b2:	7dfb      	ldrb	r3, [r7, #23]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	f000 8092 	beq.w	80156de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80155ba:	7dfb      	ldrb	r3, [r7, #23]
 80155bc:	2b01      	cmp	r3, #1
 80155be:	d009      	beq.n	80155d4 <etharp_find_entry+0x80>
 80155c0:	7dfb      	ldrb	r3, [r7, #23]
 80155c2:	2b01      	cmp	r3, #1
 80155c4:	d806      	bhi.n	80155d4 <etharp_find_entry+0x80>
 80155c6:	4b99      	ldr	r3, [pc, #612]	; (801582c <etharp_find_entry+0x2d8>)
 80155c8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80155cc:	4998      	ldr	r1, [pc, #608]	; (8015830 <etharp_find_entry+0x2dc>)
 80155ce:	4899      	ldr	r0, [pc, #612]	; (8015834 <etharp_find_entry+0x2e0>)
 80155d0:	f002 fc0a 	bl	8017de8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d020      	beq.n	801561c <etharp_find_entry+0xc8>
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	6819      	ldr	r1, [r3, #0]
 80155de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155e2:	4891      	ldr	r0, [pc, #580]	; (8015828 <etharp_find_entry+0x2d4>)
 80155e4:	4613      	mov	r3, r2
 80155e6:	005b      	lsls	r3, r3, #1
 80155e8:	4413      	add	r3, r2
 80155ea:	00db      	lsls	r3, r3, #3
 80155ec:	4403      	add	r3, r0
 80155ee:	3304      	adds	r3, #4
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4299      	cmp	r1, r3
 80155f4:	d112      	bne.n	801561c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d00c      	beq.n	8015616 <etharp_find_entry+0xc2>
 80155fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015600:	4989      	ldr	r1, [pc, #548]	; (8015828 <etharp_find_entry+0x2d4>)
 8015602:	4613      	mov	r3, r2
 8015604:	005b      	lsls	r3, r3, #1
 8015606:	4413      	add	r3, r2
 8015608:	00db      	lsls	r3, r3, #3
 801560a:	440b      	add	r3, r1
 801560c:	3308      	adds	r3, #8
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	429a      	cmp	r2, r3
 8015614:	d102      	bne.n	801561c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801561a:	e100      	b.n	801581e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801561c:	7dfb      	ldrb	r3, [r7, #23]
 801561e:	2b01      	cmp	r3, #1
 8015620:	d140      	bne.n	80156a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015626:	4980      	ldr	r1, [pc, #512]	; (8015828 <etharp_find_entry+0x2d4>)
 8015628:	4613      	mov	r3, r2
 801562a:	005b      	lsls	r3, r3, #1
 801562c:	4413      	add	r3, r2
 801562e:	00db      	lsls	r3, r3, #3
 8015630:	440b      	add	r3, r1
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d01a      	beq.n	801566e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801563c:	497a      	ldr	r1, [pc, #488]	; (8015828 <etharp_find_entry+0x2d4>)
 801563e:	4613      	mov	r3, r2
 8015640:	005b      	lsls	r3, r3, #1
 8015642:	4413      	add	r3, r2
 8015644:	00db      	lsls	r3, r3, #3
 8015646:	440b      	add	r3, r1
 8015648:	3312      	adds	r3, #18
 801564a:	881b      	ldrh	r3, [r3, #0]
 801564c:	8bba      	ldrh	r2, [r7, #28]
 801564e:	429a      	cmp	r2, r3
 8015650:	d845      	bhi.n	80156de <etharp_find_entry+0x18a>
            old_queue = i;
 8015652:	8c3b      	ldrh	r3, [r7, #32]
 8015654:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015656:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801565a:	4973      	ldr	r1, [pc, #460]	; (8015828 <etharp_find_entry+0x2d4>)
 801565c:	4613      	mov	r3, r2
 801565e:	005b      	lsls	r3, r3, #1
 8015660:	4413      	add	r3, r2
 8015662:	00db      	lsls	r3, r3, #3
 8015664:	440b      	add	r3, r1
 8015666:	3312      	adds	r3, #18
 8015668:	881b      	ldrh	r3, [r3, #0]
 801566a:	83bb      	strh	r3, [r7, #28]
 801566c:	e037      	b.n	80156de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801566e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015672:	496d      	ldr	r1, [pc, #436]	; (8015828 <etharp_find_entry+0x2d4>)
 8015674:	4613      	mov	r3, r2
 8015676:	005b      	lsls	r3, r3, #1
 8015678:	4413      	add	r3, r2
 801567a:	00db      	lsls	r3, r3, #3
 801567c:	440b      	add	r3, r1
 801567e:	3312      	adds	r3, #18
 8015680:	881b      	ldrh	r3, [r3, #0]
 8015682:	8b7a      	ldrh	r2, [r7, #26]
 8015684:	429a      	cmp	r2, r3
 8015686:	d82a      	bhi.n	80156de <etharp_find_entry+0x18a>
            old_pending = i;
 8015688:	8c3b      	ldrh	r3, [r7, #32]
 801568a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801568c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015690:	4965      	ldr	r1, [pc, #404]	; (8015828 <etharp_find_entry+0x2d4>)
 8015692:	4613      	mov	r3, r2
 8015694:	005b      	lsls	r3, r3, #1
 8015696:	4413      	add	r3, r2
 8015698:	00db      	lsls	r3, r3, #3
 801569a:	440b      	add	r3, r1
 801569c:	3312      	adds	r3, #18
 801569e:	881b      	ldrh	r3, [r3, #0]
 80156a0:	837b      	strh	r3, [r7, #26]
 80156a2:	e01c      	b.n	80156de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80156a4:	7dfb      	ldrb	r3, [r7, #23]
 80156a6:	2b01      	cmp	r3, #1
 80156a8:	d919      	bls.n	80156de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80156aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156ae:	495e      	ldr	r1, [pc, #376]	; (8015828 <etharp_find_entry+0x2d4>)
 80156b0:	4613      	mov	r3, r2
 80156b2:	005b      	lsls	r3, r3, #1
 80156b4:	4413      	add	r3, r2
 80156b6:	00db      	lsls	r3, r3, #3
 80156b8:	440b      	add	r3, r1
 80156ba:	3312      	adds	r3, #18
 80156bc:	881b      	ldrh	r3, [r3, #0]
 80156be:	8b3a      	ldrh	r2, [r7, #24]
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d80c      	bhi.n	80156de <etharp_find_entry+0x18a>
            old_stable = i;
 80156c4:	8c3b      	ldrh	r3, [r7, #32]
 80156c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80156c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156cc:	4956      	ldr	r1, [pc, #344]	; (8015828 <etharp_find_entry+0x2d4>)
 80156ce:	4613      	mov	r3, r2
 80156d0:	005b      	lsls	r3, r3, #1
 80156d2:	4413      	add	r3, r2
 80156d4:	00db      	lsls	r3, r3, #3
 80156d6:	440b      	add	r3, r1
 80156d8:	3312      	adds	r3, #18
 80156da:	881b      	ldrh	r3, [r3, #0]
 80156dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80156de:	8c3b      	ldrh	r3, [r7, #32]
 80156e0:	3301      	adds	r3, #1
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	843b      	strh	r3, [r7, #32]
 80156e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156ea:	2b09      	cmp	r3, #9
 80156ec:	f77f af4c 	ble.w	8015588 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80156f0:	7afb      	ldrb	r3, [r7, #11]
 80156f2:	f003 0302 	and.w	r3, r3, #2
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d108      	bne.n	801570c <etharp_find_entry+0x1b8>
 80156fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80156fe:	2b0a      	cmp	r3, #10
 8015700:	d107      	bne.n	8015712 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015702:	7afb      	ldrb	r3, [r7, #11]
 8015704:	f003 0301 	and.w	r3, r3, #1
 8015708:	2b00      	cmp	r3, #0
 801570a:	d102      	bne.n	8015712 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801570c:	f04f 33ff 	mov.w	r3, #4294967295
 8015710:	e085      	b.n	801581e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015712:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015716:	2b09      	cmp	r3, #9
 8015718:	dc02      	bgt.n	8015720 <etharp_find_entry+0x1cc>
    i = empty;
 801571a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801571c:	843b      	strh	r3, [r7, #32]
 801571e:	e039      	b.n	8015794 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015720:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015724:	2b09      	cmp	r3, #9
 8015726:	dc14      	bgt.n	8015752 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801572a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801572c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015730:	493d      	ldr	r1, [pc, #244]	; (8015828 <etharp_find_entry+0x2d4>)
 8015732:	4613      	mov	r3, r2
 8015734:	005b      	lsls	r3, r3, #1
 8015736:	4413      	add	r3, r2
 8015738:	00db      	lsls	r3, r3, #3
 801573a:	440b      	add	r3, r1
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d018      	beq.n	8015774 <etharp_find_entry+0x220>
 8015742:	4b3a      	ldr	r3, [pc, #232]	; (801582c <etharp_find_entry+0x2d8>)
 8015744:	f240 126d 	movw	r2, #365	; 0x16d
 8015748:	493b      	ldr	r1, [pc, #236]	; (8015838 <etharp_find_entry+0x2e4>)
 801574a:	483a      	ldr	r0, [pc, #232]	; (8015834 <etharp_find_entry+0x2e0>)
 801574c:	f002 fb4c 	bl	8017de8 <iprintf>
 8015750:	e010      	b.n	8015774 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015752:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015756:	2b09      	cmp	r3, #9
 8015758:	dc02      	bgt.n	8015760 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801575a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801575c:	843b      	strh	r3, [r7, #32]
 801575e:	e009      	b.n	8015774 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015760:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015764:	2b09      	cmp	r3, #9
 8015766:	dc02      	bgt.n	801576e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015768:	8bfb      	ldrh	r3, [r7, #30]
 801576a:	843b      	strh	r3, [r7, #32]
 801576c:	e002      	b.n	8015774 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801576e:	f04f 33ff 	mov.w	r3, #4294967295
 8015772:	e054      	b.n	801581e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015774:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015778:	2b09      	cmp	r3, #9
 801577a:	dd06      	ble.n	801578a <etharp_find_entry+0x236>
 801577c:	4b2b      	ldr	r3, [pc, #172]	; (801582c <etharp_find_entry+0x2d8>)
 801577e:	f240 127f 	movw	r2, #383	; 0x17f
 8015782:	492e      	ldr	r1, [pc, #184]	; (801583c <etharp_find_entry+0x2e8>)
 8015784:	482b      	ldr	r0, [pc, #172]	; (8015834 <etharp_find_entry+0x2e0>)
 8015786:	f002 fb2f 	bl	8017de8 <iprintf>
    etharp_free_entry(i);
 801578a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801578e:	4618      	mov	r0, r3
 8015790:	f7ff fe06 	bl	80153a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015794:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015798:	2b09      	cmp	r3, #9
 801579a:	dd06      	ble.n	80157aa <etharp_find_entry+0x256>
 801579c:	4b23      	ldr	r3, [pc, #140]	; (801582c <etharp_find_entry+0x2d8>)
 801579e:	f240 1283 	movw	r2, #387	; 0x183
 80157a2:	4926      	ldr	r1, [pc, #152]	; (801583c <etharp_find_entry+0x2e8>)
 80157a4:	4823      	ldr	r0, [pc, #140]	; (8015834 <etharp_find_entry+0x2e0>)
 80157a6:	f002 fb1f 	bl	8017de8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80157aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157ae:	491e      	ldr	r1, [pc, #120]	; (8015828 <etharp_find_entry+0x2d4>)
 80157b0:	4613      	mov	r3, r2
 80157b2:	005b      	lsls	r3, r3, #1
 80157b4:	4413      	add	r3, r2
 80157b6:	00db      	lsls	r3, r3, #3
 80157b8:	440b      	add	r3, r1
 80157ba:	3314      	adds	r3, #20
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d006      	beq.n	80157d0 <etharp_find_entry+0x27c>
 80157c2:	4b1a      	ldr	r3, [pc, #104]	; (801582c <etharp_find_entry+0x2d8>)
 80157c4:	f240 1285 	movw	r2, #389	; 0x185
 80157c8:	491d      	ldr	r1, [pc, #116]	; (8015840 <etharp_find_entry+0x2ec>)
 80157ca:	481a      	ldr	r0, [pc, #104]	; (8015834 <etharp_find_entry+0x2e0>)
 80157cc:	f002 fb0c 	bl	8017de8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d00b      	beq.n	80157ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80157d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	6819      	ldr	r1, [r3, #0]
 80157de:	4812      	ldr	r0, [pc, #72]	; (8015828 <etharp_find_entry+0x2d4>)
 80157e0:	4613      	mov	r3, r2
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	4413      	add	r3, r2
 80157e6:	00db      	lsls	r3, r3, #3
 80157e8:	4403      	add	r3, r0
 80157ea:	3304      	adds	r3, #4
 80157ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80157ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157f2:	490d      	ldr	r1, [pc, #52]	; (8015828 <etharp_find_entry+0x2d4>)
 80157f4:	4613      	mov	r3, r2
 80157f6:	005b      	lsls	r3, r3, #1
 80157f8:	4413      	add	r3, r2
 80157fa:	00db      	lsls	r3, r3, #3
 80157fc:	440b      	add	r3, r1
 80157fe:	3312      	adds	r3, #18
 8015800:	2200      	movs	r2, #0
 8015802:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015804:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015808:	4907      	ldr	r1, [pc, #28]	; (8015828 <etharp_find_entry+0x2d4>)
 801580a:	4613      	mov	r3, r2
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	4413      	add	r3, r2
 8015810:	00db      	lsls	r3, r3, #3
 8015812:	440b      	add	r3, r1
 8015814:	3308      	adds	r3, #8
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801581a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801581e:	4618      	mov	r0, r3
 8015820:	3728      	adds	r7, #40	; 0x28
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
 8015826:	bf00      	nop
 8015828:	20008adc 	.word	0x20008adc
 801582c:	0801c27c 	.word	0x0801c27c
 8015830:	0801c2b4 	.word	0x0801c2b4
 8015834:	0801c2f4 	.word	0x0801c2f4
 8015838:	0801c31c 	.word	0x0801c31c
 801583c:	0801c334 	.word	0x0801c334
 8015840:	0801c348 	.word	0x0801c348

08015844 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b088      	sub	sp, #32
 8015848:	af02      	add	r7, sp, #8
 801584a:	60f8      	str	r0, [r7, #12]
 801584c:	60b9      	str	r1, [r7, #8]
 801584e:	607a      	str	r2, [r7, #4]
 8015850:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015858:	2b06      	cmp	r3, #6
 801585a:	d006      	beq.n	801586a <etharp_update_arp_entry+0x26>
 801585c:	4b48      	ldr	r3, [pc, #288]	; (8015980 <etharp_update_arp_entry+0x13c>)
 801585e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015862:	4948      	ldr	r1, [pc, #288]	; (8015984 <etharp_update_arp_entry+0x140>)
 8015864:	4848      	ldr	r0, [pc, #288]	; (8015988 <etharp_update_arp_entry+0x144>)
 8015866:	f002 fabf 	bl	8017de8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d012      	beq.n	8015896 <etharp_update_arp_entry+0x52>
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d00e      	beq.n	8015896 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	68f9      	ldr	r1, [r7, #12]
 801587e:	4618      	mov	r0, r3
 8015880:	f001 f91e 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 8015884:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015886:	2b00      	cmp	r3, #0
 8015888:	d105      	bne.n	8015896 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015892:	2be0      	cmp	r3, #224	; 0xe0
 8015894:	d102      	bne.n	801589c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015896:	f06f 030f 	mvn.w	r3, #15
 801589a:	e06c      	b.n	8015976 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801589c:	78fb      	ldrb	r3, [r7, #3]
 801589e:	68fa      	ldr	r2, [r7, #12]
 80158a0:	4619      	mov	r1, r3
 80158a2:	68b8      	ldr	r0, [r7, #8]
 80158a4:	f7ff fe56 	bl	8015554 <etharp_find_entry>
 80158a8:	4603      	mov	r3, r0
 80158aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80158ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	da02      	bge.n	80158ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80158b4:	8afb      	ldrh	r3, [r7, #22]
 80158b6:	b25b      	sxtb	r3, r3
 80158b8:	e05d      	b.n	8015976 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80158ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158be:	4933      	ldr	r1, [pc, #204]	; (801598c <etharp_update_arp_entry+0x148>)
 80158c0:	4613      	mov	r3, r2
 80158c2:	005b      	lsls	r3, r3, #1
 80158c4:	4413      	add	r3, r2
 80158c6:	00db      	lsls	r3, r3, #3
 80158c8:	440b      	add	r3, r1
 80158ca:	3314      	adds	r3, #20
 80158cc:	2202      	movs	r2, #2
 80158ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80158d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158d4:	492d      	ldr	r1, [pc, #180]	; (801598c <etharp_update_arp_entry+0x148>)
 80158d6:	4613      	mov	r3, r2
 80158d8:	005b      	lsls	r3, r3, #1
 80158da:	4413      	add	r3, r2
 80158dc:	00db      	lsls	r3, r3, #3
 80158de:	440b      	add	r3, r1
 80158e0:	3308      	adds	r3, #8
 80158e2:	68fa      	ldr	r2, [r7, #12]
 80158e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80158e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158ea:	4613      	mov	r3, r2
 80158ec:	005b      	lsls	r3, r3, #1
 80158ee:	4413      	add	r3, r2
 80158f0:	00db      	lsls	r3, r3, #3
 80158f2:	3308      	adds	r3, #8
 80158f4:	4a25      	ldr	r2, [pc, #148]	; (801598c <etharp_update_arp_entry+0x148>)
 80158f6:	4413      	add	r3, r2
 80158f8:	3304      	adds	r3, #4
 80158fa:	2206      	movs	r2, #6
 80158fc:	6879      	ldr	r1, [r7, #4]
 80158fe:	4618      	mov	r0, r3
 8015900:	f002 fa5f 	bl	8017dc2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015904:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015908:	4920      	ldr	r1, [pc, #128]	; (801598c <etharp_update_arp_entry+0x148>)
 801590a:	4613      	mov	r3, r2
 801590c:	005b      	lsls	r3, r3, #1
 801590e:	4413      	add	r3, r2
 8015910:	00db      	lsls	r3, r3, #3
 8015912:	440b      	add	r3, r1
 8015914:	3312      	adds	r3, #18
 8015916:	2200      	movs	r2, #0
 8015918:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801591a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801591e:	491b      	ldr	r1, [pc, #108]	; (801598c <etharp_update_arp_entry+0x148>)
 8015920:	4613      	mov	r3, r2
 8015922:	005b      	lsls	r3, r3, #1
 8015924:	4413      	add	r3, r2
 8015926:	00db      	lsls	r3, r3, #3
 8015928:	440b      	add	r3, r1
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d021      	beq.n	8015974 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015930:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015934:	4915      	ldr	r1, [pc, #84]	; (801598c <etharp_update_arp_entry+0x148>)
 8015936:	4613      	mov	r3, r2
 8015938:	005b      	lsls	r3, r3, #1
 801593a:	4413      	add	r3, r2
 801593c:	00db      	lsls	r3, r3, #3
 801593e:	440b      	add	r3, r1
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015944:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015948:	4910      	ldr	r1, [pc, #64]	; (801598c <etharp_update_arp_entry+0x148>)
 801594a:	4613      	mov	r3, r2
 801594c:	005b      	lsls	r3, r3, #1
 801594e:	4413      	add	r3, r2
 8015950:	00db      	lsls	r3, r3, #3
 8015952:	440b      	add	r3, r1
 8015954:	2200      	movs	r2, #0
 8015956:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801595e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015962:	9300      	str	r3, [sp, #0]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6939      	ldr	r1, [r7, #16]
 8015968:	68f8      	ldr	r0, [r7, #12]
 801596a:	f001 ffad 	bl	80178c8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801596e:	6938      	ldr	r0, [r7, #16]
 8015970:	f7f6 fcd6 	bl	800c320 <pbuf_free>
  }
  return ERR_OK;
 8015974:	2300      	movs	r3, #0
}
 8015976:	4618      	mov	r0, r3
 8015978:	3718      	adds	r7, #24
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop
 8015980:	0801c27c 	.word	0x0801c27c
 8015984:	0801c374 	.word	0x0801c374
 8015988:	0801c2f4 	.word	0x0801c2f4
 801598c:	20008adc 	.word	0x20008adc

08015990 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015998:	2300      	movs	r3, #0
 801599a:	60fb      	str	r3, [r7, #12]
 801599c:	e01e      	b.n	80159dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801599e:	4913      	ldr	r1, [pc, #76]	; (80159ec <etharp_cleanup_netif+0x5c>)
 80159a0:	68fa      	ldr	r2, [r7, #12]
 80159a2:	4613      	mov	r3, r2
 80159a4:	005b      	lsls	r3, r3, #1
 80159a6:	4413      	add	r3, r2
 80159a8:	00db      	lsls	r3, r3, #3
 80159aa:	440b      	add	r3, r1
 80159ac:	3314      	adds	r3, #20
 80159ae:	781b      	ldrb	r3, [r3, #0]
 80159b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80159b2:	7afb      	ldrb	r3, [r7, #11]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d00e      	beq.n	80159d6 <etharp_cleanup_netif+0x46>
 80159b8:	490c      	ldr	r1, [pc, #48]	; (80159ec <etharp_cleanup_netif+0x5c>)
 80159ba:	68fa      	ldr	r2, [r7, #12]
 80159bc:	4613      	mov	r3, r2
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	4413      	add	r3, r2
 80159c2:	00db      	lsls	r3, r3, #3
 80159c4:	440b      	add	r3, r1
 80159c6:	3308      	adds	r3, #8
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	429a      	cmp	r2, r3
 80159ce:	d102      	bne.n	80159d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80159d0:	68f8      	ldr	r0, [r7, #12]
 80159d2:	f7ff fce5 	bl	80153a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	3301      	adds	r3, #1
 80159da:	60fb      	str	r3, [r7, #12]
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	2b09      	cmp	r3, #9
 80159e0:	dddd      	ble.n	801599e <etharp_cleanup_netif+0xe>
    }
  }
}
 80159e2:	bf00      	nop
 80159e4:	3710      	adds	r7, #16
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
 80159ea:	bf00      	nop
 80159ec:	20008adc 	.word	0x20008adc

080159f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80159f0:	b5b0      	push	{r4, r5, r7, lr}
 80159f2:	b08a      	sub	sp, #40	; 0x28
 80159f4:	af04      	add	r7, sp, #16
 80159f6:	6078      	str	r0, [r7, #4]
 80159f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d107      	bne.n	8015a10 <etharp_input+0x20>
 8015a00:	4b3f      	ldr	r3, [pc, #252]	; (8015b00 <etharp_input+0x110>)
 8015a02:	f240 228a 	movw	r2, #650	; 0x28a
 8015a06:	493f      	ldr	r1, [pc, #252]	; (8015b04 <etharp_input+0x114>)
 8015a08:	483f      	ldr	r0, [pc, #252]	; (8015b08 <etharp_input+0x118>)
 8015a0a:	f002 f9ed 	bl	8017de8 <iprintf>
 8015a0e:	e074      	b.n	8015afa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	685b      	ldr	r3, [r3, #4]
 8015a14:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	881b      	ldrh	r3, [r3, #0]
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a20:	d10c      	bne.n	8015a3c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015a26:	2b06      	cmp	r3, #6
 8015a28:	d108      	bne.n	8015a3c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015a2e:	2b04      	cmp	r3, #4
 8015a30:	d104      	bne.n	8015a3c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015a32:	693b      	ldr	r3, [r7, #16]
 8015a34:	885b      	ldrh	r3, [r3, #2]
 8015a36:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015a38:	2b08      	cmp	r3, #8
 8015a3a:	d003      	beq.n	8015a44 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f7f6 fc6f 	bl	800c320 <pbuf_free>
    return;
 8015a42:	e05a      	b.n	8015afa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	330e      	adds	r3, #14
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	3318      	adds	r3, #24
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	3304      	adds	r3, #4
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d102      	bne.n	8015a64 <etharp_input+0x74>
    for_us = 0;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	75fb      	strb	r3, [r7, #23]
 8015a62:	e009      	b.n	8015a78 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	3304      	adds	r3, #4
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	bf0c      	ite	eq
 8015a70:	2301      	moveq	r3, #1
 8015a72:	2300      	movne	r3, #0
 8015a74:	b2db      	uxtb	r3, r3
 8015a76:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015a78:	693b      	ldr	r3, [r7, #16]
 8015a7a:	f103 0208 	add.w	r2, r3, #8
 8015a7e:	7dfb      	ldrb	r3, [r7, #23]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d001      	beq.n	8015a88 <etharp_input+0x98>
 8015a84:	2301      	movs	r3, #1
 8015a86:	e000      	b.n	8015a8a <etharp_input+0x9a>
 8015a88:	2302      	movs	r3, #2
 8015a8a:	f107 010c 	add.w	r1, r7, #12
 8015a8e:	6838      	ldr	r0, [r7, #0]
 8015a90:	f7ff fed8 	bl	8015844 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015a94:	693b      	ldr	r3, [r7, #16]
 8015a96:	88db      	ldrh	r3, [r3, #6]
 8015a98:	b29b      	uxth	r3, r3
 8015a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a9e:	d003      	beq.n	8015aa8 <etharp_input+0xb8>
 8015aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015aa4:	d01e      	beq.n	8015ae4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015aa6:	e025      	b.n	8015af4 <etharp_input+0x104>
      if (for_us) {
 8015aa8:	7dfb      	ldrb	r3, [r7, #23]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d021      	beq.n	8015af2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015ab4:	693b      	ldr	r3, [r7, #16]
 8015ab6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015ac4:	693a      	ldr	r2, [r7, #16]
 8015ac6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015ac8:	2102      	movs	r1, #2
 8015aca:	9103      	str	r1, [sp, #12]
 8015acc:	f107 010c 	add.w	r1, r7, #12
 8015ad0:	9102      	str	r1, [sp, #8]
 8015ad2:	9201      	str	r2, [sp, #4]
 8015ad4:	9300      	str	r3, [sp, #0]
 8015ad6:	462b      	mov	r3, r5
 8015ad8:	4622      	mov	r2, r4
 8015ada:	4601      	mov	r1, r0
 8015adc:	6838      	ldr	r0, [r7, #0]
 8015ade:	f000 faef 	bl	80160c0 <etharp_raw>
      break;
 8015ae2:	e006      	b.n	8015af2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015ae4:	f107 030c 	add.w	r3, r7, #12
 8015ae8:	4619      	mov	r1, r3
 8015aea:	6838      	ldr	r0, [r7, #0]
 8015aec:	f7fe f9fe 	bl	8013eec <dhcp_arp_reply>
      break;
 8015af0:	e000      	b.n	8015af4 <etharp_input+0x104>
      break;
 8015af2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f7f6 fc13 	bl	800c320 <pbuf_free>
}
 8015afa:	3718      	adds	r7, #24
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bdb0      	pop	{r4, r5, r7, pc}
 8015b00:	0801c27c 	.word	0x0801c27c
 8015b04:	0801c3cc 	.word	0x0801c3cc
 8015b08:	0801c2f4 	.word	0x0801c2f4

08015b0c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b086      	sub	sp, #24
 8015b10:	af02      	add	r7, sp, #8
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	60b9      	str	r1, [r7, #8]
 8015b16:	4613      	mov	r3, r2
 8015b18:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015b1a:	79fa      	ldrb	r2, [r7, #7]
 8015b1c:	4944      	ldr	r1, [pc, #272]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015b1e:	4613      	mov	r3, r2
 8015b20:	005b      	lsls	r3, r3, #1
 8015b22:	4413      	add	r3, r2
 8015b24:	00db      	lsls	r3, r3, #3
 8015b26:	440b      	add	r3, r1
 8015b28:	3314      	adds	r3, #20
 8015b2a:	781b      	ldrb	r3, [r3, #0]
 8015b2c:	2b01      	cmp	r3, #1
 8015b2e:	d806      	bhi.n	8015b3e <etharp_output_to_arp_index+0x32>
 8015b30:	4b40      	ldr	r3, [pc, #256]	; (8015c34 <etharp_output_to_arp_index+0x128>)
 8015b32:	f240 22ef 	movw	r2, #751	; 0x2ef
 8015b36:	4940      	ldr	r1, [pc, #256]	; (8015c38 <etharp_output_to_arp_index+0x12c>)
 8015b38:	4840      	ldr	r0, [pc, #256]	; (8015c3c <etharp_output_to_arp_index+0x130>)
 8015b3a:	f002 f955 	bl	8017de8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015b3e:	79fa      	ldrb	r2, [r7, #7]
 8015b40:	493b      	ldr	r1, [pc, #236]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015b42:	4613      	mov	r3, r2
 8015b44:	005b      	lsls	r3, r3, #1
 8015b46:	4413      	add	r3, r2
 8015b48:	00db      	lsls	r3, r3, #3
 8015b4a:	440b      	add	r3, r1
 8015b4c:	3314      	adds	r3, #20
 8015b4e:	781b      	ldrb	r3, [r3, #0]
 8015b50:	2b02      	cmp	r3, #2
 8015b52:	d153      	bne.n	8015bfc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015b54:	79fa      	ldrb	r2, [r7, #7]
 8015b56:	4936      	ldr	r1, [pc, #216]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015b58:	4613      	mov	r3, r2
 8015b5a:	005b      	lsls	r3, r3, #1
 8015b5c:	4413      	add	r3, r2
 8015b5e:	00db      	lsls	r3, r3, #3
 8015b60:	440b      	add	r3, r1
 8015b62:	3312      	adds	r3, #18
 8015b64:	881b      	ldrh	r3, [r3, #0]
 8015b66:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015b6a:	d919      	bls.n	8015ba0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015b6c:	79fa      	ldrb	r2, [r7, #7]
 8015b6e:	4613      	mov	r3, r2
 8015b70:	005b      	lsls	r3, r3, #1
 8015b72:	4413      	add	r3, r2
 8015b74:	00db      	lsls	r3, r3, #3
 8015b76:	4a2e      	ldr	r2, [pc, #184]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015b78:	4413      	add	r3, r2
 8015b7a:	3304      	adds	r3, #4
 8015b7c:	4619      	mov	r1, r3
 8015b7e:	68f8      	ldr	r0, [r7, #12]
 8015b80:	f000 fb4c 	bl	801621c <etharp_request>
 8015b84:	4603      	mov	r3, r0
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d138      	bne.n	8015bfc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015b8a:	79fa      	ldrb	r2, [r7, #7]
 8015b8c:	4928      	ldr	r1, [pc, #160]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015b8e:	4613      	mov	r3, r2
 8015b90:	005b      	lsls	r3, r3, #1
 8015b92:	4413      	add	r3, r2
 8015b94:	00db      	lsls	r3, r3, #3
 8015b96:	440b      	add	r3, r1
 8015b98:	3314      	adds	r3, #20
 8015b9a:	2203      	movs	r2, #3
 8015b9c:	701a      	strb	r2, [r3, #0]
 8015b9e:	e02d      	b.n	8015bfc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015ba0:	79fa      	ldrb	r2, [r7, #7]
 8015ba2:	4923      	ldr	r1, [pc, #140]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	4413      	add	r3, r2
 8015baa:	00db      	lsls	r3, r3, #3
 8015bac:	440b      	add	r3, r1
 8015bae:	3312      	adds	r3, #18
 8015bb0:	881b      	ldrh	r3, [r3, #0]
 8015bb2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015bb6:	d321      	bcc.n	8015bfc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015bb8:	79fa      	ldrb	r2, [r7, #7]
 8015bba:	4613      	mov	r3, r2
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	4413      	add	r3, r2
 8015bc0:	00db      	lsls	r3, r3, #3
 8015bc2:	4a1b      	ldr	r2, [pc, #108]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015bc4:	4413      	add	r3, r2
 8015bc6:	1d19      	adds	r1, r3, #4
 8015bc8:	79fa      	ldrb	r2, [r7, #7]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	005b      	lsls	r3, r3, #1
 8015bce:	4413      	add	r3, r2
 8015bd0:	00db      	lsls	r3, r3, #3
 8015bd2:	3308      	adds	r3, #8
 8015bd4:	4a16      	ldr	r2, [pc, #88]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015bd6:	4413      	add	r3, r2
 8015bd8:	3304      	adds	r3, #4
 8015bda:	461a      	mov	r2, r3
 8015bdc:	68f8      	ldr	r0, [r7, #12]
 8015bde:	f000 fafb 	bl	80161d8 <etharp_request_dst>
 8015be2:	4603      	mov	r3, r0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d109      	bne.n	8015bfc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015be8:	79fa      	ldrb	r2, [r7, #7]
 8015bea:	4911      	ldr	r1, [pc, #68]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015bec:	4613      	mov	r3, r2
 8015bee:	005b      	lsls	r3, r3, #1
 8015bf0:	4413      	add	r3, r2
 8015bf2:	00db      	lsls	r3, r3, #3
 8015bf4:	440b      	add	r3, r1
 8015bf6:	3314      	adds	r3, #20
 8015bf8:	2203      	movs	r2, #3
 8015bfa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015c02:	79fa      	ldrb	r2, [r7, #7]
 8015c04:	4613      	mov	r3, r2
 8015c06:	005b      	lsls	r3, r3, #1
 8015c08:	4413      	add	r3, r2
 8015c0a:	00db      	lsls	r3, r3, #3
 8015c0c:	3308      	adds	r3, #8
 8015c0e:	4a08      	ldr	r2, [pc, #32]	; (8015c30 <etharp_output_to_arp_index+0x124>)
 8015c10:	4413      	add	r3, r2
 8015c12:	1d1a      	adds	r2, r3, #4
 8015c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c18:	9300      	str	r3, [sp, #0]
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	460a      	mov	r2, r1
 8015c1e:	68b9      	ldr	r1, [r7, #8]
 8015c20:	68f8      	ldr	r0, [r7, #12]
 8015c22:	f001 fe51 	bl	80178c8 <ethernet_output>
 8015c26:	4603      	mov	r3, r0
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	3710      	adds	r7, #16
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}
 8015c30:	20008adc 	.word	0x20008adc
 8015c34:	0801c27c 	.word	0x0801c27c
 8015c38:	0801c3ec 	.word	0x0801c3ec
 8015c3c:	0801c2f4 	.word	0x0801c2f4

08015c40 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b08a      	sub	sp, #40	; 0x28
 8015c44:	af02      	add	r7, sp, #8
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d106      	bne.n	8015c64 <etharp_output+0x24>
 8015c56:	4b73      	ldr	r3, [pc, #460]	; (8015e24 <etharp_output+0x1e4>)
 8015c58:	f240 321e 	movw	r2, #798	; 0x31e
 8015c5c:	4972      	ldr	r1, [pc, #456]	; (8015e28 <etharp_output+0x1e8>)
 8015c5e:	4873      	ldr	r0, [pc, #460]	; (8015e2c <etharp_output+0x1ec>)
 8015c60:	f002 f8c2 	bl	8017de8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c64:	68bb      	ldr	r3, [r7, #8]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d106      	bne.n	8015c78 <etharp_output+0x38>
 8015c6a:	4b6e      	ldr	r3, [pc, #440]	; (8015e24 <etharp_output+0x1e4>)
 8015c6c:	f240 321f 	movw	r2, #799	; 0x31f
 8015c70:	496f      	ldr	r1, [pc, #444]	; (8015e30 <etharp_output+0x1f0>)
 8015c72:	486e      	ldr	r0, [pc, #440]	; (8015e2c <etharp_output+0x1ec>)
 8015c74:	f002 f8b8 	bl	8017de8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d106      	bne.n	8015c8c <etharp_output+0x4c>
 8015c7e:	4b69      	ldr	r3, [pc, #420]	; (8015e24 <etharp_output+0x1e4>)
 8015c80:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015c84:	496b      	ldr	r1, [pc, #428]	; (8015e34 <etharp_output+0x1f4>)
 8015c86:	4869      	ldr	r0, [pc, #420]	; (8015e2c <etharp_output+0x1ec>)
 8015c88:	f002 f8ae 	bl	8017de8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	68f9      	ldr	r1, [r7, #12]
 8015c92:	4618      	mov	r0, r3
 8015c94:	f000 ff14 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d002      	beq.n	8015ca4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015c9e:	4b66      	ldr	r3, [pc, #408]	; (8015e38 <etharp_output+0x1f8>)
 8015ca0:	61fb      	str	r3, [r7, #28]
 8015ca2:	e0af      	b.n	8015e04 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015cac:	2be0      	cmp	r3, #224	; 0xe0
 8015cae:	d118      	bne.n	8015ce2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015cb8:	235e      	movs	r3, #94	; 0x5e
 8015cba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	3301      	adds	r3, #1
 8015cc0:	781b      	ldrb	r3, [r3, #0]
 8015cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	3302      	adds	r3, #2
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	3303      	adds	r3, #3
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015cda:	f107 0310 	add.w	r3, r7, #16
 8015cde:	61fb      	str	r3, [r7, #28]
 8015ce0:	e090      	b.n	8015e04 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681a      	ldr	r2, [r3, #0]
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	3304      	adds	r3, #4
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	405a      	eors	r2, r3
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	3308      	adds	r3, #8
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	4013      	ands	r3, r2
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d012      	beq.n	8015d20 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015d00:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015d04:	4293      	cmp	r3, r2
 8015d06:	d00b      	beq.n	8015d20 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	330c      	adds	r3, #12
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d003      	beq.n	8015d1a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	330c      	adds	r3, #12
 8015d16:	61bb      	str	r3, [r7, #24]
 8015d18:	e002      	b.n	8015d20 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015d1a:	f06f 0303 	mvn.w	r3, #3
 8015d1e:	e07d      	b.n	8015e1c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015d20:	4b46      	ldr	r3, [pc, #280]	; (8015e3c <etharp_output+0x1fc>)
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	4619      	mov	r1, r3
 8015d26:	4a46      	ldr	r2, [pc, #280]	; (8015e40 <etharp_output+0x200>)
 8015d28:	460b      	mov	r3, r1
 8015d2a:	005b      	lsls	r3, r3, #1
 8015d2c:	440b      	add	r3, r1
 8015d2e:	00db      	lsls	r3, r3, #3
 8015d30:	4413      	add	r3, r2
 8015d32:	3314      	adds	r3, #20
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	2b01      	cmp	r3, #1
 8015d38:	d925      	bls.n	8015d86 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015d3a:	4b40      	ldr	r3, [pc, #256]	; (8015e3c <etharp_output+0x1fc>)
 8015d3c:	781b      	ldrb	r3, [r3, #0]
 8015d3e:	4619      	mov	r1, r3
 8015d40:	4a3f      	ldr	r2, [pc, #252]	; (8015e40 <etharp_output+0x200>)
 8015d42:	460b      	mov	r3, r1
 8015d44:	005b      	lsls	r3, r3, #1
 8015d46:	440b      	add	r3, r1
 8015d48:	00db      	lsls	r3, r3, #3
 8015d4a:	4413      	add	r3, r2
 8015d4c:	3308      	adds	r3, #8
 8015d4e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015d50:	68fa      	ldr	r2, [r7, #12]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d117      	bne.n	8015d86 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015d56:	69bb      	ldr	r3, [r7, #24]
 8015d58:	681a      	ldr	r2, [r3, #0]
 8015d5a:	4b38      	ldr	r3, [pc, #224]	; (8015e3c <etharp_output+0x1fc>)
 8015d5c:	781b      	ldrb	r3, [r3, #0]
 8015d5e:	4618      	mov	r0, r3
 8015d60:	4937      	ldr	r1, [pc, #220]	; (8015e40 <etharp_output+0x200>)
 8015d62:	4603      	mov	r3, r0
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	4403      	add	r3, r0
 8015d68:	00db      	lsls	r3, r3, #3
 8015d6a:	440b      	add	r3, r1
 8015d6c:	3304      	adds	r3, #4
 8015d6e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d108      	bne.n	8015d86 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015d74:	4b31      	ldr	r3, [pc, #196]	; (8015e3c <etharp_output+0x1fc>)
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	461a      	mov	r2, r3
 8015d7a:	68b9      	ldr	r1, [r7, #8]
 8015d7c:	68f8      	ldr	r0, [r7, #12]
 8015d7e:	f7ff fec5 	bl	8015b0c <etharp_output_to_arp_index>
 8015d82:	4603      	mov	r3, r0
 8015d84:	e04a      	b.n	8015e1c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015d86:	2300      	movs	r3, #0
 8015d88:	75fb      	strb	r3, [r7, #23]
 8015d8a:	e031      	b.n	8015df0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015d8c:	7dfa      	ldrb	r2, [r7, #23]
 8015d8e:	492c      	ldr	r1, [pc, #176]	; (8015e40 <etharp_output+0x200>)
 8015d90:	4613      	mov	r3, r2
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	4413      	add	r3, r2
 8015d96:	00db      	lsls	r3, r3, #3
 8015d98:	440b      	add	r3, r1
 8015d9a:	3314      	adds	r3, #20
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d923      	bls.n	8015dea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015da2:	7dfa      	ldrb	r2, [r7, #23]
 8015da4:	4926      	ldr	r1, [pc, #152]	; (8015e40 <etharp_output+0x200>)
 8015da6:	4613      	mov	r3, r2
 8015da8:	005b      	lsls	r3, r3, #1
 8015daa:	4413      	add	r3, r2
 8015dac:	00db      	lsls	r3, r3, #3
 8015dae:	440b      	add	r3, r1
 8015db0:	3308      	adds	r3, #8
 8015db2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015db4:	68fa      	ldr	r2, [r7, #12]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d117      	bne.n	8015dea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015dba:	69bb      	ldr	r3, [r7, #24]
 8015dbc:	6819      	ldr	r1, [r3, #0]
 8015dbe:	7dfa      	ldrb	r2, [r7, #23]
 8015dc0:	481f      	ldr	r0, [pc, #124]	; (8015e40 <etharp_output+0x200>)
 8015dc2:	4613      	mov	r3, r2
 8015dc4:	005b      	lsls	r3, r3, #1
 8015dc6:	4413      	add	r3, r2
 8015dc8:	00db      	lsls	r3, r3, #3
 8015dca:	4403      	add	r3, r0
 8015dcc:	3304      	adds	r3, #4
 8015dce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015dd0:	4299      	cmp	r1, r3
 8015dd2:	d10a      	bne.n	8015dea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015dd4:	4a19      	ldr	r2, [pc, #100]	; (8015e3c <etharp_output+0x1fc>)
 8015dd6:	7dfb      	ldrb	r3, [r7, #23]
 8015dd8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015dda:	7dfb      	ldrb	r3, [r7, #23]
 8015ddc:	461a      	mov	r2, r3
 8015dde:	68b9      	ldr	r1, [r7, #8]
 8015de0:	68f8      	ldr	r0, [r7, #12]
 8015de2:	f7ff fe93 	bl	8015b0c <etharp_output_to_arp_index>
 8015de6:	4603      	mov	r3, r0
 8015de8:	e018      	b.n	8015e1c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015dea:	7dfb      	ldrb	r3, [r7, #23]
 8015dec:	3301      	adds	r3, #1
 8015dee:	75fb      	strb	r3, [r7, #23]
 8015df0:	7dfb      	ldrb	r3, [r7, #23]
 8015df2:	2b09      	cmp	r3, #9
 8015df4:	d9ca      	bls.n	8015d8c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015df6:	68ba      	ldr	r2, [r7, #8]
 8015df8:	69b9      	ldr	r1, [r7, #24]
 8015dfa:	68f8      	ldr	r0, [r7, #12]
 8015dfc:	f000 f822 	bl	8015e44 <etharp_query>
 8015e00:	4603      	mov	r3, r0
 8015e02:	e00b      	b.n	8015e1c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e0e:	9300      	str	r3, [sp, #0]
 8015e10:	69fb      	ldr	r3, [r7, #28]
 8015e12:	68b9      	ldr	r1, [r7, #8]
 8015e14:	68f8      	ldr	r0, [r7, #12]
 8015e16:	f001 fd57 	bl	80178c8 <ethernet_output>
 8015e1a:	4603      	mov	r3, r0
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3720      	adds	r7, #32
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	0801c27c 	.word	0x0801c27c
 8015e28:	0801c3cc 	.word	0x0801c3cc
 8015e2c:	0801c2f4 	.word	0x0801c2f4
 8015e30:	0801c41c 	.word	0x0801c41c
 8015e34:	0801c3bc 	.word	0x0801c3bc
 8015e38:	08026bbc 	.word	0x08026bbc
 8015e3c:	20008bcc 	.word	0x20008bcc
 8015e40:	20008adc 	.word	0x20008adc

08015e44 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b08c      	sub	sp, #48	; 0x30
 8015e48:	af02      	add	r7, sp, #8
 8015e4a:	60f8      	str	r0, [r7, #12]
 8015e4c:	60b9      	str	r1, [r7, #8]
 8015e4e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	332a      	adds	r3, #42	; 0x2a
 8015e54:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015e56:	23ff      	movs	r3, #255	; 0xff
 8015e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	68f9      	ldr	r1, [r7, #12]
 8015e66:	4618      	mov	r0, r3
 8015e68:	f000 fe2a 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d10c      	bne.n	8015e8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e7a:	2be0      	cmp	r3, #224	; 0xe0
 8015e7c:	d006      	beq.n	8015e8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d003      	beq.n	8015e8c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d102      	bne.n	8015e92 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015e8c:	f06f 030f 	mvn.w	r3, #15
 8015e90:	e102      	b.n	8016098 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015e92:	68fa      	ldr	r2, [r7, #12]
 8015e94:	2101      	movs	r1, #1
 8015e96:	68b8      	ldr	r0, [r7, #8]
 8015e98:	f7ff fb5c 	bl	8015554 <etharp_find_entry>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015ea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	da02      	bge.n	8015eae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015ea8:	8a7b      	ldrh	r3, [r7, #18]
 8015eaa:	b25b      	sxtb	r3, r3
 8015eac:	e0f4      	b.n	8016098 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015eae:	8a7b      	ldrh	r3, [r7, #18]
 8015eb0:	2b7e      	cmp	r3, #126	; 0x7e
 8015eb2:	d906      	bls.n	8015ec2 <etharp_query+0x7e>
 8015eb4:	4b7a      	ldr	r3, [pc, #488]	; (80160a0 <etharp_query+0x25c>)
 8015eb6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015eba:	497a      	ldr	r1, [pc, #488]	; (80160a4 <etharp_query+0x260>)
 8015ebc:	487a      	ldr	r0, [pc, #488]	; (80160a8 <etharp_query+0x264>)
 8015ebe:	f001 ff93 	bl	8017de8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015ec2:	8a7b      	ldrh	r3, [r7, #18]
 8015ec4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015ec6:	7c7a      	ldrb	r2, [r7, #17]
 8015ec8:	4978      	ldr	r1, [pc, #480]	; (80160ac <etharp_query+0x268>)
 8015eca:	4613      	mov	r3, r2
 8015ecc:	005b      	lsls	r3, r3, #1
 8015ece:	4413      	add	r3, r2
 8015ed0:	00db      	lsls	r3, r3, #3
 8015ed2:	440b      	add	r3, r1
 8015ed4:	3314      	adds	r3, #20
 8015ed6:	781b      	ldrb	r3, [r3, #0]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d115      	bne.n	8015f08 <etharp_query+0xc4>
    is_new_entry = 1;
 8015edc:	2301      	movs	r3, #1
 8015ede:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015ee0:	7c7a      	ldrb	r2, [r7, #17]
 8015ee2:	4972      	ldr	r1, [pc, #456]	; (80160ac <etharp_query+0x268>)
 8015ee4:	4613      	mov	r3, r2
 8015ee6:	005b      	lsls	r3, r3, #1
 8015ee8:	4413      	add	r3, r2
 8015eea:	00db      	lsls	r3, r3, #3
 8015eec:	440b      	add	r3, r1
 8015eee:	3314      	adds	r3, #20
 8015ef0:	2201      	movs	r2, #1
 8015ef2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015ef4:	7c7a      	ldrb	r2, [r7, #17]
 8015ef6:	496d      	ldr	r1, [pc, #436]	; (80160ac <etharp_query+0x268>)
 8015ef8:	4613      	mov	r3, r2
 8015efa:	005b      	lsls	r3, r3, #1
 8015efc:	4413      	add	r3, r2
 8015efe:	00db      	lsls	r3, r3, #3
 8015f00:	440b      	add	r3, r1
 8015f02:	3308      	adds	r3, #8
 8015f04:	68fa      	ldr	r2, [r7, #12]
 8015f06:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015f08:	7c7a      	ldrb	r2, [r7, #17]
 8015f0a:	4968      	ldr	r1, [pc, #416]	; (80160ac <etharp_query+0x268>)
 8015f0c:	4613      	mov	r3, r2
 8015f0e:	005b      	lsls	r3, r3, #1
 8015f10:	4413      	add	r3, r2
 8015f12:	00db      	lsls	r3, r3, #3
 8015f14:	440b      	add	r3, r1
 8015f16:	3314      	adds	r3, #20
 8015f18:	781b      	ldrb	r3, [r3, #0]
 8015f1a:	2b01      	cmp	r3, #1
 8015f1c:	d011      	beq.n	8015f42 <etharp_query+0xfe>
 8015f1e:	7c7a      	ldrb	r2, [r7, #17]
 8015f20:	4962      	ldr	r1, [pc, #392]	; (80160ac <etharp_query+0x268>)
 8015f22:	4613      	mov	r3, r2
 8015f24:	005b      	lsls	r3, r3, #1
 8015f26:	4413      	add	r3, r2
 8015f28:	00db      	lsls	r3, r3, #3
 8015f2a:	440b      	add	r3, r1
 8015f2c:	3314      	adds	r3, #20
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	2b01      	cmp	r3, #1
 8015f32:	d806      	bhi.n	8015f42 <etharp_query+0xfe>
 8015f34:	4b5a      	ldr	r3, [pc, #360]	; (80160a0 <etharp_query+0x25c>)
 8015f36:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015f3a:	495d      	ldr	r1, [pc, #372]	; (80160b0 <etharp_query+0x26c>)
 8015f3c:	485a      	ldr	r0, [pc, #360]	; (80160a8 <etharp_query+0x264>)
 8015f3e:	f001 ff53 	bl	8017de8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015f42:	6a3b      	ldr	r3, [r7, #32]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d102      	bne.n	8015f4e <etharp_query+0x10a>
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d10c      	bne.n	8015f68 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015f4e:	68b9      	ldr	r1, [r7, #8]
 8015f50:	68f8      	ldr	r0, [r7, #12]
 8015f52:	f000 f963 	bl	801621c <etharp_request>
 8015f56:	4603      	mov	r3, r0
 8015f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d102      	bne.n	8015f68 <etharp_query+0x124>
      return result;
 8015f62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015f66:	e097      	b.n	8016098 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d106      	bne.n	8015f7c <etharp_query+0x138>
 8015f6e:	4b4c      	ldr	r3, [pc, #304]	; (80160a0 <etharp_query+0x25c>)
 8015f70:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015f74:	494f      	ldr	r1, [pc, #316]	; (80160b4 <etharp_query+0x270>)
 8015f76:	484c      	ldr	r0, [pc, #304]	; (80160a8 <etharp_query+0x264>)
 8015f78:	f001 ff36 	bl	8017de8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015f7c:	7c7a      	ldrb	r2, [r7, #17]
 8015f7e:	494b      	ldr	r1, [pc, #300]	; (80160ac <etharp_query+0x268>)
 8015f80:	4613      	mov	r3, r2
 8015f82:	005b      	lsls	r3, r3, #1
 8015f84:	4413      	add	r3, r2
 8015f86:	00db      	lsls	r3, r3, #3
 8015f88:	440b      	add	r3, r1
 8015f8a:	3314      	adds	r3, #20
 8015f8c:	781b      	ldrb	r3, [r3, #0]
 8015f8e:	2b01      	cmp	r3, #1
 8015f90:	d918      	bls.n	8015fc4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015f92:	4a49      	ldr	r2, [pc, #292]	; (80160b8 <etharp_query+0x274>)
 8015f94:	7c7b      	ldrb	r3, [r7, #17]
 8015f96:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015f98:	7c7a      	ldrb	r2, [r7, #17]
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	005b      	lsls	r3, r3, #1
 8015f9e:	4413      	add	r3, r2
 8015fa0:	00db      	lsls	r3, r3, #3
 8015fa2:	3308      	adds	r3, #8
 8015fa4:	4a41      	ldr	r2, [pc, #260]	; (80160ac <etharp_query+0x268>)
 8015fa6:	4413      	add	r3, r2
 8015fa8:	1d1a      	adds	r2, r3, #4
 8015faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fae:	9300      	str	r3, [sp, #0]
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	697a      	ldr	r2, [r7, #20]
 8015fb4:	6879      	ldr	r1, [r7, #4]
 8015fb6:	68f8      	ldr	r0, [r7, #12]
 8015fb8:	f001 fc86 	bl	80178c8 <ethernet_output>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015fc2:	e067      	b.n	8016094 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015fc4:	7c7a      	ldrb	r2, [r7, #17]
 8015fc6:	4939      	ldr	r1, [pc, #228]	; (80160ac <etharp_query+0x268>)
 8015fc8:	4613      	mov	r3, r2
 8015fca:	005b      	lsls	r3, r3, #1
 8015fcc:	4413      	add	r3, r2
 8015fce:	00db      	lsls	r3, r3, #3
 8015fd0:	440b      	add	r3, r1
 8015fd2:	3314      	adds	r3, #20
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	2b01      	cmp	r3, #1
 8015fd8:	d15c      	bne.n	8016094 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015fe2:	e01c      	b.n	801601e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	895a      	ldrh	r2, [r3, #10]
 8015fe8:	69fb      	ldr	r3, [r7, #28]
 8015fea:	891b      	ldrh	r3, [r3, #8]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d10a      	bne.n	8016006 <etharp_query+0x1c2>
 8015ff0:	69fb      	ldr	r3, [r7, #28]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d006      	beq.n	8016006 <etharp_query+0x1c2>
 8015ff8:	4b29      	ldr	r3, [pc, #164]	; (80160a0 <etharp_query+0x25c>)
 8015ffa:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015ffe:	492f      	ldr	r1, [pc, #188]	; (80160bc <etharp_query+0x278>)
 8016000:	4829      	ldr	r0, [pc, #164]	; (80160a8 <etharp_query+0x264>)
 8016002:	f001 fef1 	bl	8017de8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016006:	69fb      	ldr	r3, [r7, #28]
 8016008:	7b1b      	ldrb	r3, [r3, #12]
 801600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801600e:	2b00      	cmp	r3, #0
 8016010:	d002      	beq.n	8016018 <etharp_query+0x1d4>
        copy_needed = 1;
 8016012:	2301      	movs	r3, #1
 8016014:	61bb      	str	r3, [r7, #24]
        break;
 8016016:	e005      	b.n	8016024 <etharp_query+0x1e0>
      }
      p = p->next;
 8016018:	69fb      	ldr	r3, [r7, #28]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801601e:	69fb      	ldr	r3, [r7, #28]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d1df      	bne.n	8015fe4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8016024:	69bb      	ldr	r3, [r7, #24]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d007      	beq.n	801603a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801602a:	687a      	ldr	r2, [r7, #4]
 801602c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016030:	200e      	movs	r0, #14
 8016032:	f7f6 fbed 	bl	800c810 <pbuf_clone>
 8016036:	61f8      	str	r0, [r7, #28]
 8016038:	e004      	b.n	8016044 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801603e:	69f8      	ldr	r0, [r7, #28]
 8016040:	f7f6 fa14 	bl	800c46c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016044:	69fb      	ldr	r3, [r7, #28]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d021      	beq.n	801608e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801604a:	7c7a      	ldrb	r2, [r7, #17]
 801604c:	4917      	ldr	r1, [pc, #92]	; (80160ac <etharp_query+0x268>)
 801604e:	4613      	mov	r3, r2
 8016050:	005b      	lsls	r3, r3, #1
 8016052:	4413      	add	r3, r2
 8016054:	00db      	lsls	r3, r3, #3
 8016056:	440b      	add	r3, r1
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d00a      	beq.n	8016074 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801605e:	7c7a      	ldrb	r2, [r7, #17]
 8016060:	4912      	ldr	r1, [pc, #72]	; (80160ac <etharp_query+0x268>)
 8016062:	4613      	mov	r3, r2
 8016064:	005b      	lsls	r3, r3, #1
 8016066:	4413      	add	r3, r2
 8016068:	00db      	lsls	r3, r3, #3
 801606a:	440b      	add	r3, r1
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	4618      	mov	r0, r3
 8016070:	f7f6 f956 	bl	800c320 <pbuf_free>
      }
      arp_table[i].q = p;
 8016074:	7c7a      	ldrb	r2, [r7, #17]
 8016076:	490d      	ldr	r1, [pc, #52]	; (80160ac <etharp_query+0x268>)
 8016078:	4613      	mov	r3, r2
 801607a:	005b      	lsls	r3, r3, #1
 801607c:	4413      	add	r3, r2
 801607e:	00db      	lsls	r3, r3, #3
 8016080:	440b      	add	r3, r1
 8016082:	69fa      	ldr	r2, [r7, #28]
 8016084:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016086:	2300      	movs	r3, #0
 8016088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801608c:	e002      	b.n	8016094 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801608e:	23ff      	movs	r3, #255	; 0xff
 8016090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016094:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016098:	4618      	mov	r0, r3
 801609a:	3728      	adds	r7, #40	; 0x28
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	0801c27c 	.word	0x0801c27c
 80160a4:	0801c428 	.word	0x0801c428
 80160a8:	0801c2f4 	.word	0x0801c2f4
 80160ac:	20008adc 	.word	0x20008adc
 80160b0:	0801c438 	.word	0x0801c438
 80160b4:	0801c41c 	.word	0x0801c41c
 80160b8:	20008bcc 	.word	0x20008bcc
 80160bc:	0801c460 	.word	0x0801c460

080160c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b08a      	sub	sp, #40	; 0x28
 80160c4:	af02      	add	r7, sp, #8
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
 80160cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80160ce:	2300      	movs	r3, #0
 80160d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d106      	bne.n	80160e6 <etharp_raw+0x26>
 80160d8:	4b3a      	ldr	r3, [pc, #232]	; (80161c4 <etharp_raw+0x104>)
 80160da:	f240 4257 	movw	r2, #1111	; 0x457
 80160de:	493a      	ldr	r1, [pc, #232]	; (80161c8 <etharp_raw+0x108>)
 80160e0:	483a      	ldr	r0, [pc, #232]	; (80161cc <etharp_raw+0x10c>)
 80160e2:	f001 fe81 	bl	8017de8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80160e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160ea:	211c      	movs	r1, #28
 80160ec:	200e      	movs	r0, #14
 80160ee:	f7f5 fe37 	bl	800bd60 <pbuf_alloc>
 80160f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80160f4:	69bb      	ldr	r3, [r7, #24]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d102      	bne.n	8016100 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80160fa:	f04f 33ff 	mov.w	r3, #4294967295
 80160fe:	e05d      	b.n	80161bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016100:	69bb      	ldr	r3, [r7, #24]
 8016102:	895b      	ldrh	r3, [r3, #10]
 8016104:	2b1b      	cmp	r3, #27
 8016106:	d806      	bhi.n	8016116 <etharp_raw+0x56>
 8016108:	4b2e      	ldr	r3, [pc, #184]	; (80161c4 <etharp_raw+0x104>)
 801610a:	f240 4263 	movw	r2, #1123	; 0x463
 801610e:	4930      	ldr	r1, [pc, #192]	; (80161d0 <etharp_raw+0x110>)
 8016110:	482e      	ldr	r0, [pc, #184]	; (80161cc <etharp_raw+0x10c>)
 8016112:	f001 fe69 	bl	8017de8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016116:	69bb      	ldr	r3, [r7, #24]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801611c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801611e:	4618      	mov	r0, r3
 8016120:	f7f4 fd14 	bl	800ab4c <lwip_htons>
 8016124:	4603      	mov	r3, r0
 8016126:	461a      	mov	r2, r3
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016132:	2b06      	cmp	r3, #6
 8016134:	d006      	beq.n	8016144 <etharp_raw+0x84>
 8016136:	4b23      	ldr	r3, [pc, #140]	; (80161c4 <etharp_raw+0x104>)
 8016138:	f240 426a 	movw	r2, #1130	; 0x46a
 801613c:	4925      	ldr	r1, [pc, #148]	; (80161d4 <etharp_raw+0x114>)
 801613e:	4823      	ldr	r0, [pc, #140]	; (80161cc <etharp_raw+0x10c>)
 8016140:	f001 fe52 	bl	8017de8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	3308      	adds	r3, #8
 8016148:	2206      	movs	r2, #6
 801614a:	6839      	ldr	r1, [r7, #0]
 801614c:	4618      	mov	r0, r3
 801614e:	f001 fe38 	bl	8017dc2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016152:	697b      	ldr	r3, [r7, #20]
 8016154:	3312      	adds	r3, #18
 8016156:	2206      	movs	r2, #6
 8016158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801615a:	4618      	mov	r0, r3
 801615c:	f001 fe31 	bl	8017dc2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016160:	697b      	ldr	r3, [r7, #20]
 8016162:	330e      	adds	r3, #14
 8016164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016166:	6812      	ldr	r2, [r2, #0]
 8016168:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	3318      	adds	r3, #24
 801616e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016170:	6812      	ldr	r2, [r2, #0]
 8016172:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	2200      	movs	r2, #0
 8016178:	701a      	strb	r2, [r3, #0]
 801617a:	2200      	movs	r2, #0
 801617c:	f042 0201 	orr.w	r2, r2, #1
 8016180:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	2200      	movs	r2, #0
 8016186:	f042 0208 	orr.w	r2, r2, #8
 801618a:	709a      	strb	r2, [r3, #2]
 801618c:	2200      	movs	r2, #0
 801618e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	2206      	movs	r2, #6
 8016194:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	2204      	movs	r2, #4
 801619a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801619c:	f640 0306 	movw	r3, #2054	; 0x806
 80161a0:	9300      	str	r3, [sp, #0]
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	68ba      	ldr	r2, [r7, #8]
 80161a6:	69b9      	ldr	r1, [r7, #24]
 80161a8:	68f8      	ldr	r0, [r7, #12]
 80161aa:	f001 fb8d 	bl	80178c8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80161ae:	69b8      	ldr	r0, [r7, #24]
 80161b0:	f7f6 f8b6 	bl	800c320 <pbuf_free>
  p = NULL;
 80161b4:	2300      	movs	r3, #0
 80161b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80161b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3720      	adds	r7, #32
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}
 80161c4:	0801c27c 	.word	0x0801c27c
 80161c8:	0801c3cc 	.word	0x0801c3cc
 80161cc:	0801c2f4 	.word	0x0801c2f4
 80161d0:	0801c47c 	.word	0x0801c47c
 80161d4:	0801c4b0 	.word	0x0801c4b0

080161d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b088      	sub	sp, #32
 80161dc:	af04      	add	r7, sp, #16
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80161f4:	2201      	movs	r2, #1
 80161f6:	9203      	str	r2, [sp, #12]
 80161f8:	68ba      	ldr	r2, [r7, #8]
 80161fa:	9202      	str	r2, [sp, #8]
 80161fc:	4a06      	ldr	r2, [pc, #24]	; (8016218 <etharp_request_dst+0x40>)
 80161fe:	9201      	str	r2, [sp, #4]
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	4603      	mov	r3, r0
 8016204:	687a      	ldr	r2, [r7, #4]
 8016206:	68f8      	ldr	r0, [r7, #12]
 8016208:	f7ff ff5a 	bl	80160c0 <etharp_raw>
 801620c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801620e:	4618      	mov	r0, r3
 8016210:	3710      	adds	r7, #16
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	08026bc4 	.word	0x08026bc4

0801621c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016226:	4a05      	ldr	r2, [pc, #20]	; (801623c <etharp_request+0x20>)
 8016228:	6839      	ldr	r1, [r7, #0]
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f7ff ffd4 	bl	80161d8 <etharp_request_dst>
 8016230:	4603      	mov	r3, r0
}
 8016232:	4618      	mov	r0, r3
 8016234:	3708      	adds	r7, #8
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	08026bbc 	.word	0x08026bbc

08016240 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b08e      	sub	sp, #56	; 0x38
 8016244:	af04      	add	r7, sp, #16
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801624a:	4b79      	ldr	r3, [pc, #484]	; (8016430 <icmp_input+0x1f0>)
 801624c:	689b      	ldr	r3, [r3, #8]
 801624e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016252:	781b      	ldrb	r3, [r3, #0]
 8016254:	f003 030f 	and.w	r3, r3, #15
 8016258:	b2db      	uxtb	r3, r3
 801625a:	009b      	lsls	r3, r3, #2
 801625c:	b2db      	uxtb	r3, r3
 801625e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016262:	2b13      	cmp	r3, #19
 8016264:	f240 80cd 	bls.w	8016402 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	895b      	ldrh	r3, [r3, #10]
 801626c:	2b03      	cmp	r3, #3
 801626e:	f240 80ca 	bls.w	8016406 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	685b      	ldr	r3, [r3, #4]
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801627c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016280:	2b00      	cmp	r3, #0
 8016282:	f000 80b7 	beq.w	80163f4 <icmp_input+0x1b4>
 8016286:	2b08      	cmp	r3, #8
 8016288:	f040 80b7 	bne.w	80163fa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801628c:	4b69      	ldr	r3, [pc, #420]	; (8016434 <icmp_input+0x1f4>)
 801628e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016290:	4b67      	ldr	r3, [pc, #412]	; (8016430 <icmp_input+0x1f0>)
 8016292:	695b      	ldr	r3, [r3, #20]
 8016294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016298:	2be0      	cmp	r3, #224	; 0xe0
 801629a:	f000 80bb 	beq.w	8016414 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801629e:	4b64      	ldr	r3, [pc, #400]	; (8016430 <icmp_input+0x1f0>)
 80162a0:	695a      	ldr	r2, [r3, #20]
 80162a2:	4b63      	ldr	r3, [pc, #396]	; (8016430 <icmp_input+0x1f0>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	4619      	mov	r1, r3
 80162a8:	4610      	mov	r0, r2
 80162aa:	f000 fc09 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	f040 80b1 	bne.w	8016418 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	891b      	ldrh	r3, [r3, #8]
 80162ba:	2b07      	cmp	r3, #7
 80162bc:	f240 80a5 	bls.w	801640a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80162c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162c2:	330e      	adds	r3, #14
 80162c4:	4619      	mov	r1, r3
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f7f5 ff94 	bl	800c1f4 <pbuf_add_header>
 80162cc:	4603      	mov	r3, r0
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d04b      	beq.n	801636a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	891a      	ldrh	r2, [r3, #8]
 80162d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162d8:	4413      	add	r3, r2
 80162da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	891b      	ldrh	r3, [r3, #8]
 80162e0:	8b7a      	ldrh	r2, [r7, #26]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	f0c0 809a 	bcc.w	801641c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80162e8:	8b7b      	ldrh	r3, [r7, #26]
 80162ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162ee:	4619      	mov	r1, r3
 80162f0:	200e      	movs	r0, #14
 80162f2:	f7f5 fd35 	bl	800bd60 <pbuf_alloc>
 80162f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	f000 8090 	beq.w	8016420 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	895b      	ldrh	r3, [r3, #10]
 8016304:	461a      	mov	r2, r3
 8016306:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016308:	3308      	adds	r3, #8
 801630a:	429a      	cmp	r2, r3
 801630c:	d203      	bcs.n	8016316 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801630e:	6978      	ldr	r0, [r7, #20]
 8016310:	f7f6 f806 	bl	800c320 <pbuf_free>
          goto icmperr;
 8016314:	e085      	b.n	8016422 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801631c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801631e:	4618      	mov	r0, r3
 8016320:	f001 fd4f 	bl	8017dc2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016326:	4619      	mov	r1, r3
 8016328:	6978      	ldr	r0, [r7, #20]
 801632a:	f7f5 ff73 	bl	800c214 <pbuf_remove_header>
 801632e:	4603      	mov	r3, r0
 8016330:	2b00      	cmp	r3, #0
 8016332:	d009      	beq.n	8016348 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016334:	4b40      	ldr	r3, [pc, #256]	; (8016438 <icmp_input+0x1f8>)
 8016336:	22b6      	movs	r2, #182	; 0xb6
 8016338:	4940      	ldr	r1, [pc, #256]	; (801643c <icmp_input+0x1fc>)
 801633a:	4841      	ldr	r0, [pc, #260]	; (8016440 <icmp_input+0x200>)
 801633c:	f001 fd54 	bl	8017de8 <iprintf>
          pbuf_free(r);
 8016340:	6978      	ldr	r0, [r7, #20]
 8016342:	f7f5 ffed 	bl	800c320 <pbuf_free>
          goto icmperr;
 8016346:	e06c      	b.n	8016422 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016348:	6879      	ldr	r1, [r7, #4]
 801634a:	6978      	ldr	r0, [r7, #20]
 801634c:	f7f6 f91c 	bl	800c588 <pbuf_copy>
 8016350:	4603      	mov	r3, r0
 8016352:	2b00      	cmp	r3, #0
 8016354:	d003      	beq.n	801635e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016356:	6978      	ldr	r0, [r7, #20]
 8016358:	f7f5 ffe2 	bl	800c320 <pbuf_free>
          goto icmperr;
 801635c:	e061      	b.n	8016422 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801635e:	6878      	ldr	r0, [r7, #4]
 8016360:	f7f5 ffde 	bl	800c320 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	607b      	str	r3, [r7, #4]
 8016368:	e00f      	b.n	801638a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801636a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801636c:	330e      	adds	r3, #14
 801636e:	4619      	mov	r1, r3
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f7f5 ff4f 	bl	800c214 <pbuf_remove_header>
 8016376:	4603      	mov	r3, r0
 8016378:	2b00      	cmp	r3, #0
 801637a:	d006      	beq.n	801638a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801637c:	4b2e      	ldr	r3, [pc, #184]	; (8016438 <icmp_input+0x1f8>)
 801637e:	22c7      	movs	r2, #199	; 0xc7
 8016380:	4930      	ldr	r1, [pc, #192]	; (8016444 <icmp_input+0x204>)
 8016382:	482f      	ldr	r0, [pc, #188]	; (8016440 <icmp_input+0x200>)
 8016384:	f001 fd30 	bl	8017de8 <iprintf>
          goto icmperr;
 8016388:	e04b      	b.n	8016422 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016392:	4619      	mov	r1, r3
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f7f5 ff2d 	bl	800c1f4 <pbuf_add_header>
 801639a:	4603      	mov	r3, r0
 801639c:	2b00      	cmp	r3, #0
 801639e:	d12b      	bne.n	80163f8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80163ae:	4b20      	ldr	r3, [pc, #128]	; (8016430 <icmp_input+0x1f0>)
 80163b0:	691a      	ldr	r2, [r3, #16]
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80163b6:	693b      	ldr	r3, [r7, #16]
 80163b8:	2200      	movs	r2, #0
 80163ba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	2200      	movs	r2, #0
 80163c0:	709a      	strb	r2, [r3, #2]
 80163c2:	2200      	movs	r2, #0
 80163c4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	22ff      	movs	r2, #255	; 0xff
 80163ca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	2200      	movs	r2, #0
 80163d0:	729a      	strb	r2, [r3, #10]
 80163d2:	2200      	movs	r2, #0
 80163d4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	9302      	str	r3, [sp, #8]
 80163da:	2301      	movs	r3, #1
 80163dc:	9301      	str	r3, [sp, #4]
 80163de:	2300      	movs	r3, #0
 80163e0:	9300      	str	r3, [sp, #0]
 80163e2:	23ff      	movs	r3, #255	; 0xff
 80163e4:	2200      	movs	r2, #0
 80163e6:	69f9      	ldr	r1, [r7, #28]
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f000 fa91 	bl	8016910 <ip4_output_if>
 80163ee:	4603      	mov	r3, r0
 80163f0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80163f2:	e001      	b.n	80163f8 <icmp_input+0x1b8>
      break;
 80163f4:	bf00      	nop
 80163f6:	e000      	b.n	80163fa <icmp_input+0x1ba>
      break;
 80163f8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7f5 ff90 	bl	800c320 <pbuf_free>
  return;
 8016400:	e013      	b.n	801642a <icmp_input+0x1ea>
    goto lenerr;
 8016402:	bf00      	nop
 8016404:	e002      	b.n	801640c <icmp_input+0x1cc>
    goto lenerr;
 8016406:	bf00      	nop
 8016408:	e000      	b.n	801640c <icmp_input+0x1cc>
        goto lenerr;
 801640a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f7f5 ff87 	bl	800c320 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016412:	e00a      	b.n	801642a <icmp_input+0x1ea>
        goto icmperr;
 8016414:	bf00      	nop
 8016416:	e004      	b.n	8016422 <icmp_input+0x1e2>
        goto icmperr;
 8016418:	bf00      	nop
 801641a:	e002      	b.n	8016422 <icmp_input+0x1e2>
          goto icmperr;
 801641c:	bf00      	nop
 801641e:	e000      	b.n	8016422 <icmp_input+0x1e2>
          goto icmperr;
 8016420:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	f7f5 ff7c 	bl	800c320 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016428:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801642a:	3728      	adds	r7, #40	; 0x28
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	2000bde0 	.word	0x2000bde0
 8016434:	2000bdf4 	.word	0x2000bdf4
 8016438:	0801c4f4 	.word	0x0801c4f4
 801643c:	0801c52c 	.word	0x0801c52c
 8016440:	0801c564 	.word	0x0801c564
 8016444:	0801c58c 	.word	0x0801c58c

08016448 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	460b      	mov	r3, r1
 8016452:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016454:	78fb      	ldrb	r3, [r7, #3]
 8016456:	461a      	mov	r2, r3
 8016458:	2103      	movs	r1, #3
 801645a:	6878      	ldr	r0, [r7, #4]
 801645c:	f000 f814 	bl	8016488 <icmp_send_response>
}
 8016460:	bf00      	nop
 8016462:	3708      	adds	r7, #8
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b082      	sub	sp, #8
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	460b      	mov	r3, r1
 8016472:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016474:	78fb      	ldrb	r3, [r7, #3]
 8016476:	461a      	mov	r2, r3
 8016478:	210b      	movs	r1, #11
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f000 f804 	bl	8016488 <icmp_send_response>
}
 8016480:	bf00      	nop
 8016482:	3708      	adds	r7, #8
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}

08016488 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b08c      	sub	sp, #48	; 0x30
 801648c:	af04      	add	r7, sp, #16
 801648e:	6078      	str	r0, [r7, #4]
 8016490:	460b      	mov	r3, r1
 8016492:	70fb      	strb	r3, [r7, #3]
 8016494:	4613      	mov	r3, r2
 8016496:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016498:	f44f 7220 	mov.w	r2, #640	; 0x280
 801649c:	2124      	movs	r1, #36	; 0x24
 801649e:	2022      	movs	r0, #34	; 0x22
 80164a0:	f7f5 fc5e 	bl	800bd60 <pbuf_alloc>
 80164a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80164a6:	69fb      	ldr	r3, [r7, #28]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d04c      	beq.n	8016546 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80164ac:	69fb      	ldr	r3, [r7, #28]
 80164ae:	895b      	ldrh	r3, [r3, #10]
 80164b0:	2b23      	cmp	r3, #35	; 0x23
 80164b2:	d806      	bhi.n	80164c2 <icmp_send_response+0x3a>
 80164b4:	4b26      	ldr	r3, [pc, #152]	; (8016550 <icmp_send_response+0xc8>)
 80164b6:	f240 1269 	movw	r2, #361	; 0x169
 80164ba:	4926      	ldr	r1, [pc, #152]	; (8016554 <icmp_send_response+0xcc>)
 80164bc:	4826      	ldr	r0, [pc, #152]	; (8016558 <icmp_send_response+0xd0>)
 80164be:	f001 fc93 	bl	8017de8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80164c8:	69fb      	ldr	r3, [r7, #28]
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80164ce:	697b      	ldr	r3, [r7, #20]
 80164d0:	78fa      	ldrb	r2, [r7, #3]
 80164d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	78ba      	ldrb	r2, [r7, #2]
 80164d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	2200      	movs	r2, #0
 80164de:	711a      	strb	r2, [r3, #4]
 80164e0:	2200      	movs	r2, #0
 80164e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80164e4:	697b      	ldr	r3, [r7, #20]
 80164e6:	2200      	movs	r2, #0
 80164e8:	719a      	strb	r2, [r3, #6]
 80164ea:	2200      	movs	r2, #0
 80164ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80164ee:	69fb      	ldr	r3, [r7, #28]
 80164f0:	685b      	ldr	r3, [r3, #4]
 80164f2:	f103 0008 	add.w	r0, r3, #8
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	685b      	ldr	r3, [r3, #4]
 80164fa:	221c      	movs	r2, #28
 80164fc:	4619      	mov	r1, r3
 80164fe:	f001 fc60 	bl	8017dc2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016502:	69bb      	ldr	r3, [r7, #24]
 8016504:	68db      	ldr	r3, [r3, #12]
 8016506:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016508:	f107 030c 	add.w	r3, r7, #12
 801650c:	4618      	mov	r0, r3
 801650e:	f000 f825 	bl	801655c <ip4_route>
 8016512:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016514:	693b      	ldr	r3, [r7, #16]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d011      	beq.n	801653e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	2200      	movs	r2, #0
 801651e:	709a      	strb	r2, [r3, #2]
 8016520:	2200      	movs	r2, #0
 8016522:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016524:	f107 020c 	add.w	r2, r7, #12
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	9302      	str	r3, [sp, #8]
 801652c:	2301      	movs	r3, #1
 801652e:	9301      	str	r3, [sp, #4]
 8016530:	2300      	movs	r3, #0
 8016532:	9300      	str	r3, [sp, #0]
 8016534:	23ff      	movs	r3, #255	; 0xff
 8016536:	2100      	movs	r1, #0
 8016538:	69f8      	ldr	r0, [r7, #28]
 801653a:	f000 f9e9 	bl	8016910 <ip4_output_if>
  }
  pbuf_free(q);
 801653e:	69f8      	ldr	r0, [r7, #28]
 8016540:	f7f5 feee 	bl	800c320 <pbuf_free>
 8016544:	e000      	b.n	8016548 <icmp_send_response+0xc0>
    return;
 8016546:	bf00      	nop
}
 8016548:	3720      	adds	r7, #32
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}
 801654e:	bf00      	nop
 8016550:	0801c4f4 	.word	0x0801c4f4
 8016554:	0801c5c0 	.word	0x0801c5c0
 8016558:	0801c564 	.word	0x0801c564

0801655c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801655c:	b480      	push	{r7}
 801655e:	b085      	sub	sp, #20
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016564:	4b33      	ldr	r3, [pc, #204]	; (8016634 <ip4_route+0xd8>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	60fb      	str	r3, [r7, #12]
 801656a:	e036      	b.n	80165da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016572:	f003 0301 	and.w	r3, r3, #1
 8016576:	b2db      	uxtb	r3, r3
 8016578:	2b00      	cmp	r3, #0
 801657a:	d02b      	beq.n	80165d4 <ip4_route+0x78>
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016582:	089b      	lsrs	r3, r3, #2
 8016584:	f003 0301 	and.w	r3, r3, #1
 8016588:	b2db      	uxtb	r3, r3
 801658a:	2b00      	cmp	r3, #0
 801658c:	d022      	beq.n	80165d4 <ip4_route+0x78>
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	3304      	adds	r3, #4
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d01d      	beq.n	80165d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681a      	ldr	r2, [r3, #0]
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	3304      	adds	r3, #4
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	405a      	eors	r2, r3
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	3308      	adds	r3, #8
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	4013      	ands	r3, r2
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	e038      	b.n	8016626 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165ba:	f003 0302 	and.w	r3, r3, #2
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d108      	bne.n	80165d4 <ip4_route+0x78>
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681a      	ldr	r2, [r3, #0]
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	330c      	adds	r3, #12
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	429a      	cmp	r2, r3
 80165ce:	d101      	bne.n	80165d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	e028      	b.n	8016626 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	60fb      	str	r3, [r7, #12]
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d1c5      	bne.n	801656c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80165e0:	4b15      	ldr	r3, [pc, #84]	; (8016638 <ip4_route+0xdc>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d01a      	beq.n	801661e <ip4_route+0xc2>
 80165e8:	4b13      	ldr	r3, [pc, #76]	; (8016638 <ip4_route+0xdc>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165f0:	f003 0301 	and.w	r3, r3, #1
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d012      	beq.n	801661e <ip4_route+0xc2>
 80165f8:	4b0f      	ldr	r3, [pc, #60]	; (8016638 <ip4_route+0xdc>)
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016600:	f003 0304 	and.w	r3, r3, #4
 8016604:	2b00      	cmp	r3, #0
 8016606:	d00a      	beq.n	801661e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016608:	4b0b      	ldr	r3, [pc, #44]	; (8016638 <ip4_route+0xdc>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	3304      	adds	r3, #4
 801660e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016610:	2b00      	cmp	r3, #0
 8016612:	d004      	beq.n	801661e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	b2db      	uxtb	r3, r3
 801661a:	2b7f      	cmp	r3, #127	; 0x7f
 801661c:	d101      	bne.n	8016622 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801661e:	2300      	movs	r3, #0
 8016620:	e001      	b.n	8016626 <ip4_route+0xca>
  }

  return netif_default;
 8016622:	4b05      	ldr	r3, [pc, #20]	; (8016638 <ip4_route+0xdc>)
 8016624:	681b      	ldr	r3, [r3, #0]
}
 8016626:	4618      	mov	r0, r3
 8016628:	3714      	adds	r7, #20
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr
 8016632:	bf00      	nop
 8016634:	2000f504 	.word	0x2000f504
 8016638:	2000f508 	.word	0x2000f508

0801663c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801664a:	f003 0301 	and.w	r3, r3, #1
 801664e:	b2db      	uxtb	r3, r3
 8016650:	2b00      	cmp	r3, #0
 8016652:	d016      	beq.n	8016682 <ip4_input_accept+0x46>
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	3304      	adds	r3, #4
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d011      	beq.n	8016682 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801665e:	4b0b      	ldr	r3, [pc, #44]	; (801668c <ip4_input_accept+0x50>)
 8016660:	695a      	ldr	r2, [r3, #20]
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	3304      	adds	r3, #4
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	429a      	cmp	r2, r3
 801666a:	d008      	beq.n	801667e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801666c:	4b07      	ldr	r3, [pc, #28]	; (801668c <ip4_input_accept+0x50>)
 801666e:	695b      	ldr	r3, [r3, #20]
 8016670:	6879      	ldr	r1, [r7, #4]
 8016672:	4618      	mov	r0, r3
 8016674:	f000 fa24 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 8016678:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801667a:	2b00      	cmp	r3, #0
 801667c:	d001      	beq.n	8016682 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801667e:	2301      	movs	r3, #1
 8016680:	e000      	b.n	8016684 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016682:	2300      	movs	r3, #0
}
 8016684:	4618      	mov	r0, r3
 8016686:	3708      	adds	r7, #8
 8016688:	46bd      	mov	sp, r7
 801668a:	bd80      	pop	{r7, pc}
 801668c:	2000bde0 	.word	0x2000bde0

08016690 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b088      	sub	sp, #32
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
 8016698:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801669a:	2301      	movs	r3, #1
 801669c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80166a4:	69fb      	ldr	r3, [r7, #28]
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	091b      	lsrs	r3, r3, #4
 80166aa:	b2db      	uxtb	r3, r3
 80166ac:	2b04      	cmp	r3, #4
 80166ae:	d004      	beq.n	80166ba <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	f7f5 fe35 	bl	800c320 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80166b6:	2300      	movs	r3, #0
 80166b8:	e121      	b.n	80168fe <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80166ba:	69fb      	ldr	r3, [r7, #28]
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	f003 030f 	and.w	r3, r3, #15
 80166c2:	b2db      	uxtb	r3, r3
 80166c4:	009b      	lsls	r3, r3, #2
 80166c6:	b2db      	uxtb	r3, r3
 80166c8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80166ca:	69fb      	ldr	r3, [r7, #28]
 80166cc:	885b      	ldrh	r3, [r3, #2]
 80166ce:	b29b      	uxth	r3, r3
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7f4 fa3b 	bl	800ab4c <lwip_htons>
 80166d6:	4603      	mov	r3, r0
 80166d8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	891b      	ldrh	r3, [r3, #8]
 80166de:	8a3a      	ldrh	r2, [r7, #16]
 80166e0:	429a      	cmp	r2, r3
 80166e2:	d204      	bcs.n	80166ee <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80166e4:	8a3b      	ldrh	r3, [r7, #16]
 80166e6:	4619      	mov	r1, r3
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7f5 fc93 	bl	800c014 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	895b      	ldrh	r3, [r3, #10]
 80166f2:	8a7a      	ldrh	r2, [r7, #18]
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d807      	bhi.n	8016708 <ip4_input+0x78>
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	891b      	ldrh	r3, [r3, #8]
 80166fc:	8a3a      	ldrh	r2, [r7, #16]
 80166fe:	429a      	cmp	r2, r3
 8016700:	d802      	bhi.n	8016708 <ip4_input+0x78>
 8016702:	8a7b      	ldrh	r3, [r7, #18]
 8016704:	2b13      	cmp	r3, #19
 8016706:	d804      	bhi.n	8016712 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f7f5 fe09 	bl	800c320 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801670e:	2300      	movs	r3, #0
 8016710:	e0f5      	b.n	80168fe <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016712:	69fb      	ldr	r3, [r7, #28]
 8016714:	691b      	ldr	r3, [r3, #16]
 8016716:	4a7c      	ldr	r2, [pc, #496]	; (8016908 <ip4_input+0x278>)
 8016718:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801671a:	69fb      	ldr	r3, [r7, #28]
 801671c:	68db      	ldr	r3, [r3, #12]
 801671e:	4a7a      	ldr	r2, [pc, #488]	; (8016908 <ip4_input+0x278>)
 8016720:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016722:	4b79      	ldr	r3, [pc, #484]	; (8016908 <ip4_input+0x278>)
 8016724:	695b      	ldr	r3, [r3, #20]
 8016726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801672a:	2be0      	cmp	r3, #224	; 0xe0
 801672c:	d112      	bne.n	8016754 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016734:	f003 0301 	and.w	r3, r3, #1
 8016738:	b2db      	uxtb	r3, r3
 801673a:	2b00      	cmp	r3, #0
 801673c:	d007      	beq.n	801674e <ip4_input+0xbe>
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	3304      	adds	r3, #4
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d002      	beq.n	801674e <ip4_input+0xbe>
      netif = inp;
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	61bb      	str	r3, [r7, #24]
 801674c:	e02a      	b.n	80167a4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801674e:	2300      	movs	r3, #0
 8016750:	61bb      	str	r3, [r7, #24]
 8016752:	e027      	b.n	80167a4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016754:	6838      	ldr	r0, [r7, #0]
 8016756:	f7ff ff71 	bl	801663c <ip4_input_accept>
 801675a:	4603      	mov	r3, r0
 801675c:	2b00      	cmp	r3, #0
 801675e:	d002      	beq.n	8016766 <ip4_input+0xd6>
      netif = inp;
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	61bb      	str	r3, [r7, #24]
 8016764:	e01e      	b.n	80167a4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016766:	2300      	movs	r3, #0
 8016768:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801676a:	4b67      	ldr	r3, [pc, #412]	; (8016908 <ip4_input+0x278>)
 801676c:	695b      	ldr	r3, [r3, #20]
 801676e:	b2db      	uxtb	r3, r3
 8016770:	2b7f      	cmp	r3, #127	; 0x7f
 8016772:	d017      	beq.n	80167a4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016774:	4b65      	ldr	r3, [pc, #404]	; (801690c <ip4_input+0x27c>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	61bb      	str	r3, [r7, #24]
 801677a:	e00e      	b.n	801679a <ip4_input+0x10a>
          if (netif == inp) {
 801677c:	69ba      	ldr	r2, [r7, #24]
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	429a      	cmp	r2, r3
 8016782:	d006      	beq.n	8016792 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016784:	69b8      	ldr	r0, [r7, #24]
 8016786:	f7ff ff59 	bl	801663c <ip4_input_accept>
 801678a:	4603      	mov	r3, r0
 801678c:	2b00      	cmp	r3, #0
 801678e:	d108      	bne.n	80167a2 <ip4_input+0x112>
 8016790:	e000      	b.n	8016794 <ip4_input+0x104>
            continue;
 8016792:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016794:	69bb      	ldr	r3, [r7, #24]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	61bb      	str	r3, [r7, #24]
 801679a:	69bb      	ldr	r3, [r7, #24]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d1ed      	bne.n	801677c <ip4_input+0xec>
 80167a0:	e000      	b.n	80167a4 <ip4_input+0x114>
            break;
 80167a2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80167a4:	69bb      	ldr	r3, [r7, #24]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d111      	bne.n	80167ce <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80167aa:	69fb      	ldr	r3, [r7, #28]
 80167ac:	7a5b      	ldrb	r3, [r3, #9]
 80167ae:	2b11      	cmp	r3, #17
 80167b0:	d10d      	bne.n	80167ce <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80167b2:	8a7b      	ldrh	r3, [r7, #18]
 80167b4:	69fa      	ldr	r2, [r7, #28]
 80167b6:	4413      	add	r3, r2
 80167b8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	885b      	ldrh	r3, [r3, #2]
 80167be:	b29b      	uxth	r3, r3
 80167c0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80167c4:	d103      	bne.n	80167ce <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80167c6:	683b      	ldr	r3, [r7, #0]
 80167c8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80167ca:	2300      	movs	r3, #0
 80167cc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d017      	beq.n	8016804 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80167d4:	4b4c      	ldr	r3, [pc, #304]	; (8016908 <ip4_input+0x278>)
 80167d6:	691b      	ldr	r3, [r3, #16]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d013      	beq.n	8016804 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80167dc:	4b4a      	ldr	r3, [pc, #296]	; (8016908 <ip4_input+0x278>)
 80167de:	691b      	ldr	r3, [r3, #16]
 80167e0:	6839      	ldr	r1, [r7, #0]
 80167e2:	4618      	mov	r0, r3
 80167e4:	f000 f96c 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 80167e8:	4603      	mov	r3, r0
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d105      	bne.n	80167fa <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80167ee:	4b46      	ldr	r3, [pc, #280]	; (8016908 <ip4_input+0x278>)
 80167f0:	691b      	ldr	r3, [r3, #16]
 80167f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80167f6:	2be0      	cmp	r3, #224	; 0xe0
 80167f8:	d104      	bne.n	8016804 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f7f5 fd90 	bl	800c320 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016800:	2300      	movs	r3, #0
 8016802:	e07c      	b.n	80168fe <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016804:	69bb      	ldr	r3, [r7, #24]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d104      	bne.n	8016814 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f7f5 fd88 	bl	800c320 <pbuf_free>
    return ERR_OK;
 8016810:	2300      	movs	r3, #0
 8016812:	e074      	b.n	80168fe <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016814:	69fb      	ldr	r3, [r7, #28]
 8016816:	88db      	ldrh	r3, [r3, #6]
 8016818:	b29b      	uxth	r3, r3
 801681a:	461a      	mov	r2, r3
 801681c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016820:	4013      	ands	r3, r2
 8016822:	2b00      	cmp	r3, #0
 8016824:	d00b      	beq.n	801683e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f000 fc90 	bl	801714c <ip4_reass>
 801682c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d101      	bne.n	8016838 <ip4_input+0x1a8>
      return ERR_OK;
 8016834:	2300      	movs	r3, #0
 8016836:	e062      	b.n	80168fe <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801683e:	4a32      	ldr	r2, [pc, #200]	; (8016908 <ip4_input+0x278>)
 8016840:	69bb      	ldr	r3, [r7, #24]
 8016842:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016844:	4a30      	ldr	r2, [pc, #192]	; (8016908 <ip4_input+0x278>)
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801684a:	4a2f      	ldr	r2, [pc, #188]	; (8016908 <ip4_input+0x278>)
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016850:	69fb      	ldr	r3, [r7, #28]
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	f003 030f 	and.w	r3, r3, #15
 8016858:	b2db      	uxtb	r3, r3
 801685a:	009b      	lsls	r3, r3, #2
 801685c:	b2db      	uxtb	r3, r3
 801685e:	b29a      	uxth	r2, r3
 8016860:	4b29      	ldr	r3, [pc, #164]	; (8016908 <ip4_input+0x278>)
 8016862:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016864:	8a7b      	ldrh	r3, [r7, #18]
 8016866:	4619      	mov	r1, r3
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f7f5 fcd3 	bl	800c214 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	7a5b      	ldrb	r3, [r3, #9]
 8016872:	2b06      	cmp	r3, #6
 8016874:	d009      	beq.n	801688a <ip4_input+0x1fa>
 8016876:	2b11      	cmp	r3, #17
 8016878:	d002      	beq.n	8016880 <ip4_input+0x1f0>
 801687a:	2b01      	cmp	r3, #1
 801687c:	d00a      	beq.n	8016894 <ip4_input+0x204>
 801687e:	e00e      	b.n	801689e <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016880:	6839      	ldr	r1, [r7, #0]
 8016882:	6878      	ldr	r0, [r7, #4]
 8016884:	f7fc fad0 	bl	8012e28 <udp_input>
        break;
 8016888:	e026      	b.n	80168d8 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801688a:	6839      	ldr	r1, [r7, #0]
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f7f7 fe7f 	bl	800e590 <tcp_input>
        break;
 8016892:	e021      	b.n	80168d8 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016894:	6839      	ldr	r1, [r7, #0]
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7ff fcd2 	bl	8016240 <icmp_input>
        break;
 801689c:	e01c      	b.n	80168d8 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801689e:	4b1a      	ldr	r3, [pc, #104]	; (8016908 <ip4_input+0x278>)
 80168a0:	695b      	ldr	r3, [r3, #20]
 80168a2:	69b9      	ldr	r1, [r7, #24]
 80168a4:	4618      	mov	r0, r3
 80168a6:	f000 f90b 	bl	8016ac0 <ip4_addr_isbroadcast_u32>
 80168aa:	4603      	mov	r3, r0
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d10f      	bne.n	80168d0 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168b0:	4b15      	ldr	r3, [pc, #84]	; (8016908 <ip4_input+0x278>)
 80168b2:	695b      	ldr	r3, [r3, #20]
 80168b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80168b8:	2be0      	cmp	r3, #224	; 0xe0
 80168ba:	d009      	beq.n	80168d0 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80168bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80168c0:	4619      	mov	r1, r3
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f7f5 fd19 	bl	800c2fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80168c8:	2102      	movs	r1, #2
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f7ff fdbc 	bl	8016448 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80168d0:	6878      	ldr	r0, [r7, #4]
 80168d2:	f7f5 fd25 	bl	800c320 <pbuf_free>
        break;
 80168d6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80168d8:	4b0b      	ldr	r3, [pc, #44]	; (8016908 <ip4_input+0x278>)
 80168da:	2200      	movs	r2, #0
 80168dc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80168de:	4b0a      	ldr	r3, [pc, #40]	; (8016908 <ip4_input+0x278>)
 80168e0:	2200      	movs	r2, #0
 80168e2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80168e4:	4b08      	ldr	r3, [pc, #32]	; (8016908 <ip4_input+0x278>)
 80168e6:	2200      	movs	r2, #0
 80168e8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80168ea:	4b07      	ldr	r3, [pc, #28]	; (8016908 <ip4_input+0x278>)
 80168ec:	2200      	movs	r2, #0
 80168ee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80168f0:	4b05      	ldr	r3, [pc, #20]	; (8016908 <ip4_input+0x278>)
 80168f2:	2200      	movs	r2, #0
 80168f4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80168f6:	4b04      	ldr	r3, [pc, #16]	; (8016908 <ip4_input+0x278>)
 80168f8:	2200      	movs	r2, #0
 80168fa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80168fc:	2300      	movs	r3, #0
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3720      	adds	r7, #32
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	2000bde0 	.word	0x2000bde0
 801690c:	2000f504 	.word	0x2000f504

08016910 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b08a      	sub	sp, #40	; 0x28
 8016914:	af04      	add	r7, sp, #16
 8016916:	60f8      	str	r0, [r7, #12]
 8016918:	60b9      	str	r1, [r7, #8]
 801691a:	607a      	str	r2, [r7, #4]
 801691c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d009      	beq.n	801693c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016928:	68bb      	ldr	r3, [r7, #8]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d003      	beq.n	8016936 <ip4_output_if+0x26>
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d102      	bne.n	801693c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016938:	3304      	adds	r3, #4
 801693a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801693c:	78fa      	ldrb	r2, [r7, #3]
 801693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016940:	9302      	str	r3, [sp, #8]
 8016942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016946:	9301      	str	r3, [sp, #4]
 8016948:	f897 3020 	ldrb.w	r3, [r7, #32]
 801694c:	9300      	str	r3, [sp, #0]
 801694e:	4613      	mov	r3, r2
 8016950:	687a      	ldr	r2, [r7, #4]
 8016952:	6979      	ldr	r1, [r7, #20]
 8016954:	68f8      	ldr	r0, [r7, #12]
 8016956:	f000 f805 	bl	8016964 <ip4_output_if_src>
 801695a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801695c:	4618      	mov	r0, r3
 801695e:	3718      	adds	r7, #24
 8016960:	46bd      	mov	sp, r7
 8016962:	bd80      	pop	{r7, pc}

08016964 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b088      	sub	sp, #32
 8016968:	af00      	add	r7, sp, #0
 801696a:	60f8      	str	r0, [r7, #12]
 801696c:	60b9      	str	r1, [r7, #8]
 801696e:	607a      	str	r2, [r7, #4]
 8016970:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	7b9b      	ldrb	r3, [r3, #14]
 8016976:	2b01      	cmp	r3, #1
 8016978:	d006      	beq.n	8016988 <ip4_output_if_src+0x24>
 801697a:	4b4b      	ldr	r3, [pc, #300]	; (8016aa8 <ip4_output_if_src+0x144>)
 801697c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016980:	494a      	ldr	r1, [pc, #296]	; (8016aac <ip4_output_if_src+0x148>)
 8016982:	484b      	ldr	r0, [pc, #300]	; (8016ab0 <ip4_output_if_src+0x14c>)
 8016984:	f001 fa30 	bl	8017de8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d060      	beq.n	8016a50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801698e:	2314      	movs	r3, #20
 8016990:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016992:	2114      	movs	r1, #20
 8016994:	68f8      	ldr	r0, [r7, #12]
 8016996:	f7f5 fc2d 	bl	800c1f4 <pbuf_add_header>
 801699a:	4603      	mov	r3, r0
 801699c:	2b00      	cmp	r3, #0
 801699e:	d002      	beq.n	80169a6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80169a0:	f06f 0301 	mvn.w	r3, #1
 80169a4:	e07c      	b.n	8016aa0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	685b      	ldr	r3, [r3, #4]
 80169aa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	895b      	ldrh	r3, [r3, #10]
 80169b0:	2b13      	cmp	r3, #19
 80169b2:	d806      	bhi.n	80169c2 <ip4_output_if_src+0x5e>
 80169b4:	4b3c      	ldr	r3, [pc, #240]	; (8016aa8 <ip4_output_if_src+0x144>)
 80169b6:	f240 3289 	movw	r2, #905	; 0x389
 80169ba:	493e      	ldr	r1, [pc, #248]	; (8016ab4 <ip4_output_if_src+0x150>)
 80169bc:	483c      	ldr	r0, [pc, #240]	; (8016ab0 <ip4_output_if_src+0x14c>)
 80169be:	f001 fa13 	bl	8017de8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80169c2:	69fb      	ldr	r3, [r7, #28]
 80169c4:	78fa      	ldrb	r2, [r7, #3]
 80169c6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80169ce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	681a      	ldr	r2, [r3, #0]
 80169d4:	69fb      	ldr	r3, [r7, #28]
 80169d6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80169d8:	8b7b      	ldrh	r3, [r7, #26]
 80169da:	089b      	lsrs	r3, r3, #2
 80169dc:	b29b      	uxth	r3, r3
 80169de:	b2db      	uxtb	r3, r3
 80169e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169e4:	b2da      	uxtb	r2, r3
 80169e6:	69fb      	ldr	r3, [r7, #28]
 80169e8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80169ea:	69fb      	ldr	r3, [r7, #28]
 80169ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80169f0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	891b      	ldrh	r3, [r3, #8]
 80169f6:	4618      	mov	r0, r3
 80169f8:	f7f4 f8a8 	bl	800ab4c <lwip_htons>
 80169fc:	4603      	mov	r3, r0
 80169fe:	461a      	mov	r2, r3
 8016a00:	69fb      	ldr	r3, [r7, #28]
 8016a02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016a04:	69fb      	ldr	r3, [r7, #28]
 8016a06:	2200      	movs	r2, #0
 8016a08:	719a      	strb	r2, [r3, #6]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016a0e:	4b2a      	ldr	r3, [pc, #168]	; (8016ab8 <ip4_output_if_src+0x154>)
 8016a10:	881b      	ldrh	r3, [r3, #0]
 8016a12:	4618      	mov	r0, r3
 8016a14:	f7f4 f89a 	bl	800ab4c <lwip_htons>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016a20:	4b25      	ldr	r3, [pc, #148]	; (8016ab8 <ip4_output_if_src+0x154>)
 8016a22:	881b      	ldrh	r3, [r3, #0]
 8016a24:	3301      	adds	r3, #1
 8016a26:	b29a      	uxth	r2, r3
 8016a28:	4b23      	ldr	r3, [pc, #140]	; (8016ab8 <ip4_output_if_src+0x154>)
 8016a2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d104      	bne.n	8016a3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016a32:	4b22      	ldr	r3, [pc, #136]	; (8016abc <ip4_output_if_src+0x158>)
 8016a34:	681a      	ldr	r2, [r3, #0]
 8016a36:	69fb      	ldr	r3, [r7, #28]
 8016a38:	60da      	str	r2, [r3, #12]
 8016a3a:	e003      	b.n	8016a44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	681a      	ldr	r2, [r3, #0]
 8016a40:	69fb      	ldr	r3, [r7, #28]
 8016a42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016a44:	69fb      	ldr	r3, [r7, #28]
 8016a46:	2200      	movs	r2, #0
 8016a48:	729a      	strb	r2, [r3, #10]
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	72da      	strb	r2, [r3, #11]
 8016a4e:	e00f      	b.n	8016a70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	895b      	ldrh	r3, [r3, #10]
 8016a54:	2b13      	cmp	r3, #19
 8016a56:	d802      	bhi.n	8016a5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016a58:	f06f 0301 	mvn.w	r3, #1
 8016a5c:	e020      	b.n	8016aa0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	691b      	ldr	r3, [r3, #16]
 8016a68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016a6a:	f107 0314 	add.w	r3, r7, #20
 8016a6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d00c      	beq.n	8016a92 <ip4_output_if_src+0x12e>
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	891a      	ldrh	r2, [r3, #8]
 8016a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d906      	bls.n	8016a92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016a84:	687a      	ldr	r2, [r7, #4]
 8016a86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016a88:	68f8      	ldr	r0, [r7, #12]
 8016a8a:	f000 fd4b 	bl	8017524 <ip4_frag>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	e006      	b.n	8016aa0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a94:	695b      	ldr	r3, [r3, #20]
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	68f9      	ldr	r1, [r7, #12]
 8016a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a9c:	4798      	blx	r3
 8016a9e:	4603      	mov	r3, r0
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3720      	adds	r7, #32
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	0801c5ec 	.word	0x0801c5ec
 8016aac:	0801c620 	.word	0x0801c620
 8016ab0:	0801c62c 	.word	0x0801c62c
 8016ab4:	0801c654 	.word	0x0801c654
 8016ab8:	20008bce 	.word	0x20008bce
 8016abc:	08026bb4 	.word	0x08026bb4

08016ac0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016ac0:	b480      	push	{r7}
 8016ac2:	b085      	sub	sp, #20
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
 8016ac8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ad4:	d002      	beq.n	8016adc <ip4_addr_isbroadcast_u32+0x1c>
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d101      	bne.n	8016ae0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016adc:	2301      	movs	r3, #1
 8016ade:	e02a      	b.n	8016b36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016ae6:	f003 0302 	and.w	r3, r3, #2
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d101      	bne.n	8016af2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016aee:	2300      	movs	r3, #0
 8016af0:	e021      	b.n	8016b36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	3304      	adds	r3, #4
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d101      	bne.n	8016b02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016afe:	2300      	movs	r3, #0
 8016b00:	e019      	b.n	8016b36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016b02:	68fa      	ldr	r2, [r7, #12]
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	3304      	adds	r3, #4
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	405a      	eors	r2, r3
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	3308      	adds	r3, #8
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	4013      	ands	r3, r2
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d10d      	bne.n	8016b34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016b18:	683b      	ldr	r3, [r7, #0]
 8016b1a:	3308      	adds	r3, #8
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	43da      	mvns	r2, r3
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	3308      	adds	r3, #8
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	d101      	bne.n	8016b34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016b30:	2301      	movs	r3, #1
 8016b32:	e000      	b.n	8016b36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016b34:	2300      	movs	r3, #0
  }
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3714      	adds	r7, #20
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b40:	4770      	bx	lr
	...

08016b44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b084      	sub	sp, #16
 8016b48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016b4e:	4b12      	ldr	r3, [pc, #72]	; (8016b98 <ip_reass_tmr+0x54>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016b54:	e018      	b.n	8016b88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	7fdb      	ldrb	r3, [r3, #31]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00b      	beq.n	8016b76 <ip_reass_tmr+0x32>
      r->timer--;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	7fdb      	ldrb	r3, [r3, #31]
 8016b62:	3b01      	subs	r3, #1
 8016b64:	b2da      	uxtb	r2, r3
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	60fb      	str	r3, [r7, #12]
 8016b74:	e008      	b.n	8016b88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016b80:	68b9      	ldr	r1, [r7, #8]
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f000 f80a 	bl	8016b9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d1e3      	bne.n	8016b56 <ip_reass_tmr+0x12>
    }
  }
}
 8016b8e:	bf00      	nop
 8016b90:	3710      	adds	r7, #16
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop
 8016b98:	20008bd0 	.word	0x20008bd0

08016b9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b088      	sub	sp, #32
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
 8016ba4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016baa:	683a      	ldr	r2, [r7, #0]
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	429a      	cmp	r2, r3
 8016bb0:	d105      	bne.n	8016bbe <ip_reass_free_complete_datagram+0x22>
 8016bb2:	4b45      	ldr	r3, [pc, #276]	; (8016cc8 <ip_reass_free_complete_datagram+0x12c>)
 8016bb4:	22ab      	movs	r2, #171	; 0xab
 8016bb6:	4945      	ldr	r1, [pc, #276]	; (8016ccc <ip_reass_free_complete_datagram+0x130>)
 8016bb8:	4845      	ldr	r0, [pc, #276]	; (8016cd0 <ip_reass_free_complete_datagram+0x134>)
 8016bba:	f001 f915 	bl	8017de8 <iprintf>
  if (prev != NULL) {
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d00a      	beq.n	8016bda <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	687a      	ldr	r2, [r7, #4]
 8016bca:	429a      	cmp	r2, r3
 8016bcc:	d005      	beq.n	8016bda <ip_reass_free_complete_datagram+0x3e>
 8016bce:	4b3e      	ldr	r3, [pc, #248]	; (8016cc8 <ip_reass_free_complete_datagram+0x12c>)
 8016bd0:	22ad      	movs	r2, #173	; 0xad
 8016bd2:	4940      	ldr	r1, [pc, #256]	; (8016cd4 <ip_reass_free_complete_datagram+0x138>)
 8016bd4:	483e      	ldr	r0, [pc, #248]	; (8016cd0 <ip_reass_free_complete_datagram+0x134>)
 8016bd6:	f001 f907 	bl	8017de8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	685b      	ldr	r3, [r3, #4]
 8016bde:	685b      	ldr	r3, [r3, #4]
 8016be0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016be2:	697b      	ldr	r3, [r7, #20]
 8016be4:	889b      	ldrh	r3, [r3, #4]
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d12a      	bne.n	8016c42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016bf2:	697b      	ldr	r3, [r7, #20]
 8016bf4:	681a      	ldr	r2, [r3, #0]
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016bfa:	69bb      	ldr	r3, [r7, #24]
 8016bfc:	6858      	ldr	r0, [r3, #4]
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	3308      	adds	r3, #8
 8016c02:	2214      	movs	r2, #20
 8016c04:	4619      	mov	r1, r3
 8016c06:	f001 f8dc 	bl	8017dc2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016c0a:	2101      	movs	r1, #1
 8016c0c:	69b8      	ldr	r0, [r7, #24]
 8016c0e:	f7ff fc2b 	bl	8016468 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016c12:	69b8      	ldr	r0, [r7, #24]
 8016c14:	f7f5 fc12 	bl	800c43c <pbuf_clen>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016c1c:	8bfa      	ldrh	r2, [r7, #30]
 8016c1e:	8a7b      	ldrh	r3, [r7, #18]
 8016c20:	4413      	add	r3, r2
 8016c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c26:	db05      	blt.n	8016c34 <ip_reass_free_complete_datagram+0x98>
 8016c28:	4b27      	ldr	r3, [pc, #156]	; (8016cc8 <ip_reass_free_complete_datagram+0x12c>)
 8016c2a:	22bc      	movs	r2, #188	; 0xbc
 8016c2c:	492a      	ldr	r1, [pc, #168]	; (8016cd8 <ip_reass_free_complete_datagram+0x13c>)
 8016c2e:	4828      	ldr	r0, [pc, #160]	; (8016cd0 <ip_reass_free_complete_datagram+0x134>)
 8016c30:	f001 f8da 	bl	8017de8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016c34:	8bfa      	ldrh	r2, [r7, #30]
 8016c36:	8a7b      	ldrh	r3, [r7, #18]
 8016c38:	4413      	add	r3, r2
 8016c3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016c3c:	69b8      	ldr	r0, [r7, #24]
 8016c3e:	f7f5 fb6f 	bl	800c320 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016c48:	e01f      	b.n	8016c8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016c4a:	69bb      	ldr	r3, [r7, #24]
 8016c4c:	685b      	ldr	r3, [r3, #4]
 8016c4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016c50:	69bb      	ldr	r3, [r7, #24]
 8016c52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016c5a:	68f8      	ldr	r0, [r7, #12]
 8016c5c:	f7f5 fbee 	bl	800c43c <pbuf_clen>
 8016c60:	4603      	mov	r3, r0
 8016c62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016c64:	8bfa      	ldrh	r2, [r7, #30]
 8016c66:	8a7b      	ldrh	r3, [r7, #18]
 8016c68:	4413      	add	r3, r2
 8016c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c6e:	db05      	blt.n	8016c7c <ip_reass_free_complete_datagram+0xe0>
 8016c70:	4b15      	ldr	r3, [pc, #84]	; (8016cc8 <ip_reass_free_complete_datagram+0x12c>)
 8016c72:	22cc      	movs	r2, #204	; 0xcc
 8016c74:	4918      	ldr	r1, [pc, #96]	; (8016cd8 <ip_reass_free_complete_datagram+0x13c>)
 8016c76:	4816      	ldr	r0, [pc, #88]	; (8016cd0 <ip_reass_free_complete_datagram+0x134>)
 8016c78:	f001 f8b6 	bl	8017de8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016c7c:	8bfa      	ldrh	r2, [r7, #30]
 8016c7e:	8a7b      	ldrh	r3, [r7, #18]
 8016c80:	4413      	add	r3, r2
 8016c82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016c84:	68f8      	ldr	r0, [r7, #12]
 8016c86:	f7f5 fb4b 	bl	800c320 <pbuf_free>
  while (p != NULL) {
 8016c8a:	69bb      	ldr	r3, [r7, #24]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d1dc      	bne.n	8016c4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016c90:	6839      	ldr	r1, [r7, #0]
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f000 f8c2 	bl	8016e1c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016c98:	4b10      	ldr	r3, [pc, #64]	; (8016cdc <ip_reass_free_complete_datagram+0x140>)
 8016c9a:	881b      	ldrh	r3, [r3, #0]
 8016c9c:	8bfa      	ldrh	r2, [r7, #30]
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	d905      	bls.n	8016cae <ip_reass_free_complete_datagram+0x112>
 8016ca2:	4b09      	ldr	r3, [pc, #36]	; (8016cc8 <ip_reass_free_complete_datagram+0x12c>)
 8016ca4:	22d2      	movs	r2, #210	; 0xd2
 8016ca6:	490e      	ldr	r1, [pc, #56]	; (8016ce0 <ip_reass_free_complete_datagram+0x144>)
 8016ca8:	4809      	ldr	r0, [pc, #36]	; (8016cd0 <ip_reass_free_complete_datagram+0x134>)
 8016caa:	f001 f89d 	bl	8017de8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016cae:	4b0b      	ldr	r3, [pc, #44]	; (8016cdc <ip_reass_free_complete_datagram+0x140>)
 8016cb0:	881a      	ldrh	r2, [r3, #0]
 8016cb2:	8bfb      	ldrh	r3, [r7, #30]
 8016cb4:	1ad3      	subs	r3, r2, r3
 8016cb6:	b29a      	uxth	r2, r3
 8016cb8:	4b08      	ldr	r3, [pc, #32]	; (8016cdc <ip_reass_free_complete_datagram+0x140>)
 8016cba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016cbc:	8bfb      	ldrh	r3, [r7, #30]
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3720      	adds	r7, #32
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
 8016cc6:	bf00      	nop
 8016cc8:	0801c684 	.word	0x0801c684
 8016ccc:	0801c6c0 	.word	0x0801c6c0
 8016cd0:	0801c6cc 	.word	0x0801c6cc
 8016cd4:	0801c6f4 	.word	0x0801c6f4
 8016cd8:	0801c708 	.word	0x0801c708
 8016cdc:	20008bd4 	.word	0x20008bd4
 8016ce0:	0801c728 	.word	0x0801c728

08016ce4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b08a      	sub	sp, #40	; 0x28
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016d02:	4b28      	ldr	r3, [pc, #160]	; (8016da4 <ip_reass_remove_oldest_datagram+0xc0>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016d08:	e030      	b.n	8016d6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	695a      	ldr	r2, [r3, #20]
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	68db      	ldr	r3, [r3, #12]
 8016d12:	429a      	cmp	r2, r3
 8016d14:	d10c      	bne.n	8016d30 <ip_reass_remove_oldest_datagram+0x4c>
 8016d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d18:	699a      	ldr	r2, [r3, #24]
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	691b      	ldr	r3, [r3, #16]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	d106      	bne.n	8016d30 <ip_reass_remove_oldest_datagram+0x4c>
 8016d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d24:	899a      	ldrh	r2, [r3, #12]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	889b      	ldrh	r3, [r3, #4]
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d014      	beq.n	8016d5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016d30:	693b      	ldr	r3, [r7, #16]
 8016d32:	3301      	adds	r3, #1
 8016d34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016d36:	6a3b      	ldr	r3, [r7, #32]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d104      	bne.n	8016d46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	61bb      	str	r3, [r7, #24]
 8016d44:	e009      	b.n	8016d5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d48:	7fda      	ldrb	r2, [r3, #31]
 8016d4a:	6a3b      	ldr	r3, [r7, #32]
 8016d4c:	7fdb      	ldrb	r3, [r3, #31]
 8016d4e:	429a      	cmp	r2, r3
 8016d50:	d803      	bhi.n	8016d5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016d56:	69fb      	ldr	r3, [r7, #28]
 8016d58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d001      	beq.n	8016d66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d1cb      	bne.n	8016d0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016d72:	6a3b      	ldr	r3, [r7, #32]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d008      	beq.n	8016d8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016d78:	69b9      	ldr	r1, [r7, #24]
 8016d7a:	6a38      	ldr	r0, [r7, #32]
 8016d7c:	f7ff ff0e 	bl	8016b9c <ip_reass_free_complete_datagram>
 8016d80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016d82:	697a      	ldr	r2, [r7, #20]
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	4413      	add	r3, r2
 8016d88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016d8a:	697a      	ldr	r2, [r7, #20]
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	da02      	bge.n	8016d98 <ip_reass_remove_oldest_datagram+0xb4>
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	2b01      	cmp	r3, #1
 8016d96:	dcac      	bgt.n	8016cf2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016d98:	697b      	ldr	r3, [r7, #20]
}
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	3728      	adds	r7, #40	; 0x28
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bd80      	pop	{r7, pc}
 8016da2:	bf00      	nop
 8016da4:	20008bd0 	.word	0x20008bd0

08016da8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b084      	sub	sp, #16
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
 8016db0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016db2:	2004      	movs	r0, #4
 8016db4:	f7f4 fbb6 	bl	800b524 <memp_malloc>
 8016db8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d110      	bne.n	8016de2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016dc0:	6839      	ldr	r1, [r7, #0]
 8016dc2:	6878      	ldr	r0, [r7, #4]
 8016dc4:	f7ff ff8e 	bl	8016ce4 <ip_reass_remove_oldest_datagram>
 8016dc8:	4602      	mov	r2, r0
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	4293      	cmp	r3, r2
 8016dce:	dc03      	bgt.n	8016dd8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016dd0:	2004      	movs	r0, #4
 8016dd2:	f7f4 fba7 	bl	800b524 <memp_malloc>
 8016dd6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d101      	bne.n	8016de2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016dde:	2300      	movs	r3, #0
 8016de0:	e016      	b.n	8016e10 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016de2:	2220      	movs	r2, #32
 8016de4:	2100      	movs	r1, #0
 8016de6:	68f8      	ldr	r0, [r7, #12]
 8016de8:	f000 fff6 	bl	8017dd8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	220f      	movs	r2, #15
 8016df0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016df2:	4b09      	ldr	r3, [pc, #36]	; (8016e18 <ip_reass_enqueue_new_datagram+0x70>)
 8016df4:	681a      	ldr	r2, [r3, #0]
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016dfa:	4a07      	ldr	r2, [pc, #28]	; (8016e18 <ip_reass_enqueue_new_datagram+0x70>)
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	3308      	adds	r3, #8
 8016e04:	2214      	movs	r2, #20
 8016e06:	6879      	ldr	r1, [r7, #4]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f000 ffda 	bl	8017dc2 <memcpy>
  return ipr;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3710      	adds	r7, #16
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	20008bd0 	.word	0x20008bd0

08016e1c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016e26:	4b10      	ldr	r3, [pc, #64]	; (8016e68 <ip_reass_dequeue_datagram+0x4c>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	687a      	ldr	r2, [r7, #4]
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	d104      	bne.n	8016e3a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	4a0c      	ldr	r2, [pc, #48]	; (8016e68 <ip_reass_dequeue_datagram+0x4c>)
 8016e36:	6013      	str	r3, [r2, #0]
 8016e38:	e00d      	b.n	8016e56 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d106      	bne.n	8016e4e <ip_reass_dequeue_datagram+0x32>
 8016e40:	4b0a      	ldr	r3, [pc, #40]	; (8016e6c <ip_reass_dequeue_datagram+0x50>)
 8016e42:	f240 1245 	movw	r2, #325	; 0x145
 8016e46:	490a      	ldr	r1, [pc, #40]	; (8016e70 <ip_reass_dequeue_datagram+0x54>)
 8016e48:	480a      	ldr	r0, [pc, #40]	; (8016e74 <ip_reass_dequeue_datagram+0x58>)
 8016e4a:	f000 ffcd 	bl	8017de8 <iprintf>
    prev->next = ipr->next;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681a      	ldr	r2, [r3, #0]
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016e56:	6879      	ldr	r1, [r7, #4]
 8016e58:	2004      	movs	r0, #4
 8016e5a:	f7f4 fbb5 	bl	800b5c8 <memp_free>
}
 8016e5e:	bf00      	nop
 8016e60:	3708      	adds	r7, #8
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}
 8016e66:	bf00      	nop
 8016e68:	20008bd0 	.word	0x20008bd0
 8016e6c:	0801c684 	.word	0x0801c684
 8016e70:	0801c74c 	.word	0x0801c74c
 8016e74:	0801c6cc 	.word	0x0801c6cc

08016e78 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b08c      	sub	sp, #48	; 0x30
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	60f8      	str	r0, [r7, #12]
 8016e80:	60b9      	str	r1, [r7, #8]
 8016e82:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016e84:	2300      	movs	r3, #0
 8016e86:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016e88:	2301      	movs	r3, #1
 8016e8a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016e92:	69fb      	ldr	r3, [r7, #28]
 8016e94:	885b      	ldrh	r3, [r3, #2]
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7f3 fe57 	bl	800ab4c <lwip_htons>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016ea2:	69fb      	ldr	r3, [r7, #28]
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	f003 030f 	and.w	r3, r3, #15
 8016eaa:	b2db      	uxtb	r3, r3
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016eb0:	7e7b      	ldrb	r3, [r7, #25]
 8016eb2:	b29b      	uxth	r3, r3
 8016eb4:	8b7a      	ldrh	r2, [r7, #26]
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d202      	bcs.n	8016ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016eba:	f04f 33ff 	mov.w	r3, #4294967295
 8016ebe:	e135      	b.n	801712c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016ec0:	7e7b      	ldrb	r3, [r7, #25]
 8016ec2:	b29b      	uxth	r3, r3
 8016ec4:	8b7a      	ldrh	r2, [r7, #26]
 8016ec6:	1ad3      	subs	r3, r2, r3
 8016ec8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016eca:	69fb      	ldr	r3, [r7, #28]
 8016ecc:	88db      	ldrh	r3, [r3, #6]
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7f3 fe3b 	bl	800ab4c <lwip_htons>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016edc:	b29b      	uxth	r3, r3
 8016ede:	00db      	lsls	r3, r3, #3
 8016ee0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	685b      	ldr	r3, [r3, #4]
 8016ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eea:	2200      	movs	r2, #0
 8016eec:	701a      	strb	r2, [r3, #0]
 8016eee:	2200      	movs	r2, #0
 8016ef0:	705a      	strb	r2, [r3, #1]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	709a      	strb	r2, [r3, #2]
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efc:	8afa      	ldrh	r2, [r7, #22]
 8016efe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016f00:	8afa      	ldrh	r2, [r7, #22]
 8016f02:	8b7b      	ldrh	r3, [r7, #26]
 8016f04:	4413      	add	r3, r2
 8016f06:	b29a      	uxth	r2, r3
 8016f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0e:	88db      	ldrh	r3, [r3, #6]
 8016f10:	b29b      	uxth	r3, r3
 8016f12:	8afa      	ldrh	r2, [r7, #22]
 8016f14:	429a      	cmp	r2, r3
 8016f16:	d902      	bls.n	8016f1e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f18:	f04f 33ff 	mov.w	r3, #4294967295
 8016f1c:	e106      	b.n	801712c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	627b      	str	r3, [r7, #36]	; 0x24
 8016f24:	e068      	b.n	8016ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f28:	685b      	ldr	r3, [r3, #4]
 8016f2a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2e:	889b      	ldrh	r3, [r3, #4]
 8016f30:	b29a      	uxth	r2, r3
 8016f32:	693b      	ldr	r3, [r7, #16]
 8016f34:	889b      	ldrh	r3, [r3, #4]
 8016f36:	b29b      	uxth	r3, r3
 8016f38:	429a      	cmp	r2, r3
 8016f3a:	d235      	bcs.n	8016fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f40:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d020      	beq.n	8016f8a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4a:	889b      	ldrh	r3, [r3, #4]
 8016f4c:	b29a      	uxth	r2, r3
 8016f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f50:	88db      	ldrh	r3, [r3, #6]
 8016f52:	b29b      	uxth	r3, r3
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d307      	bcc.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f5a:	88db      	ldrh	r3, [r3, #6]
 8016f5c:	b29a      	uxth	r2, r3
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	889b      	ldrh	r3, [r3, #4]
 8016f62:	b29b      	uxth	r3, r3
 8016f64:	429a      	cmp	r2, r3
 8016f66:	d902      	bls.n	8016f6e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f68:	f04f 33ff 	mov.w	r3, #4294967295
 8016f6c:	e0de      	b.n	801712c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f70:	68ba      	ldr	r2, [r7, #8]
 8016f72:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f76:	88db      	ldrh	r3, [r3, #6]
 8016f78:	b29a      	uxth	r2, r3
 8016f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f7c:	889b      	ldrh	r3, [r3, #4]
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d03d      	beq.n	8017000 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016f84:	2300      	movs	r3, #0
 8016f86:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016f88:	e03a      	b.n	8017000 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8c:	88db      	ldrh	r3, [r3, #6]
 8016f8e:	b29a      	uxth	r2, r3
 8016f90:	693b      	ldr	r3, [r7, #16]
 8016f92:	889b      	ldrh	r3, [r3, #4]
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d902      	bls.n	8016fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f9e:	e0c5      	b.n	801712c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	68ba      	ldr	r2, [r7, #8]
 8016fa4:	605a      	str	r2, [r3, #4]
      break;
 8016fa6:	e02b      	b.n	8017000 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016faa:	889b      	ldrh	r3, [r3, #4]
 8016fac:	b29a      	uxth	r2, r3
 8016fae:	693b      	ldr	r3, [r7, #16]
 8016fb0:	889b      	ldrh	r3, [r3, #4]
 8016fb2:	b29b      	uxth	r3, r3
 8016fb4:	429a      	cmp	r2, r3
 8016fb6:	d102      	bne.n	8016fbe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8016fbc:	e0b6      	b.n	801712c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc0:	889b      	ldrh	r3, [r3, #4]
 8016fc2:	b29a      	uxth	r2, r3
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	88db      	ldrh	r3, [r3, #6]
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d202      	bcs.n	8016fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016fce:	f04f 33ff 	mov.w	r3, #4294967295
 8016fd2:	e0ab      	b.n	801712c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d009      	beq.n	8016fee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fdc:	88db      	ldrh	r3, [r3, #6]
 8016fde:	b29a      	uxth	r2, r3
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	889b      	ldrh	r3, [r3, #4]
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d001      	beq.n	8016fee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016fea:	2300      	movs	r3, #0
 8016fec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d193      	bne.n	8016f26 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016ffe:	e000      	b.n	8017002 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017000:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017004:	2b00      	cmp	r3, #0
 8017006:	d12d      	bne.n	8017064 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700a:	2b00      	cmp	r3, #0
 801700c:	d01c      	beq.n	8017048 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017010:	88db      	ldrh	r3, [r3, #6]
 8017012:	b29a      	uxth	r2, r3
 8017014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017016:	889b      	ldrh	r3, [r3, #4]
 8017018:	b29b      	uxth	r3, r3
 801701a:	429a      	cmp	r2, r3
 801701c:	d906      	bls.n	801702c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801701e:	4b45      	ldr	r3, [pc, #276]	; (8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017020:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017024:	4944      	ldr	r1, [pc, #272]	; (8017138 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017026:	4845      	ldr	r0, [pc, #276]	; (801713c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017028:	f000 fede 	bl	8017de8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801702e:	68ba      	ldr	r2, [r7, #8]
 8017030:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017034:	88db      	ldrh	r3, [r3, #6]
 8017036:	b29a      	uxth	r2, r3
 8017038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703a:	889b      	ldrh	r3, [r3, #4]
 801703c:	b29b      	uxth	r3, r3
 801703e:	429a      	cmp	r2, r3
 8017040:	d010      	beq.n	8017064 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017042:	2300      	movs	r3, #0
 8017044:	623b      	str	r3, [r7, #32]
 8017046:	e00d      	b.n	8017064 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d006      	beq.n	801705e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017050:	4b38      	ldr	r3, [pc, #224]	; (8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017052:	f240 12bf 	movw	r2, #447	; 0x1bf
 8017056:	493a      	ldr	r1, [pc, #232]	; (8017140 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017058:	4838      	ldr	r0, [pc, #224]	; (801713c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801705a:	f000 fec5 	bl	8017de8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	68ba      	ldr	r2, [r7, #8]
 8017062:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d105      	bne.n	8017076 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	7f9b      	ldrb	r3, [r3, #30]
 801706e:	f003 0301 	and.w	r3, r3, #1
 8017072:	2b00      	cmp	r3, #0
 8017074:	d059      	beq.n	801712a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017076:	6a3b      	ldr	r3, [r7, #32]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d04f      	beq.n	801711c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	685b      	ldr	r3, [r3, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d006      	beq.n	8017092 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	685b      	ldr	r3, [r3, #4]
 801708a:	889b      	ldrh	r3, [r3, #4]
 801708c:	b29b      	uxth	r3, r3
 801708e:	2b00      	cmp	r3, #0
 8017090:	d002      	beq.n	8017098 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017092:	2300      	movs	r3, #0
 8017094:	623b      	str	r3, [r7, #32]
 8017096:	e041      	b.n	801711c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80170a2:	e012      	b.n	80170ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80170a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a6:	685b      	ldr	r3, [r3, #4]
 80170a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80170aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ac:	88db      	ldrh	r3, [r3, #6]
 80170ae:	b29a      	uxth	r2, r3
 80170b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b2:	889b      	ldrh	r3, [r3, #4]
 80170b4:	b29b      	uxth	r3, r3
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d002      	beq.n	80170c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80170ba:	2300      	movs	r3, #0
 80170bc:	623b      	str	r3, [r7, #32]
            break;
 80170be:	e007      	b.n	80170d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80170c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80170c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80170ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d1e9      	bne.n	80170a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80170d0:	6a3b      	ldr	r3, [r7, #32]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d022      	beq.n	801711c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	685b      	ldr	r3, [r3, #4]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d106      	bne.n	80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80170de:	4b15      	ldr	r3, [pc, #84]	; (8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80170e0:	f240 12df 	movw	r2, #479	; 0x1df
 80170e4:	4917      	ldr	r1, [pc, #92]	; (8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80170e6:	4815      	ldr	r0, [pc, #84]	; (801713c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80170e8:	f000 fe7e 	bl	8017de8 <iprintf>
          LWIP_ASSERT("sanity check",
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	685b      	ldr	r3, [r3, #4]
 80170f0:	685b      	ldr	r3, [r3, #4]
 80170f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d106      	bne.n	8017106 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80170f8:	4b0e      	ldr	r3, [pc, #56]	; (8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80170fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80170fe:	4911      	ldr	r1, [pc, #68]	; (8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017100:	480e      	ldr	r0, [pc, #56]	; (801713c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017102:	f000 fe71 	bl	8017de8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d006      	beq.n	801711c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801710e:	4b09      	ldr	r3, [pc, #36]	; (8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017110:	f240 12e3 	movw	r2, #483	; 0x1e3
 8017114:	490c      	ldr	r1, [pc, #48]	; (8017148 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017116:	4809      	ldr	r0, [pc, #36]	; (801713c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017118:	f000 fe66 	bl	8017de8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801711c:	6a3b      	ldr	r3, [r7, #32]
 801711e:	2b00      	cmp	r3, #0
 8017120:	bf14      	ite	ne
 8017122:	2301      	movne	r3, #1
 8017124:	2300      	moveq	r3, #0
 8017126:	b2db      	uxtb	r3, r3
 8017128:	e000      	b.n	801712c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801712a:	2300      	movs	r3, #0
}
 801712c:	4618      	mov	r0, r3
 801712e:	3730      	adds	r7, #48	; 0x30
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}
 8017134:	0801c684 	.word	0x0801c684
 8017138:	0801c768 	.word	0x0801c768
 801713c:	0801c6cc 	.word	0x0801c6cc
 8017140:	0801c788 	.word	0x0801c788
 8017144:	0801c7c0 	.word	0x0801c7c0
 8017148:	0801c7d0 	.word	0x0801c7d0

0801714c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b08e      	sub	sp, #56	; 0x38
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715c:	781b      	ldrb	r3, [r3, #0]
 801715e:	f003 030f 	and.w	r3, r3, #15
 8017162:	b2db      	uxtb	r3, r3
 8017164:	009b      	lsls	r3, r3, #2
 8017166:	b2db      	uxtb	r3, r3
 8017168:	2b14      	cmp	r3, #20
 801716a:	f040 8167 	bne.w	801743c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017170:	88db      	ldrh	r3, [r3, #6]
 8017172:	b29b      	uxth	r3, r3
 8017174:	4618      	mov	r0, r3
 8017176:	f7f3 fce9 	bl	800ab4c <lwip_htons>
 801717a:	4603      	mov	r3, r0
 801717c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017180:	b29b      	uxth	r3, r3
 8017182:	00db      	lsls	r3, r3, #3
 8017184:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017188:	885b      	ldrh	r3, [r3, #2]
 801718a:	b29b      	uxth	r3, r3
 801718c:	4618      	mov	r0, r3
 801718e:	f7f3 fcdd 	bl	800ab4c <lwip_htons>
 8017192:	4603      	mov	r3, r0
 8017194:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	f003 030f 	and.w	r3, r3, #15
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	009b      	lsls	r3, r3, #2
 80171a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80171a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80171aa:	b29b      	uxth	r3, r3
 80171ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80171ae:	429a      	cmp	r2, r3
 80171b0:	f0c0 8146 	bcc.w	8017440 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80171b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80171b8:	b29b      	uxth	r3, r3
 80171ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80171bc:	1ad3      	subs	r3, r2, r3
 80171be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f7f5 f93b 	bl	800c43c <pbuf_clen>
 80171c6:	4603      	mov	r3, r0
 80171c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80171ca:	4ba3      	ldr	r3, [pc, #652]	; (8017458 <ip4_reass+0x30c>)
 80171cc:	881b      	ldrh	r3, [r3, #0]
 80171ce:	461a      	mov	r2, r3
 80171d0:	8c3b      	ldrh	r3, [r7, #32]
 80171d2:	4413      	add	r3, r2
 80171d4:	2b0a      	cmp	r3, #10
 80171d6:	dd10      	ble.n	80171fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80171d8:	8c3b      	ldrh	r3, [r7, #32]
 80171da:	4619      	mov	r1, r3
 80171dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80171de:	f7ff fd81 	bl	8016ce4 <ip_reass_remove_oldest_datagram>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	f000 812d 	beq.w	8017444 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80171ea:	4b9b      	ldr	r3, [pc, #620]	; (8017458 <ip4_reass+0x30c>)
 80171ec:	881b      	ldrh	r3, [r3, #0]
 80171ee:	461a      	mov	r2, r3
 80171f0:	8c3b      	ldrh	r3, [r7, #32]
 80171f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80171f4:	2b0a      	cmp	r3, #10
 80171f6:	f300 8125 	bgt.w	8017444 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80171fa:	4b98      	ldr	r3, [pc, #608]	; (801745c <ip4_reass+0x310>)
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	633b      	str	r3, [r7, #48]	; 0x30
 8017200:	e015      	b.n	801722e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017204:	695a      	ldr	r2, [r3, #20]
 8017206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017208:	68db      	ldr	r3, [r3, #12]
 801720a:	429a      	cmp	r2, r3
 801720c:	d10c      	bne.n	8017228 <ip4_reass+0xdc>
 801720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017210:	699a      	ldr	r2, [r3, #24]
 8017212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017214:	691b      	ldr	r3, [r3, #16]
 8017216:	429a      	cmp	r2, r3
 8017218:	d106      	bne.n	8017228 <ip4_reass+0xdc>
 801721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801721c:	899a      	ldrh	r2, [r3, #12]
 801721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017220:	889b      	ldrh	r3, [r3, #4]
 8017222:	b29b      	uxth	r3, r3
 8017224:	429a      	cmp	r2, r3
 8017226:	d006      	beq.n	8017236 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	633b      	str	r3, [r7, #48]	; 0x30
 801722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017230:	2b00      	cmp	r3, #0
 8017232:	d1e6      	bne.n	8017202 <ip4_reass+0xb6>
 8017234:	e000      	b.n	8017238 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017236:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801723a:	2b00      	cmp	r3, #0
 801723c:	d109      	bne.n	8017252 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801723e:	8c3b      	ldrh	r3, [r7, #32]
 8017240:	4619      	mov	r1, r3
 8017242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017244:	f7ff fdb0 	bl	8016da8 <ip_reass_enqueue_new_datagram>
 8017248:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724c:	2b00      	cmp	r3, #0
 801724e:	d11c      	bne.n	801728a <ip4_reass+0x13e>
      goto nullreturn;
 8017250:	e0f9      	b.n	8017446 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017254:	88db      	ldrh	r3, [r3, #6]
 8017256:	b29b      	uxth	r3, r3
 8017258:	4618      	mov	r0, r3
 801725a:	f7f3 fc77 	bl	800ab4c <lwip_htons>
 801725e:	4603      	mov	r3, r0
 8017260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017264:	2b00      	cmp	r3, #0
 8017266:	d110      	bne.n	801728a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801726a:	89db      	ldrh	r3, [r3, #14]
 801726c:	4618      	mov	r0, r3
 801726e:	f7f3 fc6d 	bl	800ab4c <lwip_htons>
 8017272:	4603      	mov	r3, r0
 8017274:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017278:	2b00      	cmp	r3, #0
 801727a:	d006      	beq.n	801728a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801727e:	3308      	adds	r3, #8
 8017280:	2214      	movs	r2, #20
 8017282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017284:	4618      	mov	r0, r3
 8017286:	f000 fd9c 	bl	8017dc2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801728c:	88db      	ldrh	r3, [r3, #6]
 801728e:	b29b      	uxth	r3, r3
 8017290:	f003 0320 	and.w	r3, r3, #32
 8017294:	2b00      	cmp	r3, #0
 8017296:	bf0c      	ite	eq
 8017298:	2301      	moveq	r3, #1
 801729a:	2300      	movne	r3, #0
 801729c:	b2db      	uxtb	r3, r3
 801729e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80172a0:	69fb      	ldr	r3, [r7, #28]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d00e      	beq.n	80172c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80172a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80172a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80172aa:	4413      	add	r3, r2
 80172ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80172ae:	8b7a      	ldrh	r2, [r7, #26]
 80172b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80172b2:	429a      	cmp	r2, r3
 80172b4:	f0c0 80a0 	bcc.w	80173f8 <ip4_reass+0x2ac>
 80172b8:	8b7b      	ldrh	r3, [r7, #26]
 80172ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80172be:	4293      	cmp	r3, r2
 80172c0:	f200 809a 	bhi.w	80173f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80172c4:	69fa      	ldr	r2, [r7, #28]
 80172c6:	6879      	ldr	r1, [r7, #4]
 80172c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172ca:	f7ff fdd5 	bl	8016e78 <ip_reass_chain_frag_into_datagram_and_validate>
 80172ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80172d0:	697b      	ldr	r3, [r7, #20]
 80172d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172d6:	f000 8091 	beq.w	80173fc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80172da:	4b5f      	ldr	r3, [pc, #380]	; (8017458 <ip4_reass+0x30c>)
 80172dc:	881a      	ldrh	r2, [r3, #0]
 80172de:	8c3b      	ldrh	r3, [r7, #32]
 80172e0:	4413      	add	r3, r2
 80172e2:	b29a      	uxth	r2, r3
 80172e4:	4b5c      	ldr	r3, [pc, #368]	; (8017458 <ip4_reass+0x30c>)
 80172e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d00d      	beq.n	801730a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80172ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80172f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80172f2:	4413      	add	r3, r2
 80172f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80172f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f8:	8a7a      	ldrh	r2, [r7, #18]
 80172fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80172fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172fe:	7f9b      	ldrb	r3, [r3, #30]
 8017300:	f043 0301 	orr.w	r3, r3, #1
 8017304:	b2da      	uxtb	r2, r3
 8017306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017308:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801730a:	697b      	ldr	r3, [r7, #20]
 801730c:	2b01      	cmp	r3, #1
 801730e:	d171      	bne.n	80173f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017312:	8b9b      	ldrh	r3, [r3, #28]
 8017314:	3314      	adds	r3, #20
 8017316:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801731a:	685b      	ldr	r3, [r3, #4]
 801731c:	685b      	ldr	r3, [r3, #4]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017324:	685b      	ldr	r3, [r3, #4]
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801732c:	3308      	adds	r3, #8
 801732e:	2214      	movs	r2, #20
 8017330:	4619      	mov	r1, r3
 8017332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017334:	f000 fd45 	bl	8017dc2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017338:	8a3b      	ldrh	r3, [r7, #16]
 801733a:	4618      	mov	r0, r3
 801733c:	f7f3 fc06 	bl	800ab4c <lwip_htons>
 8017340:	4603      	mov	r3, r0
 8017342:	461a      	mov	r2, r3
 8017344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017346:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734a:	2200      	movs	r2, #0
 801734c:	719a      	strb	r2, [r3, #6]
 801734e:	2200      	movs	r2, #0
 8017350:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017354:	2200      	movs	r2, #0
 8017356:	729a      	strb	r2, [r3, #10]
 8017358:	2200      	movs	r2, #0
 801735a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801735e:	685b      	ldr	r3, [r3, #4]
 8017360:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017362:	e00d      	b.n	8017380 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801736a:	2114      	movs	r1, #20
 801736c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801736e:	f7f4 ff51 	bl	800c214 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017372:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7f5 f8a1 	bl	800c4bc <pbuf_cat>
      r = iprh->next_pbuf;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017382:	2b00      	cmp	r3, #0
 8017384:	d1ee      	bne.n	8017364 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017386:	4b35      	ldr	r3, [pc, #212]	; (801745c <ip4_reass+0x310>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801738c:	429a      	cmp	r2, r3
 801738e:	d102      	bne.n	8017396 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017390:	2300      	movs	r3, #0
 8017392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017394:	e010      	b.n	80173b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017396:	4b31      	ldr	r3, [pc, #196]	; (801745c <ip4_reass+0x310>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801739c:	e007      	b.n	80173ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d006      	beq.n	80173b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80173a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d1f4      	bne.n	801739e <ip4_reass+0x252>
 80173b4:	e000      	b.n	80173b8 <ip4_reass+0x26c>
          break;
 80173b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80173b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80173ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173bc:	f7ff fd2e 	bl	8016e1c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f7f5 f83b 	bl	800c43c <pbuf_clen>
 80173c6:	4603      	mov	r3, r0
 80173c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80173ca:	4b23      	ldr	r3, [pc, #140]	; (8017458 <ip4_reass+0x30c>)
 80173cc:	881b      	ldrh	r3, [r3, #0]
 80173ce:	8c3a      	ldrh	r2, [r7, #32]
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d906      	bls.n	80173e2 <ip4_reass+0x296>
 80173d4:	4b22      	ldr	r3, [pc, #136]	; (8017460 <ip4_reass+0x314>)
 80173d6:	f240 229b 	movw	r2, #667	; 0x29b
 80173da:	4922      	ldr	r1, [pc, #136]	; (8017464 <ip4_reass+0x318>)
 80173dc:	4822      	ldr	r0, [pc, #136]	; (8017468 <ip4_reass+0x31c>)
 80173de:	f000 fd03 	bl	8017de8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80173e2:	4b1d      	ldr	r3, [pc, #116]	; (8017458 <ip4_reass+0x30c>)
 80173e4:	881a      	ldrh	r2, [r3, #0]
 80173e6:	8c3b      	ldrh	r3, [r7, #32]
 80173e8:	1ad3      	subs	r3, r2, r3
 80173ea:	b29a      	uxth	r2, r3
 80173ec:	4b1a      	ldr	r3, [pc, #104]	; (8017458 <ip4_reass+0x30c>)
 80173ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	e02c      	b.n	801744e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80173f4:	2300      	movs	r3, #0
 80173f6:	e02a      	b.n	801744e <ip4_reass+0x302>

nullreturn_ipr:
 80173f8:	bf00      	nop
 80173fa:	e000      	b.n	80173fe <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80173fc:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80173fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017400:	2b00      	cmp	r3, #0
 8017402:	d106      	bne.n	8017412 <ip4_reass+0x2c6>
 8017404:	4b16      	ldr	r3, [pc, #88]	; (8017460 <ip4_reass+0x314>)
 8017406:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801740a:	4918      	ldr	r1, [pc, #96]	; (801746c <ip4_reass+0x320>)
 801740c:	4816      	ldr	r0, [pc, #88]	; (8017468 <ip4_reass+0x31c>)
 801740e:	f000 fceb 	bl	8017de8 <iprintf>
  if (ipr->p == NULL) {
 8017412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017414:	685b      	ldr	r3, [r3, #4]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d114      	bne.n	8017444 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801741a:	4b10      	ldr	r3, [pc, #64]	; (801745c <ip4_reass+0x310>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017420:	429a      	cmp	r2, r3
 8017422:	d006      	beq.n	8017432 <ip4_reass+0x2e6>
 8017424:	4b0e      	ldr	r3, [pc, #56]	; (8017460 <ip4_reass+0x314>)
 8017426:	f240 22ab 	movw	r2, #683	; 0x2ab
 801742a:	4911      	ldr	r1, [pc, #68]	; (8017470 <ip4_reass+0x324>)
 801742c:	480e      	ldr	r0, [pc, #56]	; (8017468 <ip4_reass+0x31c>)
 801742e:	f000 fcdb 	bl	8017de8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017432:	2100      	movs	r1, #0
 8017434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017436:	f7ff fcf1 	bl	8016e1c <ip_reass_dequeue_datagram>
 801743a:	e004      	b.n	8017446 <ip4_reass+0x2fa>
    goto nullreturn;
 801743c:	bf00      	nop
 801743e:	e002      	b.n	8017446 <ip4_reass+0x2fa>
    goto nullreturn;
 8017440:	bf00      	nop
 8017442:	e000      	b.n	8017446 <ip4_reass+0x2fa>
  }

nullreturn:
 8017444:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017446:	6878      	ldr	r0, [r7, #4]
 8017448:	f7f4 ff6a 	bl	800c320 <pbuf_free>
  return NULL;
 801744c:	2300      	movs	r3, #0
}
 801744e:	4618      	mov	r0, r3
 8017450:	3738      	adds	r7, #56	; 0x38
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	20008bd4 	.word	0x20008bd4
 801745c:	20008bd0 	.word	0x20008bd0
 8017460:	0801c684 	.word	0x0801c684
 8017464:	0801c7f4 	.word	0x0801c7f4
 8017468:	0801c6cc 	.word	0x0801c6cc
 801746c:	0801c810 	.word	0x0801c810
 8017470:	0801c81c 	.word	0x0801c81c

08017474 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017478:	2005      	movs	r0, #5
 801747a:	f7f4 f853 	bl	800b524 <memp_malloc>
 801747e:	4603      	mov	r3, r0
}
 8017480:	4618      	mov	r0, r3
 8017482:	bd80      	pop	{r7, pc}

08017484 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d106      	bne.n	80174a0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017492:	4b07      	ldr	r3, [pc, #28]	; (80174b0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017494:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017498:	4906      	ldr	r1, [pc, #24]	; (80174b4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801749a:	4807      	ldr	r0, [pc, #28]	; (80174b8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801749c:	f000 fca4 	bl	8017de8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80174a0:	6879      	ldr	r1, [r7, #4]
 80174a2:	2005      	movs	r0, #5
 80174a4:	f7f4 f890 	bl	800b5c8 <memp_free>
}
 80174a8:	bf00      	nop
 80174aa:	3708      	adds	r7, #8
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}
 80174b0:	0801c684 	.word	0x0801c684
 80174b4:	0801c83c 	.word	0x0801c83c
 80174b8:	0801c6cc 	.word	0x0801c6cc

080174bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d106      	bne.n	80174dc <ipfrag_free_pbuf_custom+0x20>
 80174ce:	4b11      	ldr	r3, [pc, #68]	; (8017514 <ipfrag_free_pbuf_custom+0x58>)
 80174d0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80174d4:	4910      	ldr	r1, [pc, #64]	; (8017518 <ipfrag_free_pbuf_custom+0x5c>)
 80174d6:	4811      	ldr	r0, [pc, #68]	; (801751c <ipfrag_free_pbuf_custom+0x60>)
 80174d8:	f000 fc86 	bl	8017de8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80174dc:	68fa      	ldr	r2, [r7, #12]
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d006      	beq.n	80174f2 <ipfrag_free_pbuf_custom+0x36>
 80174e4:	4b0b      	ldr	r3, [pc, #44]	; (8017514 <ipfrag_free_pbuf_custom+0x58>)
 80174e6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80174ea:	490d      	ldr	r1, [pc, #52]	; (8017520 <ipfrag_free_pbuf_custom+0x64>)
 80174ec:	480b      	ldr	r0, [pc, #44]	; (801751c <ipfrag_free_pbuf_custom+0x60>)
 80174ee:	f000 fc7b 	bl	8017de8 <iprintf>
  if (pcr->original != NULL) {
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	695b      	ldr	r3, [r3, #20]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d004      	beq.n	8017504 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	695b      	ldr	r3, [r3, #20]
 80174fe:	4618      	mov	r0, r3
 8017500:	f7f4 ff0e 	bl	800c320 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017504:	68f8      	ldr	r0, [r7, #12]
 8017506:	f7ff ffbd 	bl	8017484 <ip_frag_free_pbuf_custom_ref>
}
 801750a:	bf00      	nop
 801750c:	3710      	adds	r7, #16
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}
 8017512:	bf00      	nop
 8017514:	0801c684 	.word	0x0801c684
 8017518:	0801c848 	.word	0x0801c848
 801751c:	0801c6cc 	.word	0x0801c6cc
 8017520:	0801c854 	.word	0x0801c854

08017524 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b094      	sub	sp, #80	; 0x50
 8017528:	af02      	add	r7, sp, #8
 801752a:	60f8      	str	r0, [r7, #12]
 801752c:	60b9      	str	r1, [r7, #8]
 801752e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017530:	2300      	movs	r3, #0
 8017532:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801753a:	3b14      	subs	r3, #20
 801753c:	2b00      	cmp	r3, #0
 801753e:	da00      	bge.n	8017542 <ip4_frag+0x1e>
 8017540:	3307      	adds	r3, #7
 8017542:	10db      	asrs	r3, r3, #3
 8017544:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017546:	2314      	movs	r3, #20
 8017548:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017552:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	f003 030f 	and.w	r3, r3, #15
 801755c:	b2db      	uxtb	r3, r3
 801755e:	009b      	lsls	r3, r3, #2
 8017560:	b2db      	uxtb	r3, r3
 8017562:	2b14      	cmp	r3, #20
 8017564:	d002      	beq.n	801756c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017566:	f06f 0305 	mvn.w	r3, #5
 801756a:	e10f      	b.n	801778c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	895b      	ldrh	r3, [r3, #10]
 8017570:	2b13      	cmp	r3, #19
 8017572:	d809      	bhi.n	8017588 <ip4_frag+0x64>
 8017574:	4b87      	ldr	r3, [pc, #540]	; (8017794 <ip4_frag+0x270>)
 8017576:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801757a:	4987      	ldr	r1, [pc, #540]	; (8017798 <ip4_frag+0x274>)
 801757c:	4887      	ldr	r0, [pc, #540]	; (801779c <ip4_frag+0x278>)
 801757e:	f000 fc33 	bl	8017de8 <iprintf>
 8017582:	f06f 0305 	mvn.w	r3, #5
 8017586:	e101      	b.n	801778c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758a:	88db      	ldrh	r3, [r3, #6]
 801758c:	b29b      	uxth	r3, r3
 801758e:	4618      	mov	r0, r3
 8017590:	f7f3 fadc 	bl	800ab4c <lwip_htons>
 8017594:	4603      	mov	r3, r0
 8017596:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017598:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801759a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801759e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80175a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80175a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80175a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	891b      	ldrh	r3, [r3, #8]
 80175ae:	3b14      	subs	r3, #20
 80175b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80175b4:	e0e0      	b.n	8017778 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80175b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80175b8:	00db      	lsls	r3, r3, #3
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80175c0:	4293      	cmp	r3, r2
 80175c2:	bf28      	it	cs
 80175c4:	4613      	movcs	r3, r2
 80175c6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80175c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175cc:	2114      	movs	r1, #20
 80175ce:	200e      	movs	r0, #14
 80175d0:	f7f4 fbc6 	bl	800bd60 <pbuf_alloc>
 80175d4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80175d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d8:	2b00      	cmp	r3, #0
 80175da:	f000 80d4 	beq.w	8017786 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80175de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e0:	895b      	ldrh	r3, [r3, #10]
 80175e2:	2b13      	cmp	r3, #19
 80175e4:	d806      	bhi.n	80175f4 <ip4_frag+0xd0>
 80175e6:	4b6b      	ldr	r3, [pc, #428]	; (8017794 <ip4_frag+0x270>)
 80175e8:	f240 3225 	movw	r2, #805	; 0x325
 80175ec:	496c      	ldr	r1, [pc, #432]	; (80177a0 <ip4_frag+0x27c>)
 80175ee:	486b      	ldr	r0, [pc, #428]	; (801779c <ip4_frag+0x278>)
 80175f0:	f000 fbfa 	bl	8017de8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80175f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f6:	685b      	ldr	r3, [r3, #4]
 80175f8:	2214      	movs	r2, #20
 80175fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80175fc:	4618      	mov	r0, r3
 80175fe:	f000 fbe0 	bl	8017dc2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017608:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801760a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801760e:	e064      	b.n	80176da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	895a      	ldrh	r2, [r3, #10]
 8017614:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017616:	1ad3      	subs	r3, r2, r3
 8017618:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	895b      	ldrh	r3, [r3, #10]
 801761e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017620:	429a      	cmp	r2, r3
 8017622:	d906      	bls.n	8017632 <ip4_frag+0x10e>
 8017624:	4b5b      	ldr	r3, [pc, #364]	; (8017794 <ip4_frag+0x270>)
 8017626:	f240 322d 	movw	r2, #813	; 0x32d
 801762a:	495e      	ldr	r1, [pc, #376]	; (80177a4 <ip4_frag+0x280>)
 801762c:	485b      	ldr	r0, [pc, #364]	; (801779c <ip4_frag+0x278>)
 801762e:	f000 fbdb 	bl	8017de8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017632:	8bfa      	ldrh	r2, [r7, #30]
 8017634:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017638:	4293      	cmp	r3, r2
 801763a:	bf28      	it	cs
 801763c:	4613      	movcs	r3, r2
 801763e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017642:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017646:	2b00      	cmp	r3, #0
 8017648:	d105      	bne.n	8017656 <ip4_frag+0x132>
        poff = 0;
 801764a:	2300      	movs	r3, #0
 801764c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	60fb      	str	r3, [r7, #12]
        continue;
 8017654:	e041      	b.n	80176da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017656:	f7ff ff0d 	bl	8017474 <ip_frag_alloc_pbuf_custom_ref>
 801765a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801765c:	69bb      	ldr	r3, [r7, #24]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d103      	bne.n	801766a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017664:	f7f4 fe5c 	bl	800c320 <pbuf_free>
        goto memerr;
 8017668:	e08e      	b.n	8017788 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801766a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017670:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017672:	4413      	add	r3, r2
 8017674:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017678:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801767c:	9201      	str	r2, [sp, #4]
 801767e:	9300      	str	r3, [sp, #0]
 8017680:	4603      	mov	r3, r0
 8017682:	2241      	movs	r2, #65	; 0x41
 8017684:	2000      	movs	r0, #0
 8017686:	f7f4 fc91 	bl	800bfac <pbuf_alloced_custom>
 801768a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d106      	bne.n	80176a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017692:	69b8      	ldr	r0, [r7, #24]
 8017694:	f7ff fef6 	bl	8017484 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801769a:	f7f4 fe41 	bl	800c320 <pbuf_free>
        goto memerr;
 801769e:	e073      	b.n	8017788 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80176a0:	68f8      	ldr	r0, [r7, #12]
 80176a2:	f7f4 fee3 	bl	800c46c <pbuf_ref>
      pcr->original = p;
 80176a6:	69bb      	ldr	r3, [r7, #24]
 80176a8:	68fa      	ldr	r2, [r7, #12]
 80176aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80176ac:	69bb      	ldr	r3, [r7, #24]
 80176ae:	4a3e      	ldr	r2, [pc, #248]	; (80177a8 <ip4_frag+0x284>)
 80176b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80176b2:	6979      	ldr	r1, [r7, #20]
 80176b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80176b6:	f7f4 ff01 	bl	800c4bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80176ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80176be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80176c2:	1ad3      	subs	r3, r2, r3
 80176c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80176c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d004      	beq.n	80176da <ip4_frag+0x1b6>
        poff = 0;
 80176d0:	2300      	movs	r3, #0
 80176d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80176da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d196      	bne.n	8017610 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80176e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80176e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80176e8:	4413      	add	r3, r2
 80176ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80176ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80176f0:	68bb      	ldr	r3, [r7, #8]
 80176f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176f4:	3b14      	subs	r3, #20
 80176f6:	429a      	cmp	r2, r3
 80176f8:	bfd4      	ite	le
 80176fa:	2301      	movle	r3, #1
 80176fc:	2300      	movgt	r3, #0
 80176fe:	b2db      	uxtb	r3, r3
 8017700:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017706:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801770a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801770c:	6a3b      	ldr	r3, [r7, #32]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d002      	beq.n	8017718 <ip4_frag+0x1f4>
 8017712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017714:	2b00      	cmp	r3, #0
 8017716:	d003      	beq.n	8017720 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017718:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801771a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801771e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017720:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017722:	4618      	mov	r0, r3
 8017724:	f7f3 fa12 	bl	800ab4c <lwip_htons>
 8017728:	4603      	mov	r3, r0
 801772a:	461a      	mov	r2, r3
 801772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801772e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017730:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017732:	3314      	adds	r3, #20
 8017734:	b29b      	uxth	r3, r3
 8017736:	4618      	mov	r0, r3
 8017738:	f7f3 fa08 	bl	800ab4c <lwip_htons>
 801773c:	4603      	mov	r3, r0
 801773e:	461a      	mov	r2, r3
 8017740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017742:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017746:	2200      	movs	r2, #0
 8017748:	729a      	strb	r2, [r3, #10]
 801774a:	2200      	movs	r2, #0
 801774c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	695b      	ldr	r3, [r3, #20]
 8017752:	687a      	ldr	r2, [r7, #4]
 8017754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017756:	68b8      	ldr	r0, [r7, #8]
 8017758:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801775a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801775c:	f7f4 fde0 	bl	800c320 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017760:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017764:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017766:	1ad3      	subs	r3, r2, r3
 8017768:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801776c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017770:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017772:	4413      	add	r3, r2
 8017774:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801777c:	2b00      	cmp	r3, #0
 801777e:	f47f af1a 	bne.w	80175b6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017782:	2300      	movs	r3, #0
 8017784:	e002      	b.n	801778c <ip4_frag+0x268>
      goto memerr;
 8017786:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017788:	f04f 33ff 	mov.w	r3, #4294967295
}
 801778c:	4618      	mov	r0, r3
 801778e:	3748      	adds	r7, #72	; 0x48
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}
 8017794:	0801c684 	.word	0x0801c684
 8017798:	0801c860 	.word	0x0801c860
 801779c:	0801c6cc 	.word	0x0801c6cc
 80177a0:	0801c87c 	.word	0x0801c87c
 80177a4:	0801c89c 	.word	0x0801c89c
 80177a8:	080174bd 	.word	0x080174bd

080177ac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b086      	sub	sp, #24
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	6078      	str	r0, [r7, #4]
 80177b4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80177b6:	230e      	movs	r3, #14
 80177b8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	895b      	ldrh	r3, [r3, #10]
 80177be:	2b0e      	cmp	r3, #14
 80177c0:	d96e      	bls.n	80178a0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	7bdb      	ldrb	r3, [r3, #15]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d106      	bne.n	80177d8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80177d0:	3301      	adds	r3, #1
 80177d2:	b2da      	uxtb	r2, r3
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	685b      	ldr	r3, [r3, #4]
 80177dc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	7b1a      	ldrb	r2, [r3, #12]
 80177e2:	7b5b      	ldrb	r3, [r3, #13]
 80177e4:	021b      	lsls	r3, r3, #8
 80177e6:	4313      	orrs	r3, r2
 80177e8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80177ea:	693b      	ldr	r3, [r7, #16]
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	f003 0301 	and.w	r3, r3, #1
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d023      	beq.n	801783e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80177f6:	693b      	ldr	r3, [r7, #16]
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	2b01      	cmp	r3, #1
 80177fc:	d10f      	bne.n	801781e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80177fe:	693b      	ldr	r3, [r7, #16]
 8017800:	785b      	ldrb	r3, [r3, #1]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d11b      	bne.n	801783e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801780a:	2b5e      	cmp	r3, #94	; 0x5e
 801780c:	d117      	bne.n	801783e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	7b5b      	ldrb	r3, [r3, #13]
 8017812:	f043 0310 	orr.w	r3, r3, #16
 8017816:	b2da      	uxtb	r2, r3
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	735a      	strb	r2, [r3, #13]
 801781c:	e00f      	b.n	801783e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	2206      	movs	r2, #6
 8017822:	4928      	ldr	r1, [pc, #160]	; (80178c4 <ethernet_input+0x118>)
 8017824:	4618      	mov	r0, r3
 8017826:	f000 fabd 	bl	8017da4 <memcmp>
 801782a:	4603      	mov	r3, r0
 801782c:	2b00      	cmp	r3, #0
 801782e:	d106      	bne.n	801783e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	7b5b      	ldrb	r3, [r3, #13]
 8017834:	f043 0308 	orr.w	r3, r3, #8
 8017838:	b2da      	uxtb	r2, r3
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801783e:	89fb      	ldrh	r3, [r7, #14]
 8017840:	2b08      	cmp	r3, #8
 8017842:	d003      	beq.n	801784c <ethernet_input+0xa0>
 8017844:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017848:	d014      	beq.n	8017874 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801784a:	e032      	b.n	80178b2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017852:	f003 0308 	and.w	r3, r3, #8
 8017856:	2b00      	cmp	r3, #0
 8017858:	d024      	beq.n	80178a4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801785a:	8afb      	ldrh	r3, [r7, #22]
 801785c:	4619      	mov	r1, r3
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f7f4 fcd8 	bl	800c214 <pbuf_remove_header>
 8017864:	4603      	mov	r3, r0
 8017866:	2b00      	cmp	r3, #0
 8017868:	d11e      	bne.n	80178a8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801786a:	6839      	ldr	r1, [r7, #0]
 801786c:	6878      	ldr	r0, [r7, #4]
 801786e:	f7fe ff0f 	bl	8016690 <ip4_input>
      break;
 8017872:	e013      	b.n	801789c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801787a:	f003 0308 	and.w	r3, r3, #8
 801787e:	2b00      	cmp	r3, #0
 8017880:	d014      	beq.n	80178ac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017882:	8afb      	ldrh	r3, [r7, #22]
 8017884:	4619      	mov	r1, r3
 8017886:	6878      	ldr	r0, [r7, #4]
 8017888:	f7f4 fcc4 	bl	800c214 <pbuf_remove_header>
 801788c:	4603      	mov	r3, r0
 801788e:	2b00      	cmp	r3, #0
 8017890:	d10e      	bne.n	80178b0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017892:	6839      	ldr	r1, [r7, #0]
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f7fe f8ab 	bl	80159f0 <etharp_input>
      break;
 801789a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801789c:	2300      	movs	r3, #0
 801789e:	e00c      	b.n	80178ba <ethernet_input+0x10e>
    goto free_and_return;
 80178a0:	bf00      	nop
 80178a2:	e006      	b.n	80178b2 <ethernet_input+0x106>
        goto free_and_return;
 80178a4:	bf00      	nop
 80178a6:	e004      	b.n	80178b2 <ethernet_input+0x106>
        goto free_and_return;
 80178a8:	bf00      	nop
 80178aa:	e002      	b.n	80178b2 <ethernet_input+0x106>
        goto free_and_return;
 80178ac:	bf00      	nop
 80178ae:	e000      	b.n	80178b2 <ethernet_input+0x106>
        goto free_and_return;
 80178b0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7f4 fd34 	bl	800c320 <pbuf_free>
  return ERR_OK;
 80178b8:	2300      	movs	r3, #0
}
 80178ba:	4618      	mov	r0, r3
 80178bc:	3718      	adds	r7, #24
 80178be:	46bd      	mov	sp, r7
 80178c0:	bd80      	pop	{r7, pc}
 80178c2:	bf00      	nop
 80178c4:	08026bbc 	.word	0x08026bbc

080178c8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b086      	sub	sp, #24
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	60f8      	str	r0, [r7, #12]
 80178d0:	60b9      	str	r1, [r7, #8]
 80178d2:	607a      	str	r2, [r7, #4]
 80178d4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80178d6:	8c3b      	ldrh	r3, [r7, #32]
 80178d8:	4618      	mov	r0, r3
 80178da:	f7f3 f937 	bl	800ab4c <lwip_htons>
 80178de:	4603      	mov	r3, r0
 80178e0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80178e2:	210e      	movs	r1, #14
 80178e4:	68b8      	ldr	r0, [r7, #8]
 80178e6:	f7f4 fc85 	bl	800c1f4 <pbuf_add_header>
 80178ea:	4603      	mov	r3, r0
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d125      	bne.n	801793c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	685b      	ldr	r3, [r3, #4]
 80178f4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80178f6:	693b      	ldr	r3, [r7, #16]
 80178f8:	8afa      	ldrh	r2, [r7, #22]
 80178fa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	2206      	movs	r2, #6
 8017900:	6839      	ldr	r1, [r7, #0]
 8017902:	4618      	mov	r0, r3
 8017904:	f000 fa5d 	bl	8017dc2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017908:	693b      	ldr	r3, [r7, #16]
 801790a:	3306      	adds	r3, #6
 801790c:	2206      	movs	r2, #6
 801790e:	6879      	ldr	r1, [r7, #4]
 8017910:	4618      	mov	r0, r3
 8017912:	f000 fa56 	bl	8017dc2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801791c:	2b06      	cmp	r3, #6
 801791e:	d006      	beq.n	801792e <ethernet_output+0x66>
 8017920:	4b0a      	ldr	r3, [pc, #40]	; (801794c <ethernet_output+0x84>)
 8017922:	f240 1233 	movw	r2, #307	; 0x133
 8017926:	490a      	ldr	r1, [pc, #40]	; (8017950 <ethernet_output+0x88>)
 8017928:	480a      	ldr	r0, [pc, #40]	; (8017954 <ethernet_output+0x8c>)
 801792a:	f000 fa5d 	bl	8017de8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	699b      	ldr	r3, [r3, #24]
 8017932:	68b9      	ldr	r1, [r7, #8]
 8017934:	68f8      	ldr	r0, [r7, #12]
 8017936:	4798      	blx	r3
 8017938:	4603      	mov	r3, r0
 801793a:	e002      	b.n	8017942 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801793c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801793e:	f06f 0301 	mvn.w	r3, #1
}
 8017942:	4618      	mov	r0, r3
 8017944:	3718      	adds	r7, #24
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}
 801794a:	bf00      	nop
 801794c:	0801c8ac 	.word	0x0801c8ac
 8017950:	0801c8e4 	.word	0x0801c8e4
 8017954:	0801c918 	.word	0x0801c918

08017958 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b086      	sub	sp, #24
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
 8017960:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017962:	683b      	ldr	r3, [r7, #0]
 8017964:	60bb      	str	r3, [r7, #8]
 8017966:	2304      	movs	r3, #4
 8017968:	60fb      	str	r3, [r7, #12]
 801796a:	2300      	movs	r3, #0
 801796c:	613b      	str	r3, [r7, #16]
 801796e:	2300      	movs	r3, #0
 8017970:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017972:	f107 0308 	add.w	r3, r7, #8
 8017976:	2100      	movs	r1, #0
 8017978:	4618      	mov	r0, r3
 801797a:	f7ed fa38 	bl	8004dee <osMessageCreate>
 801797e:	4602      	mov	r2, r0
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d102      	bne.n	8017992 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801798c:	f04f 33ff 	mov.w	r3, #4294967295
 8017990:	e000      	b.n	8017994 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017992:	2300      	movs	r3, #0
}
 8017994:	4618      	mov	r0, r3
 8017996:	3718      	adds	r7, #24
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b082      	sub	sp, #8
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7ed fafd 	bl	8004fa8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7ed fb0e 	bl	8004fd4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80179b8:	bf00      	nop
 80179ba:	3708      	adds	r7, #8
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}

080179c0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b084      	sub	sp, #16
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
 80179c8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	6839      	ldr	r1, [r7, #0]
 80179d0:	2200      	movs	r2, #0
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7ed fa34 	bl	8004e40 <osMessagePut>
 80179d8:	4603      	mov	r3, r0
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d102      	bne.n	80179e4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80179de:	2300      	movs	r3, #0
 80179e0:	73fb      	strb	r3, [r7, #15]
 80179e2:	e001      	b.n	80179e8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80179e4:	23ff      	movs	r3, #255	; 0xff
 80179e6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80179e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3710      	adds	r7, #16
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}

080179f4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b08c      	sub	sp, #48	; 0x30
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	61f8      	str	r0, [r7, #28]
 80179fc:	61b9      	str	r1, [r7, #24]
 80179fe:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017a00:	f7ed f81d 	bl	8004a3e <osKernelSysTick>
 8017a04:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d017      	beq.n	8017a3c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017a0c:	69fb      	ldr	r3, [r7, #28]
 8017a0e:	6819      	ldr	r1, [r3, #0]
 8017a10:	f107 0320 	add.w	r3, r7, #32
 8017a14:	697a      	ldr	r2, [r7, #20]
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7ed fa52 	bl	8004ec0 <osMessageGet>

    if(event.status == osEventMessage)
 8017a1c:	6a3b      	ldr	r3, [r7, #32]
 8017a1e:	2b10      	cmp	r3, #16
 8017a20:	d109      	bne.n	8017a36 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a24:	461a      	mov	r2, r3
 8017a26:	69bb      	ldr	r3, [r7, #24]
 8017a28:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017a2a:	f7ed f808 	bl	8004a3e <osKernelSysTick>
 8017a2e:	4602      	mov	r2, r0
 8017a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a32:	1ad3      	subs	r3, r2, r3
 8017a34:	e019      	b.n	8017a6a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017a36:	f04f 33ff 	mov.w	r3, #4294967295
 8017a3a:	e016      	b.n	8017a6a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	6819      	ldr	r1, [r3, #0]
 8017a40:	463b      	mov	r3, r7
 8017a42:	f04f 32ff 	mov.w	r2, #4294967295
 8017a46:	4618      	mov	r0, r3
 8017a48:	f7ed fa3a 	bl	8004ec0 <osMessageGet>
 8017a4c:	f107 0320 	add.w	r3, r7, #32
 8017a50:	463a      	mov	r2, r7
 8017a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8017a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a5a:	461a      	mov	r2, r3
 8017a5c:	69bb      	ldr	r3, [r7, #24]
 8017a5e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017a60:	f7ec ffed 	bl	8004a3e <osKernelSysTick>
 8017a64:	4602      	mov	r2, r0
 8017a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a68:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3730      	adds	r7, #48	; 0x30
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}

08017a72 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017a72:	b580      	push	{r7, lr}
 8017a74:	b086      	sub	sp, #24
 8017a76:	af00      	add	r7, sp, #0
 8017a78:	6078      	str	r0, [r7, #4]
 8017a7a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	6819      	ldr	r1, [r3, #0]
 8017a80:	f107 030c 	add.w	r3, r7, #12
 8017a84:	2200      	movs	r2, #0
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7ed fa1a 	bl	8004ec0 <osMessageGet>

  if(event.status == osEventMessage)
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	2b10      	cmp	r3, #16
 8017a90:	d105      	bne.n	8017a9e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	461a      	mov	r2, r3
 8017a96:	683b      	ldr	r3, [r7, #0]
 8017a98:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	e001      	b.n	8017aa2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017a9e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	3718      	adds	r7, #24
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}

08017aaa <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017aaa:	b480      	push	{r7}
 8017aac:	b083      	sub	sp, #12
 8017aae:	af00      	add	r7, sp, #0
 8017ab0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d101      	bne.n	8017abe <sys_mbox_valid+0x14>
    return 0;
 8017aba:	2300      	movs	r3, #0
 8017abc:	e000      	b.n	8017ac0 <sys_mbox_valid+0x16>
  else
    return 1;
 8017abe:	2301      	movs	r3, #1
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	370c      	adds	r7, #12
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aca:	4770      	bx	lr

08017acc <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017acc:	b480      	push	{r7}
 8017ace:	b083      	sub	sp, #12
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	601a      	str	r2, [r3, #0]
}
 8017ada:	bf00      	nop
 8017adc:	370c      	adds	r7, #12
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae4:	4770      	bx	lr

08017ae6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017ae6:	b580      	push	{r7, lr}
 8017ae8:	b084      	sub	sp, #16
 8017aea:	af00      	add	r7, sp, #0
 8017aec:	6078      	str	r0, [r7, #4]
 8017aee:	460b      	mov	r3, r1
 8017af0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017af2:	2300      	movs	r3, #0
 8017af4:	60bb      	str	r3, [r7, #8]
 8017af6:	2300      	movs	r3, #0
 8017af8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017afa:	f107 0308 	add.w	r3, r7, #8
 8017afe:	2101      	movs	r1, #1
 8017b00:	4618      	mov	r0, r3
 8017b02:	f7ed f8a9 	bl	8004c58 <osSemaphoreCreate>
 8017b06:	4602      	mov	r2, r0
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d102      	bne.n	8017b1a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017b14:	f04f 33ff 	mov.w	r3, #4294967295
 8017b18:	e009      	b.n	8017b2e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017b1a:	78fb      	ldrb	r3, [r7, #3]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d105      	bne.n	8017b2c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	2100      	movs	r1, #0
 8017b26:	4618      	mov	r0, r3
 8017b28:	f7ed f8ca 	bl	8004cc0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017b2c:	2300      	movs	r3, #0
}
 8017b2e:	4618      	mov	r0, r3
 8017b30:	3710      	adds	r7, #16
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bd80      	pop	{r7, pc}

08017b36 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017b36:	b580      	push	{r7, lr}
 8017b38:	b084      	sub	sp, #16
 8017b3a:	af00      	add	r7, sp, #0
 8017b3c:	6078      	str	r0, [r7, #4]
 8017b3e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017b40:	f7ec ff7d 	bl	8004a3e <osKernelSysTick>
 8017b44:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017b46:	683b      	ldr	r3, [r7, #0]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d011      	beq.n	8017b70 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	6839      	ldr	r1, [r7, #0]
 8017b52:	4618      	mov	r0, r3
 8017b54:	f7ed f8b4 	bl	8004cc0 <osSemaphoreWait>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d105      	bne.n	8017b6a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017b5e:	f7ec ff6e 	bl	8004a3e <osKernelSysTick>
 8017b62:	4602      	mov	r2, r0
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	1ad3      	subs	r3, r2, r3
 8017b68:	e012      	b.n	8017b90 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017b6e:	e00f      	b.n	8017b90 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017b70:	bf00      	nop
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	f04f 31ff 	mov.w	r1, #4294967295
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7ed f8a0 	bl	8004cc0 <osSemaphoreWait>
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d1f5      	bne.n	8017b72 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017b86:	f7ec ff5a 	bl	8004a3e <osKernelSysTick>
 8017b8a:	4602      	mov	r2, r0
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	3710      	adds	r7, #16
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}

08017b98 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b082      	sub	sp, #8
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f7ed f8d9 	bl	8004d5c <osSemaphoreRelease>
}
 8017baa:	bf00      	nop
 8017bac:	3708      	adds	r7, #8
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd80      	pop	{r7, pc}

08017bb2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017bb2:	b580      	push	{r7, lr}
 8017bb4:	b082      	sub	sp, #8
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f7ed f902 	bl	8004dc8 <osSemaphoreDelete>
}
 8017bc4:	bf00      	nop
 8017bc6:	3708      	adds	r7, #8
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}

08017bcc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017bcc:	b480      	push	{r7}
 8017bce:	b083      	sub	sp, #12
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d101      	bne.n	8017be0 <sys_sem_valid+0x14>
    return 0;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	e000      	b.n	8017be2 <sys_sem_valid+0x16>
  else
    return 1;
 8017be0:	2301      	movs	r3, #1
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	370c      	adds	r7, #12
 8017be6:	46bd      	mov	sp, r7
 8017be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bec:	4770      	bx	lr

08017bee <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017bee:	b480      	push	{r7}
 8017bf0:	b083      	sub	sp, #12
 8017bf2:	af00      	add	r7, sp, #0
 8017bf4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	601a      	str	r2, [r3, #0]
}
 8017bfc:	bf00      	nop
 8017bfe:	370c      	adds	r7, #12
 8017c00:	46bd      	mov	sp, r7
 8017c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c06:	4770      	bx	lr

08017c08 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017c0c:	4803      	ldr	r0, [pc, #12]	; (8017c1c <sys_init+0x14>)
 8017c0e:	f7ec ff86 	bl	8004b1e <osMutexCreate>
 8017c12:	4602      	mov	r2, r0
 8017c14:	4b02      	ldr	r3, [pc, #8]	; (8017c20 <sys_init+0x18>)
 8017c16:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017c18:	bf00      	nop
 8017c1a:	bd80      	pop	{r7, pc}
 8017c1c:	08026bcc 	.word	0x08026bcc
 8017c20:	2000f55c 	.word	0x2000f55c

08017c24 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b084      	sub	sp, #16
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	60bb      	str	r3, [r7, #8]
 8017c30:	2300      	movs	r3, #0
 8017c32:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017c34:	f107 0308 	add.w	r3, r7, #8
 8017c38:	4618      	mov	r0, r3
 8017c3a:	f7ec ff70 	bl	8004b1e <osMutexCreate>
 8017c3e:	4602      	mov	r2, r0
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d102      	bne.n	8017c52 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c50:	e000      	b.n	8017c54 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017c52:	2300      	movs	r3, #0
}
 8017c54:	4618      	mov	r0, r3
 8017c56:	3710      	adds	r7, #16
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	bd80      	pop	{r7, pc}

08017c5c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b082      	sub	sp, #8
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	f04f 31ff 	mov.w	r1, #4294967295
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f7ec ff6f 	bl	8004b50 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017c72:	bf00      	nop
 8017c74:	3708      	adds	r7, #8
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}

08017c7a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017c7a:	b580      	push	{r7, lr}
 8017c7c:	b082      	sub	sp, #8
 8017c7e:	af00      	add	r7, sp, #0
 8017c80:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	4618      	mov	r0, r3
 8017c88:	f7ec ffb0 	bl	8004bec <osMutexRelease>
}
 8017c8c:	bf00      	nop
 8017c8e:	3708      	adds	r7, #8
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}

08017c94 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b08c      	sub	sp, #48	; 0x30
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	60f8      	str	r0, [r7, #12]
 8017c9c:	60b9      	str	r1, [r7, #8]
 8017c9e:	607a      	str	r2, [r7, #4]
 8017ca0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017ca2:	f107 0314 	add.w	r3, r7, #20
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	601a      	str	r2, [r3, #0]
 8017caa:	605a      	str	r2, [r3, #4]
 8017cac:	609a      	str	r2, [r3, #8]
 8017cae:	60da      	str	r2, [r3, #12]
 8017cb0:	611a      	str	r2, [r3, #16]
 8017cb2:	615a      	str	r2, [r3, #20]
 8017cb4:	619a      	str	r2, [r3, #24]
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	617b      	str	r3, [r7, #20]
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	61bb      	str	r3, [r7, #24]
 8017cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc0:	b21b      	sxth	r3, r3
 8017cc2:	83bb      	strh	r3, [r7, #28]
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017cc8:	f107 0314 	add.w	r3, r7, #20
 8017ccc:	6879      	ldr	r1, [r7, #4]
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7ec fec5 	bl	8004a5e <osThreadCreate>
 8017cd4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3730      	adds	r7, #48	; 0x30
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
	...

08017ce0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017ce4:	4b04      	ldr	r3, [pc, #16]	; (8017cf8 <sys_arch_protect+0x18>)
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7ec ff2f 	bl	8004b50 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017cf2:	2301      	movs	r3, #1
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	bd80      	pop	{r7, pc}
 8017cf8:	2000f55c 	.word	0x2000f55c

08017cfc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017d04:	4b04      	ldr	r3, [pc, #16]	; (8017d18 <sys_arch_unprotect+0x1c>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7ec ff6f 	bl	8004bec <osMutexRelease>
}
 8017d0e:	bf00      	nop
 8017d10:	3708      	adds	r7, #8
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	bf00      	nop
 8017d18:	2000f55c 	.word	0x2000f55c

08017d1c <__libc_init_array>:
 8017d1c:	b570      	push	{r4, r5, r6, lr}
 8017d1e:	4e0d      	ldr	r6, [pc, #52]	; (8017d54 <__libc_init_array+0x38>)
 8017d20:	4c0d      	ldr	r4, [pc, #52]	; (8017d58 <__libc_init_array+0x3c>)
 8017d22:	1ba4      	subs	r4, r4, r6
 8017d24:	10a4      	asrs	r4, r4, #2
 8017d26:	2500      	movs	r5, #0
 8017d28:	42a5      	cmp	r5, r4
 8017d2a:	d109      	bne.n	8017d40 <__libc_init_array+0x24>
 8017d2c:	4e0b      	ldr	r6, [pc, #44]	; (8017d5c <__libc_init_array+0x40>)
 8017d2e:	4c0c      	ldr	r4, [pc, #48]	; (8017d60 <__libc_init_array+0x44>)
 8017d30:	f000 fff2 	bl	8018d18 <_init>
 8017d34:	1ba4      	subs	r4, r4, r6
 8017d36:	10a4      	asrs	r4, r4, #2
 8017d38:	2500      	movs	r5, #0
 8017d3a:	42a5      	cmp	r5, r4
 8017d3c:	d105      	bne.n	8017d4a <__libc_init_array+0x2e>
 8017d3e:	bd70      	pop	{r4, r5, r6, pc}
 8017d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d44:	4798      	blx	r3
 8017d46:	3501      	adds	r5, #1
 8017d48:	e7ee      	b.n	8017d28 <__libc_init_array+0xc>
 8017d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d4e:	4798      	blx	r3
 8017d50:	3501      	adds	r5, #1
 8017d52:	e7f2      	b.n	8017d3a <__libc_init_array+0x1e>
 8017d54:	08026d80 	.word	0x08026d80
 8017d58:	08026d80 	.word	0x08026d80
 8017d5c:	08026d80 	.word	0x08026d80
 8017d60:	08026d84 	.word	0x08026d84

08017d64 <__locale_ctype_ptr>:
 8017d64:	4b04      	ldr	r3, [pc, #16]	; (8017d78 <__locale_ctype_ptr+0x14>)
 8017d66:	4a05      	ldr	r2, [pc, #20]	; (8017d7c <__locale_ctype_ptr+0x18>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	6a1b      	ldr	r3, [r3, #32]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	bf08      	it	eq
 8017d70:	4613      	moveq	r3, r2
 8017d72:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017d76:	4770      	bx	lr
 8017d78:	20000020 	.word	0x20000020
 8017d7c:	20000084 	.word	0x20000084

08017d80 <__ascii_mbtowc>:
 8017d80:	b082      	sub	sp, #8
 8017d82:	b901      	cbnz	r1, 8017d86 <__ascii_mbtowc+0x6>
 8017d84:	a901      	add	r1, sp, #4
 8017d86:	b142      	cbz	r2, 8017d9a <__ascii_mbtowc+0x1a>
 8017d88:	b14b      	cbz	r3, 8017d9e <__ascii_mbtowc+0x1e>
 8017d8a:	7813      	ldrb	r3, [r2, #0]
 8017d8c:	600b      	str	r3, [r1, #0]
 8017d8e:	7812      	ldrb	r2, [r2, #0]
 8017d90:	1c10      	adds	r0, r2, #0
 8017d92:	bf18      	it	ne
 8017d94:	2001      	movne	r0, #1
 8017d96:	b002      	add	sp, #8
 8017d98:	4770      	bx	lr
 8017d9a:	4610      	mov	r0, r2
 8017d9c:	e7fb      	b.n	8017d96 <__ascii_mbtowc+0x16>
 8017d9e:	f06f 0001 	mvn.w	r0, #1
 8017da2:	e7f8      	b.n	8017d96 <__ascii_mbtowc+0x16>

08017da4 <memcmp>:
 8017da4:	b530      	push	{r4, r5, lr}
 8017da6:	2400      	movs	r4, #0
 8017da8:	42a2      	cmp	r2, r4
 8017daa:	d101      	bne.n	8017db0 <memcmp+0xc>
 8017dac:	2000      	movs	r0, #0
 8017dae:	e007      	b.n	8017dc0 <memcmp+0x1c>
 8017db0:	5d03      	ldrb	r3, [r0, r4]
 8017db2:	3401      	adds	r4, #1
 8017db4:	190d      	adds	r5, r1, r4
 8017db6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017dba:	42ab      	cmp	r3, r5
 8017dbc:	d0f4      	beq.n	8017da8 <memcmp+0x4>
 8017dbe:	1b58      	subs	r0, r3, r5
 8017dc0:	bd30      	pop	{r4, r5, pc}

08017dc2 <memcpy>:
 8017dc2:	b510      	push	{r4, lr}
 8017dc4:	1e43      	subs	r3, r0, #1
 8017dc6:	440a      	add	r2, r1
 8017dc8:	4291      	cmp	r1, r2
 8017dca:	d100      	bne.n	8017dce <memcpy+0xc>
 8017dcc:	bd10      	pop	{r4, pc}
 8017dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017dd6:	e7f7      	b.n	8017dc8 <memcpy+0x6>

08017dd8 <memset>:
 8017dd8:	4402      	add	r2, r0
 8017dda:	4603      	mov	r3, r0
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d100      	bne.n	8017de2 <memset+0xa>
 8017de0:	4770      	bx	lr
 8017de2:	f803 1b01 	strb.w	r1, [r3], #1
 8017de6:	e7f9      	b.n	8017ddc <memset+0x4>

08017de8 <iprintf>:
 8017de8:	b40f      	push	{r0, r1, r2, r3}
 8017dea:	4b0a      	ldr	r3, [pc, #40]	; (8017e14 <iprintf+0x2c>)
 8017dec:	b513      	push	{r0, r1, r4, lr}
 8017dee:	681c      	ldr	r4, [r3, #0]
 8017df0:	b124      	cbz	r4, 8017dfc <iprintf+0x14>
 8017df2:	69a3      	ldr	r3, [r4, #24]
 8017df4:	b913      	cbnz	r3, 8017dfc <iprintf+0x14>
 8017df6:	4620      	mov	r0, r4
 8017df8:	f000 f8fa 	bl	8017ff0 <__sinit>
 8017dfc:	ab05      	add	r3, sp, #20
 8017dfe:	9a04      	ldr	r2, [sp, #16]
 8017e00:	68a1      	ldr	r1, [r4, #8]
 8017e02:	9301      	str	r3, [sp, #4]
 8017e04:	4620      	mov	r0, r4
 8017e06:	f000 fa57 	bl	80182b8 <_vfiprintf_r>
 8017e0a:	b002      	add	sp, #8
 8017e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e10:	b004      	add	sp, #16
 8017e12:	4770      	bx	lr
 8017e14:	20000020 	.word	0x20000020

08017e18 <rand>:
 8017e18:	b538      	push	{r3, r4, r5, lr}
 8017e1a:	4b13      	ldr	r3, [pc, #76]	; (8017e68 <rand+0x50>)
 8017e1c:	681c      	ldr	r4, [r3, #0]
 8017e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017e20:	b97b      	cbnz	r3, 8017e42 <rand+0x2a>
 8017e22:	2018      	movs	r0, #24
 8017e24:	f000 f96e 	bl	8018104 <malloc>
 8017e28:	4a10      	ldr	r2, [pc, #64]	; (8017e6c <rand+0x54>)
 8017e2a:	4b11      	ldr	r3, [pc, #68]	; (8017e70 <rand+0x58>)
 8017e2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8017e2e:	e9c0 2300 	strd	r2, r3, [r0]
 8017e32:	4b10      	ldr	r3, [pc, #64]	; (8017e74 <rand+0x5c>)
 8017e34:	6083      	str	r3, [r0, #8]
 8017e36:	230b      	movs	r3, #11
 8017e38:	8183      	strh	r3, [r0, #12]
 8017e3a:	2201      	movs	r2, #1
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017e42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017e44:	480c      	ldr	r0, [pc, #48]	; (8017e78 <rand+0x60>)
 8017e46:	690a      	ldr	r2, [r1, #16]
 8017e48:	694b      	ldr	r3, [r1, #20]
 8017e4a:	4c0c      	ldr	r4, [pc, #48]	; (8017e7c <rand+0x64>)
 8017e4c:	4350      	muls	r0, r2
 8017e4e:	fb04 0003 	mla	r0, r4, r3, r0
 8017e52:	fba2 2304 	umull	r2, r3, r2, r4
 8017e56:	4403      	add	r3, r0
 8017e58:	1c54      	adds	r4, r2, #1
 8017e5a:	f143 0500 	adc.w	r5, r3, #0
 8017e5e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017e62:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017e66:	bd38      	pop	{r3, r4, r5, pc}
 8017e68:	20000020 	.word	0x20000020
 8017e6c:	abcd330e 	.word	0xabcd330e
 8017e70:	e66d1234 	.word	0xe66d1234
 8017e74:	0005deec 	.word	0x0005deec
 8017e78:	5851f42d 	.word	0x5851f42d
 8017e7c:	4c957f2d 	.word	0x4c957f2d

08017e80 <strcasecmp>:
 8017e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e82:	4606      	mov	r6, r0
 8017e84:	460f      	mov	r7, r1
 8017e86:	f816 4b01 	ldrb.w	r4, [r6], #1
 8017e8a:	f7ff ff6b 	bl	8017d64 <__locale_ctype_ptr>
 8017e8e:	4420      	add	r0, r4
 8017e90:	f817 5b01 	ldrb.w	r5, [r7], #1
 8017e94:	7843      	ldrb	r3, [r0, #1]
 8017e96:	f003 0303 	and.w	r3, r3, #3
 8017e9a:	2b01      	cmp	r3, #1
 8017e9c:	bf08      	it	eq
 8017e9e:	3420      	addeq	r4, #32
 8017ea0:	f7ff ff60 	bl	8017d64 <__locale_ctype_ptr>
 8017ea4:	4428      	add	r0, r5
 8017ea6:	7842      	ldrb	r2, [r0, #1]
 8017ea8:	f002 0203 	and.w	r2, r2, #3
 8017eac:	2a01      	cmp	r2, #1
 8017eae:	bf08      	it	eq
 8017eb0:	3520      	addeq	r5, #32
 8017eb2:	1b60      	subs	r0, r4, r5
 8017eb4:	d101      	bne.n	8017eba <strcasecmp+0x3a>
 8017eb6:	2d00      	cmp	r5, #0
 8017eb8:	d1e5      	bne.n	8017e86 <strcasecmp+0x6>
 8017eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ebc <strchr>:
 8017ebc:	b2c9      	uxtb	r1, r1
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ec4:	b11a      	cbz	r2, 8017ece <strchr+0x12>
 8017ec6:	428a      	cmp	r2, r1
 8017ec8:	d1f9      	bne.n	8017ebe <strchr+0x2>
 8017eca:	4618      	mov	r0, r3
 8017ecc:	4770      	bx	lr
 8017ece:	2900      	cmp	r1, #0
 8017ed0:	bf18      	it	ne
 8017ed2:	2300      	movne	r3, #0
 8017ed4:	e7f9      	b.n	8017eca <strchr+0xe>

08017ed6 <strncmp>:
 8017ed6:	b510      	push	{r4, lr}
 8017ed8:	b16a      	cbz	r2, 8017ef6 <strncmp+0x20>
 8017eda:	3901      	subs	r1, #1
 8017edc:	1884      	adds	r4, r0, r2
 8017ede:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017ee2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017ee6:	4293      	cmp	r3, r2
 8017ee8:	d103      	bne.n	8017ef2 <strncmp+0x1c>
 8017eea:	42a0      	cmp	r0, r4
 8017eec:	d001      	beq.n	8017ef2 <strncmp+0x1c>
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d1f5      	bne.n	8017ede <strncmp+0x8>
 8017ef2:	1a98      	subs	r0, r3, r2
 8017ef4:	bd10      	pop	{r4, pc}
 8017ef6:	4610      	mov	r0, r2
 8017ef8:	e7fc      	b.n	8017ef4 <strncmp+0x1e>

08017efa <__strtok_r>:
 8017efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017efc:	b918      	cbnz	r0, 8017f06 <__strtok_r+0xc>
 8017efe:	6810      	ldr	r0, [r2, #0]
 8017f00:	b908      	cbnz	r0, 8017f06 <__strtok_r+0xc>
 8017f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f04:	4620      	mov	r0, r4
 8017f06:	4604      	mov	r4, r0
 8017f08:	460f      	mov	r7, r1
 8017f0a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017f0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017f12:	b91e      	cbnz	r6, 8017f1c <__strtok_r+0x22>
 8017f14:	b96d      	cbnz	r5, 8017f32 <__strtok_r+0x38>
 8017f16:	6015      	str	r5, [r2, #0]
 8017f18:	4628      	mov	r0, r5
 8017f1a:	e7f2      	b.n	8017f02 <__strtok_r+0x8>
 8017f1c:	42b5      	cmp	r5, r6
 8017f1e:	d1f6      	bne.n	8017f0e <__strtok_r+0x14>
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d1ef      	bne.n	8017f04 <__strtok_r+0xa>
 8017f24:	6014      	str	r4, [r2, #0]
 8017f26:	7003      	strb	r3, [r0, #0]
 8017f28:	e7eb      	b.n	8017f02 <__strtok_r+0x8>
 8017f2a:	462b      	mov	r3, r5
 8017f2c:	e00d      	b.n	8017f4a <__strtok_r+0x50>
 8017f2e:	b926      	cbnz	r6, 8017f3a <__strtok_r+0x40>
 8017f30:	461c      	mov	r4, r3
 8017f32:	4623      	mov	r3, r4
 8017f34:	460f      	mov	r7, r1
 8017f36:	f813 5b01 	ldrb.w	r5, [r3], #1
 8017f3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017f3e:	42b5      	cmp	r5, r6
 8017f40:	d1f5      	bne.n	8017f2e <__strtok_r+0x34>
 8017f42:	2d00      	cmp	r5, #0
 8017f44:	d0f1      	beq.n	8017f2a <__strtok_r+0x30>
 8017f46:	2100      	movs	r1, #0
 8017f48:	7021      	strb	r1, [r4, #0]
 8017f4a:	6013      	str	r3, [r2, #0]
 8017f4c:	e7d9      	b.n	8017f02 <__strtok_r+0x8>

08017f4e <strtok_r>:
 8017f4e:	2301      	movs	r3, #1
 8017f50:	f7ff bfd3 	b.w	8017efa <__strtok_r>

08017f54 <__ascii_wctomb>:
 8017f54:	b149      	cbz	r1, 8017f6a <__ascii_wctomb+0x16>
 8017f56:	2aff      	cmp	r2, #255	; 0xff
 8017f58:	bf85      	ittet	hi
 8017f5a:	238a      	movhi	r3, #138	; 0x8a
 8017f5c:	6003      	strhi	r3, [r0, #0]
 8017f5e:	700a      	strbls	r2, [r1, #0]
 8017f60:	f04f 30ff 	movhi.w	r0, #4294967295
 8017f64:	bf98      	it	ls
 8017f66:	2001      	movls	r0, #1
 8017f68:	4770      	bx	lr
 8017f6a:	4608      	mov	r0, r1
 8017f6c:	4770      	bx	lr
	...

08017f70 <std>:
 8017f70:	2300      	movs	r3, #0
 8017f72:	b510      	push	{r4, lr}
 8017f74:	4604      	mov	r4, r0
 8017f76:	e9c0 3300 	strd	r3, r3, [r0]
 8017f7a:	6083      	str	r3, [r0, #8]
 8017f7c:	8181      	strh	r1, [r0, #12]
 8017f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8017f80:	81c2      	strh	r2, [r0, #14]
 8017f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017f86:	6183      	str	r3, [r0, #24]
 8017f88:	4619      	mov	r1, r3
 8017f8a:	2208      	movs	r2, #8
 8017f8c:	305c      	adds	r0, #92	; 0x5c
 8017f8e:	f7ff ff23 	bl	8017dd8 <memset>
 8017f92:	4b05      	ldr	r3, [pc, #20]	; (8017fa8 <std+0x38>)
 8017f94:	6263      	str	r3, [r4, #36]	; 0x24
 8017f96:	4b05      	ldr	r3, [pc, #20]	; (8017fac <std+0x3c>)
 8017f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f9a:	4b05      	ldr	r3, [pc, #20]	; (8017fb0 <std+0x40>)
 8017f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f9e:	4b05      	ldr	r3, [pc, #20]	; (8017fb4 <std+0x44>)
 8017fa0:	6224      	str	r4, [r4, #32]
 8017fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8017fa4:	bd10      	pop	{r4, pc}
 8017fa6:	bf00      	nop
 8017fa8:	08018815 	.word	0x08018815
 8017fac:	08018837 	.word	0x08018837
 8017fb0:	0801886f 	.word	0x0801886f
 8017fb4:	08018893 	.word	0x08018893

08017fb8 <_cleanup_r>:
 8017fb8:	4901      	ldr	r1, [pc, #4]	; (8017fc0 <_cleanup_r+0x8>)
 8017fba:	f000 b885 	b.w	80180c8 <_fwalk_reent>
 8017fbe:	bf00      	nop
 8017fc0:	08018b6d 	.word	0x08018b6d

08017fc4 <__sfmoreglue>:
 8017fc4:	b570      	push	{r4, r5, r6, lr}
 8017fc6:	1e4a      	subs	r2, r1, #1
 8017fc8:	2568      	movs	r5, #104	; 0x68
 8017fca:	4355      	muls	r5, r2
 8017fcc:	460e      	mov	r6, r1
 8017fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017fd2:	f000 f8ed 	bl	80181b0 <_malloc_r>
 8017fd6:	4604      	mov	r4, r0
 8017fd8:	b140      	cbz	r0, 8017fec <__sfmoreglue+0x28>
 8017fda:	2100      	movs	r1, #0
 8017fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8017fe0:	300c      	adds	r0, #12
 8017fe2:	60a0      	str	r0, [r4, #8]
 8017fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017fe8:	f7ff fef6 	bl	8017dd8 <memset>
 8017fec:	4620      	mov	r0, r4
 8017fee:	bd70      	pop	{r4, r5, r6, pc}

08017ff0 <__sinit>:
 8017ff0:	6983      	ldr	r3, [r0, #24]
 8017ff2:	b510      	push	{r4, lr}
 8017ff4:	4604      	mov	r4, r0
 8017ff6:	bb33      	cbnz	r3, 8018046 <__sinit+0x56>
 8017ff8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017ffc:	6503      	str	r3, [r0, #80]	; 0x50
 8017ffe:	4b12      	ldr	r3, [pc, #72]	; (8018048 <__sinit+0x58>)
 8018000:	4a12      	ldr	r2, [pc, #72]	; (801804c <__sinit+0x5c>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	6282      	str	r2, [r0, #40]	; 0x28
 8018006:	4298      	cmp	r0, r3
 8018008:	bf04      	itt	eq
 801800a:	2301      	moveq	r3, #1
 801800c:	6183      	streq	r3, [r0, #24]
 801800e:	f000 f81f 	bl	8018050 <__sfp>
 8018012:	6060      	str	r0, [r4, #4]
 8018014:	4620      	mov	r0, r4
 8018016:	f000 f81b 	bl	8018050 <__sfp>
 801801a:	60a0      	str	r0, [r4, #8]
 801801c:	4620      	mov	r0, r4
 801801e:	f000 f817 	bl	8018050 <__sfp>
 8018022:	2200      	movs	r2, #0
 8018024:	60e0      	str	r0, [r4, #12]
 8018026:	2104      	movs	r1, #4
 8018028:	6860      	ldr	r0, [r4, #4]
 801802a:	f7ff ffa1 	bl	8017f70 <std>
 801802e:	2201      	movs	r2, #1
 8018030:	2109      	movs	r1, #9
 8018032:	68a0      	ldr	r0, [r4, #8]
 8018034:	f7ff ff9c 	bl	8017f70 <std>
 8018038:	2202      	movs	r2, #2
 801803a:	2112      	movs	r1, #18
 801803c:	68e0      	ldr	r0, [r4, #12]
 801803e:	f7ff ff97 	bl	8017f70 <std>
 8018042:	2301      	movs	r3, #1
 8018044:	61a3      	str	r3, [r4, #24]
 8018046:	bd10      	pop	{r4, pc}
 8018048:	08026bd4 	.word	0x08026bd4
 801804c:	08017fb9 	.word	0x08017fb9

08018050 <__sfp>:
 8018050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018052:	4b1b      	ldr	r3, [pc, #108]	; (80180c0 <__sfp+0x70>)
 8018054:	681e      	ldr	r6, [r3, #0]
 8018056:	69b3      	ldr	r3, [r6, #24]
 8018058:	4607      	mov	r7, r0
 801805a:	b913      	cbnz	r3, 8018062 <__sfp+0x12>
 801805c:	4630      	mov	r0, r6
 801805e:	f7ff ffc7 	bl	8017ff0 <__sinit>
 8018062:	3648      	adds	r6, #72	; 0x48
 8018064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018068:	3b01      	subs	r3, #1
 801806a:	d503      	bpl.n	8018074 <__sfp+0x24>
 801806c:	6833      	ldr	r3, [r6, #0]
 801806e:	b133      	cbz	r3, 801807e <__sfp+0x2e>
 8018070:	6836      	ldr	r6, [r6, #0]
 8018072:	e7f7      	b.n	8018064 <__sfp+0x14>
 8018074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018078:	b16d      	cbz	r5, 8018096 <__sfp+0x46>
 801807a:	3468      	adds	r4, #104	; 0x68
 801807c:	e7f4      	b.n	8018068 <__sfp+0x18>
 801807e:	2104      	movs	r1, #4
 8018080:	4638      	mov	r0, r7
 8018082:	f7ff ff9f 	bl	8017fc4 <__sfmoreglue>
 8018086:	6030      	str	r0, [r6, #0]
 8018088:	2800      	cmp	r0, #0
 801808a:	d1f1      	bne.n	8018070 <__sfp+0x20>
 801808c:	230c      	movs	r3, #12
 801808e:	603b      	str	r3, [r7, #0]
 8018090:	4604      	mov	r4, r0
 8018092:	4620      	mov	r0, r4
 8018094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018096:	4b0b      	ldr	r3, [pc, #44]	; (80180c4 <__sfp+0x74>)
 8018098:	6665      	str	r5, [r4, #100]	; 0x64
 801809a:	e9c4 5500 	strd	r5, r5, [r4]
 801809e:	60a5      	str	r5, [r4, #8]
 80180a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80180a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80180a8:	2208      	movs	r2, #8
 80180aa:	4629      	mov	r1, r5
 80180ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80180b0:	f7ff fe92 	bl	8017dd8 <memset>
 80180b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80180b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80180bc:	e7e9      	b.n	8018092 <__sfp+0x42>
 80180be:	bf00      	nop
 80180c0:	08026bd4 	.word	0x08026bd4
 80180c4:	ffff0001 	.word	0xffff0001

080180c8 <_fwalk_reent>:
 80180c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180cc:	4680      	mov	r8, r0
 80180ce:	4689      	mov	r9, r1
 80180d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80180d4:	2600      	movs	r6, #0
 80180d6:	b914      	cbnz	r4, 80180de <_fwalk_reent+0x16>
 80180d8:	4630      	mov	r0, r6
 80180da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80180e2:	3f01      	subs	r7, #1
 80180e4:	d501      	bpl.n	80180ea <_fwalk_reent+0x22>
 80180e6:	6824      	ldr	r4, [r4, #0]
 80180e8:	e7f5      	b.n	80180d6 <_fwalk_reent+0xe>
 80180ea:	89ab      	ldrh	r3, [r5, #12]
 80180ec:	2b01      	cmp	r3, #1
 80180ee:	d907      	bls.n	8018100 <_fwalk_reent+0x38>
 80180f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180f4:	3301      	adds	r3, #1
 80180f6:	d003      	beq.n	8018100 <_fwalk_reent+0x38>
 80180f8:	4629      	mov	r1, r5
 80180fa:	4640      	mov	r0, r8
 80180fc:	47c8      	blx	r9
 80180fe:	4306      	orrs	r6, r0
 8018100:	3568      	adds	r5, #104	; 0x68
 8018102:	e7ee      	b.n	80180e2 <_fwalk_reent+0x1a>

08018104 <malloc>:
 8018104:	4b02      	ldr	r3, [pc, #8]	; (8018110 <malloc+0xc>)
 8018106:	4601      	mov	r1, r0
 8018108:	6818      	ldr	r0, [r3, #0]
 801810a:	f000 b851 	b.w	80181b0 <_malloc_r>
 801810e:	bf00      	nop
 8018110:	20000020 	.word	0x20000020

08018114 <_free_r>:
 8018114:	b538      	push	{r3, r4, r5, lr}
 8018116:	4605      	mov	r5, r0
 8018118:	2900      	cmp	r1, #0
 801811a:	d045      	beq.n	80181a8 <_free_r+0x94>
 801811c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018120:	1f0c      	subs	r4, r1, #4
 8018122:	2b00      	cmp	r3, #0
 8018124:	bfb8      	it	lt
 8018126:	18e4      	addlt	r4, r4, r3
 8018128:	f000 fdc0 	bl	8018cac <__malloc_lock>
 801812c:	4a1f      	ldr	r2, [pc, #124]	; (80181ac <_free_r+0x98>)
 801812e:	6813      	ldr	r3, [r2, #0]
 8018130:	4610      	mov	r0, r2
 8018132:	b933      	cbnz	r3, 8018142 <_free_r+0x2e>
 8018134:	6063      	str	r3, [r4, #4]
 8018136:	6014      	str	r4, [r2, #0]
 8018138:	4628      	mov	r0, r5
 801813a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801813e:	f000 bdb6 	b.w	8018cae <__malloc_unlock>
 8018142:	42a3      	cmp	r3, r4
 8018144:	d90c      	bls.n	8018160 <_free_r+0x4c>
 8018146:	6821      	ldr	r1, [r4, #0]
 8018148:	1862      	adds	r2, r4, r1
 801814a:	4293      	cmp	r3, r2
 801814c:	bf04      	itt	eq
 801814e:	681a      	ldreq	r2, [r3, #0]
 8018150:	685b      	ldreq	r3, [r3, #4]
 8018152:	6063      	str	r3, [r4, #4]
 8018154:	bf04      	itt	eq
 8018156:	1852      	addeq	r2, r2, r1
 8018158:	6022      	streq	r2, [r4, #0]
 801815a:	6004      	str	r4, [r0, #0]
 801815c:	e7ec      	b.n	8018138 <_free_r+0x24>
 801815e:	4613      	mov	r3, r2
 8018160:	685a      	ldr	r2, [r3, #4]
 8018162:	b10a      	cbz	r2, 8018168 <_free_r+0x54>
 8018164:	42a2      	cmp	r2, r4
 8018166:	d9fa      	bls.n	801815e <_free_r+0x4a>
 8018168:	6819      	ldr	r1, [r3, #0]
 801816a:	1858      	adds	r0, r3, r1
 801816c:	42a0      	cmp	r0, r4
 801816e:	d10b      	bne.n	8018188 <_free_r+0x74>
 8018170:	6820      	ldr	r0, [r4, #0]
 8018172:	4401      	add	r1, r0
 8018174:	1858      	adds	r0, r3, r1
 8018176:	4282      	cmp	r2, r0
 8018178:	6019      	str	r1, [r3, #0]
 801817a:	d1dd      	bne.n	8018138 <_free_r+0x24>
 801817c:	6810      	ldr	r0, [r2, #0]
 801817e:	6852      	ldr	r2, [r2, #4]
 8018180:	605a      	str	r2, [r3, #4]
 8018182:	4401      	add	r1, r0
 8018184:	6019      	str	r1, [r3, #0]
 8018186:	e7d7      	b.n	8018138 <_free_r+0x24>
 8018188:	d902      	bls.n	8018190 <_free_r+0x7c>
 801818a:	230c      	movs	r3, #12
 801818c:	602b      	str	r3, [r5, #0]
 801818e:	e7d3      	b.n	8018138 <_free_r+0x24>
 8018190:	6820      	ldr	r0, [r4, #0]
 8018192:	1821      	adds	r1, r4, r0
 8018194:	428a      	cmp	r2, r1
 8018196:	bf04      	itt	eq
 8018198:	6811      	ldreq	r1, [r2, #0]
 801819a:	6852      	ldreq	r2, [r2, #4]
 801819c:	6062      	str	r2, [r4, #4]
 801819e:	bf04      	itt	eq
 80181a0:	1809      	addeq	r1, r1, r0
 80181a2:	6021      	streq	r1, [r4, #0]
 80181a4:	605c      	str	r4, [r3, #4]
 80181a6:	e7c7      	b.n	8018138 <_free_r+0x24>
 80181a8:	bd38      	pop	{r3, r4, r5, pc}
 80181aa:	bf00      	nop
 80181ac:	20008bd8 	.word	0x20008bd8

080181b0 <_malloc_r>:
 80181b0:	b570      	push	{r4, r5, r6, lr}
 80181b2:	1ccd      	adds	r5, r1, #3
 80181b4:	f025 0503 	bic.w	r5, r5, #3
 80181b8:	3508      	adds	r5, #8
 80181ba:	2d0c      	cmp	r5, #12
 80181bc:	bf38      	it	cc
 80181be:	250c      	movcc	r5, #12
 80181c0:	2d00      	cmp	r5, #0
 80181c2:	4606      	mov	r6, r0
 80181c4:	db01      	blt.n	80181ca <_malloc_r+0x1a>
 80181c6:	42a9      	cmp	r1, r5
 80181c8:	d903      	bls.n	80181d2 <_malloc_r+0x22>
 80181ca:	230c      	movs	r3, #12
 80181cc:	6033      	str	r3, [r6, #0]
 80181ce:	2000      	movs	r0, #0
 80181d0:	bd70      	pop	{r4, r5, r6, pc}
 80181d2:	f000 fd6b 	bl	8018cac <__malloc_lock>
 80181d6:	4a21      	ldr	r2, [pc, #132]	; (801825c <_malloc_r+0xac>)
 80181d8:	6814      	ldr	r4, [r2, #0]
 80181da:	4621      	mov	r1, r4
 80181dc:	b991      	cbnz	r1, 8018204 <_malloc_r+0x54>
 80181de:	4c20      	ldr	r4, [pc, #128]	; (8018260 <_malloc_r+0xb0>)
 80181e0:	6823      	ldr	r3, [r4, #0]
 80181e2:	b91b      	cbnz	r3, 80181ec <_malloc_r+0x3c>
 80181e4:	4630      	mov	r0, r6
 80181e6:	f000 fb05 	bl	80187f4 <_sbrk_r>
 80181ea:	6020      	str	r0, [r4, #0]
 80181ec:	4629      	mov	r1, r5
 80181ee:	4630      	mov	r0, r6
 80181f0:	f000 fb00 	bl	80187f4 <_sbrk_r>
 80181f4:	1c43      	adds	r3, r0, #1
 80181f6:	d124      	bne.n	8018242 <_malloc_r+0x92>
 80181f8:	230c      	movs	r3, #12
 80181fa:	6033      	str	r3, [r6, #0]
 80181fc:	4630      	mov	r0, r6
 80181fe:	f000 fd56 	bl	8018cae <__malloc_unlock>
 8018202:	e7e4      	b.n	80181ce <_malloc_r+0x1e>
 8018204:	680b      	ldr	r3, [r1, #0]
 8018206:	1b5b      	subs	r3, r3, r5
 8018208:	d418      	bmi.n	801823c <_malloc_r+0x8c>
 801820a:	2b0b      	cmp	r3, #11
 801820c:	d90f      	bls.n	801822e <_malloc_r+0x7e>
 801820e:	600b      	str	r3, [r1, #0]
 8018210:	50cd      	str	r5, [r1, r3]
 8018212:	18cc      	adds	r4, r1, r3
 8018214:	4630      	mov	r0, r6
 8018216:	f000 fd4a 	bl	8018cae <__malloc_unlock>
 801821a:	f104 000b 	add.w	r0, r4, #11
 801821e:	1d23      	adds	r3, r4, #4
 8018220:	f020 0007 	bic.w	r0, r0, #7
 8018224:	1ac3      	subs	r3, r0, r3
 8018226:	d0d3      	beq.n	80181d0 <_malloc_r+0x20>
 8018228:	425a      	negs	r2, r3
 801822a:	50e2      	str	r2, [r4, r3]
 801822c:	e7d0      	b.n	80181d0 <_malloc_r+0x20>
 801822e:	428c      	cmp	r4, r1
 8018230:	684b      	ldr	r3, [r1, #4]
 8018232:	bf16      	itet	ne
 8018234:	6063      	strne	r3, [r4, #4]
 8018236:	6013      	streq	r3, [r2, #0]
 8018238:	460c      	movne	r4, r1
 801823a:	e7eb      	b.n	8018214 <_malloc_r+0x64>
 801823c:	460c      	mov	r4, r1
 801823e:	6849      	ldr	r1, [r1, #4]
 8018240:	e7cc      	b.n	80181dc <_malloc_r+0x2c>
 8018242:	1cc4      	adds	r4, r0, #3
 8018244:	f024 0403 	bic.w	r4, r4, #3
 8018248:	42a0      	cmp	r0, r4
 801824a:	d005      	beq.n	8018258 <_malloc_r+0xa8>
 801824c:	1a21      	subs	r1, r4, r0
 801824e:	4630      	mov	r0, r6
 8018250:	f000 fad0 	bl	80187f4 <_sbrk_r>
 8018254:	3001      	adds	r0, #1
 8018256:	d0cf      	beq.n	80181f8 <_malloc_r+0x48>
 8018258:	6025      	str	r5, [r4, #0]
 801825a:	e7db      	b.n	8018214 <_malloc_r+0x64>
 801825c:	20008bd8 	.word	0x20008bd8
 8018260:	20008bdc 	.word	0x20008bdc

08018264 <__sfputc_r>:
 8018264:	6893      	ldr	r3, [r2, #8]
 8018266:	3b01      	subs	r3, #1
 8018268:	2b00      	cmp	r3, #0
 801826a:	b410      	push	{r4}
 801826c:	6093      	str	r3, [r2, #8]
 801826e:	da08      	bge.n	8018282 <__sfputc_r+0x1e>
 8018270:	6994      	ldr	r4, [r2, #24]
 8018272:	42a3      	cmp	r3, r4
 8018274:	db01      	blt.n	801827a <__sfputc_r+0x16>
 8018276:	290a      	cmp	r1, #10
 8018278:	d103      	bne.n	8018282 <__sfputc_r+0x1e>
 801827a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801827e:	f000 bb0d 	b.w	801889c <__swbuf_r>
 8018282:	6813      	ldr	r3, [r2, #0]
 8018284:	1c58      	adds	r0, r3, #1
 8018286:	6010      	str	r0, [r2, #0]
 8018288:	7019      	strb	r1, [r3, #0]
 801828a:	4608      	mov	r0, r1
 801828c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018290:	4770      	bx	lr

08018292 <__sfputs_r>:
 8018292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018294:	4606      	mov	r6, r0
 8018296:	460f      	mov	r7, r1
 8018298:	4614      	mov	r4, r2
 801829a:	18d5      	adds	r5, r2, r3
 801829c:	42ac      	cmp	r4, r5
 801829e:	d101      	bne.n	80182a4 <__sfputs_r+0x12>
 80182a0:	2000      	movs	r0, #0
 80182a2:	e007      	b.n	80182b4 <__sfputs_r+0x22>
 80182a4:	463a      	mov	r2, r7
 80182a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182aa:	4630      	mov	r0, r6
 80182ac:	f7ff ffda 	bl	8018264 <__sfputc_r>
 80182b0:	1c43      	adds	r3, r0, #1
 80182b2:	d1f3      	bne.n	801829c <__sfputs_r+0xa>
 80182b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080182b8 <_vfiprintf_r>:
 80182b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182bc:	460c      	mov	r4, r1
 80182be:	b09d      	sub	sp, #116	; 0x74
 80182c0:	4617      	mov	r7, r2
 80182c2:	461d      	mov	r5, r3
 80182c4:	4606      	mov	r6, r0
 80182c6:	b118      	cbz	r0, 80182d0 <_vfiprintf_r+0x18>
 80182c8:	6983      	ldr	r3, [r0, #24]
 80182ca:	b90b      	cbnz	r3, 80182d0 <_vfiprintf_r+0x18>
 80182cc:	f7ff fe90 	bl	8017ff0 <__sinit>
 80182d0:	4b7c      	ldr	r3, [pc, #496]	; (80184c4 <_vfiprintf_r+0x20c>)
 80182d2:	429c      	cmp	r4, r3
 80182d4:	d158      	bne.n	8018388 <_vfiprintf_r+0xd0>
 80182d6:	6874      	ldr	r4, [r6, #4]
 80182d8:	89a3      	ldrh	r3, [r4, #12]
 80182da:	0718      	lsls	r0, r3, #28
 80182dc:	d55e      	bpl.n	801839c <_vfiprintf_r+0xe4>
 80182de:	6923      	ldr	r3, [r4, #16]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d05b      	beq.n	801839c <_vfiprintf_r+0xe4>
 80182e4:	2300      	movs	r3, #0
 80182e6:	9309      	str	r3, [sp, #36]	; 0x24
 80182e8:	2320      	movs	r3, #32
 80182ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182ee:	2330      	movs	r3, #48	; 0x30
 80182f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80182f4:	9503      	str	r5, [sp, #12]
 80182f6:	f04f 0b01 	mov.w	fp, #1
 80182fa:	46b8      	mov	r8, r7
 80182fc:	4645      	mov	r5, r8
 80182fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018302:	b10b      	cbz	r3, 8018308 <_vfiprintf_r+0x50>
 8018304:	2b25      	cmp	r3, #37	; 0x25
 8018306:	d154      	bne.n	80183b2 <_vfiprintf_r+0xfa>
 8018308:	ebb8 0a07 	subs.w	sl, r8, r7
 801830c:	d00b      	beq.n	8018326 <_vfiprintf_r+0x6e>
 801830e:	4653      	mov	r3, sl
 8018310:	463a      	mov	r2, r7
 8018312:	4621      	mov	r1, r4
 8018314:	4630      	mov	r0, r6
 8018316:	f7ff ffbc 	bl	8018292 <__sfputs_r>
 801831a:	3001      	adds	r0, #1
 801831c:	f000 80c2 	beq.w	80184a4 <_vfiprintf_r+0x1ec>
 8018320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018322:	4453      	add	r3, sl
 8018324:	9309      	str	r3, [sp, #36]	; 0x24
 8018326:	f898 3000 	ldrb.w	r3, [r8]
 801832a:	2b00      	cmp	r3, #0
 801832c:	f000 80ba 	beq.w	80184a4 <_vfiprintf_r+0x1ec>
 8018330:	2300      	movs	r3, #0
 8018332:	f04f 32ff 	mov.w	r2, #4294967295
 8018336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801833a:	9304      	str	r3, [sp, #16]
 801833c:	9307      	str	r3, [sp, #28]
 801833e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018342:	931a      	str	r3, [sp, #104]	; 0x68
 8018344:	46a8      	mov	r8, r5
 8018346:	2205      	movs	r2, #5
 8018348:	f818 1b01 	ldrb.w	r1, [r8], #1
 801834c:	485e      	ldr	r0, [pc, #376]	; (80184c8 <_vfiprintf_r+0x210>)
 801834e:	f7e7 ff67 	bl	8000220 <memchr>
 8018352:	9b04      	ldr	r3, [sp, #16]
 8018354:	bb78      	cbnz	r0, 80183b6 <_vfiprintf_r+0xfe>
 8018356:	06d9      	lsls	r1, r3, #27
 8018358:	bf44      	itt	mi
 801835a:	2220      	movmi	r2, #32
 801835c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018360:	071a      	lsls	r2, r3, #28
 8018362:	bf44      	itt	mi
 8018364:	222b      	movmi	r2, #43	; 0x2b
 8018366:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801836a:	782a      	ldrb	r2, [r5, #0]
 801836c:	2a2a      	cmp	r2, #42	; 0x2a
 801836e:	d02a      	beq.n	80183c6 <_vfiprintf_r+0x10e>
 8018370:	9a07      	ldr	r2, [sp, #28]
 8018372:	46a8      	mov	r8, r5
 8018374:	2000      	movs	r0, #0
 8018376:	250a      	movs	r5, #10
 8018378:	4641      	mov	r1, r8
 801837a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801837e:	3b30      	subs	r3, #48	; 0x30
 8018380:	2b09      	cmp	r3, #9
 8018382:	d969      	bls.n	8018458 <_vfiprintf_r+0x1a0>
 8018384:	b360      	cbz	r0, 80183e0 <_vfiprintf_r+0x128>
 8018386:	e024      	b.n	80183d2 <_vfiprintf_r+0x11a>
 8018388:	4b50      	ldr	r3, [pc, #320]	; (80184cc <_vfiprintf_r+0x214>)
 801838a:	429c      	cmp	r4, r3
 801838c:	d101      	bne.n	8018392 <_vfiprintf_r+0xda>
 801838e:	68b4      	ldr	r4, [r6, #8]
 8018390:	e7a2      	b.n	80182d8 <_vfiprintf_r+0x20>
 8018392:	4b4f      	ldr	r3, [pc, #316]	; (80184d0 <_vfiprintf_r+0x218>)
 8018394:	429c      	cmp	r4, r3
 8018396:	bf08      	it	eq
 8018398:	68f4      	ldreq	r4, [r6, #12]
 801839a:	e79d      	b.n	80182d8 <_vfiprintf_r+0x20>
 801839c:	4621      	mov	r1, r4
 801839e:	4630      	mov	r0, r6
 80183a0:	f000 fae0 	bl	8018964 <__swsetup_r>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	d09d      	beq.n	80182e4 <_vfiprintf_r+0x2c>
 80183a8:	f04f 30ff 	mov.w	r0, #4294967295
 80183ac:	b01d      	add	sp, #116	; 0x74
 80183ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b2:	46a8      	mov	r8, r5
 80183b4:	e7a2      	b.n	80182fc <_vfiprintf_r+0x44>
 80183b6:	4a44      	ldr	r2, [pc, #272]	; (80184c8 <_vfiprintf_r+0x210>)
 80183b8:	1a80      	subs	r0, r0, r2
 80183ba:	fa0b f000 	lsl.w	r0, fp, r0
 80183be:	4318      	orrs	r0, r3
 80183c0:	9004      	str	r0, [sp, #16]
 80183c2:	4645      	mov	r5, r8
 80183c4:	e7be      	b.n	8018344 <_vfiprintf_r+0x8c>
 80183c6:	9a03      	ldr	r2, [sp, #12]
 80183c8:	1d11      	adds	r1, r2, #4
 80183ca:	6812      	ldr	r2, [r2, #0]
 80183cc:	9103      	str	r1, [sp, #12]
 80183ce:	2a00      	cmp	r2, #0
 80183d0:	db01      	blt.n	80183d6 <_vfiprintf_r+0x11e>
 80183d2:	9207      	str	r2, [sp, #28]
 80183d4:	e004      	b.n	80183e0 <_vfiprintf_r+0x128>
 80183d6:	4252      	negs	r2, r2
 80183d8:	f043 0302 	orr.w	r3, r3, #2
 80183dc:	9207      	str	r2, [sp, #28]
 80183de:	9304      	str	r3, [sp, #16]
 80183e0:	f898 3000 	ldrb.w	r3, [r8]
 80183e4:	2b2e      	cmp	r3, #46	; 0x2e
 80183e6:	d10e      	bne.n	8018406 <_vfiprintf_r+0x14e>
 80183e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80183ec:	2b2a      	cmp	r3, #42	; 0x2a
 80183ee:	d138      	bne.n	8018462 <_vfiprintf_r+0x1aa>
 80183f0:	9b03      	ldr	r3, [sp, #12]
 80183f2:	1d1a      	adds	r2, r3, #4
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	9203      	str	r2, [sp, #12]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	bfb8      	it	lt
 80183fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8018400:	f108 0802 	add.w	r8, r8, #2
 8018404:	9305      	str	r3, [sp, #20]
 8018406:	4d33      	ldr	r5, [pc, #204]	; (80184d4 <_vfiprintf_r+0x21c>)
 8018408:	f898 1000 	ldrb.w	r1, [r8]
 801840c:	2203      	movs	r2, #3
 801840e:	4628      	mov	r0, r5
 8018410:	f7e7 ff06 	bl	8000220 <memchr>
 8018414:	b140      	cbz	r0, 8018428 <_vfiprintf_r+0x170>
 8018416:	2340      	movs	r3, #64	; 0x40
 8018418:	1b40      	subs	r0, r0, r5
 801841a:	fa03 f000 	lsl.w	r0, r3, r0
 801841e:	9b04      	ldr	r3, [sp, #16]
 8018420:	4303      	orrs	r3, r0
 8018422:	f108 0801 	add.w	r8, r8, #1
 8018426:	9304      	str	r3, [sp, #16]
 8018428:	f898 1000 	ldrb.w	r1, [r8]
 801842c:	482a      	ldr	r0, [pc, #168]	; (80184d8 <_vfiprintf_r+0x220>)
 801842e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018432:	2206      	movs	r2, #6
 8018434:	f108 0701 	add.w	r7, r8, #1
 8018438:	f7e7 fef2 	bl	8000220 <memchr>
 801843c:	2800      	cmp	r0, #0
 801843e:	d037      	beq.n	80184b0 <_vfiprintf_r+0x1f8>
 8018440:	4b26      	ldr	r3, [pc, #152]	; (80184dc <_vfiprintf_r+0x224>)
 8018442:	bb1b      	cbnz	r3, 801848c <_vfiprintf_r+0x1d4>
 8018444:	9b03      	ldr	r3, [sp, #12]
 8018446:	3307      	adds	r3, #7
 8018448:	f023 0307 	bic.w	r3, r3, #7
 801844c:	3308      	adds	r3, #8
 801844e:	9303      	str	r3, [sp, #12]
 8018450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018452:	444b      	add	r3, r9
 8018454:	9309      	str	r3, [sp, #36]	; 0x24
 8018456:	e750      	b.n	80182fa <_vfiprintf_r+0x42>
 8018458:	fb05 3202 	mla	r2, r5, r2, r3
 801845c:	2001      	movs	r0, #1
 801845e:	4688      	mov	r8, r1
 8018460:	e78a      	b.n	8018378 <_vfiprintf_r+0xc0>
 8018462:	2300      	movs	r3, #0
 8018464:	f108 0801 	add.w	r8, r8, #1
 8018468:	9305      	str	r3, [sp, #20]
 801846a:	4619      	mov	r1, r3
 801846c:	250a      	movs	r5, #10
 801846e:	4640      	mov	r0, r8
 8018470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018474:	3a30      	subs	r2, #48	; 0x30
 8018476:	2a09      	cmp	r2, #9
 8018478:	d903      	bls.n	8018482 <_vfiprintf_r+0x1ca>
 801847a:	2b00      	cmp	r3, #0
 801847c:	d0c3      	beq.n	8018406 <_vfiprintf_r+0x14e>
 801847e:	9105      	str	r1, [sp, #20]
 8018480:	e7c1      	b.n	8018406 <_vfiprintf_r+0x14e>
 8018482:	fb05 2101 	mla	r1, r5, r1, r2
 8018486:	2301      	movs	r3, #1
 8018488:	4680      	mov	r8, r0
 801848a:	e7f0      	b.n	801846e <_vfiprintf_r+0x1b6>
 801848c:	ab03      	add	r3, sp, #12
 801848e:	9300      	str	r3, [sp, #0]
 8018490:	4622      	mov	r2, r4
 8018492:	4b13      	ldr	r3, [pc, #76]	; (80184e0 <_vfiprintf_r+0x228>)
 8018494:	a904      	add	r1, sp, #16
 8018496:	4630      	mov	r0, r6
 8018498:	f3af 8000 	nop.w
 801849c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80184a0:	4681      	mov	r9, r0
 80184a2:	d1d5      	bne.n	8018450 <_vfiprintf_r+0x198>
 80184a4:	89a3      	ldrh	r3, [r4, #12]
 80184a6:	065b      	lsls	r3, r3, #25
 80184a8:	f53f af7e 	bmi.w	80183a8 <_vfiprintf_r+0xf0>
 80184ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80184ae:	e77d      	b.n	80183ac <_vfiprintf_r+0xf4>
 80184b0:	ab03      	add	r3, sp, #12
 80184b2:	9300      	str	r3, [sp, #0]
 80184b4:	4622      	mov	r2, r4
 80184b6:	4b0a      	ldr	r3, [pc, #40]	; (80184e0 <_vfiprintf_r+0x228>)
 80184b8:	a904      	add	r1, sp, #16
 80184ba:	4630      	mov	r0, r6
 80184bc:	f000 f888 	bl	80185d0 <_printf_i>
 80184c0:	e7ec      	b.n	801849c <_vfiprintf_r+0x1e4>
 80184c2:	bf00      	nop
 80184c4:	08026d04 	.word	0x08026d04
 80184c8:	08026d44 	.word	0x08026d44
 80184cc:	08026d24 	.word	0x08026d24
 80184d0:	08026ce4 	.word	0x08026ce4
 80184d4:	08026d4a 	.word	0x08026d4a
 80184d8:	08026d4e 	.word	0x08026d4e
 80184dc:	00000000 	.word	0x00000000
 80184e0:	08018293 	.word	0x08018293

080184e4 <_printf_common>:
 80184e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184e8:	4691      	mov	r9, r2
 80184ea:	461f      	mov	r7, r3
 80184ec:	688a      	ldr	r2, [r1, #8]
 80184ee:	690b      	ldr	r3, [r1, #16]
 80184f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80184f4:	4293      	cmp	r3, r2
 80184f6:	bfb8      	it	lt
 80184f8:	4613      	movlt	r3, r2
 80184fa:	f8c9 3000 	str.w	r3, [r9]
 80184fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018502:	4606      	mov	r6, r0
 8018504:	460c      	mov	r4, r1
 8018506:	b112      	cbz	r2, 801850e <_printf_common+0x2a>
 8018508:	3301      	adds	r3, #1
 801850a:	f8c9 3000 	str.w	r3, [r9]
 801850e:	6823      	ldr	r3, [r4, #0]
 8018510:	0699      	lsls	r1, r3, #26
 8018512:	bf42      	ittt	mi
 8018514:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018518:	3302      	addmi	r3, #2
 801851a:	f8c9 3000 	strmi.w	r3, [r9]
 801851e:	6825      	ldr	r5, [r4, #0]
 8018520:	f015 0506 	ands.w	r5, r5, #6
 8018524:	d107      	bne.n	8018536 <_printf_common+0x52>
 8018526:	f104 0a19 	add.w	sl, r4, #25
 801852a:	68e3      	ldr	r3, [r4, #12]
 801852c:	f8d9 2000 	ldr.w	r2, [r9]
 8018530:	1a9b      	subs	r3, r3, r2
 8018532:	42ab      	cmp	r3, r5
 8018534:	dc28      	bgt.n	8018588 <_printf_common+0xa4>
 8018536:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801853a:	6822      	ldr	r2, [r4, #0]
 801853c:	3300      	adds	r3, #0
 801853e:	bf18      	it	ne
 8018540:	2301      	movne	r3, #1
 8018542:	0692      	lsls	r2, r2, #26
 8018544:	d42d      	bmi.n	80185a2 <_printf_common+0xbe>
 8018546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801854a:	4639      	mov	r1, r7
 801854c:	4630      	mov	r0, r6
 801854e:	47c0      	blx	r8
 8018550:	3001      	adds	r0, #1
 8018552:	d020      	beq.n	8018596 <_printf_common+0xb2>
 8018554:	6823      	ldr	r3, [r4, #0]
 8018556:	68e5      	ldr	r5, [r4, #12]
 8018558:	f8d9 2000 	ldr.w	r2, [r9]
 801855c:	f003 0306 	and.w	r3, r3, #6
 8018560:	2b04      	cmp	r3, #4
 8018562:	bf08      	it	eq
 8018564:	1aad      	subeq	r5, r5, r2
 8018566:	68a3      	ldr	r3, [r4, #8]
 8018568:	6922      	ldr	r2, [r4, #16]
 801856a:	bf0c      	ite	eq
 801856c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018570:	2500      	movne	r5, #0
 8018572:	4293      	cmp	r3, r2
 8018574:	bfc4      	itt	gt
 8018576:	1a9b      	subgt	r3, r3, r2
 8018578:	18ed      	addgt	r5, r5, r3
 801857a:	f04f 0900 	mov.w	r9, #0
 801857e:	341a      	adds	r4, #26
 8018580:	454d      	cmp	r5, r9
 8018582:	d11a      	bne.n	80185ba <_printf_common+0xd6>
 8018584:	2000      	movs	r0, #0
 8018586:	e008      	b.n	801859a <_printf_common+0xb6>
 8018588:	2301      	movs	r3, #1
 801858a:	4652      	mov	r2, sl
 801858c:	4639      	mov	r1, r7
 801858e:	4630      	mov	r0, r6
 8018590:	47c0      	blx	r8
 8018592:	3001      	adds	r0, #1
 8018594:	d103      	bne.n	801859e <_printf_common+0xba>
 8018596:	f04f 30ff 	mov.w	r0, #4294967295
 801859a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801859e:	3501      	adds	r5, #1
 80185a0:	e7c3      	b.n	801852a <_printf_common+0x46>
 80185a2:	18e1      	adds	r1, r4, r3
 80185a4:	1c5a      	adds	r2, r3, #1
 80185a6:	2030      	movs	r0, #48	; 0x30
 80185a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80185ac:	4422      	add	r2, r4
 80185ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80185b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80185b6:	3302      	adds	r3, #2
 80185b8:	e7c5      	b.n	8018546 <_printf_common+0x62>
 80185ba:	2301      	movs	r3, #1
 80185bc:	4622      	mov	r2, r4
 80185be:	4639      	mov	r1, r7
 80185c0:	4630      	mov	r0, r6
 80185c2:	47c0      	blx	r8
 80185c4:	3001      	adds	r0, #1
 80185c6:	d0e6      	beq.n	8018596 <_printf_common+0xb2>
 80185c8:	f109 0901 	add.w	r9, r9, #1
 80185cc:	e7d8      	b.n	8018580 <_printf_common+0x9c>
	...

080185d0 <_printf_i>:
 80185d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80185d8:	460c      	mov	r4, r1
 80185da:	7e09      	ldrb	r1, [r1, #24]
 80185dc:	b085      	sub	sp, #20
 80185de:	296e      	cmp	r1, #110	; 0x6e
 80185e0:	4617      	mov	r7, r2
 80185e2:	4606      	mov	r6, r0
 80185e4:	4698      	mov	r8, r3
 80185e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80185e8:	f000 80b3 	beq.w	8018752 <_printf_i+0x182>
 80185ec:	d822      	bhi.n	8018634 <_printf_i+0x64>
 80185ee:	2963      	cmp	r1, #99	; 0x63
 80185f0:	d036      	beq.n	8018660 <_printf_i+0x90>
 80185f2:	d80a      	bhi.n	801860a <_printf_i+0x3a>
 80185f4:	2900      	cmp	r1, #0
 80185f6:	f000 80b9 	beq.w	801876c <_printf_i+0x19c>
 80185fa:	2958      	cmp	r1, #88	; 0x58
 80185fc:	f000 8083 	beq.w	8018706 <_printf_i+0x136>
 8018600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018604:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018608:	e032      	b.n	8018670 <_printf_i+0xa0>
 801860a:	2964      	cmp	r1, #100	; 0x64
 801860c:	d001      	beq.n	8018612 <_printf_i+0x42>
 801860e:	2969      	cmp	r1, #105	; 0x69
 8018610:	d1f6      	bne.n	8018600 <_printf_i+0x30>
 8018612:	6820      	ldr	r0, [r4, #0]
 8018614:	6813      	ldr	r3, [r2, #0]
 8018616:	0605      	lsls	r5, r0, #24
 8018618:	f103 0104 	add.w	r1, r3, #4
 801861c:	d52a      	bpl.n	8018674 <_printf_i+0xa4>
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	6011      	str	r1, [r2, #0]
 8018622:	2b00      	cmp	r3, #0
 8018624:	da03      	bge.n	801862e <_printf_i+0x5e>
 8018626:	222d      	movs	r2, #45	; 0x2d
 8018628:	425b      	negs	r3, r3
 801862a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801862e:	486f      	ldr	r0, [pc, #444]	; (80187ec <_printf_i+0x21c>)
 8018630:	220a      	movs	r2, #10
 8018632:	e039      	b.n	80186a8 <_printf_i+0xd8>
 8018634:	2973      	cmp	r1, #115	; 0x73
 8018636:	f000 809d 	beq.w	8018774 <_printf_i+0x1a4>
 801863a:	d808      	bhi.n	801864e <_printf_i+0x7e>
 801863c:	296f      	cmp	r1, #111	; 0x6f
 801863e:	d020      	beq.n	8018682 <_printf_i+0xb2>
 8018640:	2970      	cmp	r1, #112	; 0x70
 8018642:	d1dd      	bne.n	8018600 <_printf_i+0x30>
 8018644:	6823      	ldr	r3, [r4, #0]
 8018646:	f043 0320 	orr.w	r3, r3, #32
 801864a:	6023      	str	r3, [r4, #0]
 801864c:	e003      	b.n	8018656 <_printf_i+0x86>
 801864e:	2975      	cmp	r1, #117	; 0x75
 8018650:	d017      	beq.n	8018682 <_printf_i+0xb2>
 8018652:	2978      	cmp	r1, #120	; 0x78
 8018654:	d1d4      	bne.n	8018600 <_printf_i+0x30>
 8018656:	2378      	movs	r3, #120	; 0x78
 8018658:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801865c:	4864      	ldr	r0, [pc, #400]	; (80187f0 <_printf_i+0x220>)
 801865e:	e055      	b.n	801870c <_printf_i+0x13c>
 8018660:	6813      	ldr	r3, [r2, #0]
 8018662:	1d19      	adds	r1, r3, #4
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	6011      	str	r1, [r2, #0]
 8018668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801866c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018670:	2301      	movs	r3, #1
 8018672:	e08c      	b.n	801878e <_printf_i+0x1be>
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	6011      	str	r1, [r2, #0]
 8018678:	f010 0f40 	tst.w	r0, #64	; 0x40
 801867c:	bf18      	it	ne
 801867e:	b21b      	sxthne	r3, r3
 8018680:	e7cf      	b.n	8018622 <_printf_i+0x52>
 8018682:	6813      	ldr	r3, [r2, #0]
 8018684:	6825      	ldr	r5, [r4, #0]
 8018686:	1d18      	adds	r0, r3, #4
 8018688:	6010      	str	r0, [r2, #0]
 801868a:	0628      	lsls	r0, r5, #24
 801868c:	d501      	bpl.n	8018692 <_printf_i+0xc2>
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	e002      	b.n	8018698 <_printf_i+0xc8>
 8018692:	0668      	lsls	r0, r5, #25
 8018694:	d5fb      	bpl.n	801868e <_printf_i+0xbe>
 8018696:	881b      	ldrh	r3, [r3, #0]
 8018698:	4854      	ldr	r0, [pc, #336]	; (80187ec <_printf_i+0x21c>)
 801869a:	296f      	cmp	r1, #111	; 0x6f
 801869c:	bf14      	ite	ne
 801869e:	220a      	movne	r2, #10
 80186a0:	2208      	moveq	r2, #8
 80186a2:	2100      	movs	r1, #0
 80186a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80186a8:	6865      	ldr	r5, [r4, #4]
 80186aa:	60a5      	str	r5, [r4, #8]
 80186ac:	2d00      	cmp	r5, #0
 80186ae:	f2c0 8095 	blt.w	80187dc <_printf_i+0x20c>
 80186b2:	6821      	ldr	r1, [r4, #0]
 80186b4:	f021 0104 	bic.w	r1, r1, #4
 80186b8:	6021      	str	r1, [r4, #0]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d13d      	bne.n	801873a <_printf_i+0x16a>
 80186be:	2d00      	cmp	r5, #0
 80186c0:	f040 808e 	bne.w	80187e0 <_printf_i+0x210>
 80186c4:	4665      	mov	r5, ip
 80186c6:	2a08      	cmp	r2, #8
 80186c8:	d10b      	bne.n	80186e2 <_printf_i+0x112>
 80186ca:	6823      	ldr	r3, [r4, #0]
 80186cc:	07db      	lsls	r3, r3, #31
 80186ce:	d508      	bpl.n	80186e2 <_printf_i+0x112>
 80186d0:	6923      	ldr	r3, [r4, #16]
 80186d2:	6862      	ldr	r2, [r4, #4]
 80186d4:	429a      	cmp	r2, r3
 80186d6:	bfde      	ittt	le
 80186d8:	2330      	movle	r3, #48	; 0x30
 80186da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80186de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80186e2:	ebac 0305 	sub.w	r3, ip, r5
 80186e6:	6123      	str	r3, [r4, #16]
 80186e8:	f8cd 8000 	str.w	r8, [sp]
 80186ec:	463b      	mov	r3, r7
 80186ee:	aa03      	add	r2, sp, #12
 80186f0:	4621      	mov	r1, r4
 80186f2:	4630      	mov	r0, r6
 80186f4:	f7ff fef6 	bl	80184e4 <_printf_common>
 80186f8:	3001      	adds	r0, #1
 80186fa:	d14d      	bne.n	8018798 <_printf_i+0x1c8>
 80186fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018700:	b005      	add	sp, #20
 8018702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018706:	4839      	ldr	r0, [pc, #228]	; (80187ec <_printf_i+0x21c>)
 8018708:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801870c:	6813      	ldr	r3, [r2, #0]
 801870e:	6821      	ldr	r1, [r4, #0]
 8018710:	1d1d      	adds	r5, r3, #4
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	6015      	str	r5, [r2, #0]
 8018716:	060a      	lsls	r2, r1, #24
 8018718:	d50b      	bpl.n	8018732 <_printf_i+0x162>
 801871a:	07ca      	lsls	r2, r1, #31
 801871c:	bf44      	itt	mi
 801871e:	f041 0120 	orrmi.w	r1, r1, #32
 8018722:	6021      	strmi	r1, [r4, #0]
 8018724:	b91b      	cbnz	r3, 801872e <_printf_i+0x15e>
 8018726:	6822      	ldr	r2, [r4, #0]
 8018728:	f022 0220 	bic.w	r2, r2, #32
 801872c:	6022      	str	r2, [r4, #0]
 801872e:	2210      	movs	r2, #16
 8018730:	e7b7      	b.n	80186a2 <_printf_i+0xd2>
 8018732:	064d      	lsls	r5, r1, #25
 8018734:	bf48      	it	mi
 8018736:	b29b      	uxthmi	r3, r3
 8018738:	e7ef      	b.n	801871a <_printf_i+0x14a>
 801873a:	4665      	mov	r5, ip
 801873c:	fbb3 f1f2 	udiv	r1, r3, r2
 8018740:	fb02 3311 	mls	r3, r2, r1, r3
 8018744:	5cc3      	ldrb	r3, [r0, r3]
 8018746:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801874a:	460b      	mov	r3, r1
 801874c:	2900      	cmp	r1, #0
 801874e:	d1f5      	bne.n	801873c <_printf_i+0x16c>
 8018750:	e7b9      	b.n	80186c6 <_printf_i+0xf6>
 8018752:	6813      	ldr	r3, [r2, #0]
 8018754:	6825      	ldr	r5, [r4, #0]
 8018756:	6961      	ldr	r1, [r4, #20]
 8018758:	1d18      	adds	r0, r3, #4
 801875a:	6010      	str	r0, [r2, #0]
 801875c:	0628      	lsls	r0, r5, #24
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	d501      	bpl.n	8018766 <_printf_i+0x196>
 8018762:	6019      	str	r1, [r3, #0]
 8018764:	e002      	b.n	801876c <_printf_i+0x19c>
 8018766:	066a      	lsls	r2, r5, #25
 8018768:	d5fb      	bpl.n	8018762 <_printf_i+0x192>
 801876a:	8019      	strh	r1, [r3, #0]
 801876c:	2300      	movs	r3, #0
 801876e:	6123      	str	r3, [r4, #16]
 8018770:	4665      	mov	r5, ip
 8018772:	e7b9      	b.n	80186e8 <_printf_i+0x118>
 8018774:	6813      	ldr	r3, [r2, #0]
 8018776:	1d19      	adds	r1, r3, #4
 8018778:	6011      	str	r1, [r2, #0]
 801877a:	681d      	ldr	r5, [r3, #0]
 801877c:	6862      	ldr	r2, [r4, #4]
 801877e:	2100      	movs	r1, #0
 8018780:	4628      	mov	r0, r5
 8018782:	f7e7 fd4d 	bl	8000220 <memchr>
 8018786:	b108      	cbz	r0, 801878c <_printf_i+0x1bc>
 8018788:	1b40      	subs	r0, r0, r5
 801878a:	6060      	str	r0, [r4, #4]
 801878c:	6863      	ldr	r3, [r4, #4]
 801878e:	6123      	str	r3, [r4, #16]
 8018790:	2300      	movs	r3, #0
 8018792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018796:	e7a7      	b.n	80186e8 <_printf_i+0x118>
 8018798:	6923      	ldr	r3, [r4, #16]
 801879a:	462a      	mov	r2, r5
 801879c:	4639      	mov	r1, r7
 801879e:	4630      	mov	r0, r6
 80187a0:	47c0      	blx	r8
 80187a2:	3001      	adds	r0, #1
 80187a4:	d0aa      	beq.n	80186fc <_printf_i+0x12c>
 80187a6:	6823      	ldr	r3, [r4, #0]
 80187a8:	079b      	lsls	r3, r3, #30
 80187aa:	d413      	bmi.n	80187d4 <_printf_i+0x204>
 80187ac:	68e0      	ldr	r0, [r4, #12]
 80187ae:	9b03      	ldr	r3, [sp, #12]
 80187b0:	4298      	cmp	r0, r3
 80187b2:	bfb8      	it	lt
 80187b4:	4618      	movlt	r0, r3
 80187b6:	e7a3      	b.n	8018700 <_printf_i+0x130>
 80187b8:	2301      	movs	r3, #1
 80187ba:	464a      	mov	r2, r9
 80187bc:	4639      	mov	r1, r7
 80187be:	4630      	mov	r0, r6
 80187c0:	47c0      	blx	r8
 80187c2:	3001      	adds	r0, #1
 80187c4:	d09a      	beq.n	80186fc <_printf_i+0x12c>
 80187c6:	3501      	adds	r5, #1
 80187c8:	68e3      	ldr	r3, [r4, #12]
 80187ca:	9a03      	ldr	r2, [sp, #12]
 80187cc:	1a9b      	subs	r3, r3, r2
 80187ce:	42ab      	cmp	r3, r5
 80187d0:	dcf2      	bgt.n	80187b8 <_printf_i+0x1e8>
 80187d2:	e7eb      	b.n	80187ac <_printf_i+0x1dc>
 80187d4:	2500      	movs	r5, #0
 80187d6:	f104 0919 	add.w	r9, r4, #25
 80187da:	e7f5      	b.n	80187c8 <_printf_i+0x1f8>
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d1ac      	bne.n	801873a <_printf_i+0x16a>
 80187e0:	7803      	ldrb	r3, [r0, #0]
 80187e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80187e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80187ea:	e76c      	b.n	80186c6 <_printf_i+0xf6>
 80187ec:	08026d55 	.word	0x08026d55
 80187f0:	08026d66 	.word	0x08026d66

080187f4 <_sbrk_r>:
 80187f4:	b538      	push	{r3, r4, r5, lr}
 80187f6:	4c06      	ldr	r4, [pc, #24]	; (8018810 <_sbrk_r+0x1c>)
 80187f8:	2300      	movs	r3, #0
 80187fa:	4605      	mov	r5, r0
 80187fc:	4608      	mov	r0, r1
 80187fe:	6023      	str	r3, [r4, #0]
 8018800:	f7e8 fa0e 	bl	8000c20 <_sbrk>
 8018804:	1c43      	adds	r3, r0, #1
 8018806:	d102      	bne.n	801880e <_sbrk_r+0x1a>
 8018808:	6823      	ldr	r3, [r4, #0]
 801880a:	b103      	cbz	r3, 801880e <_sbrk_r+0x1a>
 801880c:	602b      	str	r3, [r5, #0]
 801880e:	bd38      	pop	{r3, r4, r5, pc}
 8018810:	2000f558 	.word	0x2000f558

08018814 <__sread>:
 8018814:	b510      	push	{r4, lr}
 8018816:	460c      	mov	r4, r1
 8018818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801881c:	f000 fa48 	bl	8018cb0 <_read_r>
 8018820:	2800      	cmp	r0, #0
 8018822:	bfab      	itete	ge
 8018824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018826:	89a3      	ldrhlt	r3, [r4, #12]
 8018828:	181b      	addge	r3, r3, r0
 801882a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801882e:	bfac      	ite	ge
 8018830:	6563      	strge	r3, [r4, #84]	; 0x54
 8018832:	81a3      	strhlt	r3, [r4, #12]
 8018834:	bd10      	pop	{r4, pc}

08018836 <__swrite>:
 8018836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801883a:	461f      	mov	r7, r3
 801883c:	898b      	ldrh	r3, [r1, #12]
 801883e:	05db      	lsls	r3, r3, #23
 8018840:	4605      	mov	r5, r0
 8018842:	460c      	mov	r4, r1
 8018844:	4616      	mov	r6, r2
 8018846:	d505      	bpl.n	8018854 <__swrite+0x1e>
 8018848:	2302      	movs	r3, #2
 801884a:	2200      	movs	r2, #0
 801884c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018850:	f000 f9b6 	bl	8018bc0 <_lseek_r>
 8018854:	89a3      	ldrh	r3, [r4, #12]
 8018856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801885a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801885e:	81a3      	strh	r3, [r4, #12]
 8018860:	4632      	mov	r2, r6
 8018862:	463b      	mov	r3, r7
 8018864:	4628      	mov	r0, r5
 8018866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801886a:	f000 b869 	b.w	8018940 <_write_r>

0801886e <__sseek>:
 801886e:	b510      	push	{r4, lr}
 8018870:	460c      	mov	r4, r1
 8018872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018876:	f000 f9a3 	bl	8018bc0 <_lseek_r>
 801887a:	1c43      	adds	r3, r0, #1
 801887c:	89a3      	ldrh	r3, [r4, #12]
 801887e:	bf15      	itete	ne
 8018880:	6560      	strne	r0, [r4, #84]	; 0x54
 8018882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801888a:	81a3      	strheq	r3, [r4, #12]
 801888c:	bf18      	it	ne
 801888e:	81a3      	strhne	r3, [r4, #12]
 8018890:	bd10      	pop	{r4, pc}

08018892 <__sclose>:
 8018892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018896:	f000 b8d3 	b.w	8018a40 <_close_r>
	...

0801889c <__swbuf_r>:
 801889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801889e:	460e      	mov	r6, r1
 80188a0:	4614      	mov	r4, r2
 80188a2:	4605      	mov	r5, r0
 80188a4:	b118      	cbz	r0, 80188ae <__swbuf_r+0x12>
 80188a6:	6983      	ldr	r3, [r0, #24]
 80188a8:	b90b      	cbnz	r3, 80188ae <__swbuf_r+0x12>
 80188aa:	f7ff fba1 	bl	8017ff0 <__sinit>
 80188ae:	4b21      	ldr	r3, [pc, #132]	; (8018934 <__swbuf_r+0x98>)
 80188b0:	429c      	cmp	r4, r3
 80188b2:	d12a      	bne.n	801890a <__swbuf_r+0x6e>
 80188b4:	686c      	ldr	r4, [r5, #4]
 80188b6:	69a3      	ldr	r3, [r4, #24]
 80188b8:	60a3      	str	r3, [r4, #8]
 80188ba:	89a3      	ldrh	r3, [r4, #12]
 80188bc:	071a      	lsls	r2, r3, #28
 80188be:	d52e      	bpl.n	801891e <__swbuf_r+0x82>
 80188c0:	6923      	ldr	r3, [r4, #16]
 80188c2:	b363      	cbz	r3, 801891e <__swbuf_r+0x82>
 80188c4:	6923      	ldr	r3, [r4, #16]
 80188c6:	6820      	ldr	r0, [r4, #0]
 80188c8:	1ac0      	subs	r0, r0, r3
 80188ca:	6963      	ldr	r3, [r4, #20]
 80188cc:	b2f6      	uxtb	r6, r6
 80188ce:	4283      	cmp	r3, r0
 80188d0:	4637      	mov	r7, r6
 80188d2:	dc04      	bgt.n	80188de <__swbuf_r+0x42>
 80188d4:	4621      	mov	r1, r4
 80188d6:	4628      	mov	r0, r5
 80188d8:	f000 f948 	bl	8018b6c <_fflush_r>
 80188dc:	bb28      	cbnz	r0, 801892a <__swbuf_r+0x8e>
 80188de:	68a3      	ldr	r3, [r4, #8]
 80188e0:	3b01      	subs	r3, #1
 80188e2:	60a3      	str	r3, [r4, #8]
 80188e4:	6823      	ldr	r3, [r4, #0]
 80188e6:	1c5a      	adds	r2, r3, #1
 80188e8:	6022      	str	r2, [r4, #0]
 80188ea:	701e      	strb	r6, [r3, #0]
 80188ec:	6963      	ldr	r3, [r4, #20]
 80188ee:	3001      	adds	r0, #1
 80188f0:	4283      	cmp	r3, r0
 80188f2:	d004      	beq.n	80188fe <__swbuf_r+0x62>
 80188f4:	89a3      	ldrh	r3, [r4, #12]
 80188f6:	07db      	lsls	r3, r3, #31
 80188f8:	d519      	bpl.n	801892e <__swbuf_r+0x92>
 80188fa:	2e0a      	cmp	r6, #10
 80188fc:	d117      	bne.n	801892e <__swbuf_r+0x92>
 80188fe:	4621      	mov	r1, r4
 8018900:	4628      	mov	r0, r5
 8018902:	f000 f933 	bl	8018b6c <_fflush_r>
 8018906:	b190      	cbz	r0, 801892e <__swbuf_r+0x92>
 8018908:	e00f      	b.n	801892a <__swbuf_r+0x8e>
 801890a:	4b0b      	ldr	r3, [pc, #44]	; (8018938 <__swbuf_r+0x9c>)
 801890c:	429c      	cmp	r4, r3
 801890e:	d101      	bne.n	8018914 <__swbuf_r+0x78>
 8018910:	68ac      	ldr	r4, [r5, #8]
 8018912:	e7d0      	b.n	80188b6 <__swbuf_r+0x1a>
 8018914:	4b09      	ldr	r3, [pc, #36]	; (801893c <__swbuf_r+0xa0>)
 8018916:	429c      	cmp	r4, r3
 8018918:	bf08      	it	eq
 801891a:	68ec      	ldreq	r4, [r5, #12]
 801891c:	e7cb      	b.n	80188b6 <__swbuf_r+0x1a>
 801891e:	4621      	mov	r1, r4
 8018920:	4628      	mov	r0, r5
 8018922:	f000 f81f 	bl	8018964 <__swsetup_r>
 8018926:	2800      	cmp	r0, #0
 8018928:	d0cc      	beq.n	80188c4 <__swbuf_r+0x28>
 801892a:	f04f 37ff 	mov.w	r7, #4294967295
 801892e:	4638      	mov	r0, r7
 8018930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018932:	bf00      	nop
 8018934:	08026d04 	.word	0x08026d04
 8018938:	08026d24 	.word	0x08026d24
 801893c:	08026ce4 	.word	0x08026ce4

08018940 <_write_r>:
 8018940:	b538      	push	{r3, r4, r5, lr}
 8018942:	4c07      	ldr	r4, [pc, #28]	; (8018960 <_write_r+0x20>)
 8018944:	4605      	mov	r5, r0
 8018946:	4608      	mov	r0, r1
 8018948:	4611      	mov	r1, r2
 801894a:	2200      	movs	r2, #0
 801894c:	6022      	str	r2, [r4, #0]
 801894e:	461a      	mov	r2, r3
 8018950:	f7e8 f915 	bl	8000b7e <_write>
 8018954:	1c43      	adds	r3, r0, #1
 8018956:	d102      	bne.n	801895e <_write_r+0x1e>
 8018958:	6823      	ldr	r3, [r4, #0]
 801895a:	b103      	cbz	r3, 801895e <_write_r+0x1e>
 801895c:	602b      	str	r3, [r5, #0]
 801895e:	bd38      	pop	{r3, r4, r5, pc}
 8018960:	2000f558 	.word	0x2000f558

08018964 <__swsetup_r>:
 8018964:	4b32      	ldr	r3, [pc, #200]	; (8018a30 <__swsetup_r+0xcc>)
 8018966:	b570      	push	{r4, r5, r6, lr}
 8018968:	681d      	ldr	r5, [r3, #0]
 801896a:	4606      	mov	r6, r0
 801896c:	460c      	mov	r4, r1
 801896e:	b125      	cbz	r5, 801897a <__swsetup_r+0x16>
 8018970:	69ab      	ldr	r3, [r5, #24]
 8018972:	b913      	cbnz	r3, 801897a <__swsetup_r+0x16>
 8018974:	4628      	mov	r0, r5
 8018976:	f7ff fb3b 	bl	8017ff0 <__sinit>
 801897a:	4b2e      	ldr	r3, [pc, #184]	; (8018a34 <__swsetup_r+0xd0>)
 801897c:	429c      	cmp	r4, r3
 801897e:	d10f      	bne.n	80189a0 <__swsetup_r+0x3c>
 8018980:	686c      	ldr	r4, [r5, #4]
 8018982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018986:	b29a      	uxth	r2, r3
 8018988:	0715      	lsls	r5, r2, #28
 801898a:	d42c      	bmi.n	80189e6 <__swsetup_r+0x82>
 801898c:	06d0      	lsls	r0, r2, #27
 801898e:	d411      	bmi.n	80189b4 <__swsetup_r+0x50>
 8018990:	2209      	movs	r2, #9
 8018992:	6032      	str	r2, [r6, #0]
 8018994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018998:	81a3      	strh	r3, [r4, #12]
 801899a:	f04f 30ff 	mov.w	r0, #4294967295
 801899e:	e03e      	b.n	8018a1e <__swsetup_r+0xba>
 80189a0:	4b25      	ldr	r3, [pc, #148]	; (8018a38 <__swsetup_r+0xd4>)
 80189a2:	429c      	cmp	r4, r3
 80189a4:	d101      	bne.n	80189aa <__swsetup_r+0x46>
 80189a6:	68ac      	ldr	r4, [r5, #8]
 80189a8:	e7eb      	b.n	8018982 <__swsetup_r+0x1e>
 80189aa:	4b24      	ldr	r3, [pc, #144]	; (8018a3c <__swsetup_r+0xd8>)
 80189ac:	429c      	cmp	r4, r3
 80189ae:	bf08      	it	eq
 80189b0:	68ec      	ldreq	r4, [r5, #12]
 80189b2:	e7e6      	b.n	8018982 <__swsetup_r+0x1e>
 80189b4:	0751      	lsls	r1, r2, #29
 80189b6:	d512      	bpl.n	80189de <__swsetup_r+0x7a>
 80189b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189ba:	b141      	cbz	r1, 80189ce <__swsetup_r+0x6a>
 80189bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189c0:	4299      	cmp	r1, r3
 80189c2:	d002      	beq.n	80189ca <__swsetup_r+0x66>
 80189c4:	4630      	mov	r0, r6
 80189c6:	f7ff fba5 	bl	8018114 <_free_r>
 80189ca:	2300      	movs	r3, #0
 80189cc:	6363      	str	r3, [r4, #52]	; 0x34
 80189ce:	89a3      	ldrh	r3, [r4, #12]
 80189d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80189d4:	81a3      	strh	r3, [r4, #12]
 80189d6:	2300      	movs	r3, #0
 80189d8:	6063      	str	r3, [r4, #4]
 80189da:	6923      	ldr	r3, [r4, #16]
 80189dc:	6023      	str	r3, [r4, #0]
 80189de:	89a3      	ldrh	r3, [r4, #12]
 80189e0:	f043 0308 	orr.w	r3, r3, #8
 80189e4:	81a3      	strh	r3, [r4, #12]
 80189e6:	6923      	ldr	r3, [r4, #16]
 80189e8:	b94b      	cbnz	r3, 80189fe <__swsetup_r+0x9a>
 80189ea:	89a3      	ldrh	r3, [r4, #12]
 80189ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80189f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80189f4:	d003      	beq.n	80189fe <__swsetup_r+0x9a>
 80189f6:	4621      	mov	r1, r4
 80189f8:	4630      	mov	r0, r6
 80189fa:	f000 f917 	bl	8018c2c <__smakebuf_r>
 80189fe:	89a2      	ldrh	r2, [r4, #12]
 8018a00:	f012 0301 	ands.w	r3, r2, #1
 8018a04:	d00c      	beq.n	8018a20 <__swsetup_r+0xbc>
 8018a06:	2300      	movs	r3, #0
 8018a08:	60a3      	str	r3, [r4, #8]
 8018a0a:	6963      	ldr	r3, [r4, #20]
 8018a0c:	425b      	negs	r3, r3
 8018a0e:	61a3      	str	r3, [r4, #24]
 8018a10:	6923      	ldr	r3, [r4, #16]
 8018a12:	b953      	cbnz	r3, 8018a2a <__swsetup_r+0xc6>
 8018a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018a1c:	d1ba      	bne.n	8018994 <__swsetup_r+0x30>
 8018a1e:	bd70      	pop	{r4, r5, r6, pc}
 8018a20:	0792      	lsls	r2, r2, #30
 8018a22:	bf58      	it	pl
 8018a24:	6963      	ldrpl	r3, [r4, #20]
 8018a26:	60a3      	str	r3, [r4, #8]
 8018a28:	e7f2      	b.n	8018a10 <__swsetup_r+0xac>
 8018a2a:	2000      	movs	r0, #0
 8018a2c:	e7f7      	b.n	8018a1e <__swsetup_r+0xba>
 8018a2e:	bf00      	nop
 8018a30:	20000020 	.word	0x20000020
 8018a34:	08026d04 	.word	0x08026d04
 8018a38:	08026d24 	.word	0x08026d24
 8018a3c:	08026ce4 	.word	0x08026ce4

08018a40 <_close_r>:
 8018a40:	b538      	push	{r3, r4, r5, lr}
 8018a42:	4c06      	ldr	r4, [pc, #24]	; (8018a5c <_close_r+0x1c>)
 8018a44:	2300      	movs	r3, #0
 8018a46:	4605      	mov	r5, r0
 8018a48:	4608      	mov	r0, r1
 8018a4a:	6023      	str	r3, [r4, #0]
 8018a4c:	f7e8 f8b3 	bl	8000bb6 <_close>
 8018a50:	1c43      	adds	r3, r0, #1
 8018a52:	d102      	bne.n	8018a5a <_close_r+0x1a>
 8018a54:	6823      	ldr	r3, [r4, #0]
 8018a56:	b103      	cbz	r3, 8018a5a <_close_r+0x1a>
 8018a58:	602b      	str	r3, [r5, #0]
 8018a5a:	bd38      	pop	{r3, r4, r5, pc}
 8018a5c:	2000f558 	.word	0x2000f558

08018a60 <__sflush_r>:
 8018a60:	898a      	ldrh	r2, [r1, #12]
 8018a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a66:	4605      	mov	r5, r0
 8018a68:	0710      	lsls	r0, r2, #28
 8018a6a:	460c      	mov	r4, r1
 8018a6c:	d458      	bmi.n	8018b20 <__sflush_r+0xc0>
 8018a6e:	684b      	ldr	r3, [r1, #4]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	dc05      	bgt.n	8018a80 <__sflush_r+0x20>
 8018a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	dc02      	bgt.n	8018a80 <__sflush_r+0x20>
 8018a7a:	2000      	movs	r0, #0
 8018a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a82:	2e00      	cmp	r6, #0
 8018a84:	d0f9      	beq.n	8018a7a <__sflush_r+0x1a>
 8018a86:	2300      	movs	r3, #0
 8018a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018a8c:	682f      	ldr	r7, [r5, #0]
 8018a8e:	6a21      	ldr	r1, [r4, #32]
 8018a90:	602b      	str	r3, [r5, #0]
 8018a92:	d032      	beq.n	8018afa <__sflush_r+0x9a>
 8018a94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018a96:	89a3      	ldrh	r3, [r4, #12]
 8018a98:	075a      	lsls	r2, r3, #29
 8018a9a:	d505      	bpl.n	8018aa8 <__sflush_r+0x48>
 8018a9c:	6863      	ldr	r3, [r4, #4]
 8018a9e:	1ac0      	subs	r0, r0, r3
 8018aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018aa2:	b10b      	cbz	r3, 8018aa8 <__sflush_r+0x48>
 8018aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018aa6:	1ac0      	subs	r0, r0, r3
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	4602      	mov	r2, r0
 8018aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018aae:	6a21      	ldr	r1, [r4, #32]
 8018ab0:	4628      	mov	r0, r5
 8018ab2:	47b0      	blx	r6
 8018ab4:	1c43      	adds	r3, r0, #1
 8018ab6:	89a3      	ldrh	r3, [r4, #12]
 8018ab8:	d106      	bne.n	8018ac8 <__sflush_r+0x68>
 8018aba:	6829      	ldr	r1, [r5, #0]
 8018abc:	291d      	cmp	r1, #29
 8018abe:	d848      	bhi.n	8018b52 <__sflush_r+0xf2>
 8018ac0:	4a29      	ldr	r2, [pc, #164]	; (8018b68 <__sflush_r+0x108>)
 8018ac2:	40ca      	lsrs	r2, r1
 8018ac4:	07d6      	lsls	r6, r2, #31
 8018ac6:	d544      	bpl.n	8018b52 <__sflush_r+0xf2>
 8018ac8:	2200      	movs	r2, #0
 8018aca:	6062      	str	r2, [r4, #4]
 8018acc:	04d9      	lsls	r1, r3, #19
 8018ace:	6922      	ldr	r2, [r4, #16]
 8018ad0:	6022      	str	r2, [r4, #0]
 8018ad2:	d504      	bpl.n	8018ade <__sflush_r+0x7e>
 8018ad4:	1c42      	adds	r2, r0, #1
 8018ad6:	d101      	bne.n	8018adc <__sflush_r+0x7c>
 8018ad8:	682b      	ldr	r3, [r5, #0]
 8018ada:	b903      	cbnz	r3, 8018ade <__sflush_r+0x7e>
 8018adc:	6560      	str	r0, [r4, #84]	; 0x54
 8018ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ae0:	602f      	str	r7, [r5, #0]
 8018ae2:	2900      	cmp	r1, #0
 8018ae4:	d0c9      	beq.n	8018a7a <__sflush_r+0x1a>
 8018ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018aea:	4299      	cmp	r1, r3
 8018aec:	d002      	beq.n	8018af4 <__sflush_r+0x94>
 8018aee:	4628      	mov	r0, r5
 8018af0:	f7ff fb10 	bl	8018114 <_free_r>
 8018af4:	2000      	movs	r0, #0
 8018af6:	6360      	str	r0, [r4, #52]	; 0x34
 8018af8:	e7c0      	b.n	8018a7c <__sflush_r+0x1c>
 8018afa:	2301      	movs	r3, #1
 8018afc:	4628      	mov	r0, r5
 8018afe:	47b0      	blx	r6
 8018b00:	1c41      	adds	r1, r0, #1
 8018b02:	d1c8      	bne.n	8018a96 <__sflush_r+0x36>
 8018b04:	682b      	ldr	r3, [r5, #0]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d0c5      	beq.n	8018a96 <__sflush_r+0x36>
 8018b0a:	2b1d      	cmp	r3, #29
 8018b0c:	d001      	beq.n	8018b12 <__sflush_r+0xb2>
 8018b0e:	2b16      	cmp	r3, #22
 8018b10:	d101      	bne.n	8018b16 <__sflush_r+0xb6>
 8018b12:	602f      	str	r7, [r5, #0]
 8018b14:	e7b1      	b.n	8018a7a <__sflush_r+0x1a>
 8018b16:	89a3      	ldrh	r3, [r4, #12]
 8018b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b1c:	81a3      	strh	r3, [r4, #12]
 8018b1e:	e7ad      	b.n	8018a7c <__sflush_r+0x1c>
 8018b20:	690f      	ldr	r7, [r1, #16]
 8018b22:	2f00      	cmp	r7, #0
 8018b24:	d0a9      	beq.n	8018a7a <__sflush_r+0x1a>
 8018b26:	0793      	lsls	r3, r2, #30
 8018b28:	680e      	ldr	r6, [r1, #0]
 8018b2a:	bf08      	it	eq
 8018b2c:	694b      	ldreq	r3, [r1, #20]
 8018b2e:	600f      	str	r7, [r1, #0]
 8018b30:	bf18      	it	ne
 8018b32:	2300      	movne	r3, #0
 8018b34:	eba6 0807 	sub.w	r8, r6, r7
 8018b38:	608b      	str	r3, [r1, #8]
 8018b3a:	f1b8 0f00 	cmp.w	r8, #0
 8018b3e:	dd9c      	ble.n	8018a7a <__sflush_r+0x1a>
 8018b40:	4643      	mov	r3, r8
 8018b42:	463a      	mov	r2, r7
 8018b44:	6a21      	ldr	r1, [r4, #32]
 8018b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018b48:	4628      	mov	r0, r5
 8018b4a:	47b0      	blx	r6
 8018b4c:	2800      	cmp	r0, #0
 8018b4e:	dc06      	bgt.n	8018b5e <__sflush_r+0xfe>
 8018b50:	89a3      	ldrh	r3, [r4, #12]
 8018b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b56:	81a3      	strh	r3, [r4, #12]
 8018b58:	f04f 30ff 	mov.w	r0, #4294967295
 8018b5c:	e78e      	b.n	8018a7c <__sflush_r+0x1c>
 8018b5e:	4407      	add	r7, r0
 8018b60:	eba8 0800 	sub.w	r8, r8, r0
 8018b64:	e7e9      	b.n	8018b3a <__sflush_r+0xda>
 8018b66:	bf00      	nop
 8018b68:	20400001 	.word	0x20400001

08018b6c <_fflush_r>:
 8018b6c:	b538      	push	{r3, r4, r5, lr}
 8018b6e:	690b      	ldr	r3, [r1, #16]
 8018b70:	4605      	mov	r5, r0
 8018b72:	460c      	mov	r4, r1
 8018b74:	b1db      	cbz	r3, 8018bae <_fflush_r+0x42>
 8018b76:	b118      	cbz	r0, 8018b80 <_fflush_r+0x14>
 8018b78:	6983      	ldr	r3, [r0, #24]
 8018b7a:	b90b      	cbnz	r3, 8018b80 <_fflush_r+0x14>
 8018b7c:	f7ff fa38 	bl	8017ff0 <__sinit>
 8018b80:	4b0c      	ldr	r3, [pc, #48]	; (8018bb4 <_fflush_r+0x48>)
 8018b82:	429c      	cmp	r4, r3
 8018b84:	d109      	bne.n	8018b9a <_fflush_r+0x2e>
 8018b86:	686c      	ldr	r4, [r5, #4]
 8018b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b8c:	b17b      	cbz	r3, 8018bae <_fflush_r+0x42>
 8018b8e:	4621      	mov	r1, r4
 8018b90:	4628      	mov	r0, r5
 8018b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b96:	f7ff bf63 	b.w	8018a60 <__sflush_r>
 8018b9a:	4b07      	ldr	r3, [pc, #28]	; (8018bb8 <_fflush_r+0x4c>)
 8018b9c:	429c      	cmp	r4, r3
 8018b9e:	d101      	bne.n	8018ba4 <_fflush_r+0x38>
 8018ba0:	68ac      	ldr	r4, [r5, #8]
 8018ba2:	e7f1      	b.n	8018b88 <_fflush_r+0x1c>
 8018ba4:	4b05      	ldr	r3, [pc, #20]	; (8018bbc <_fflush_r+0x50>)
 8018ba6:	429c      	cmp	r4, r3
 8018ba8:	bf08      	it	eq
 8018baa:	68ec      	ldreq	r4, [r5, #12]
 8018bac:	e7ec      	b.n	8018b88 <_fflush_r+0x1c>
 8018bae:	2000      	movs	r0, #0
 8018bb0:	bd38      	pop	{r3, r4, r5, pc}
 8018bb2:	bf00      	nop
 8018bb4:	08026d04 	.word	0x08026d04
 8018bb8:	08026d24 	.word	0x08026d24
 8018bbc:	08026ce4 	.word	0x08026ce4

08018bc0 <_lseek_r>:
 8018bc0:	b538      	push	{r3, r4, r5, lr}
 8018bc2:	4c07      	ldr	r4, [pc, #28]	; (8018be0 <_lseek_r+0x20>)
 8018bc4:	4605      	mov	r5, r0
 8018bc6:	4608      	mov	r0, r1
 8018bc8:	4611      	mov	r1, r2
 8018bca:	2200      	movs	r2, #0
 8018bcc:	6022      	str	r2, [r4, #0]
 8018bce:	461a      	mov	r2, r3
 8018bd0:	f7e8 f818 	bl	8000c04 <_lseek>
 8018bd4:	1c43      	adds	r3, r0, #1
 8018bd6:	d102      	bne.n	8018bde <_lseek_r+0x1e>
 8018bd8:	6823      	ldr	r3, [r4, #0]
 8018bda:	b103      	cbz	r3, 8018bde <_lseek_r+0x1e>
 8018bdc:	602b      	str	r3, [r5, #0]
 8018bde:	bd38      	pop	{r3, r4, r5, pc}
 8018be0:	2000f558 	.word	0x2000f558

08018be4 <__swhatbuf_r>:
 8018be4:	b570      	push	{r4, r5, r6, lr}
 8018be6:	460e      	mov	r6, r1
 8018be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bec:	2900      	cmp	r1, #0
 8018bee:	b096      	sub	sp, #88	; 0x58
 8018bf0:	4614      	mov	r4, r2
 8018bf2:	461d      	mov	r5, r3
 8018bf4:	da07      	bge.n	8018c06 <__swhatbuf_r+0x22>
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	602b      	str	r3, [r5, #0]
 8018bfa:	89b3      	ldrh	r3, [r6, #12]
 8018bfc:	061a      	lsls	r2, r3, #24
 8018bfe:	d410      	bmi.n	8018c22 <__swhatbuf_r+0x3e>
 8018c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c04:	e00e      	b.n	8018c24 <__swhatbuf_r+0x40>
 8018c06:	466a      	mov	r2, sp
 8018c08:	f000 f864 	bl	8018cd4 <_fstat_r>
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	dbf2      	blt.n	8018bf6 <__swhatbuf_r+0x12>
 8018c10:	9a01      	ldr	r2, [sp, #4]
 8018c12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018c16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018c1a:	425a      	negs	r2, r3
 8018c1c:	415a      	adcs	r2, r3
 8018c1e:	602a      	str	r2, [r5, #0]
 8018c20:	e7ee      	b.n	8018c00 <__swhatbuf_r+0x1c>
 8018c22:	2340      	movs	r3, #64	; 0x40
 8018c24:	2000      	movs	r0, #0
 8018c26:	6023      	str	r3, [r4, #0]
 8018c28:	b016      	add	sp, #88	; 0x58
 8018c2a:	bd70      	pop	{r4, r5, r6, pc}

08018c2c <__smakebuf_r>:
 8018c2c:	898b      	ldrh	r3, [r1, #12]
 8018c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c30:	079d      	lsls	r5, r3, #30
 8018c32:	4606      	mov	r6, r0
 8018c34:	460c      	mov	r4, r1
 8018c36:	d507      	bpl.n	8018c48 <__smakebuf_r+0x1c>
 8018c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c3c:	6023      	str	r3, [r4, #0]
 8018c3e:	6123      	str	r3, [r4, #16]
 8018c40:	2301      	movs	r3, #1
 8018c42:	6163      	str	r3, [r4, #20]
 8018c44:	b002      	add	sp, #8
 8018c46:	bd70      	pop	{r4, r5, r6, pc}
 8018c48:	ab01      	add	r3, sp, #4
 8018c4a:	466a      	mov	r2, sp
 8018c4c:	f7ff ffca 	bl	8018be4 <__swhatbuf_r>
 8018c50:	9900      	ldr	r1, [sp, #0]
 8018c52:	4605      	mov	r5, r0
 8018c54:	4630      	mov	r0, r6
 8018c56:	f7ff faab 	bl	80181b0 <_malloc_r>
 8018c5a:	b948      	cbnz	r0, 8018c70 <__smakebuf_r+0x44>
 8018c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c60:	059a      	lsls	r2, r3, #22
 8018c62:	d4ef      	bmi.n	8018c44 <__smakebuf_r+0x18>
 8018c64:	f023 0303 	bic.w	r3, r3, #3
 8018c68:	f043 0302 	orr.w	r3, r3, #2
 8018c6c:	81a3      	strh	r3, [r4, #12]
 8018c6e:	e7e3      	b.n	8018c38 <__smakebuf_r+0xc>
 8018c70:	4b0d      	ldr	r3, [pc, #52]	; (8018ca8 <__smakebuf_r+0x7c>)
 8018c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8018c74:	89a3      	ldrh	r3, [r4, #12]
 8018c76:	6020      	str	r0, [r4, #0]
 8018c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c7c:	81a3      	strh	r3, [r4, #12]
 8018c7e:	9b00      	ldr	r3, [sp, #0]
 8018c80:	6163      	str	r3, [r4, #20]
 8018c82:	9b01      	ldr	r3, [sp, #4]
 8018c84:	6120      	str	r0, [r4, #16]
 8018c86:	b15b      	cbz	r3, 8018ca0 <__smakebuf_r+0x74>
 8018c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c8c:	4630      	mov	r0, r6
 8018c8e:	f000 f833 	bl	8018cf8 <_isatty_r>
 8018c92:	b128      	cbz	r0, 8018ca0 <__smakebuf_r+0x74>
 8018c94:	89a3      	ldrh	r3, [r4, #12]
 8018c96:	f023 0303 	bic.w	r3, r3, #3
 8018c9a:	f043 0301 	orr.w	r3, r3, #1
 8018c9e:	81a3      	strh	r3, [r4, #12]
 8018ca0:	89a3      	ldrh	r3, [r4, #12]
 8018ca2:	431d      	orrs	r5, r3
 8018ca4:	81a5      	strh	r5, [r4, #12]
 8018ca6:	e7cd      	b.n	8018c44 <__smakebuf_r+0x18>
 8018ca8:	08017fb9 	.word	0x08017fb9

08018cac <__malloc_lock>:
 8018cac:	4770      	bx	lr

08018cae <__malloc_unlock>:
 8018cae:	4770      	bx	lr

08018cb0 <_read_r>:
 8018cb0:	b538      	push	{r3, r4, r5, lr}
 8018cb2:	4c07      	ldr	r4, [pc, #28]	; (8018cd0 <_read_r+0x20>)
 8018cb4:	4605      	mov	r5, r0
 8018cb6:	4608      	mov	r0, r1
 8018cb8:	4611      	mov	r1, r2
 8018cba:	2200      	movs	r2, #0
 8018cbc:	6022      	str	r2, [r4, #0]
 8018cbe:	461a      	mov	r2, r3
 8018cc0:	f7e7 ff40 	bl	8000b44 <_read>
 8018cc4:	1c43      	adds	r3, r0, #1
 8018cc6:	d102      	bne.n	8018cce <_read_r+0x1e>
 8018cc8:	6823      	ldr	r3, [r4, #0]
 8018cca:	b103      	cbz	r3, 8018cce <_read_r+0x1e>
 8018ccc:	602b      	str	r3, [r5, #0]
 8018cce:	bd38      	pop	{r3, r4, r5, pc}
 8018cd0:	2000f558 	.word	0x2000f558

08018cd4 <_fstat_r>:
 8018cd4:	b538      	push	{r3, r4, r5, lr}
 8018cd6:	4c07      	ldr	r4, [pc, #28]	; (8018cf4 <_fstat_r+0x20>)
 8018cd8:	2300      	movs	r3, #0
 8018cda:	4605      	mov	r5, r0
 8018cdc:	4608      	mov	r0, r1
 8018cde:	4611      	mov	r1, r2
 8018ce0:	6023      	str	r3, [r4, #0]
 8018ce2:	f7e7 ff74 	bl	8000bce <_fstat>
 8018ce6:	1c43      	adds	r3, r0, #1
 8018ce8:	d102      	bne.n	8018cf0 <_fstat_r+0x1c>
 8018cea:	6823      	ldr	r3, [r4, #0]
 8018cec:	b103      	cbz	r3, 8018cf0 <_fstat_r+0x1c>
 8018cee:	602b      	str	r3, [r5, #0]
 8018cf0:	bd38      	pop	{r3, r4, r5, pc}
 8018cf2:	bf00      	nop
 8018cf4:	2000f558 	.word	0x2000f558

08018cf8 <_isatty_r>:
 8018cf8:	b538      	push	{r3, r4, r5, lr}
 8018cfa:	4c06      	ldr	r4, [pc, #24]	; (8018d14 <_isatty_r+0x1c>)
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	4605      	mov	r5, r0
 8018d00:	4608      	mov	r0, r1
 8018d02:	6023      	str	r3, [r4, #0]
 8018d04:	f7e7 ff73 	bl	8000bee <_isatty>
 8018d08:	1c43      	adds	r3, r0, #1
 8018d0a:	d102      	bne.n	8018d12 <_isatty_r+0x1a>
 8018d0c:	6823      	ldr	r3, [r4, #0]
 8018d0e:	b103      	cbz	r3, 8018d12 <_isatty_r+0x1a>
 8018d10:	602b      	str	r3, [r5, #0]
 8018d12:	bd38      	pop	{r3, r4, r5, pc}
 8018d14:	2000f558 	.word	0x2000f558

08018d18 <_init>:
 8018d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d1a:	bf00      	nop
 8018d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d1e:	bc08      	pop	{r3}
 8018d20:	469e      	mov	lr, r3
 8018d22:	4770      	bx	lr

08018d24 <_fini>:
 8018d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d26:	bf00      	nop
 8018d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d2a:	bc08      	pop	{r3}
 8018d2c:	469e      	mov	lr, r3
 8018d2e:	4770      	bx	lr
