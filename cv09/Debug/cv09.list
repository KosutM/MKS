
cv09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008778  08008778  00018778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b0  080089b0  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  080089b0  080089b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b8  080089b8  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080089c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200001c8  08008b88  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08008b88  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126f8  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ae2  00000000  00000000  000328f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  000353d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00036080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259dc  00000000  00000000  00036be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca8c  00000000  00000000  0005c5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5a53  00000000  00000000  00069048  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ea9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  0013eb18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800875c 	.word	0x0800875c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	0800875c 	.word	0x0800875c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <step>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void step(int x, int y, bool btn)						//draw line when btn is true, false for step in x,y direction
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	4613      	mov	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];

	if (btn == true)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <step+0x1a>
		buff[0] = 0x01; 						// left button push
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	753b      	strb	r3, [r7, #20]
 8000ea4:	e001      	b.n	8000eaa <step+0x1e>
	else
		buff[0] = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	753b      	strb	r3, [r7, #20]

	buff[1] = (int8_t)(x); 						// X direction
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	757b      	strb	r3, [r7, #21]
	buff[2] = (int8_t)(y); 						// Y direction
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	75bb      	strb	r3, [r7, #22]
	buff[3] = 0; 								// without scroll
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]

	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <step+0x54>)
 8000ec4:	f004 fd5c 	bl	8005980 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <step+0x54>)
 8000eca:	f004 fd7b 	bl	80059c4 <USBD_HID_GetPollingInterval>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 fc37 	bl	8001744 <HAL_Delay>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000238 	.word	0x20000238
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <circle>:

void circle(int radius, float part_of_circle)			// 1 for full circle, decimal number for part of circle
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	ed87 0a02 	vstr	s0, [r7, #8]
	float x, y, delta_phi, phi;
	int8_t sx,sy;
	uint8_t steps = 50;
 8000ef4:	2332      	movs	r3, #50	; 0x32
 8000ef6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	sx = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	sy = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	steps = (uint8_t)(steps * part_of_circle);			//50 steps for full circle
 8000f06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f22:	793b      	ldrb	r3, [r7, #4]
 8000f24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	delta_phi = (2*3.14*part_of_circle) / steps;		//step of phi
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f7ff fac5 	bl	80004b8 <__aeabi_f2d>
 8000f2e:	a34c      	add	r3, pc, #304	; (adr r3, 8001060 <circle+0x178>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fb18 	bl	8000568 <__aeabi_dmul>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	460c      	mov	r4, r1
 8000f3c:	4625      	mov	r5, r4
 8000f3e:	461c      	mov	r4, r3
 8000f40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff faa5 	bl	8000494 <__aeabi_i2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4620      	mov	r0, r4
 8000f50:	4629      	mov	r1, r5
 8000f52:	f7ff fc33 	bl	80007bc <__aeabi_ddiv>
 8000f56:	4603      	mov	r3, r0
 8000f58:	460c      	mov	r4, r1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	f7ff fdc5 	bl	8000aec <__aeabi_d2f>
 8000f62:	4603      	mov	r3, r0
 8000f64:	623b      	str	r3, [r7, #32]

	for (uint8_t i = 0; i<steps; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000f6c:	e06e      	b.n	800104c <circle+0x164>
	{
		phi = i * delta_phi;
 8000f6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f82:	edc7 7a07 	vstr	s15, [r7, #28]
		x = radius * cos(phi);
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff fa84 	bl	8000494 <__aeabi_i2d>
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	460d      	mov	r5, r1
 8000f90:	69f8      	ldr	r0, [r7, #28]
 8000f92:	f7ff fa91 	bl	80004b8 <__aeabi_f2d>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	ec43 2b10 	vmov	d0, r2, r3
 8000f9e:	f006 fb87 	bl	80076b0 <cos>
 8000fa2:	ec53 2b10 	vmov	r2, r3, d0
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	4629      	mov	r1, r5
 8000faa:	f7ff fadd 	bl	8000568 <__aeabi_dmul>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460c      	mov	r4, r1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	f7ff fd99 	bl	8000aec <__aeabi_d2f>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	61bb      	str	r3, [r7, #24]
		y = radius * sin(phi);
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff fa68 	bl	8000494 <__aeabi_i2d>
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460d      	mov	r5, r1
 8000fc8:	69f8      	ldr	r0, [r7, #28]
 8000fca:	f7ff fa75 	bl	80004b8 <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	ec43 2b10 	vmov	d0, r2, r3
 8000fd6:	f006 fbaf 	bl	8007738 <sin>
 8000fda:	ec53 2b10 	vmov	r2, r3, d0
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f7ff fac1 	bl	8000568 <__aeabi_dmul>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460c      	mov	r4, r1
 8000fea:	4618      	mov	r0, r3
 8000fec:	4621      	mov	r1, r4
 8000fee:	f7ff fd7d 	bl	8000aec <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	617b      	str	r3, [r7, #20]
		sx = (int8_t)x - sx;							//compute difference for new point
 8000ff6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffe:	edc7 7a01 	vstr	s15, [r7, #4]
 8001002:	793b      	ldrb	r3, [r7, #4]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	b2da      	uxtb	r2, r3
 8001008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		sy = (int8_t)y - sy;
 8001014:	edd7 7a05 	vldr	s15, [r7, #20]
 8001018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001020:	793b      	ldrb	r3, [r7, #4]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	b2da      	uxtb	r2, r3
 8001026:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		step(sx, sy, true);								//draw line
 8001032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001036:	f997 1026 	ldrsb.w	r1, [r7, #38]	; 0x26
 800103a:	2201      	movs	r2, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff25 	bl	8000e8c <step>
	for (uint8_t i = 0; i<steps; i++)
 8001042:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001046:	3301      	adds	r3, #1
 8001048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800104c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001050:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001054:	429a      	cmp	r2, r3
 8001056:	d38a      	bcc.n	8000f6e <circle+0x86>
	}
}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	51eb851f 	.word	0x51eb851f
 8001064:	40191eb8 	.word	0x40191eb8

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 faf8 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f84a 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 f8dc 	bl	8001230 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001078:	f000 f8b0 	bl	80011dc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800107c:	f005 fdf0 	bl	8006c60 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do{
		  HAL_Delay(40);
 8001080:	2028      	movs	r0, #40	; 0x28
 8001082:	f000 fb5f 	bl	8001744 <HAL_Delay>
	  }while (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin));
 8001086:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108a:	481d      	ldr	r0, [pc, #116]	; (8001100 <main+0x98>)
 800108c:	f000 fe38 	bl	8001d00 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f4      	beq.n	8001080 <main+0x18>

	  circle(10,1);			//head (100% of circle)
 8001096:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800109a:	200a      	movs	r0, #10
 800109c:	f7ff ff24 	bl	8000ee8 <circle>
	  step(-3,-3, false);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f06f 0102 	mvn.w	r1, #2
 80010a6:	f06f 0002 	mvn.w	r0, #2
 80010aa:	f7ff feef 	bl	8000e8c <step>
	  circle(1,1);			//left eye
 80010ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ff18 	bl	8000ee8 <circle>
	  step(0, 7, false);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2107      	movs	r1, #7
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fee5 	bl	8000e8c <step>
	  circle(1,1);			//right eye
 80010c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff ff0e 	bl	8000ee8 <circle>
	  step(-3,-2, false);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f06f 0101 	mvn.w	r1, #1
 80010d2:	f06f 0002 	mvn.w	r0, #2
 80010d6:	f7ff fed9 	bl	8000e8c <step>
	  step(0,-5,true);		//nose
 80010da:	2201      	movs	r2, #1
 80010dc:	f06f 0104 	mvn.w	r1, #4
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fed3 	bl	8000e8c <step>
	  step(4,-1,false);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	2004      	movs	r0, #4
 80010ee:	f7ff fecd 	bl	8000e8c <step>
	  circle(7,0.3);		//mouth (30% of circle)
 80010f2:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001104 <main+0x9c>
 80010f6:	2007      	movs	r0, #7
 80010f8:	f7ff fef6 	bl	8000ee8 <circle>
  while (1)
 80010fc:	e7c0      	b.n	8001080 <main+0x18>
 80010fe:	bf00      	nop
 8001100:	40020800 	.word	0x40020800
 8001104:	3e99999a 	.word	0x3e99999a

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f006 fa08 	bl	800752c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <SystemClock_Config+0xcc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <SystemClock_Config+0xcc>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <SystemClock_Config+0xcc>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <SystemClock_Config+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <SystemClock_Config+0xd0>)
 8001152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <SystemClock_Config+0xd0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001168:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800117c:	23a8      	movs	r3, #168	; 0xa8
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001184:	2307      	movs	r3, #7
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f001 ff53 	bl	8003038 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001198:	f000 f93c 	bl	8001414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2105      	movs	r1, #5
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 f9ac 	bl	8003518 <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011c6:	f000 f925 	bl	8001414 <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3750      	adds	r7, #80	; 0x50
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_USART3_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001214:	f002 fb72 	bl	80038fc <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f000 f8f9 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001f4 	.word	0x200001f4
 800122c:	40004800 	.word	0x40004800

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	4b6c      	ldr	r3, [pc, #432]	; (80013fc <MX_GPIO_Init+0x1cc>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a6b      	ldr	r2, [pc, #428]	; (80013fc <MX_GPIO_Init+0x1cc>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b69      	ldr	r3, [pc, #420]	; (80013fc <MX_GPIO_Init+0x1cc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	4b65      	ldr	r3, [pc, #404]	; (80013fc <MX_GPIO_Init+0x1cc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a64      	ldr	r2, [pc, #400]	; (80013fc <MX_GPIO_Init+0x1cc>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b62      	ldr	r3, [pc, #392]	; (80013fc <MX_GPIO_Init+0x1cc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <MX_GPIO_Init+0x1cc>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a5d      	ldr	r2, [pc, #372]	; (80013fc <MX_GPIO_Init+0x1cc>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <MX_GPIO_Init+0x1cc>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b57      	ldr	r3, [pc, #348]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a56      	ldr	r2, [pc, #344]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b54      	ldr	r3, [pc, #336]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b49      	ldr	r3, [pc, #292]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a48      	ldr	r2, [pc, #288]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b46      	ldr	r3, [pc, #280]	; (80013fc <MX_GPIO_Init+0x1cc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80012f4:	4842      	ldr	r0, [pc, #264]	; (8001400 <MX_GPIO_Init+0x1d0>)
 80012f6:	f000 fd1b 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	4841      	ldr	r0, [pc, #260]	; (8001404 <MX_GPIO_Init+0x1d4>)
 8001300:	f000 fd16 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <MX_GPIO_Init+0x1d8>)
 800130c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	483c      	ldr	r0, [pc, #240]	; (800140c <MX_GPIO_Init+0x1dc>)
 800131a:	f000 fb47 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800131e:	2332      	movs	r3, #50	; 0x32
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132e:	230b      	movs	r3, #11
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4834      	ldr	r0, [pc, #208]	; (800140c <MX_GPIO_Init+0x1dc>)
 800133a:	f000 fb37 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800133e:	2386      	movs	r3, #134	; 0x86
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134e:	230b      	movs	r3, #11
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	482d      	ldr	r0, [pc, #180]	; (8001410 <MX_GPIO_Init+0x1e0>)
 800135a:	f000 fb27 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800135e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4822      	ldr	r0, [pc, #136]	; (8001400 <MX_GPIO_Init+0x1d0>)
 8001378:	f000 fb18 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800138e:	230b      	movs	r3, #11
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4819      	ldr	r0, [pc, #100]	; (8001400 <MX_GPIO_Init+0x1d0>)
 800139a:	f000 fb07 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800139e:	2340      	movs	r3, #64	; 0x40
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <MX_GPIO_Init+0x1d4>)
 80013b6:	f000 faf9 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_GPIO_Init+0x1d4>)
 80013ce:	f000 faed 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_GPIO_Init+0x1d4>)
 80013f0:	f000 fadc 	bl	80019ac <HAL_GPIO_Init>

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400
 8001404:	40021800 	.word	0x40021800
 8001408:	10110000 	.word	0x10110000
 800140c:	40020800 	.word	0x40020800
 8001410:	40020000 	.word	0x40020000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_MspInit+0x4c>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x4c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_UART_MspInit+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12c      	bne.n	80014f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_UART_MspInit+0x88>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_UART_MspInit+0x88>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_UART_MspInit+0x88>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_UART_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_UART_MspInit+0x88>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_UART_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e0:	2307      	movs	r3, #7
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_UART_MspInit+0x8c>)
 80014ec:	f000 fa5e 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40004800 	.word	0x40004800
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020c00 	.word	0x40020c00

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f8d4 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <OTG_FS_IRQHandler+0x10>)
 8001566:	f000 fd4c 	bl	8002002 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000708 	.word	0x20000708

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f005 ff88 	bl	80074b8 <__errno>
 80015a8:	4602      	mov	r2, r0
 80015aa:	230c      	movs	r3, #12
 80015ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20030000 	.word	0x20030000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	200001e4 	.word	0x200001e4
 80015dc:	20000b18 	.word	0x20000b18

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <SystemInit+0x28>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <SystemInit+0x28>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SystemInit+0x28>)
 80015f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015fa:	609a      	str	r2, [r3, #8]
#endif
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001610:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001612:	e003      	b.n	800161c <LoopCopyDataInit>

08001614 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001616:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001618:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800161a:	3104      	adds	r1, #4

0800161c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001620:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001622:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001624:	d3f6      	bcc.n	8001614 <CopyDataInit>
  ldr  r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001628:	e002      	b.n	8001630 <LoopFillZerobss>

0800162a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800162a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800162c:	f842 3b04 	str.w	r3, [r2], #4

08001630 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001632:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001634:	d3f9      	bcc.n	800162a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001636:	f7ff ffd3 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f005 ff43 	bl	80074c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff fd13 	bl	8001068 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001644:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001648:	080089c0 	.word	0x080089c0
  ldr  r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001650:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8001654:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8001658:	20000b14 	.word	0x20000b14

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_Init+0x40>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_Init+0x40>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x40>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f94d 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fec6 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f965 	bl	8001992 <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 f92d 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	20000234 	.word	0x20000234

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000234 	.word	0x20000234

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_Delay+0x40>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000008 	.word	0x20000008

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff3e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff31 	bl	80017ec <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e177      	b.n	8001cb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8166 	bne.w	8001cb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00b      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fa:	2b11      	cmp	r3, #17
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0xfc>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80c0 	beq.w	8001cb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a64      	ldr	r2, [pc, #400]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b62      	ldr	r3, [pc, #392]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4e:	4a60      	ldr	r2, [pc, #384]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a57      	ldr	r2, [pc, #348]	; (8001cd4 <HAL_GPIO_Init+0x328>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d037      	beq.n	8001bea <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <HAL_GPIO_Init+0x32c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d031      	beq.n	8001be6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a55      	ldr	r2, [pc, #340]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02b      	beq.n	8001be2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <HAL_GPIO_Init+0x334>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d025      	beq.n	8001bde <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a53      	ldr	r2, [pc, #332]	; (8001ce4 <HAL_GPIO_Init+0x338>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01f      	beq.n	8001bda <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	; (8001ce8 <HAL_GPIO_Init+0x33c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a51      	ldr	r2, [pc, #324]	; (8001cec <HAL_GPIO_Init+0x340>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x226>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_GPIO_Init+0x344>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x222>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4f      	ldr	r2, [pc, #316]	; (8001cf4 <HAL_GPIO_Init+0x348>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x21e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4e      	ldr	r2, [pc, #312]	; (8001cf8 <HAL_GPIO_Init+0x34c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001bc2:	2309      	movs	r3, #9
 8001bc4:	e012      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	e010      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bca:	2308      	movs	r3, #8
 8001bcc:	e00e      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd2:	2306      	movs	r3, #6
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bea:	2300      	movs	r3, #0
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bfc:	4934      	ldr	r1, [pc, #208]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c2e:	4a33      	ldr	r2, [pc, #204]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c58:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c82:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	f67f ae84 	bls.w	80019c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3724      	adds	r7, #36	; 0x24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40021400 	.word	0x40021400
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	40021c00 	.word	0x40021c00
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40022400 	.word	0x40022400
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e001      	b.n	8001d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d64:	b08f      	sub	sp, #60	; 0x3c
 8001d66:	af0a      	add	r7, sp, #40	; 0x28
 8001d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e10f      	b.n	8001f94 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f005 f89a 	bl	8006ec8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2203      	movs	r2, #3
 8001d98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fa81 	bl	80042ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	687e      	ldr	r6, [r7, #4]
 8001dc0:	466d      	mov	r5, sp
 8001dc2:	f106 0410 	add.w	r4, r6, #16
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd6:	1d33      	adds	r3, r6, #4
 8001dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f002 f958 	bl	8004090 <USB_CoreInit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0d0      	b.n	8001f94 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fa6f 	bl	80042dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e04a      	b.n	8001e9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	333d      	adds	r3, #61	; 0x3d
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	333c      	adds	r3, #60	; 0x3c
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	b298      	uxth	r0, r3
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3342      	adds	r3, #66	; 0x42
 8001e40:	4602      	mov	r2, r0
 8001e42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	333f      	adds	r3, #63	; 0x3f
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3344      	adds	r3, #68	; 0x44
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	3348      	adds	r3, #72	; 0x48
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3350      	adds	r3, #80	; 0x50
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3301      	adds	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3af      	bcc.n	8001e04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e044      	b.n	8001f34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3301      	adds	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3b5      	bcc.n	8001eaa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	687e      	ldr	r6, [r7, #4]
 8001f46:	466d      	mov	r5, sp
 8001f48:	f106 0410 	add.w	r4, r6, #16
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5c:	1d33      	adds	r3, r6, #4
 8001f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	f002 f9e5 	bl	8004330 <USB_DevInit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e00d      	b.n	8001f94 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 fa2d 	bl	80053ec <USB_DevDisconnect>

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_PCD_Start+0x1c>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e020      	b.n	8001ffa <HAL_PCD_Start+0x5e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d109      	bne.n	8001fdc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 f959 	bl	8004298 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 f9dd 	bl	80053aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002002:	b590      	push	{r4, r7, lr}
 8002004:	b08d      	sub	sp, #52	; 0x34
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f003 fa9b 	bl	8005554 <USB_GetMode>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	f040 839d 	bne.w	8002760 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 f9ff 	bl	800542e <USB_ReadInterrupts>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8393 	beq.w	800275e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 f9f6 	bl	800542e <USB_ReadInterrupts>
 8002042:	4603      	mov	r3, r0
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b02      	cmp	r3, #2
 800204a:	d107      	bne.n	800205c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f002 0202 	and.w	r2, r2, #2
 800205a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f003 f9e4 	bl	800542e <USB_ReadInterrupts>
 8002066:	4603      	mov	r3, r0
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b10      	cmp	r3, #16
 800206e:	d161      	bne.n	8002134 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0210 	bic.w	r2, r2, #16
 800207e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f003 020f 	and.w	r2, r3, #15
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	0c5b      	lsrs	r3, r3, #17
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d124      	bne.n	80020f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d035      	beq.n	8002124 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	6a38      	ldr	r0, [r7, #32]
 80020cc:	f003 f84a 	bl	8005164 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020dc:	441a      	add	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ee:	441a      	add	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	619a      	str	r2, [r3, #24]
 80020f4:	e016      	b.n	8002124 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	0c5b      	lsrs	r3, r3, #17
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d110      	bne.n	8002124 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002108:	2208      	movs	r2, #8
 800210a:	4619      	mov	r1, r3
 800210c:	6a38      	ldr	r0, [r7, #32]
 800210e:	f003 f829 	bl	8005164 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211e:	441a      	add	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0210 	orr.w	r2, r2, #16
 8002132:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f003 f978 	bl	800542e <USB_ReadInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002148:	d16e      	bne.n	8002228 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f003 f97e 	bl	8005454 <USB_ReadDevAllOutEpInterrupt>
 8002158:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800215a:	e062      	b.n	8002222 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d057      	beq.n	8002216 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f003 f9a3 	bl	80054bc <USB_ReadDevOutEPInterrupt>
 8002176:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218e:	461a      	mov	r2, r3
 8002190:	2301      	movs	r3, #1
 8002192:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fd98 	bl	8002ccc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b2:	461a      	mov	r2, r3
 80021b4:	2308      	movs	r3, #8
 80021b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fe92 	bl	8002ee4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d6:	461a      	mov	r2, r3
 80021d8:	2310      	movs	r3, #16
 80021da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f2:	461a      	mov	r2, r3
 80021f4:	2320      	movs	r3, #32
 80021f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220e:	461a      	mov	r2, r3
 8002210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002214:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	3301      	adds	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	d199      	bne.n	800215c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 f8fe 	bl	800542e <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800223c:	f040 80c0 	bne.w	80023c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 f91f 	bl	8005488 <USB_ReadDevAllInEpInterrupt>
 800224a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002250:	e0b2      	b.n	80023b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a7 	beq.w	80023ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f003 f945 	bl	80054f8 <USB_ReadDevInEPInterrupt>
 800226e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d057      	beq.n	800232a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	2201      	movs	r2, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	69f9      	ldr	r1, [r7, #28]
 8002296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800229a:	4013      	ands	r3, r2
 800229c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022aa:	461a      	mov	r2, r3
 80022ac:	2301      	movs	r3, #1
 80022ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d132      	bne.n	800231e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3348      	adds	r3, #72	; 0x48
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4403      	add	r3, r0
 80022d8:	3344      	adds	r3, #68	; 0x44
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4419      	add	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4403      	add	r3, r0
 80022ec:	3348      	adds	r3, #72	; 0x48
 80022ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d113      	bne.n	800231e <HAL_PCD_IRQHandler+0x31c>
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3350      	adds	r3, #80	; 0x50
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d108      	bne.n	800231e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002316:	461a      	mov	r2, r3
 8002318:	2101      	movs	r1, #1
 800231a:	f003 f94d 	bl	80055b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f004 fe5e 	bl	8006fe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002340:	461a      	mov	r2, r3
 8002342:	2308      	movs	r3, #8
 8002344:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235c:	461a      	mov	r2, r3
 800235e:	2310      	movs	r3, #16
 8002360:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002378:	461a      	mov	r2, r3
 800237a:	2340      	movs	r3, #64	; 0x40
 800237c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002394:	461a      	mov	r2, r3
 8002396:	2302      	movs	r3, #2
 8002398:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fc03 	bl	8002bb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	3301      	adds	r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f47f af49 	bne.w	8002252 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 f832 	bl	800542e <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d4:	d122      	bne.n	800241c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023fc:	2100      	movs	r1, #0
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fe0e 	bl	8003020 <HAL_PCDEx_LPM_Callback>
 8002404:	e002      	b.n	800240c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f004 fe64 	bl	80070d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800241a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f003 f804 	bl	800542e <USB_ReadInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002430:	d112      	bne.n	8002458 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f004 fe20 	bl	8007088 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002456:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f002 ffe6 	bl	800542e <USB_ReadInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246c:	f040 80c7 	bne.w	80025fe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2110      	movs	r1, #16
 800248a:	4618      	mov	r0, r3
 800248c:	f002 f8b4 	bl	80045f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002490:	2300      	movs	r3, #0
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002494:	e056      	b.n	8002544 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024a2:	461a      	mov	r2, r3
 80024a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ba:	0151      	lsls	r1, r2, #5
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	440a      	add	r2, r1
 80024c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024da:	0151      	lsls	r1, r2, #5
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	440a      	add	r2, r1
 80024e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f6:	461a      	mov	r2, r3
 80024f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250e:	0151      	lsls	r1, r2, #5
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	440a      	add	r2, r1
 8002514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002518:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800251c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252e:	0151      	lsls	r1, r2, #5
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	440a      	add	r2, r1
 8002534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002538:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800253c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	3301      	adds	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254a:	429a      	cmp	r2, r3
 800254c:	d3a3      	bcc.n	8002496 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800255c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002560:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257a:	f043 030b 	orr.w	r3, r3, #11
 800257e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002590:	f043 030b 	orr.w	r3, r3, #11
 8002594:	6453      	str	r3, [r2, #68]	; 0x44
 8002596:	e015      	b.n	80025c4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025be:	f043 030b 	orr.w	r3, r3, #11
 80025c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025e8:	461a      	mov	r2, r3
 80025ea:	f002 ffe5 	bl	80055b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f002 ff13 	bl	800542e <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002612:	d124      	bne.n	800265e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f002 ffa9 	bl	8005570 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 f849 	bl	80046ba <USB_GetDevSpeed>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681c      	ldr	r4, [r3, #0]
 8002634:	f001 f92e 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 8002638:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	4620      	mov	r0, r4
 8002644:	f001 fd86 	bl	8004154 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f004 fcf4 	bl	8007036 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800265c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f002 fee3 	bl	800542e <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b08      	cmp	r3, #8
 8002670:	d10a      	bne.n	8002688 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f004 fcd1 	bl	800701a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f002 0208 	and.w	r2, r2, #8
 8002686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f002 fece 	bl	800542e <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269c:	d10f      	bne.n	80026be <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f004 fd33 	bl	8007114 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 feb3 	bl	800542e <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d2:	d10f      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f004 fd06 	bl	80070f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fe98 	bl	800542e <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d10a      	bne.n	8002720 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f004 fd14 	bl	8007138 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800271e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f002 fe82 	bl	800542e <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b04      	cmp	r3, #4
 8002732:	d115      	bne.n	8002760 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f004 fd04 	bl	8007154 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	e000      	b.n	8002760 <HAL_PCD_IRQHandler+0x75e>
      return;
 800275e:	bf00      	nop
    }
  }
}
 8002760:	3734      	adds	r7, #52	; 0x34
 8002762:	46bd      	mov	sp, r7
 8002764:	bd90      	pop	{r4, r7, pc}

08002766 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_PCD_SetAddress+0x1a>
 800277c:	2302      	movs	r3, #2
 800277e:	e013      	b.n	80027a8 <HAL_PCD_SetAddress+0x42>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f002 fde0 	bl	800535e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	70fb      	strb	r3, [r7, #3]
 80027c2:	460b      	mov	r3, r1
 80027c4:	803b      	strh	r3, [r7, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	da0f      	bge.n	80027f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	3338      	adds	r3, #56	; 0x38
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	3304      	adds	r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	705a      	strb	r2, [r3, #1]
 80027f4:	e00f      	b.n	8002816 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	3304      	adds	r3, #4
 800280e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002822:	883a      	ldrh	r2, [r7, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	78ba      	ldrb	r2, [r7, #2]
 800282c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	785b      	ldrb	r3, [r3, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002840:	78bb      	ldrb	r3, [r7, #2]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d102      	bne.n	800284c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_PCD_EP_Open+0xaa>
 8002856:	2302      	movs	r3, #2
 8002858:	e00e      	b.n	8002878 <HAL_PCD_EP_Open+0xc8>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	f001 ff4b 	bl	8004704 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002876:	7afb      	ldrb	r3, [r7, #11]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800288c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002890:	2b00      	cmp	r3, #0
 8002892:	da0f      	bge.n	80028b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	f003 020f 	and.w	r2, r3, #15
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	3338      	adds	r3, #56	; 0x38
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	3304      	adds	r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	705a      	strb	r2, [r3, #1]
 80028b2:	e00f      	b.n	80028d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 020f 	and.w	r2, r3, #15
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_PCD_EP_Close+0x6e>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e00e      	b.n	800290c <HAL_PCD_EP_Close+0x8c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68f9      	ldr	r1, [r7, #12]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 ff89 	bl	8004814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	460b      	mov	r3, r1
 8002922:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002924:	7afb      	ldrb	r3, [r7, #11]
 8002926:	f003 020f 	and.w	r2, r3, #15
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002956:	7afb      	ldrb	r3, [r7, #11]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	b2da      	uxtb	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d102      	bne.n	8002970 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002970:	7afb      	ldrb	r3, [r7, #11]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	6979      	ldr	r1, [r7, #20]
 8002988:	f002 fa64 	bl	8004e54 <USB_EP0StartXfer>
 800298c:	e008      	b.n	80029a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6979      	ldr	r1, [r7, #20]
 800299c:	f002 f816 	bl	80049cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	460b      	mov	r3, r1
 80029b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3338      	adds	r3, #56	; 0x38
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2201      	movs	r2, #1
 80029e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d102      	bne.n	8002a04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a04:	7afb      	ldrb	r3, [r7, #11]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6979      	ldr	r1, [r7, #20]
 8002a1c:	f002 fa1a 	bl	8004e54 <USB_EP0StartXfer>
 8002a20:	e008      	b.n	8002a34 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	6979      	ldr	r1, [r7, #20]
 8002a30:	f001 ffcc 	bl	80049cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d901      	bls.n	8002a5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e050      	b.n	8002afe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da0f      	bge.n	8002a84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3338      	adds	r3, #56	; 0x38
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	705a      	strb	r2, [r3, #1]
 8002a82:	e00d      	b.n	8002aa0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	3304      	adds	r3, #4
 8002a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_PCD_EP_SetStall+0x82>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e01e      	b.n	8002afe <HAL_PCD_EP_SetStall+0xc0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68f9      	ldr	r1, [r7, #12]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fb71 	bl	80051b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	b2d9      	uxtb	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aee:	461a      	mov	r2, r3
 8002af0:	f002 fd62 	bl	80055b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d901      	bls.n	8002b24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e042      	b.n	8002baa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da0f      	bge.n	8002b4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 020f 	and.w	r2, r3, #15
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	3338      	adds	r3, #56	; 0x38
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	705a      	strb	r2, [r3, #1]
 8002b4a:	e00f      	b.n	8002b6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 020f 	and.w	r2, r3, #15
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_PCD_EP_ClrStall+0x86>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e00e      	b.n	8002baa <HAL_PCD_EP_ClrStall+0xa4>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fb79 	bl	8005292 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b08a      	sub	sp, #40	; 0x28
 8002bb6:	af02      	add	r7, sp, #8
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3338      	adds	r3, #56	; 0x38
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d901      	bls.n	8002bea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06c      	b.n	8002cc4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d902      	bls.n	8002c06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3303      	adds	r3, #3
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c0e:	e02b      	b.n	8002c68 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d902      	bls.n	8002c2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	3303      	adds	r3, #3
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f002 fa55 	bl	80050fa <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	441a      	add	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	441a      	add	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d809      	bhi.n	8002c92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d203      	bcs.n	8002c92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1be      	bne.n	8002c10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d811      	bhi.n	8002cc2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	6939      	ldr	r1, [r7, #16]
 8002cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	333c      	adds	r3, #60	; 0x3c
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	f040 80a0 	bne.w	8002e44 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d015      	beq.n	8002d3a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a72      	ldr	r2, [pc, #456]	; (8002edc <PCD_EP_OutXfrComplete_int+0x210>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f240 80dd 	bls.w	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80d7 	beq.w	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d36:	6093      	str	r3, [r2, #8]
 8002d38:	e0cb      	b.n	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d50:	461a      	mov	r2, r3
 8002d52:	2320      	movs	r3, #32
 8002d54:	6093      	str	r3, [r2, #8]
 8002d56:	e0bc      	b.n	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 80b7 	bne.w	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a5d      	ldr	r2, [pc, #372]	; (8002edc <PCD_EP_OutXfrComplete_int+0x210>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d90f      	bls.n	8002d8c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d82:	461a      	mov	r2, r3
 8002d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d88:	6093      	str	r3, [r2, #8]
 8002d8a:	e0a2      	b.n	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d9e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	0159      	lsls	r1, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002db2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4403      	add	r3, r0
 8002dc2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002dc6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4403      	add	r3, r0
 8002dea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4419      	add	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4403      	add	r3, r0
 8002e00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e04:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d114      	bne.n	8002e36 <PCD_EP_OutXfrComplete_int+0x16a>
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2101      	movs	r1, #1
 8002e32:	f002 fbc1 	bl	80055b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f004 f8b7 	bl	8006fb0 <HAL_PCD_DataOutStageCallback>
 8002e42:	e046      	b.n	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d124      	bne.n	8002e96 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	461a      	mov	r2, r3
 8002e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e68:	6093      	str	r3, [r2, #8]
 8002e6a:	e032      	b.n	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e82:	461a      	mov	r2, r3
 8002e84:	2320      	movs	r3, #32
 8002e86:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f004 f88e 	bl	8006fb0 <HAL_PCD_DataOutStageCallback>
 8002e94:	e01d      	b.n	8002ed2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d114      	bne.n	8002ec6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d108      	bne.n	8002ec6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	f002 fb79 	bl	80055b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f004 f86f 	bl	8006fb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	4f54300a 	.word	0x4f54300a
 8002ee0:	4f54310a 	.word	0x4f54310a

08002ee4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	333c      	adds	r3, #60	; 0x3c
 8002efc:	3304      	adds	r3, #4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d90e      	bls.n	8002f38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d009      	beq.n	8002f38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	461a      	mov	r2, r3
 8002f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f004 f827 	bl	8006f8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d90c      	bls.n	8002f60 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d108      	bne.n	8002f60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	f002 fb2c 	bl	80055b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	4f54300a 	.word	0x4f54300a

08002f70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d107      	bne.n	8002f9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f8e:	883b      	ldrh	r3, [r7, #0]
 8002f90:	0419      	lsls	r1, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f9c:	e028      	b.n	8002ff0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e00d      	b.n	8002fce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	3340      	adds	r3, #64	; 0x40
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3ec      	bcc.n	8002fb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fd8:	883b      	ldrh	r3, [r7, #0]
 8002fda:	0418      	lsls	r0, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	4302      	orrs	r2, r0
 8002fe8:	3340      	adds	r3, #64	; 0x40
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e25b      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d075      	beq.n	8003142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003056:	4ba3      	ldr	r3, [pc, #652]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d00c      	beq.n	800307c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4ba0      	ldr	r3, [pc, #640]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306a:	2b08      	cmp	r3, #8
 800306c:	d112      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306e:	4b9d      	ldr	r3, [pc, #628]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307a:	d10b      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	4b99      	ldr	r3, [pc, #612]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05b      	beq.n	8003140 <HAL_RCC_OscConfig+0x108>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d157      	bne.n	8003140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e236      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d106      	bne.n	80030ac <HAL_RCC_OscConfig+0x74>
 800309e:	4b91      	ldr	r3, [pc, #580]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a90      	ldr	r2, [pc, #576]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xb0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x98>
 80030b6:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a8a      	ldr	r2, [pc, #552]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a87      	ldr	r2, [pc, #540]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xb0>
 80030d0:	4b84      	ldr	r3, [pc, #528]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a83      	ldr	r2, [pc, #524]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a80      	ldr	r2, [pc, #512]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fb1c 	bl	800172c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe fb18 	bl	800172c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1fb      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xc0>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fb08 	bl	800172c <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe fb04 	bl	800172c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1e7      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b6c      	ldr	r3, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0xe8>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b5c      	ldr	r3, [pc, #368]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x152>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1bb      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4952      	ldr	r1, [pc, #328]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <HAL_RCC_OscConfig+0x2b0>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe fabd 	bl	800172c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fe fab9 	bl	800172c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e19c      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b46      	ldr	r3, [pc, #280]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4940      	ldr	r1, [pc, #256]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_OscConfig+0x2b0>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fa9c 	bl	800172c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe fa98 	bl	800172c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e17b      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d030      	beq.n	8003284 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_RCC_OscConfig+0x2b4>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe fa7c 	bl	800172c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe fa78 	bl	800172c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e15b      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x200>
 8003256:	e015      	b.n	8003284 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003258:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCC_OscConfig+0x2b4>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fe fa65 	bl	800172c <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003266:	f7fe fa61 	bl	800172c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e144      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a0 	beq.w	80033d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe fa27 	bl	800172c <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e011      	b.n	8003306 <HAL_RCC_OscConfig+0x2ce>
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
 80032f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f4:	f7fe fa1a 	bl	800172c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0fd      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x4d4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x2f0>
 800331a:	4b7d      	ldr	r3, [pc, #500]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a7c      	ldr	r2, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	e01c      	b.n	8003362 <HAL_RCC_OscConfig+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b05      	cmp	r3, #5
 800332e:	d10c      	bne.n	800334a <HAL_RCC_OscConfig+0x312>
 8003330:	4b77      	ldr	r3, [pc, #476]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a76      	ldr	r2, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
 800333c:	4b74      	ldr	r3, [pc, #464]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	4a73      	ldr	r2, [pc, #460]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	; 0x70
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0x32a>
 800334a:	4b71      	ldr	r3, [pc, #452]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a70      	ldr	r2, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	4b6e      	ldr	r3, [pc, #440]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a6d      	ldr	r2, [pc, #436]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800335c:	f023 0304 	bic.w	r3, r3, #4
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d015      	beq.n	8003396 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe f9df 	bl	800172c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fe f9db 	bl	800172c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0bc      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	4b61      	ldr	r3, [pc, #388]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ee      	beq.n	8003372 <HAL_RCC_OscConfig+0x33a>
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003396:	f7fe f9c9 	bl	800172c <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339e:	f7fe f9c5 	bl	800172c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0a6      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	4b56      	ldr	r3, [pc, #344]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ee      	bne.n	800339e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b52      	ldr	r3, [pc, #328]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a51      	ldr	r2, [pc, #324]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8092 	beq.w	8003500 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033dc:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d05c      	beq.n	80034a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d141      	bne.n	8003474 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b48      	ldr	r3, [pc, #288]	; (8003514 <HAL_RCC_OscConfig+0x4dc>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe f999 	bl	800172c <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fe f995 	bl	800172c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e078      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	019b      	lsls	r3, r3, #6
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	3b01      	subs	r3, #1
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	061b      	lsls	r3, r3, #24
 8003440:	4933      	ldr	r1, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003446:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_RCC_OscConfig+0x4dc>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe f96e 	bl	800172c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe f96a 	bl	800172c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e04d      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x41c>
 8003472:	e045      	b.n	8003500 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003474:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x4dc>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7fe f957 	bl	800172c <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fe f953 	bl	800172c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e036      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x44a>
 80034a0:	e02e      	b.n	8003500 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e029      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d115      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034d6:	4013      	ands	r3, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10d      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40007000 	.word	0x40007000
 8003510:	40023800 	.word	0x40023800
 8003514:	42470060 	.word	0x42470060

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cc      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d90c      	bls.n	8003554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800358e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d044      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d119      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e067      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4934      	ldr	r1, [pc, #208]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fe f890 	bl	800172c <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fe f88c 	bl	800172c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e04f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d20c      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4601      	mov	r1, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	5cd3      	ldrb	r3, [r2, r3]
 80036b2:	fa21 f303 	lsr.w	r3, r1, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fff0 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023c00 	.word	0x40023c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	080087c0 	.word	0x080087c0
 80036dc:	20000000 	.word	0x20000000
 80036e0:	20000004 	.word	0x20000004

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	2300      	movs	r3, #0
 80036f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d007      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x32>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d008      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x38>
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 80b4 	bne.w	8003878 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b5e      	ldr	r3, [pc, #376]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003712:	60bb      	str	r3, [r7, #8]
       break;
 8003714:	e0b3      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003716:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003718:	60bb      	str	r3, [r7, #8]
      break;
 800371a:	e0b0      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800371c:	4b5a      	ldr	r3, [pc, #360]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003726:	4b58      	ldr	r3, [pc, #352]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04a      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b55      	ldr	r3, [pc, #340]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	f04f 0400 	mov.w	r4, #0
 800373c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	ea03 0501 	and.w	r5, r3, r1
 8003748:	ea04 0602 	and.w	r6, r4, r2
 800374c:	4629      	mov	r1, r5
 800374e:	4632      	mov	r2, r6
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	f04f 0400 	mov.w	r4, #0
 8003758:	0154      	lsls	r4, r2, #5
 800375a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800375e:	014b      	lsls	r3, r1, #5
 8003760:	4619      	mov	r1, r3
 8003762:	4622      	mov	r2, r4
 8003764:	1b49      	subs	r1, r1, r5
 8003766:	eb62 0206 	sbc.w	r2, r2, r6
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	f04f 0400 	mov.w	r4, #0
 8003772:	0194      	lsls	r4, r2, #6
 8003774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003778:	018b      	lsls	r3, r1, #6
 800377a:	1a5b      	subs	r3, r3, r1
 800377c:	eb64 0402 	sbc.w	r4, r4, r2
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	00e2      	lsls	r2, r4, #3
 800378a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800378e:	00d9      	lsls	r1, r3, #3
 8003790:	460b      	mov	r3, r1
 8003792:	4614      	mov	r4, r2
 8003794:	195b      	adds	r3, r3, r5
 8003796:	eb44 0406 	adc.w	r4, r4, r6
 800379a:	f04f 0100 	mov.w	r1, #0
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	0262      	lsls	r2, r4, #9
 80037a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037a8:	0259      	lsls	r1, r3, #9
 80037aa:	460b      	mov	r3, r1
 80037ac:	4614      	mov	r4, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	4621      	mov	r1, r4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f04f 0400 	mov.w	r4, #0
 80037b8:	461a      	mov	r2, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	f7fd f9e6 	bl	8000b8c <__aeabi_uldivmod>
 80037c0:	4603      	mov	r3, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e049      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	ea03 0501 	and.w	r5, r3, r1
 80037de:	ea04 0602 	and.w	r6, r4, r2
 80037e2:	4629      	mov	r1, r5
 80037e4:	4632      	mov	r2, r6
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	f04f 0400 	mov.w	r4, #0
 80037ee:	0154      	lsls	r4, r2, #5
 80037f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f4:	014b      	lsls	r3, r1, #5
 80037f6:	4619      	mov	r1, r3
 80037f8:	4622      	mov	r2, r4
 80037fa:	1b49      	subs	r1, r1, r5
 80037fc:	eb62 0206 	sbc.w	r2, r2, r6
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	f04f 0400 	mov.w	r4, #0
 8003808:	0194      	lsls	r4, r2, #6
 800380a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800380e:	018b      	lsls	r3, r1, #6
 8003810:	1a5b      	subs	r3, r3, r1
 8003812:	eb64 0402 	sbc.w	r4, r4, r2
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003824:	00d9      	lsls	r1, r3, #3
 8003826:	460b      	mov	r3, r1
 8003828:	4614      	mov	r4, r2
 800382a:	195b      	adds	r3, r3, r5
 800382c:	eb44 0406 	adc.w	r4, r4, r6
 8003830:	f04f 0100 	mov.w	r1, #0
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	02a2      	lsls	r2, r4, #10
 800383a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800383e:	0299      	lsls	r1, r3, #10
 8003840:	460b      	mov	r3, r1
 8003842:	4614      	mov	r4, r2
 8003844:	4618      	mov	r0, r3
 8003846:	4621      	mov	r1, r4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f04f 0400 	mov.w	r4, #0
 800384e:	461a      	mov	r2, r3
 8003850:	4623      	mov	r3, r4
 8003852:	f7fd f99b 	bl	8000b8c <__aeabi_uldivmod>
 8003856:	4603      	mov	r3, r0
 8003858:	460c      	mov	r4, r1
 800385a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	60bb      	str	r3, [r7, #8]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800387a:	60bb      	str	r3, [r7, #8]
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	68bb      	ldr	r3, [r7, #8]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000000 	.word	0x20000000

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4601      	mov	r1, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	080087d0 	.word	0x080087d0

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038d8:	f7ff ffdc 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038dc:	4601      	mov	r1, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0b5b      	lsrs	r3, r3, #13
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4a03      	ldr	r2, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	080087d0 	.word	0x080087d0

080038fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e03f      	b.n	800398e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fda6 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800393e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f829 	bl	8003998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039da:	f023 030c 	bic.w	r3, r3, #12
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a06:	f040 818b 	bne.w	8003d20 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4ac1      	ldr	r2, [pc, #772]	; (8003d14 <UART_SetConfig+0x37c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d005      	beq.n	8003a20 <UART_SetConfig+0x88>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4abf      	ldr	r2, [pc, #764]	; (8003d18 <UART_SetConfig+0x380>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	f040 80bd 	bne.w	8003b9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7ff ff58 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8003a24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	461d      	mov	r5, r3
 8003a2a:	f04f 0600 	mov.w	r6, #0
 8003a2e:	46a8      	mov	r8, r5
 8003a30:	46b1      	mov	r9, r6
 8003a32:	eb18 0308 	adds.w	r3, r8, r8
 8003a36:	eb49 0409 	adc.w	r4, r9, r9
 8003a3a:	4698      	mov	r8, r3
 8003a3c:	46a1      	mov	r9, r4
 8003a3e:	eb18 0805 	adds.w	r8, r8, r5
 8003a42:	eb49 0906 	adc.w	r9, r9, r6
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a5a:	4688      	mov	r8, r1
 8003a5c:	4691      	mov	r9, r2
 8003a5e:	eb18 0005 	adds.w	r0, r8, r5
 8003a62:	eb49 0106 	adc.w	r1, r9, r6
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	f04f 0600 	mov.w	r6, #0
 8003a70:	196b      	adds	r3, r5, r5
 8003a72:	eb46 0406 	adc.w	r4, r6, r6
 8003a76:	461a      	mov	r2, r3
 8003a78:	4623      	mov	r3, r4
 8003a7a:	f7fd f887 	bl	8000b8c <__aeabi_uldivmod>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	460c      	mov	r4, r1
 8003a82:	461a      	mov	r2, r3
 8003a84:	4ba5      	ldr	r3, [pc, #660]	; (8003d1c <UART_SetConfig+0x384>)
 8003a86:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	461d      	mov	r5, r3
 8003a94:	f04f 0600 	mov.w	r6, #0
 8003a98:	46a9      	mov	r9, r5
 8003a9a:	46b2      	mov	sl, r6
 8003a9c:	eb19 0309 	adds.w	r3, r9, r9
 8003aa0:	eb4a 040a 	adc.w	r4, sl, sl
 8003aa4:	4699      	mov	r9, r3
 8003aa6:	46a2      	mov	sl, r4
 8003aa8:	eb19 0905 	adds.w	r9, r9, r5
 8003aac:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003abc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ac0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ac4:	4689      	mov	r9, r1
 8003ac6:	4692      	mov	sl, r2
 8003ac8:	eb19 0005 	adds.w	r0, r9, r5
 8003acc:	eb4a 0106 	adc.w	r1, sl, r6
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	f04f 0600 	mov.w	r6, #0
 8003ada:	196b      	adds	r3, r5, r5
 8003adc:	eb46 0406 	adc.w	r4, r6, r6
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	f7fd f852 	bl	8000b8c <__aeabi_uldivmod>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b8b      	ldr	r3, [pc, #556]	; (8003d1c <UART_SetConfig+0x384>)
 8003af0:	fba3 1302 	umull	r1, r3, r3, r2
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	2164      	movs	r1, #100	; 0x64
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	3332      	adds	r3, #50	; 0x32
 8003b02:	4a86      	ldr	r2, [pc, #536]	; (8003d1c <UART_SetConfig+0x384>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b10:	4498      	add	r8, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	461d      	mov	r5, r3
 8003b16:	f04f 0600 	mov.w	r6, #0
 8003b1a:	46a9      	mov	r9, r5
 8003b1c:	46b2      	mov	sl, r6
 8003b1e:	eb19 0309 	adds.w	r3, r9, r9
 8003b22:	eb4a 040a 	adc.w	r4, sl, sl
 8003b26:	4699      	mov	r9, r3
 8003b28:	46a2      	mov	sl, r4
 8003b2a:	eb19 0905 	adds.w	r9, r9, r5
 8003b2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b46:	4689      	mov	r9, r1
 8003b48:	4692      	mov	sl, r2
 8003b4a:	eb19 0005 	adds.w	r0, r9, r5
 8003b4e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	461d      	mov	r5, r3
 8003b58:	f04f 0600 	mov.w	r6, #0
 8003b5c:	196b      	adds	r3, r5, r5
 8003b5e:	eb46 0406 	adc.w	r4, r6, r6
 8003b62:	461a      	mov	r2, r3
 8003b64:	4623      	mov	r3, r4
 8003b66:	f7fd f811 	bl	8000b8c <__aeabi_uldivmod>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <UART_SetConfig+0x384>)
 8003b72:	fba3 1302 	umull	r1, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	2164      	movs	r1, #100	; 0x64
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	3332      	adds	r3, #50	; 0x32
 8003b84:	4a65      	ldr	r2, [pc, #404]	; (8003d1c <UART_SetConfig+0x384>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	f003 0207 	and.w	r2, r3, #7
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4442      	add	r2, r8
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	e26f      	b.n	800407a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b9a:	f7ff fe87 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8003b9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	f04f 0600 	mov.w	r6, #0
 8003ba8:	46a8      	mov	r8, r5
 8003baa:	46b1      	mov	r9, r6
 8003bac:	eb18 0308 	adds.w	r3, r8, r8
 8003bb0:	eb49 0409 	adc.w	r4, r9, r9
 8003bb4:	4698      	mov	r8, r3
 8003bb6:	46a1      	mov	r9, r4
 8003bb8:	eb18 0805 	adds.w	r8, r8, r5
 8003bbc:	eb49 0906 	adc.w	r9, r9, r6
 8003bc0:	f04f 0100 	mov.w	r1, #0
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bd4:	4688      	mov	r8, r1
 8003bd6:	4691      	mov	r9, r2
 8003bd8:	eb18 0005 	adds.w	r0, r8, r5
 8003bdc:	eb49 0106 	adc.w	r1, r9, r6
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	461d      	mov	r5, r3
 8003be6:	f04f 0600 	mov.w	r6, #0
 8003bea:	196b      	adds	r3, r5, r5
 8003bec:	eb46 0406 	adc.w	r4, r6, r6
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4623      	mov	r3, r4
 8003bf4:	f7fc ffca 	bl	8000b8c <__aeabi_uldivmod>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <UART_SetConfig+0x384>)
 8003c00:	fba3 2302 	umull	r2, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	f04f 0600 	mov.w	r6, #0
 8003c12:	46a9      	mov	r9, r5
 8003c14:	46b2      	mov	sl, r6
 8003c16:	eb19 0309 	adds.w	r3, r9, r9
 8003c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c1e:	4699      	mov	r9, r3
 8003c20:	46a2      	mov	sl, r4
 8003c22:	eb19 0905 	adds.w	r9, r9, r5
 8003c26:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c3e:	4689      	mov	r9, r1
 8003c40:	4692      	mov	sl, r2
 8003c42:	eb19 0005 	adds.w	r0, r9, r5
 8003c46:	eb4a 0106 	adc.w	r1, sl, r6
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	461d      	mov	r5, r3
 8003c50:	f04f 0600 	mov.w	r6, #0
 8003c54:	196b      	adds	r3, r5, r5
 8003c56:	eb46 0406 	adc.w	r4, r6, r6
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	f7fc ff95 	bl	8000b8c <__aeabi_uldivmod>
 8003c62:	4603      	mov	r3, r0
 8003c64:	460c      	mov	r4, r1
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <UART_SetConfig+0x384>)
 8003c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2164      	movs	r1, #100	; 0x64
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <UART_SetConfig+0x384>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c8a:	4498      	add	r8, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	461d      	mov	r5, r3
 8003c90:	f04f 0600 	mov.w	r6, #0
 8003c94:	46a9      	mov	r9, r5
 8003c96:	46b2      	mov	sl, r6
 8003c98:	eb19 0309 	adds.w	r3, r9, r9
 8003c9c:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca0:	4699      	mov	r9, r3
 8003ca2:	46a2      	mov	sl, r4
 8003ca4:	eb19 0905 	adds.w	r9, r9, r5
 8003ca8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cac:	f04f 0100 	mov.w	r1, #0
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc0:	4689      	mov	r9, r1
 8003cc2:	4692      	mov	sl, r2
 8003cc4:	eb19 0005 	adds.w	r0, r9, r5
 8003cc8:	eb4a 0106 	adc.w	r1, sl, r6
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	461d      	mov	r5, r3
 8003cd2:	f04f 0600 	mov.w	r6, #0
 8003cd6:	196b      	adds	r3, r5, r5
 8003cd8:	eb46 0406 	adc.w	r4, r6, r6
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4623      	mov	r3, r4
 8003ce0:	f7fc ff54 	bl	8000b8c <__aeabi_uldivmod>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <UART_SetConfig+0x384>)
 8003cec:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	2164      	movs	r1, #100	; 0x64
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	3332      	adds	r3, #50	; 0x32
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <UART_SetConfig+0x384>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f003 0207 	and.w	r2, r3, #7
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4442      	add	r2, r8
 8003d10:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d12:	e1b2      	b.n	800407a <UART_SetConfig+0x6e2>
 8003d14:	40011000 	.word	0x40011000
 8003d18:	40011400 	.word	0x40011400
 8003d1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4ad7      	ldr	r2, [pc, #860]	; (8004084 <UART_SetConfig+0x6ec>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d005      	beq.n	8003d36 <UART_SetConfig+0x39e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4ad6      	ldr	r2, [pc, #856]	; (8004088 <UART_SetConfig+0x6f0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	f040 80d1 	bne.w	8003ed8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d36:	f7ff fdcd 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8003d3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	469a      	mov	sl, r3
 8003d40:	f04f 0b00 	mov.w	fp, #0
 8003d44:	46d0      	mov	r8, sl
 8003d46:	46d9      	mov	r9, fp
 8003d48:	eb18 0308 	adds.w	r3, r8, r8
 8003d4c:	eb49 0409 	adc.w	r4, r9, r9
 8003d50:	4698      	mov	r8, r3
 8003d52:	46a1      	mov	r9, r4
 8003d54:	eb18 080a 	adds.w	r8, r8, sl
 8003d58:	eb49 090b 	adc.w	r9, r9, fp
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d70:	4688      	mov	r8, r1
 8003d72:	4691      	mov	r9, r2
 8003d74:	eb1a 0508 	adds.w	r5, sl, r8
 8003d78:	eb4b 0609 	adc.w	r6, fp, r9
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4619      	mov	r1, r3
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f04f 0400 	mov.w	r4, #0
 8003d8e:	0094      	lsls	r4, r2, #2
 8003d90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d94:	008b      	lsls	r3, r1, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	4623      	mov	r3, r4
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	f7fc fef5 	bl	8000b8c <__aeabi_uldivmod>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4bb8      	ldr	r3, [pc, #736]	; (800408c <UART_SetConfig+0x6f4>)
 8003daa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	469b      	mov	fp, r3
 8003db8:	f04f 0c00 	mov.w	ip, #0
 8003dbc:	46d9      	mov	r9, fp
 8003dbe:	46e2      	mov	sl, ip
 8003dc0:	eb19 0309 	adds.w	r3, r9, r9
 8003dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8003dc8:	4699      	mov	r9, r3
 8003dca:	46a2      	mov	sl, r4
 8003dcc:	eb19 090b 	adds.w	r9, r9, fp
 8003dd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003de8:	4689      	mov	r9, r1
 8003dea:	4692      	mov	sl, r2
 8003dec:	eb1b 0509 	adds.w	r5, fp, r9
 8003df0:	eb4c 060a 	adc.w	r6, ip, sl
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	f04f 0400 	mov.w	r4, #0
 8003e06:	0094      	lsls	r4, r2, #2
 8003e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e0c:	008b      	lsls	r3, r1, #2
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4623      	mov	r3, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	4631      	mov	r1, r6
 8003e16:	f7fc feb9 	bl	8000b8c <__aeabi_uldivmod>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b9a      	ldr	r3, [pc, #616]	; (800408c <UART_SetConfig+0x6f4>)
 8003e22:	fba3 1302 	umull	r1, r3, r3, r2
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2164      	movs	r1, #100	; 0x64
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	3332      	adds	r3, #50	; 0x32
 8003e34:	4a95      	ldr	r2, [pc, #596]	; (800408c <UART_SetConfig+0x6f4>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e40:	4498      	add	r8, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	469b      	mov	fp, r3
 8003e46:	f04f 0c00 	mov.w	ip, #0
 8003e4a:	46d9      	mov	r9, fp
 8003e4c:	46e2      	mov	sl, ip
 8003e4e:	eb19 0309 	adds.w	r3, r9, r9
 8003e52:	eb4a 040a 	adc.w	r4, sl, sl
 8003e56:	4699      	mov	r9, r3
 8003e58:	46a2      	mov	sl, r4
 8003e5a:	eb19 090b 	adds.w	r9, r9, fp
 8003e5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e76:	4689      	mov	r9, r1
 8003e78:	4692      	mov	sl, r2
 8003e7a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e7e:	eb4c 060a 	adc.w	r6, ip, sl
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4619      	mov	r1, r3
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	f04f 0400 	mov.w	r4, #0
 8003e94:	0094      	lsls	r4, r2, #2
 8003e96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e9a:	008b      	lsls	r3, r1, #2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	f7fc fe72 	bl	8000b8c <__aeabi_uldivmod>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	461a      	mov	r2, r3
 8003eae:	4b77      	ldr	r3, [pc, #476]	; (800408c <UART_SetConfig+0x6f4>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a72      	ldr	r2, [pc, #456]	; (800408c <UART_SetConfig+0x6f4>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4442      	add	r2, r8
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	e0d0      	b.n	800407a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f7ff fce8 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8003edc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	469a      	mov	sl, r3
 8003ee2:	f04f 0b00 	mov.w	fp, #0
 8003ee6:	46d0      	mov	r8, sl
 8003ee8:	46d9      	mov	r9, fp
 8003eea:	eb18 0308 	adds.w	r3, r8, r8
 8003eee:	eb49 0409 	adc.w	r4, r9, r9
 8003ef2:	4698      	mov	r8, r3
 8003ef4:	46a1      	mov	r9, r4
 8003ef6:	eb18 080a 	adds.w	r8, r8, sl
 8003efa:	eb49 090b 	adc.w	r9, r9, fp
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f12:	4688      	mov	r8, r1
 8003f14:	4691      	mov	r9, r2
 8003f16:	eb1a 0508 	adds.w	r5, sl, r8
 8003f1a:	eb4b 0609 	adc.w	r6, fp, r9
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4619      	mov	r1, r3
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	f04f 0400 	mov.w	r4, #0
 8003f30:	0094      	lsls	r4, r2, #2
 8003f32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f36:	008b      	lsls	r3, r1, #2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	4631      	mov	r1, r6
 8003f40:	f7fc fe24 	bl	8000b8c <__aeabi_uldivmod>
 8003f44:	4603      	mov	r3, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b50      	ldr	r3, [pc, #320]	; (800408c <UART_SetConfig+0x6f4>)
 8003f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	469b      	mov	fp, r3
 8003f5a:	f04f 0c00 	mov.w	ip, #0
 8003f5e:	46d9      	mov	r9, fp
 8003f60:	46e2      	mov	sl, ip
 8003f62:	eb19 0309 	adds.w	r3, r9, r9
 8003f66:	eb4a 040a 	adc.w	r4, sl, sl
 8003f6a:	4699      	mov	r9, r3
 8003f6c:	46a2      	mov	sl, r4
 8003f6e:	eb19 090b 	adds.w	r9, r9, fp
 8003f72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f8a:	4689      	mov	r9, r1
 8003f8c:	4692      	mov	sl, r2
 8003f8e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f92:	eb4c 060a 	adc.w	r6, ip, sl
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	0094      	lsls	r4, r2, #2
 8003faa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fae:	008b      	lsls	r3, r1, #2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	f7fc fde8 	bl	8000b8c <__aeabi_uldivmod>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b32      	ldr	r3, [pc, #200]	; (800408c <UART_SetConfig+0x6f4>)
 8003fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	2164      	movs	r1, #100	; 0x64
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	3332      	adds	r3, #50	; 0x32
 8003fd6:	4a2d      	ldr	r2, [pc, #180]	; (800408c <UART_SetConfig+0x6f4>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe2:	4498      	add	r8, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	469b      	mov	fp, r3
 8003fe8:	f04f 0c00 	mov.w	ip, #0
 8003fec:	46d9      	mov	r9, fp
 8003fee:	46e2      	mov	sl, ip
 8003ff0:	eb19 0309 	adds.w	r3, r9, r9
 8003ff4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	46a2      	mov	sl, r4
 8003ffc:	eb19 090b 	adds.w	r9, r9, fp
 8004000:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004010:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004014:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004018:	4689      	mov	r9, r1
 800401a:	4692      	mov	sl, r2
 800401c:	eb1b 0509 	adds.w	r5, fp, r9
 8004020:	eb4c 060a 	adc.w	r6, ip, sl
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4619      	mov	r1, r3
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	f04f 0400 	mov.w	r4, #0
 8004036:	0094      	lsls	r4, r2, #2
 8004038:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800403c:	008b      	lsls	r3, r1, #2
 800403e:	461a      	mov	r2, r3
 8004040:	4623      	mov	r3, r4
 8004042:	4628      	mov	r0, r5
 8004044:	4631      	mov	r1, r6
 8004046:	f7fc fda1 	bl	8000b8c <__aeabi_uldivmod>
 800404a:	4603      	mov	r3, r0
 800404c:	460c      	mov	r4, r1
 800404e:	461a      	mov	r2, r3
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <UART_SetConfig+0x6f4>)
 8004052:	fba3 1302 	umull	r1, r3, r3, r2
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2164      	movs	r1, #100	; 0x64
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	3332      	adds	r3, #50	; 0x32
 8004064:	4a09      	ldr	r2, [pc, #36]	; (800408c <UART_SetConfig+0x6f4>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	f003 020f 	and.w	r2, r3, #15
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4442      	add	r2, r8
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	e7ff      	b.n	800407a <UART_SetConfig+0x6e2>
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004084:	40011000 	.word	0x40011000
 8004088:	40011400 	.word	0x40011400
 800408c:	51eb851f 	.word	0x51eb851f

08004090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004090:	b084      	sub	sp, #16
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	f107 001c 	add.w	r0, r7, #28
 800409e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d122      	bne.n	80040ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d105      	bne.n	80040e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f001 fac6 	bl	8005674 <USB_CoreReset>
 80040e8:	4603      	mov	r3, r0
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	e01a      	b.n	8004124 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 faba 	bl	8005674 <USB_CoreReset>
 8004100:	4603      	mov	r3, r0
 8004102:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38
 8004116:	e005      	b.n	8004124 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10b      	bne.n	8004142 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f043 0206 	orr.w	r2, r3, #6
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800414e:	b004      	add	sp, #16
 8004150:	4770      	bx	lr
	...

08004154 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d165      	bne.n	8004234 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a41      	ldr	r2, [pc, #260]	; (8004270 <USB_SetTurnaroundTime+0x11c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d906      	bls.n	800417e <USB_SetTurnaroundTime+0x2a>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a40      	ldr	r2, [pc, #256]	; (8004274 <USB_SetTurnaroundTime+0x120>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d802      	bhi.n	800417e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004178:	230f      	movs	r3, #15
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e062      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4a3c      	ldr	r2, [pc, #240]	; (8004274 <USB_SetTurnaroundTime+0x120>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d906      	bls.n	8004194 <USB_SetTurnaroundTime+0x40>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4a3b      	ldr	r2, [pc, #236]	; (8004278 <USB_SetTurnaroundTime+0x124>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d802      	bhi.n	8004194 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800418e:	230e      	movs	r3, #14
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e057      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4a38      	ldr	r2, [pc, #224]	; (8004278 <USB_SetTurnaroundTime+0x124>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d906      	bls.n	80041aa <USB_SetTurnaroundTime+0x56>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4a37      	ldr	r2, [pc, #220]	; (800427c <USB_SetTurnaroundTime+0x128>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d802      	bhi.n	80041aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041a4:	230d      	movs	r3, #13
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e04c      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4a33      	ldr	r2, [pc, #204]	; (800427c <USB_SetTurnaroundTime+0x128>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d906      	bls.n	80041c0 <USB_SetTurnaroundTime+0x6c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4a32      	ldr	r2, [pc, #200]	; (8004280 <USB_SetTurnaroundTime+0x12c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d802      	bhi.n	80041c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041ba:	230c      	movs	r3, #12
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e041      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <USB_SetTurnaroundTime+0x12c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d906      	bls.n	80041d6 <USB_SetTurnaroundTime+0x82>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4a2e      	ldr	r2, [pc, #184]	; (8004284 <USB_SetTurnaroundTime+0x130>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d802      	bhi.n	80041d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041d0:	230b      	movs	r3, #11
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e036      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <USB_SetTurnaroundTime+0x130>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d906      	bls.n	80041ec <USB_SetTurnaroundTime+0x98>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4a29      	ldr	r2, [pc, #164]	; (8004288 <USB_SetTurnaroundTime+0x134>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d802      	bhi.n	80041ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041e6:	230a      	movs	r3, #10
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e02b      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4a26      	ldr	r2, [pc, #152]	; (8004288 <USB_SetTurnaroundTime+0x134>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d906      	bls.n	8004202 <USB_SetTurnaroundTime+0xae>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a25      	ldr	r2, [pc, #148]	; (800428c <USB_SetTurnaroundTime+0x138>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d802      	bhi.n	8004202 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041fc:	2309      	movs	r3, #9
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e020      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4a21      	ldr	r2, [pc, #132]	; (800428c <USB_SetTurnaroundTime+0x138>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d906      	bls.n	8004218 <USB_SetTurnaroundTime+0xc4>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <USB_SetTurnaroundTime+0x13c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d802      	bhi.n	8004218 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004212:	2308      	movs	r3, #8
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e015      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <USB_SetTurnaroundTime+0x13c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d906      	bls.n	800422e <USB_SetTurnaroundTime+0xda>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <USB_SetTurnaroundTime+0x140>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d802      	bhi.n	800422e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004228:	2307      	movs	r3, #7
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e00a      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800422e:	2306      	movs	r3, #6
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e007      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800423a:	2309      	movs	r3, #9
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e001      	b.n	8004244 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004240:	2309      	movs	r3, #9
 8004242:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	029b      	lsls	r3, r3, #10
 8004258:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	00d8acbf 	.word	0x00d8acbf
 8004274:	00e4e1bf 	.word	0x00e4e1bf
 8004278:	00f423ff 	.word	0x00f423ff
 800427c:	0106737f 	.word	0x0106737f
 8004280:	011a499f 	.word	0x011a499f
 8004284:	01312cff 	.word	0x01312cff
 8004288:	014ca43f 	.word	0x014ca43f
 800428c:	016e35ff 	.word	0x016e35ff
 8004290:	01a6ab1f 	.word	0x01a6ab1f
 8004294:	01e847ff 	.word	0x01e847ff

08004298 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f043 0201 	orr.w	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f023 0201 	bic.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d106      	bne.n	8004308 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60da      	str	r2, [r3, #12]
 8004306:	e00b      	b.n	8004320 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	e001      	b.n	8004320 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e003      	b.n	8004328 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004320:	2032      	movs	r0, #50	; 0x32
 8004322:	f7fd fa0f 	bl	8001744 <HAL_Delay>

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004330:	b084      	sub	sp, #16
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800433e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	e009      	b.n	8004364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3340      	adds	r3, #64	; 0x40
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3301      	adds	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b0e      	cmp	r3, #14
 8004368:	d9f2      	bls.n	8004350 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800436a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11c      	bne.n	80043aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437e:	f043 0302 	orr.w	r3, r3, #2
 8004382:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
 80043a8:	e00b      	b.n	80043c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043c8:	461a      	mov	r2, r3
 80043ca:	2300      	movs	r3, #0
 80043cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d4:	4619      	mov	r1, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043dc:	461a      	mov	r2, r3
 80043de:	680b      	ldr	r3, [r1, #0]
 80043e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10c      	bne.n	8004402 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043ee:	2100      	movs	r1, #0
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f949 	bl	8004688 <USB_SetDevSpeed>
 80043f6:	e008      	b.n	800440a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043f8:	2101      	movs	r1, #1
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f944 	bl	8004688 <USB_SetDevSpeed>
 8004400:	e003      	b.n	800440a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004402:	2103      	movs	r1, #3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f93f 	bl	8004688 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800440a:	2110      	movs	r1, #16
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f8f3 	bl	80045f8 <USB_FlushTxFifo>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f911 	bl	8004644 <USB_FlushRxFifo>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	461a      	mov	r2, r3
 8004440:	2300      	movs	r3, #0
 8004442:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	461a      	mov	r2, r3
 800444c:	2300      	movs	r3, #0
 800444e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e043      	b.n	80044de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800446c:	d118      	bne.n	80044a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	461a      	mov	r2, r3
 8004482:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e013      	b.n	80044b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	461a      	mov	r2, r3
 8004498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e008      	b.n	80044b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	2300      	movs	r3, #0
 80044b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044be:	461a      	mov	r2, r3
 80044c0:	2300      	movs	r3, #0
 80044c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	461a      	mov	r2, r3
 80044d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	3301      	adds	r3, #1
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3b7      	bcc.n	8004456 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	e043      	b.n	8004574 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004502:	d118      	bne.n	8004536 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	461a      	mov	r2, r3
 8004518:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e013      	b.n	8004548 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e008      	b.n	8004548 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004554:	461a      	mov	r2, r3
 8004556:	2300      	movs	r3, #0
 8004558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	461a      	mov	r2, r3
 8004568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800456c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	3301      	adds	r3, #1
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	429a      	cmp	r2, r3
 800457a:	d3b7      	bcc.n	80044ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800458e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800459c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <USB_DevInit+0x2c4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f043 0208 	orr.w	r2, r3, #8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045f0:	b004      	add	sp, #16
 80045f2:	4770      	bx	lr
 80045f4:	803c3800 	.word	0x803c3800

080045f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	f043 0220 	orr.w	r2, r3, #32
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a09      	ldr	r2, [pc, #36]	; (8004640 <USB_FlushTxFifo+0x48>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e006      	b.n	8004632 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b20      	cmp	r3, #32
 800462e:	d0f0      	beq.n	8004612 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	00030d40 	.word	0x00030d40

08004644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2210      	movs	r2, #16
 8004654:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3301      	adds	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <USB_FlushRxFifo+0x40>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e006      	b.n	8004676 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b10      	cmp	r3, #16
 8004672:	d0f0      	beq.n	8004656 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	00030d40 	.word	0x00030d40

08004688 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b087      	sub	sp, #28
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0306 	and.w	r3, r3, #6
 80046d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]
 80046de:	e00a      	b.n	80046f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d002      	beq.n	80046ec <USB_GetDevSpeed+0x32>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b06      	cmp	r3, #6
 80046ea:	d102      	bne.n	80046f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046ec:	2302      	movs	r3, #2
 80046ee:	75fb      	strb	r3, [r7, #23]
 80046f0:	e001      	b.n	80046f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046f2:	230f      	movs	r3, #15
 80046f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d13a      	bne.n	8004796 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	2101      	movs	r1, #1
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	b29b      	uxth	r3, r3
 8004738:	68f9      	ldr	r1, [r7, #12]
 800473a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800473e:	4313      	orrs	r3, r2
 8004740:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d155      	bne.n	8004804 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	78db      	ldrb	r3, [r3, #3]
 8004772:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004774:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	059b      	lsls	r3, r3, #22
 800477a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800477c:	4313      	orrs	r3, r2
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	e036      	b.n	8004804 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	68f9      	ldr	r1, [r7, #12]
 80047b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11a      	bne.n	8004804 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	78db      	ldrb	r3, [r3, #3]
 80047e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047ea:	430b      	orrs	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	0151      	lsls	r1, r2, #5
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	440a      	add	r2, r1
 80047f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004802:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d161      	bne.n	80048f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004846:	d11f      	bne.n	8004888 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	440a      	add	r2, r1
 800485e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004866:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	b29b      	uxth	r3, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a8:	4013      	ands	r3, r2
 80048aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f303 	lsl.w	r3, r1, r3
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048cc:	4013      	ands	r3, r2
 80048ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	0159      	lsls	r1, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	440b      	add	r3, r1
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	4619      	mov	r1, r3
 80048ec:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <USB_DeactivateEndpoint+0x1b0>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]
 80048f2:	e060      	b.n	80049b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800490a:	d11f      	bne.n	800494c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	440a      	add	r2, r1
 8004922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800492a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800494a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	43db      	mvns	r3, r3
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800496c:	4013      	ands	r3, r2
 800496e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	43db      	mvns	r3, r3
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004990:	4013      	ands	r3, r2
 8004992:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	0159      	lsls	r1, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	440b      	add	r3, r1
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	4619      	mov	r1, r3
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <USB_DeactivateEndpoint+0x1b4>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	ec337800 	.word	0xec337800
 80049c8:	eff37800 	.word	0xeff37800

080049cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	f040 815c 	bne.w	8004ca6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d132      	bne.n	8004a5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	0151      	lsls	r1, r2, #5
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	440a      	add	r2, r1
 8004a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a54:	0cdb      	lsrs	r3, r3, #19
 8004a56:	04db      	lsls	r3, r3, #19
 8004a58:	6113      	str	r3, [r2, #16]
 8004a5a:	e074      	b.n	8004b46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	0cdb      	lsrs	r3, r3, #19
 8004a78:	04db      	lsls	r3, r3, #19
 8004a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6959      	ldr	r1, [r3, #20]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	440b      	add	r3, r1
 8004ab8:	1e59      	subs	r1, r3, #1
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac2:	04d9      	lsls	r1, r3, #19
 8004ac4:	4b9d      	ldr	r3, [pc, #628]	; (8004d3c <USB_EPStartXfer+0x370>)
 8004ac6:	400b      	ands	r3, r1
 8004ac8:	69b9      	ldr	r1, [r7, #24]
 8004aca:	0148      	lsls	r0, r1, #5
 8004acc:	69f9      	ldr	r1, [r7, #28]
 8004ace:	4401      	add	r1, r0
 8004ad0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aee:	69b9      	ldr	r1, [r7, #24]
 8004af0:	0148      	lsls	r0, r1, #5
 8004af2:	69f9      	ldr	r1, [r7, #28]
 8004af4:	4401      	add	r1, r0
 8004af6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004afa:	4313      	orrs	r3, r2
 8004afc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	78db      	ldrb	r3, [r3, #3]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d11f      	bne.n	8004b46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	0151      	lsls	r1, r2, #5
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	440a      	add	r2, r1
 8004b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d14b      	bne.n	8004be4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	461a      	mov	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	78db      	ldrb	r3, [r3, #3]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d128      	bne.n	8004bc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d110      	bne.n	8004ba2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	e00f      	b.n	8004bc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	0151      	lsls	r1, r2, #5
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	440a      	add	r2, r1
 8004bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e12f      	b.n	8004e44 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	78db      	ldrb	r3, [r3, #3]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d015      	beq.n	8004c38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8117 	beq.w	8004e44 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	69f9      	ldr	r1, [r7, #28]
 8004c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c32:	4313      	orrs	r3, r2
 8004c34:	634b      	str	r3, [r1, #52]	; 0x34
 8004c36:	e105      	b.n	8004e44 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d110      	bne.n	8004c6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e00f      	b.n	8004c8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	68d9      	ldr	r1, [r3, #12]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	b298      	uxth	r0, r3
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fa2b 	bl	80050fa <USB_WritePacket>
 8004ca4:	e0ce      	b.n	8004e44 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc0:	0cdb      	lsrs	r3, r3, #19
 8004cc2:	04db      	lsls	r3, r3, #19
 8004cc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ce4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ce8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d126      	bne.n	8004d40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d08:	69b9      	ldr	r1, [r7, #24]
 8004d0a:	0148      	lsls	r0, r1, #5
 8004d0c:	69f9      	ldr	r1, [r7, #28]
 8004d0e:	4401      	add	r1, r0
 8004d10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d14:	4313      	orrs	r3, r2
 8004d16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d36:	6113      	str	r3, [r2, #16]
 8004d38:	e036      	b.n	8004da8 <USB_EPStartXfer+0x3dc>
 8004d3a:	bf00      	nop
 8004d3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	4413      	add	r3, r2
 8004d4a:	1e5a      	subs	r2, r3, #1
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	8afb      	ldrh	r3, [r7, #22]
 8004d66:	04d9      	lsls	r1, r3, #19
 8004d68:	4b39      	ldr	r3, [pc, #228]	; (8004e50 <USB_EPStartXfer+0x484>)
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	69b9      	ldr	r1, [r7, #24]
 8004d6e:	0148      	lsls	r0, r1, #5
 8004d70:	69f9      	ldr	r1, [r7, #28]
 8004d72:	4401      	add	r1, r0
 8004d74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	8af9      	ldrh	r1, [r7, #22]
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	0148      	lsls	r0, r1, #5
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	4401      	add	r1, r0
 8004da0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d10d      	bne.n	8004dca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	68d9      	ldr	r1, [r3, #12]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	78db      	ldrb	r3, [r3, #3]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d128      	bne.n	8004e24 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d110      	bne.n	8004e04 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e00f      	b.n	8004e24 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	1ff80000 	.word	0x1ff80000

08004e54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 80cd 	bne.w	8005010 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d132      	bne.n	8004ee4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	0151      	lsls	r1, r2, #5
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	440a      	add	r2, r1
 8004ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004edc:	0cdb      	lsrs	r3, r3, #19
 8004ede:	04db      	lsls	r3, r3, #19
 8004ee0:	6113      	str	r3, [r2, #16]
 8004ee2:	e04e      	b.n	8004f82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efe:	0cdb      	lsrs	r3, r3, #19
 8004f00:	04db      	lsls	r3, r3, #19
 8004f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d903      	bls.n	8004f3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f72:	6939      	ldr	r1, [r7, #16]
 8004f74:	0148      	lsls	r0, r1, #5
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	4401      	add	r1, r0
 8004f7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d11e      	bne.n	8004fc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e092      	b.n	80050ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d07e      	beq.n	80050ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	2101      	movs	r1, #1
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800500a:	4313      	orrs	r3, r2
 800500c:	634b      	str	r3, [r1, #52]	; 0x34
 800500e:	e06d      	b.n	80050ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502a:	0cdb      	lsrs	r3, r3, #19
 800502c:	04db      	lsls	r3, r3, #19
 800502e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005052:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005082:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509a:	6939      	ldr	r1, [r7, #16]
 800509c:	0148      	lsls	r0, r1, #5
 800509e:	6979      	ldr	r1, [r7, #20]
 80050a0:	4401      	add	r1, r0
 80050a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050a6:	4313      	orrs	r3, r2
 80050a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10d      	bne.n	80050cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d009      	beq.n	80050cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	68d9      	ldr	r1, [r3, #12]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	460a      	mov	r2, r1
 80050ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b089      	sub	sp, #36	; 0x24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	4611      	mov	r1, r2
 8005106:	461a      	mov	r2, r3
 8005108:	460b      	mov	r3, r1
 800510a:	71fb      	strb	r3, [r7, #7]
 800510c:	4613      	mov	r3, r2
 800510e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005118:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11a      	bne.n	8005156 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005120:	88bb      	ldrh	r3, [r7, #4]
 8005122:	3303      	adds	r3, #3
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e00f      	b.n	800514e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	031a      	lsls	r2, r3, #12
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	4413      	add	r3, r2
 8005136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513a:	461a      	mov	r2, r3
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3304      	adds	r3, #4
 8005146:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	3301      	adds	r3, #1
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	429a      	cmp	r2, r3
 8005154:	d3eb      	bcc.n	800512e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3724      	adds	r7, #36	; 0x24
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	3303      	adds	r3, #3
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	e00b      	b.n	80051a0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	601a      	str	r2, [r3, #0]
    pDest++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3304      	adds	r3, #4
 8005198:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	3301      	adds	r3, #1
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3ef      	bcc.n	8005188 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80051a8:	69fb      	ldr	r3, [r7, #28]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3724      	adds	r7, #36	; 0x24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	785b      	ldrb	r3, [r3, #1]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d12c      	bne.n	800522c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	db12      	blt.n	800520a <USB_EPSetStall+0x54>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00f      	beq.n	800520a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	0151      	lsls	r1, r2, #5
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	440a      	add	r2, r1
 8005200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005204:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005208:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e02b      	b.n	8005284 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	db12      	blt.n	8005264 <USB_EPSetStall+0xae>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00f      	beq.n	8005264 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005262:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005282:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d128      	bne.n	8005300 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	78db      	ldrb	r3, [r3, #3]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d003      	beq.n	80052de <USB_EPClearStall+0x4c>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	78db      	ldrb	r3, [r3, #3]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d138      	bne.n	8005350 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e027      	b.n	8005350 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800531e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	78db      	ldrb	r3, [r3, #3]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d003      	beq.n	8005330 <USB_EPClearStall+0x9e>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	78db      	ldrb	r3, [r3, #3]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d10f      	bne.n	8005350 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005380:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053c4:	f023 0303 	bic.w	r3, r3, #3
 80053c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d8:	f023 0302 	bic.w	r3, r3, #2
 80053dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005446:	68fb      	ldr	r3, [r7, #12]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	0c1b      	lsrs	r3, r3, #16
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4013      	ands	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	b29b      	uxth	r3, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054ea:	68bb      	ldr	r3, [r7, #8]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
 8005528:	01db      	lsls	r3, r3, #7
 800552a:	b2db      	uxtb	r3, r3
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4013      	ands	r3, r2
 8005544:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005546:	68bb      	ldr	r3, [r7, #8]
}
 8005548:	4618      	mov	r0, r3
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	f003 0301 	and.w	r3, r3, #1
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	460b      	mov	r3, r1
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	333c      	adds	r3, #60	; 0x3c
 80055ce:	3304      	adds	r3, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	4a26      	ldr	r2, [pc, #152]	; (8005670 <USB_EP0_OutStart+0xb8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d90a      	bls.n	80055f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ec:	d101      	bne.n	80055f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e037      	b.n	8005662 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	461a      	mov	r2, r3
 80055fa:	2300      	movs	r3, #0
 80055fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005620:	f043 0318 	orr.w	r3, r3, #24
 8005624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005634:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005638:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800563a:	7afb      	ldrb	r3, [r7, #11]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d10f      	bne.n	8005660 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	461a      	mov	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800565e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	4f54300a 	.word	0x4f54300a

08005674 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3301      	adds	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <USB_CoreReset+0x64>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e01b      	b.n	80056ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	daf2      	bge.n	8005680 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <USB_CoreReset+0x64>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e006      	b.n	80056ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d0f0      	beq.n	80056aa <USB_CoreReset+0x36>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	00030d40 	.word	0x00030d40

080056dc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80056e8:	2010      	movs	r0, #16
 80056ea:	f001 ff0f 	bl	800750c <malloc>
 80056ee:	4603      	mov	r3, r0
 80056f0:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005700:	2302      	movs	r3, #2
 8005702:	e01b      	b.n	800573c <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7c1b      	ldrb	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2207      	movs	r2, #7
 8005718:	875a      	strh	r2, [r3, #58]	; 0x3a
 800571a:	e002      	b.n	8005722 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	220a      	movs	r2, #10
 8005720:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005722:	2304      	movs	r3, #4
 8005724:	2203      	movs	r2, #3
 8005726:	2181      	movs	r1, #129	; 0x81
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 fd88 	bl	800723e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005750:	2181      	movs	r1, #129	; 0x81
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fd99 	bl	800728a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fed1 	bl	800751c <free>
    pdev->pClassData = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800579c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d045      	beq.n	800583e <USBD_HID_Setup+0xb2>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	f040 80d4 	bne.w	8005960 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	3b02      	subs	r3, #2
 80057be:	2b09      	cmp	r3, #9
 80057c0:	d835      	bhi.n	800582e <USBD_HID_Setup+0xa2>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <USBD_HID_Setup+0x3c>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	0800581f 	.word	0x0800581f
 80057cc:	080057ff 	.word	0x080057ff
 80057d0:	0800582f 	.word	0x0800582f
 80057d4:	0800582f 	.word	0x0800582f
 80057d8:	0800582f 	.word	0x0800582f
 80057dc:	0800582f 	.word	0x0800582f
 80057e0:	0800582f 	.word	0x0800582f
 80057e4:	0800582f 	.word	0x0800582f
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	080057f1 	.word	0x080057f1
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	885b      	ldrh	r3, [r3, #2]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]
      break;
 80057fc:	e01e      	b.n	800583c <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 f9c8 	bl	8006b9a <USBD_CtlSendData>
      break;
 800580a:	e017      	b.n	800583c <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	885b      	ldrh	r3, [r3, #2]
 8005810:	0a1b      	lsrs	r3, r3, #8
 8005812:	b29b      	uxth	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	605a      	str	r2, [r3, #4]
      break;
 800581c:	e00e      	b.n	800583c <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3304      	adds	r3, #4
 8005822:	2201      	movs	r2, #1
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 f9b7 	bl	8006b9a <USBD_CtlSendData>
      break;
 800582c:	e006      	b.n	800583c <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 f941 	bl	8006ab8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005836:	2303      	movs	r3, #3
 8005838:	75fb      	strb	r3, [r7, #23]
      break;
 800583a:	bf00      	nop
    }
    break;
 800583c:	e097      	b.n	800596e <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b0b      	cmp	r3, #11
 8005844:	f200 8083 	bhi.w	800594e <USBD_HID_Setup+0x1c2>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <USBD_HID_Setup+0xc4>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005881 	.word	0x08005881
 8005854:	0800595d 	.word	0x0800595d
 8005858:	0800594f 	.word	0x0800594f
 800585c:	0800594f 	.word	0x0800594f
 8005860:	0800594f 	.word	0x0800594f
 8005864:	0800594f 	.word	0x0800594f
 8005868:	080058a9 	.word	0x080058a9
 800586c:	0800594f 	.word	0x0800594f
 8005870:	0800594f 	.word	0x0800594f
 8005874:	0800594f 	.word	0x0800594f
 8005878:	08005901 	.word	0x08005901
 800587c:	08005929 	.word	0x08005929
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005886:	2b03      	cmp	r3, #3
 8005888:	d107      	bne.n	800589a <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800588a:	f107 030a 	add.w	r3, r7, #10
 800588e:	2202      	movs	r2, #2
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 f981 	bl	8006b9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005898:	e061      	b.n	800595e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 f90b 	bl	8006ab8 <USBD_CtlError>
        ret = USBD_FAIL;
 80058a2:	2303      	movs	r3, #3
 80058a4:	75fb      	strb	r3, [r7, #23]
      break;
 80058a6:	e05a      	b.n	800595e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	885b      	ldrh	r3, [r3, #2]
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b22      	cmp	r3, #34	; 0x22
 80058b2:	d108      	bne.n	80058c6 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	88db      	ldrh	r3, [r3, #6]
 80058b8:	2b4a      	cmp	r3, #74	; 0x4a
 80058ba:	bf28      	it	cs
 80058bc:	234a      	movcs	r3, #74	; 0x4a
 80058be:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 80058c0:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <USBD_HID_Setup+0x1ec>)
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	e015      	b.n	80058f2 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	885b      	ldrh	r3, [r3, #2]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b21      	cmp	r3, #33	; 0x21
 80058d0:	d108      	bne.n	80058e4 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 80058d2:	4b2a      	ldr	r3, [pc, #168]	; (800597c <USBD_HID_Setup+0x1f0>)
 80058d4:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	88db      	ldrh	r3, [r3, #6]
 80058da:	2b09      	cmp	r3, #9
 80058dc:	bf28      	it	cs
 80058de:	2309      	movcs	r3, #9
 80058e0:	82bb      	strh	r3, [r7, #20]
 80058e2:	e006      	b.n	80058f2 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 f8e6 	bl	8006ab8 <USBD_CtlError>
        ret = USBD_FAIL;
 80058ec:	2303      	movs	r3, #3
 80058ee:	75fb      	strb	r3, [r7, #23]
        break;
 80058f0:	e035      	b.n	800595e <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058f2:	8abb      	ldrh	r3, [r7, #20]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6939      	ldr	r1, [r7, #16]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 f94e 	bl	8006b9a <USBD_CtlSendData>
      break;
 80058fe:	e02e      	b.n	800595e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005906:	2b03      	cmp	r3, #3
 8005908:	d107      	bne.n	800591a <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3308      	adds	r3, #8
 800590e:	2201      	movs	r2, #1
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 f941 	bl	8006b9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005918:	e021      	b.n	800595e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 f8cb 	bl	8006ab8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005922:	2303      	movs	r3, #3
 8005924:	75fb      	strb	r3, [r7, #23]
      break;
 8005926:	e01a      	b.n	800595e <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800592e:	2b03      	cmp	r3, #3
 8005930:	d106      	bne.n	8005940 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	885b      	ldrh	r3, [r3, #2]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800593e:	e00e      	b.n	800595e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f8b8 	bl	8006ab8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005948:	2303      	movs	r3, #3
 800594a:	75fb      	strb	r3, [r7, #23]
      break;
 800594c:	e007      	b.n	800595e <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f001 f8b1 	bl	8006ab8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005956:	2303      	movs	r3, #3
 8005958:	75fb      	strb	r3, [r7, #23]
      break;
 800595a:	e000      	b.n	800595e <USBD_HID_Setup+0x1d2>
      break;
 800595c:	bf00      	nop
    }
    break;
 800595e:	e006      	b.n	800596e <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 f8a8 	bl	8006ab8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005968:	2303      	movs	r3, #3
 800596a:	75fb      	strb	r3, [r7, #23]
    break;
 800596c:	bf00      	nop
  }

  return (uint8_t)ret;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	200000c8 	.word	0x200000c8
 800597c:	200000b0 	.word	0x200000b0

08005980 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005994:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599c:	2b03      	cmp	r3, #3
 800599e:	d10c      	bne.n	80059ba <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	7b1b      	ldrb	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d108      	bne.n	80059ba <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2201      	movs	r2, #1
 80059ac:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	2181      	movs	r1, #129	; 0x81
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f001 fd10 	bl	80073da <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7c1b      	ldrb	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 80059d4:	2308      	movs	r3, #8
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e001      	b.n	80059de <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 80059da:	230a      	movs	r3, #10
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 80059de:	68fb      	ldr	r3, [r7, #12]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2222      	movs	r2, #34	; 0x22
 80059f8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80059fa:	4b03      	ldr	r3, [pc, #12]	; (8005a08 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	20000044 	.word	0x20000044

08005a0c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2222      	movs	r2, #34	; 0x22
 8005a18:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005a1a:	4b03      	ldr	r3, [pc, #12]	; (8005a28 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	20000068 	.word	0x20000068

08005a2c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2222      	movs	r2, #34	; 0x22
 8005a38:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005a3a:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	2000008c 	.word	0x2000008c

08005a4c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a5e:	2200      	movs	r2, #0
 8005a60:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	220a      	movs	r2, #10
 8005a7c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005a7e:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	200000bc 	.word	0x200000bc

08005a90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e025      	b.n	8005af4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	79fa      	ldrb	r2, [r7, #7]
 8005ae6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f001 fb41 	bl	8007170 <USBD_LL_Init>
 8005aee:	4603      	mov	r3, r0
 8005af0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e010      	b.n	8005b36 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	f107 020e 	add.w	r2, r7, #14
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4798      	blx	r3
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fb5e 	bl	8007208 <USBD_LL_Start>
 8005b4c:	4603      	mov	r3, r0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	4611      	mov	r1, r2
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
  }

  return USBD_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 ff2c 	bl	8006a44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d00e      	beq.n	8005c2e <USBD_LL_SetupStage+0x5a>
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d302      	bcc.n	8005c1a <USBD_LL_SetupStage+0x46>
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d014      	beq.n	8005c42 <USBD_LL_SetupStage+0x6e>
 8005c18:	e01d      	b.n	8005c56 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa18 	bl	8006058 <USBD_StdDevReq>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e020      	b.n	8005c70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa7c 	bl	8006134 <USBD_StdItfReq>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c40:	e016      	b.n	8005c70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fab8 	bl	80061c0 <USBD_StdEPReq>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]
      break;
 8005c54:	e00c      	b.n	8005c70 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fb2f 	bl	80072c8 <USBD_LL_StallEP>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c6e:	bf00      	nop
  }

  return ret;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	460b      	mov	r3, r1
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c88:	7afb      	ldrb	r3, [r7, #11]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d137      	bne.n	8005cfe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d14a      	bne.n	8005d36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d913      	bls.n	8005cd4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	1ad2      	subs	r2, r2, r3
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	bf28      	it	cs
 8005cc6:	4613      	movcs	r3, r2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 ff90 	bl	8006bf2 <USBD_CtlContinueRx>
 8005cd2:	e030      	b.n	8005d36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d105      	bne.n	8005cf6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 ff8c 	bl	8006c14 <USBD_CtlSendStatus>
 8005cfc:	e01b      	b.n	8005d36 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d013      	beq.n	8005d32 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d10e      	bne.n	8005d32 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	7afa      	ldrb	r2, [r7, #11]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	4798      	blx	r3
 8005d24:	4603      	mov	r3, r0
 8005d26:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	e002      	b.n	8005d38 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e000      	b.n	8005d38 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d16a      	bne.n	8005e2a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3314      	adds	r3, #20
 8005d58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d155      	bne.n	8005e10 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d914      	bls.n	8005d9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	1ad2      	subs	r2, r2, r3
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	461a      	mov	r2, r3
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 ff22 	bl	8006bd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2100      	movs	r1, #0
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f001 fb42 	bl	800741c <USBD_LL_PrepareReceive>
 8005d98:	e03a      	b.n	8005e10 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d11c      	bne.n	8005de0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d316      	bcc.n	8005de0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d20f      	bcs.n	8005de0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 ff03 	bl	8006bd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f001 fb1f 	bl	800741c <USBD_LL_PrepareReceive>
 8005dde:	e017      	b.n	8005e10 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d105      	bne.n	8005e02 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f001 fa5f 	bl	80072c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 ff15 	bl	8006c3a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d123      	bne.n	8005e62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fe9b 	bl	8005b56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e28:	e01b      	b.n	8005e62 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d013      	beq.n	8005e5e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d10e      	bne.n	8005e5e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	7afa      	ldrb	r2, [r7, #11]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	4798      	blx	r3
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	e002      	b.n	8005e64 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e000      	b.n	8005e64 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6852      	ldr	r2, [r2, #4]
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	4611      	mov	r1, r2
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eb0:	2340      	movs	r3, #64	; 0x40
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 f9c1 	bl	800723e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ecc:	2340      	movs	r3, #64	; 0x40
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2180      	movs	r1, #128	; 0x80
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 f9b3 	bl	800723e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2240      	movs	r2, #64	; 0x40
 8005ee2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2204      	movs	r2, #4
 8005f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d105      	bne.n	8005f56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d10b      	bne.n	8005f8e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6852      	ldr	r2, [r2, #4]
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	4611      	mov	r1, r2
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
  }

  return USBD_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006038:	8a3b      	ldrh	r3, [r7, #16]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	b21a      	sxth	r2, r3
 800603e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006042:	4313      	orrs	r3, r2
 8006044:	b21b      	sxth	r3, r3
 8006046:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006048:	89fb      	ldrh	r3, [r7, #14]
}
 800604a:	4618      	mov	r0, r3
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
	...

08006058 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800606e:	2b20      	cmp	r3, #32
 8006070:	d004      	beq.n	800607c <USBD_StdDevReq+0x24>
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d002      	beq.n	800607c <USBD_StdDevReq+0x24>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <USBD_StdDevReq+0x38>
 800607a:	e050      	b.n	800611e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
 800608a:	4603      	mov	r3, r0
 800608c:	73fb      	strb	r3, [r7, #15]
    break;
 800608e:	e04b      	b.n	8006128 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b09      	cmp	r3, #9
 8006096:	d83c      	bhi.n	8006112 <USBD_StdDevReq+0xba>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <USBD_StdDevReq+0x48>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	08006109 	.word	0x08006109
 80060a8:	08006113 	.word	0x08006113
 80060ac:	080060ff 	.word	0x080060ff
 80060b0:	08006113 	.word	0x08006113
 80060b4:	080060d3 	.word	0x080060d3
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	08006113 	.word	0x08006113
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060dd 	.word	0x080060dd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9ce 	bl	800646c <USBD_GetDescriptor>
      break;
 80060d0:	e024      	b.n	800611c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fb33 	bl	8006740 <USBD_SetAddress>
      break;
 80060da:	e01f      	b.n	800611c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fb70 	bl	80067c4 <USBD_SetConfig>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]
      break;
 80060e8:	e018      	b.n	800611c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fc0d 	bl	800690c <USBD_GetConfig>
      break;
 80060f2:	e013      	b.n	800611c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fc3c 	bl	8006974 <USBD_GetStatus>
      break;
 80060fc:	e00e      	b.n	800611c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fc6a 	bl	80069da <USBD_SetFeature>
      break;
 8006106:	e009      	b.n	800611c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fc79 	bl	8006a02 <USBD_ClrFeature>
      break;
 8006110:	e004      	b.n	800611c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fccf 	bl	8006ab8 <USBD_CtlError>
      break;
 800611a:	bf00      	nop
    }
    break;
 800611c:	e004      	b.n	8006128 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fcc9 	bl	8006ab8 <USBD_CtlError>
    break;
 8006126:	bf00      	nop
  }

  return ret;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop

08006134 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800614a:	2b20      	cmp	r3, #32
 800614c:	d003      	beq.n	8006156 <USBD_StdItfReq+0x22>
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d001      	beq.n	8006156 <USBD_StdItfReq+0x22>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d12a      	bne.n	80061ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615c:	3b01      	subs	r3, #1
 800615e:	2b02      	cmp	r3, #2
 8006160:	d81d      	bhi.n	800619e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	889b      	ldrh	r3, [r3, #4]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d813      	bhi.n	8006194 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
 800617a:	4603      	mov	r3, r0
 800617c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	88db      	ldrh	r3, [r3, #6]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d110      	bne.n	80061a8 <USBD_StdItfReq+0x74>
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10d      	bne.n	80061a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fd41 	bl	8006c14 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006192:	e009      	b.n	80061a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fc8e 	bl	8006ab8 <USBD_CtlError>
      break;
 800619c:	e004      	b.n	80061a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fc89 	bl	8006ab8 <USBD_CtlError>
      break;
 80061a6:	e000      	b.n	80061aa <USBD_StdItfReq+0x76>
      break;
 80061a8:	bf00      	nop
    }
    break;
 80061aa:	e004      	b.n	80061b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fc82 	bl	8006ab8 <USBD_CtlError>
    break;
 80061b4:	bf00      	nop
  }

  return ret;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	889b      	ldrh	r3, [r3, #4]
 80061d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d004      	beq.n	80061ea <USBD_StdEPReq+0x2a>
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d002      	beq.n	80061ea <USBD_StdEPReq+0x2a>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <USBD_StdEPReq+0x3e>
 80061e8:	e135      	b.n	8006456 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]
    break;
 80061fc:	e130      	b.n	8006460 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d03e      	beq.n	8006284 <USBD_StdEPReq+0xc4>
 8006206:	2b03      	cmp	r3, #3
 8006208:	d002      	beq.n	8006210 <USBD_StdEPReq+0x50>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d077      	beq.n	80062fe <USBD_StdEPReq+0x13e>
 800620e:	e11c      	b.n	800644a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006216:	2b02      	cmp	r3, #2
 8006218:	d002      	beq.n	8006220 <USBD_StdEPReq+0x60>
 800621a:	2b03      	cmp	r3, #3
 800621c:	d015      	beq.n	800624a <USBD_StdEPReq+0x8a>
 800621e:	e02b      	b.n	8006278 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006220:	7bbb      	ldrb	r3, [r7, #14]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <USBD_StdEPReq+0x80>
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	2b80      	cmp	r3, #128	; 0x80
 800622a:	d009      	beq.n	8006240 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 f849 	bl	80072c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 f845 	bl	80072c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800623e:	e020      	b.n	8006282 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fc38 	bl	8006ab8 <USBD_CtlError>
        break;
 8006248:	e01b      	b.n	8006282 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	885b      	ldrh	r3, [r3, #2]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10e      	bne.n	8006270 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <USBD_StdEPReq+0xb0>
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	d008      	beq.n	8006270 <USBD_StdEPReq+0xb0>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	88db      	ldrh	r3, [r3, #6]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d104      	bne.n	8006270 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 f82c 	bl	80072c8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fccf 	bl	8006c14 <USBD_CtlSendStatus>

        break;
 8006276:	e004      	b.n	8006282 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fc1c 	bl	8006ab8 <USBD_CtlError>
        break;
 8006280:	bf00      	nop
      }
      break;
 8006282:	e0e7      	b.n	8006454 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800628a:	2b02      	cmp	r3, #2
 800628c:	d002      	beq.n	8006294 <USBD_StdEPReq+0xd4>
 800628e:	2b03      	cmp	r3, #3
 8006290:	d015      	beq.n	80062be <USBD_StdEPReq+0xfe>
 8006292:	e02d      	b.n	80062f0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00c      	beq.n	80062b4 <USBD_StdEPReq+0xf4>
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	2b80      	cmp	r3, #128	; 0x80
 800629e:	d009      	beq.n	80062b4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f80f 	bl	80072c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062aa:	2180      	movs	r1, #128	; 0x80
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 f80b 	bl	80072c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80062b2:	e023      	b.n	80062fc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fbfe 	bl	8006ab8 <USBD_CtlError>
        break;
 80062bc:	e01e      	b.n	80062fc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	885b      	ldrh	r3, [r3, #2]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d119      	bne.n	80062fa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f816 	bl	8007306 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fc9a 	bl	8006c14 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
        }
        break;
 80062ee:	e004      	b.n	80062fa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fbe0 	bl	8006ab8 <USBD_CtlError>
        break;
 80062f8:	e000      	b.n	80062fc <USBD_StdEPReq+0x13c>
        break;
 80062fa:	bf00      	nop
      }
      break;
 80062fc:	e0aa      	b.n	8006454 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	2b02      	cmp	r3, #2
 8006306:	d002      	beq.n	800630e <USBD_StdEPReq+0x14e>
 8006308:	2b03      	cmp	r3, #3
 800630a:	d032      	beq.n	8006372 <USBD_StdEPReq+0x1b2>
 800630c:	e097      	b.n	800643e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <USBD_StdEPReq+0x164>
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	2b80      	cmp	r3, #128	; 0x80
 8006318:	d004      	beq.n	8006324 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fbcb 	bl	8006ab8 <USBD_CtlError>
          break;
 8006322:	e091      	b.n	8006448 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006328:	2b00      	cmp	r3, #0
 800632a:	da0b      	bge.n	8006344 <USBD_StdEPReq+0x184>
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	3310      	adds	r3, #16
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4413      	add	r3, r2
 8006340:	3304      	adds	r3, #4
 8006342:	e00b      	b.n	800635c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	3304      	adds	r3, #4
 800635c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2202      	movs	r2, #2
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fc15 	bl	8006b9a <USBD_CtlSendData>
        break;
 8006370:	e06a      	b.n	8006448 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	da11      	bge.n	800639e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	f003 020f 	and.w	r2, r3, #15
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	440b      	add	r3, r1
 800638c:	3324      	adds	r3, #36	; 0x24
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d117      	bne.n	80063c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fb8e 	bl	8006ab8 <USBD_CtlError>
            break;
 800639c:	e054      	b.n	8006448 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fb7b 	bl	8006ab8 <USBD_CtlError>
            break;
 80063c2:	e041      	b.n	8006448 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	da0b      	bge.n	80063e4 <USBD_StdEPReq+0x224>
 80063cc:	7bbb      	ldrb	r3, [r7, #14]
 80063ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	3310      	adds	r3, #16
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	4413      	add	r3, r2
 80063e0:	3304      	adds	r3, #4
 80063e2:	e00b      	b.n	80063fc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	4413      	add	r3, r2
 80063fa:	3304      	adds	r3, #4
 80063fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <USBD_StdEPReq+0x24a>
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d103      	bne.n	8006412 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e00e      	b.n	8006430 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 ff94 	bl	8007344 <USBD_LL_IsStallEP>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	e002      	b.n	8006430 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2202      	movs	r2, #2
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fbaf 	bl	8006b9a <USBD_CtlSendData>
          break;
 800643c:	e004      	b.n	8006448 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fb39 	bl	8006ab8 <USBD_CtlError>
        break;
 8006446:	bf00      	nop
      }
      break;
 8006448:	e004      	b.n	8006454 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fb33 	bl	8006ab8 <USBD_CtlError>
      break;
 8006452:	bf00      	nop
    }
    break;
 8006454:	e004      	b.n	8006460 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fb2d 	bl	8006ab8 <USBD_CtlError>
    break;
 800645e:	bf00      	nop
  }

  return ret;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	885b      	ldrh	r3, [r3, #2]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	2b06      	cmp	r3, #6
 800648e:	f200 8128 	bhi.w	80066e2 <USBD_GetDescriptor+0x276>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <USBD_GetDescriptor+0x2c>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064b5 	.word	0x080064b5
 800649c:	080064cd 	.word	0x080064cd
 80064a0:	0800650d 	.word	0x0800650d
 80064a4:	080066e3 	.word	0x080066e3
 80064a8:	080066e3 	.word	0x080066e3
 80064ac:	08006683 	.word	0x08006683
 80064b0:	080066af 	.word	0x080066af
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	7c12      	ldrb	r2, [r2, #16]
 80064c0:	f107 0108 	add.w	r1, r7, #8
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
 80064c8:	60f8      	str	r0, [r7, #12]
    break;
 80064ca:	e112      	b.n	80066f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	7c1b      	ldrb	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10d      	bne.n	80064f0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	f107 0208 	add.w	r2, r7, #8
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
 80064e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	2202      	movs	r2, #2
 80064ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80064ee:	e100      	b.n	80066f2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	f107 0208 	add.w	r2, r7, #8
 80064fc:	4610      	mov	r0, r2
 80064fe:	4798      	blx	r3
 8006500:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	2202      	movs	r2, #2
 8006508:	701a      	strb	r2, [r3, #0]
    break;
 800650a:	e0f2      	b.n	80066f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	885b      	ldrh	r3, [r3, #2]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b05      	cmp	r3, #5
 8006514:	f200 80ac 	bhi.w	8006670 <USBD_GetDescriptor+0x204>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <USBD_GetDescriptor+0xb4>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006539 	.word	0x08006539
 8006524:	0800656d 	.word	0x0800656d
 8006528:	080065a1 	.word	0x080065a1
 800652c:	080065d5 	.word	0x080065d5
 8006530:	08006609 	.word	0x08006609
 8006534:	0800663d 	.word	0x0800663d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	7c12      	ldrb	r2, [r2, #16]
 8006550:	f107 0108 	add.w	r1, r7, #8
 8006554:	4610      	mov	r0, r2
 8006556:	4798      	blx	r3
 8006558:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800655a:	e091      	b.n	8006680 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 faaa 	bl	8006ab8 <USBD_CtlError>
        err++;
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	3301      	adds	r3, #1
 8006568:	72fb      	strb	r3, [r7, #11]
      break;
 800656a:	e089      	b.n	8006680 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	7c12      	ldrb	r2, [r2, #16]
 8006584:	f107 0108 	add.w	r1, r7, #8
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800658e:	e077      	b.n	8006680 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa90 	bl	8006ab8 <USBD_CtlError>
        err++;
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	3301      	adds	r3, #1
 800659c:	72fb      	strb	r3, [r7, #11]
      break;
 800659e:	e06f      	b.n	8006680 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	7c12      	ldrb	r2, [r2, #16]
 80065b8:	f107 0108 	add.w	r1, r7, #8
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
 80065c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065c2:	e05d      	b.n	8006680 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa76 	bl	8006ab8 <USBD_CtlError>
        err++;
 80065cc:	7afb      	ldrb	r3, [r7, #11]
 80065ce:	3301      	adds	r3, #1
 80065d0:	72fb      	strb	r3, [r7, #11]
      break;
 80065d2:	e055      	b.n	8006680 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	7c12      	ldrb	r2, [r2, #16]
 80065ec:	f107 0108 	add.w	r1, r7, #8
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
 80065f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065f6:	e043      	b.n	8006680 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa5c 	bl	8006ab8 <USBD_CtlError>
        err++;
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	3301      	adds	r3, #1
 8006604:	72fb      	strb	r3, [r7, #11]
      break;
 8006606:	e03b      	b.n	8006680 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	7c12      	ldrb	r2, [r2, #16]
 8006620:	f107 0108 	add.w	r1, r7, #8
 8006624:	4610      	mov	r0, r2
 8006626:	4798      	blx	r3
 8006628:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800662a:	e029      	b.n	8006680 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa42 	bl	8006ab8 <USBD_CtlError>
        err++;
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	3301      	adds	r3, #1
 8006638:	72fb      	strb	r3, [r7, #11]
      break;
 800663a:	e021      	b.n	8006680 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	7c12      	ldrb	r2, [r2, #16]
 8006654:	f107 0108 	add.w	r1, r7, #8
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
 800665c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800665e:	e00f      	b.n	8006680 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa28 	bl	8006ab8 <USBD_CtlError>
        err++;
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	3301      	adds	r3, #1
 800666c:	72fb      	strb	r3, [r7, #11]
      break;
 800666e:	e007      	b.n	8006680 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa20 	bl	8006ab8 <USBD_CtlError>
      err++;
 8006678:	7afb      	ldrb	r3, [r7, #11]
 800667a:	3301      	adds	r3, #1
 800667c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800667e:	bf00      	nop
    }
    break;
 8006680:	e037      	b.n	80066f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7c1b      	ldrb	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d109      	bne.n	800669e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006692:	f107 0208 	add.w	r2, r7, #8
 8006696:	4610      	mov	r0, r2
 8006698:	4798      	blx	r3
 800669a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800669c:	e029      	b.n	80066f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fa09 	bl	8006ab8 <USBD_CtlError>
      err++;
 80066a6:	7afb      	ldrb	r3, [r7, #11]
 80066a8:	3301      	adds	r3, #1
 80066aa:	72fb      	strb	r3, [r7, #11]
    break;
 80066ac:	e021      	b.n	80066f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7c1b      	ldrb	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10d      	bne.n	80066d2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	f107 0208 	add.w	r2, r7, #8
 80066c2:	4610      	mov	r0, r2
 80066c4:	4798      	blx	r3
 80066c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	2207      	movs	r2, #7
 80066ce:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80066d0:	e00f      	b.n	80066f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f9ef 	bl	8006ab8 <USBD_CtlError>
      err++;
 80066da:	7afb      	ldrb	r3, [r7, #11]
 80066dc:	3301      	adds	r3, #1
 80066de:	72fb      	strb	r3, [r7, #11]
    break;
 80066e0:	e007      	b.n	80066f2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f9e7 	bl	8006ab8 <USBD_CtlError>
    err++;
 80066ea:	7afb      	ldrb	r3, [r7, #11]
 80066ec:	3301      	adds	r3, #1
 80066ee:	72fb      	strb	r3, [r7, #11]
    break;
 80066f0:	bf00      	nop
  }

  if (err != 0U)
 80066f2:	7afb      	ldrb	r3, [r7, #11]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d11e      	bne.n	8006736 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	88db      	ldrh	r3, [r3, #6]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d016      	beq.n	800672e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006700:	893b      	ldrh	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00e      	beq.n	8006724 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	88da      	ldrh	r2, [r3, #6]
 800670a:	893b      	ldrh	r3, [r7, #8]
 800670c:	4293      	cmp	r3, r2
 800670e:	bf28      	it	cs
 8006710:	4613      	movcs	r3, r2
 8006712:	b29b      	uxth	r3, r3
 8006714:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006716:	893b      	ldrh	r3, [r7, #8]
 8006718:	461a      	mov	r2, r3
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fa3c 	bl	8006b9a <USBD_CtlSendData>
 8006722:	e009      	b.n	8006738 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f9c6 	bl	8006ab8 <USBD_CtlError>
 800672c:	e004      	b.n	8006738 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa70 	bl	8006c14 <USBD_CtlSendStatus>
 8006734:	e000      	b.n	8006738 <USBD_GetDescriptor+0x2cc>
    return;
 8006736:	bf00      	nop
    }
  }
}
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop

08006740 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	889b      	ldrh	r3, [r3, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d130      	bne.n	80067b4 <USBD_SetAddress+0x74>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	88db      	ldrh	r3, [r3, #6]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d12c      	bne.n	80067b4 <USBD_SetAddress+0x74>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	885b      	ldrh	r3, [r3, #2]
 800675e:	2b7f      	cmp	r3, #127	; 0x7f
 8006760:	d828      	bhi.n	80067b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	885b      	ldrh	r3, [r3, #2]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800676c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	2b03      	cmp	r3, #3
 8006776:	d104      	bne.n	8006782 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f99c 	bl	8006ab8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006780:	e01c      	b.n	80067bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7bfa      	ldrb	r2, [r7, #15]
 8006786:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fe04 	bl	800739c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fa3d 	bl	8006c14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a8:	e008      	b.n	80067bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b2:	e003      	b.n	80067bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f97e 	bl	8006ab8 <USBD_CtlError>
  }
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	885b      	ldrh	r3, [r3, #2]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	4b4b      	ldr	r3, [pc, #300]	; (8006908 <USBD_SetConfig+0x144>)
 80067da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067dc:	4b4a      	ldr	r3, [pc, #296]	; (8006908 <USBD_SetConfig+0x144>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d905      	bls.n	80067f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f966 	bl	8006ab8 <USBD_CtlError>
    return USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e087      	b.n	8006900 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d002      	beq.n	8006800 <USBD_SetConfig+0x3c>
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d025      	beq.n	800684a <USBD_SetConfig+0x86>
 80067fe:	e071      	b.n	80068e4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006800:	4b41      	ldr	r3, [pc, #260]	; (8006908 <USBD_SetConfig+0x144>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01c      	beq.n	8006842 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006808:	4b3f      	ldr	r3, [pc, #252]	; (8006908 <USBD_SetConfig+0x144>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006812:	4b3d      	ldr	r3, [pc, #244]	; (8006908 <USBD_SetConfig+0x144>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff f9a7 	bl	8005b6c <USBD_SetClassConfig>
 800681e:	4603      	mov	r3, r0
 8006820:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d004      	beq.n	8006832 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f944 	bl	8006ab8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006830:	e065      	b.n	80068fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9ee 	bl	8006c14 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2203      	movs	r2, #3
 800683c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006840:	e05d      	b.n	80068fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9e6 	bl	8006c14 <USBD_CtlSendStatus>
    break;
 8006848:	e059      	b.n	80068fe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800684a:	4b2f      	ldr	r3, [pc, #188]	; (8006908 <USBD_SetConfig+0x144>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d112      	bne.n	8006878 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800685a:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <USBD_SetConfig+0x144>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006864:	4b28      	ldr	r3, [pc, #160]	; (8006908 <USBD_SetConfig+0x144>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff f99a 	bl	8005ba4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f9cf 	bl	8006c14 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006876:	e042      	b.n	80068fe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006878:	4b23      	ldr	r3, [pc, #140]	; (8006908 <USBD_SetConfig+0x144>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d02a      	beq.n	80068dc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff f988 	bl	8005ba4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006894:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <USBD_SetConfig+0x144>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800689e:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <USBD_SetConfig+0x144>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff f961 	bl	8005b6c <USBD_SetClassConfig>
 80068aa:	4603      	mov	r3, r0
 80068ac:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00f      	beq.n	80068d4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8fe 	bl	8006ab8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff f96d 	bl	8005ba4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80068d2:	e014      	b.n	80068fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f99d 	bl	8006c14 <USBD_CtlSendStatus>
    break;
 80068da:	e010      	b.n	80068fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f999 	bl	8006c14 <USBD_CtlSendStatus>
    break;
 80068e2:	e00c      	b.n	80068fe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f8e6 	bl	8006ab8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <USBD_SetConfig+0x144>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff f956 	bl	8005ba4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80068f8:	2303      	movs	r3, #3
 80068fa:	73fb      	strb	r3, [r7, #15]
    break;
 80068fc:	bf00      	nop
  }

  return ret;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	200001e8 	.word	0x200001e8

0800690c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88db      	ldrh	r3, [r3, #6]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d004      	beq.n	8006928 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8c9 	bl	8006ab8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006926:	e021      	b.n	800696c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692e:	2b01      	cmp	r3, #1
 8006930:	db17      	blt.n	8006962 <USBD_GetConfig+0x56>
 8006932:	2b02      	cmp	r3, #2
 8006934:	dd02      	ble.n	800693c <USBD_GetConfig+0x30>
 8006936:	2b03      	cmp	r3, #3
 8006938:	d00b      	beq.n	8006952 <USBD_GetConfig+0x46>
 800693a:	e012      	b.n	8006962 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3308      	adds	r3, #8
 8006946:	2201      	movs	r2, #1
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f925 	bl	8006b9a <USBD_CtlSendData>
      break;
 8006950:	e00c      	b.n	800696c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	2201      	movs	r2, #1
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f91d 	bl	8006b9a <USBD_CtlSendData>
      break;
 8006960:	e004      	b.n	800696c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f8a7 	bl	8006ab8 <USBD_CtlError>
      break;
 800696a:	bf00      	nop
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006984:	3b01      	subs	r3, #1
 8006986:	2b02      	cmp	r3, #2
 8006988:	d81e      	bhi.n	80069c8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d004      	beq.n	800699c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f88f 	bl	8006ab8 <USBD_CtlError>
      break;
 800699a:	e01a      	b.n	80069d2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f043 0202 	orr.w	r2, r3, #2
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	330c      	adds	r3, #12
 80069bc:	2202      	movs	r2, #2
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f8ea 	bl	8006b9a <USBD_CtlSendData>
    break;
 80069c6:	e004      	b.n	80069d2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f874 	bl	8006ab8 <USBD_CtlError>
    break;
 80069d0:	bf00      	nop
  }
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	885b      	ldrh	r3, [r3, #2]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d106      	bne.n	80069fa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f90d 	bl	8006c14 <USBD_CtlSendStatus>
  }
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d80b      	bhi.n	8006a30 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	885b      	ldrh	r3, [r3, #2]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d10c      	bne.n	8006a3a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f8f3 	bl	8006c14 <USBD_CtlSendStatus>
      }
      break;
 8006a2e:	e004      	b.n	8006a3a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f840 	bl	8006ab8 <USBD_CtlError>
      break;
 8006a38:	e000      	b.n	8006a3c <USBD_ClrFeature+0x3a>
      break;
 8006a3a:	bf00      	nop
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	781a      	ldrb	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	781a      	ldrb	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff fad3 	bl	800601a <SWAPBYTE>
 8006a74:	4603      	mov	r3, r0
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff fac6 	bl	800601a <SWAPBYTE>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff fab9 	bl	800601a <SWAPBYTE>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	80da      	strh	r2, [r3, #6]
}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ac2:	2180      	movs	r1, #128	; 0x80
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fbff 	bl	80072c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006aca:	2100      	movs	r1, #0
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fbfb 	bl	80072c8 <USBD_LL_StallEP>
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d036      	beq.n	8006b5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006af4:	6938      	ldr	r0, [r7, #16]
 8006af6:	f000 f836 	bl	8006b66 <USBD_GetLen>
 8006afa:	4603      	mov	r3, r0
 8006afc:	3301      	adds	r3, #1
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	7812      	ldrb	r2, [r2, #0]
 8006b12:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	3301      	adds	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	4413      	add	r3, r2
 8006b20:	2203      	movs	r2, #3
 8006b22:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	3301      	adds	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b2a:	e013      	b.n	8006b54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4413      	add	r3, r2
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	7812      	ldrb	r2, [r2, #0]
 8006b36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	613b      	str	r3, [r7, #16]
    idx++;
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
 8006b40:	3301      	adds	r3, #1
 8006b42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	4413      	add	r3, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
 8006b50:	3301      	adds	r3, #1
 8006b52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e7      	bne.n	8006b2c <USBD_GetString+0x52>
 8006b5c:	e000      	b.n	8006b60 <USBD_GetString+0x86>
    return;
 8006b5e:	bf00      	nop
  }
}
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b76:	e005      	b.n	8006b84 <USBD_GetLen+0x1e>
  {
    len++;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	3301      	adds	r3, #1
 8006b82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f5      	bne.n	8006b78 <USBD_GetLen+0x12>
  }

  return len;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fc0a 	bl	80073da <USBD_LL_Transmit>

  return USBD_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	2100      	movs	r1, #0
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 fbf9 	bl	80073da <USBD_LL_Transmit>

  return USBD_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	2100      	movs	r1, #0
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fc09 	bl	800741c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2204      	movs	r2, #4
 8006c20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c24:	2300      	movs	r3, #0
 8006c26:	2200      	movs	r2, #0
 8006c28:	2100      	movs	r1, #0
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fbd5 	bl	80073da <USBD_LL_Transmit>

  return USBD_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2205      	movs	r2, #5
 8006c46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fbe3 	bl	800741c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c64:	2200      	movs	r2, #0
 8006c66:	490e      	ldr	r1, [pc, #56]	; (8006ca0 <MX_USB_DEVICE_Init+0x40>)
 8006c68:	480e      	ldr	r0, [pc, #56]	; (8006ca4 <MX_USB_DEVICE_Init+0x44>)
 8006c6a:	f7fe ff11 	bl	8005a90 <USBD_Init>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c74:	f7fa fbce 	bl	8001414 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006c78:	490b      	ldr	r1, [pc, #44]	; (8006ca8 <MX_USB_DEVICE_Init+0x48>)
 8006c7a:	480a      	ldr	r0, [pc, #40]	; (8006ca4 <MX_USB_DEVICE_Init+0x44>)
 8006c7c:	f7fe ff3e 	bl	8005afc <USBD_RegisterClass>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c86:	f7fa fbc5 	bl	8001414 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c8a:	4806      	ldr	r0, [pc, #24]	; (8006ca4 <MX_USB_DEVICE_Init+0x44>)
 8006c8c:	f7fe ff57 	bl	8005b3e <USBD_Start>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006c96:	f7fa fbbd 	bl	8001414 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c9a:	bf00      	nop
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000114 	.word	0x20000114
 8006ca4:	20000238 	.word	0x20000238
 8006ca8:	2000000c 	.word	0x2000000c

08006cac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	6039      	str	r1, [r7, #0]
 8006cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2212      	movs	r2, #18
 8006cbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cbe:	4b03      	ldr	r3, [pc, #12]	; (8006ccc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	20000130 	.word	0x20000130

08006cd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ce2:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	20000144 	.word	0x20000144

08006cf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d105      	bne.n	8006d12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	4907      	ldr	r1, [pc, #28]	; (8006d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d0a:	4808      	ldr	r0, [pc, #32]	; (8006d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d0c:	f7ff fee5 	bl	8006ada <USBD_GetString>
 8006d10:	e004      	b.n	8006d1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	4904      	ldr	r1, [pc, #16]	; (8006d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d16:	4805      	ldr	r0, [pc, #20]	; (8006d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d18:	f7ff fedf 	bl	8006ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000508 	.word	0x20000508
 8006d2c:	08008778 	.word	0x08008778

08006d30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	4904      	ldr	r1, [pc, #16]	; (8006d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d40:	4804      	ldr	r0, [pc, #16]	; (8006d54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d42:	f7ff feca 	bl	8006ada <USBD_GetString>
  return USBD_StrDesc;
 8006d46:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000508 	.word	0x20000508
 8006d54:	08008790 	.word	0x08008790

08006d58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	221a      	movs	r2, #26
 8006d68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d6a:	f000 f843 	bl	8006df4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d6e:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000148 	.word	0x20000148

08006d7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4907      	ldr	r1, [pc, #28]	; (8006db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d92:	4808      	ldr	r0, [pc, #32]	; (8006db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d94:	f7ff fea1 	bl	8006ada <USBD_GetString>
 8006d98:	e004      	b.n	8006da4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	4904      	ldr	r1, [pc, #16]	; (8006db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d9e:	4805      	ldr	r0, [pc, #20]	; (8006db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006da0:	f7ff fe9b 	bl	8006ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000508 	.word	0x20000508
 8006db4:	080087a4 	.word	0x080087a4

08006db8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d105      	bne.n	8006dd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	4907      	ldr	r1, [pc, #28]	; (8006dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dce:	4808      	ldr	r0, [pc, #32]	; (8006df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006dd0:	f7ff fe83 	bl	8006ada <USBD_GetString>
 8006dd4:	e004      	b.n	8006de0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	4904      	ldr	r1, [pc, #16]	; (8006dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dda:	4805      	ldr	r0, [pc, #20]	; (8006df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ddc:	f7ff fe7d 	bl	8006ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8006de0:	4b02      	ldr	r3, [pc, #8]	; (8006dec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000508 	.word	0x20000508
 8006df0:	080087b0 	.word	0x080087b0

08006df4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <Get_SerialNum+0x44>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e00:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <Get_SerialNum+0x48>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e06:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <Get_SerialNum+0x4c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d009      	beq.n	8006e2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e1a:	2208      	movs	r2, #8
 8006e1c:	4909      	ldr	r1, [pc, #36]	; (8006e44 <Get_SerialNum+0x50>)
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f814 	bl	8006e4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e24:	2204      	movs	r2, #4
 8006e26:	4908      	ldr	r1, [pc, #32]	; (8006e48 <Get_SerialNum+0x54>)
 8006e28:	68b8      	ldr	r0, [r7, #8]
 8006e2a:	f000 f80f 	bl	8006e4c <IntToUnicode>
  }
}
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	1fff7a10 	.word	0x1fff7a10
 8006e3c:	1fff7a14 	.word	0x1fff7a14
 8006e40:	1fff7a18 	.word	0x1fff7a18
 8006e44:	2000014a 	.word	0x2000014a
 8006e48:	2000015a 	.word	0x2000015a

08006e4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	4613      	mov	r3, r2
 8006e58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
 8006e62:	e027      	b.n	8006eb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	0f1b      	lsrs	r3, r3, #28
 8006e68:	2b09      	cmp	r3, #9
 8006e6a:	d80b      	bhi.n	8006e84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	0f1b      	lsrs	r3, r3, #28
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	4619      	mov	r1, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	440b      	add	r3, r1
 8006e7c:	3230      	adds	r2, #48	; 0x30
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	e00a      	b.n	8006e9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	0f1b      	lsrs	r3, r3, #28
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	4619      	mov	r1, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	440b      	add	r3, r1
 8006e94:	3237      	adds	r2, #55	; 0x37
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]
 8006eb4:	7dfa      	ldrb	r2, [r7, #23]
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d3d3      	bcc.n	8006e64 <IntToUnicode+0x18>
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	; 0x28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ed0:	f107 0314 	add.w	r3, r7, #20
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	609a      	str	r2, [r3, #8]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ee8:	d147      	bne.n	8006f7a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <HAL_PCD_MspInit+0xbc>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	4a24      	ldr	r2, [pc, #144]	; (8006f84 <HAL_PCD_MspInit+0xbc>)
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8006efa:	4b22      	ldr	r3, [pc, #136]	; (8006f84 <HAL_PCD_MspInit+0xbc>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006f06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f14:	2303      	movs	r3, #3
 8006f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f18:	230a      	movs	r3, #10
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	4619      	mov	r1, r3
 8006f22:	4819      	ldr	r0, [pc, #100]	; (8006f88 <HAL_PCD_MspInit+0xc0>)
 8006f24:	f7fa fd42 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006f36:	f107 0314 	add.w	r3, r7, #20
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4812      	ldr	r0, [pc, #72]	; (8006f88 <HAL_PCD_MspInit+0xc0>)
 8006f3e:	f7fa fd35 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <HAL_PCD_MspInit+0xbc>)
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <HAL_PCD_MspInit+0xbc>)
 8006f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4c:	6353      	str	r3, [r2, #52]	; 0x34
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <HAL_PCD_MspInit+0xbc>)
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	4a0b      	ldr	r2, [pc, #44]	; (8006f84 <HAL_PCD_MspInit+0xbc>)
 8006f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <HAL_PCD_MspInit+0xbc>)
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	2043      	movs	r0, #67	; 0x43
 8006f70:	f7fa fce5 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f74:	2043      	movs	r0, #67	; 0x43
 8006f76:	f7fa fcfe 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	3728      	adds	r7, #40	; 0x28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40023800 	.word	0x40023800
 8006f88:	40020000 	.word	0x40020000

08006f8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fe fe16 	bl	8005bd4 <USBD_LL_SetupStage>
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f7fe fe4e 	bl	8005c7a <USBD_LL_DataOutStage>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	3348      	adds	r3, #72	; 0x48
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	4619      	mov	r1, r3
 800700e:	f7fe fe97 	bl	8005d40 <USBD_LL_DataInStage>
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe ff9b 	bl	8005f64 <USBD_LL_SOF>
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800703e:	2301      	movs	r3, #1
 8007040:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d102      	bne.n	8007050 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
 800704e:	e008      	b.n	8007062 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d102      	bne.n	800705e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007058:	2301      	movs	r3, #1
 800705a:	73fb      	strb	r3, [r7, #15]
 800705c:	e001      	b.n	8007062 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800705e:	f7fa f9d9 	bl	8001414 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	4611      	mov	r1, r2
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe ff3e 	bl	8005eee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe fef7 	bl	8005e6c <USBD_LL_Reset>
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe ff39 	bl	8005f0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070bc:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <HAL_PCD_SuspendCallback+0x48>)
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	4a03      	ldr	r2, [pc, #12]	; (80070d0 <HAL_PCD_SuspendCallback+0x48>)
 80070c2:	f043 0306 	orr.w	r3, r3, #6
 80070c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070c8:	bf00      	nop
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	e000ed00 	.word	0xe000ed00

080070d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe ff28 	bl	8005f38 <USBD_LL_Resume>
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe ff53 	bl	8005fb2 <USBD_LL_IsoOUTIncomplete>
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe ff34 	bl	8005f98 <USBD_LL_IsoINIncomplete>
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe ff40 	bl	8005fcc <USBD_LL_DevConnected>
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe ff3d 	bl	8005fe2 <USBD_LL_DevDisconnected>
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d13c      	bne.n	80071fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007180:	4a20      	ldr	r2, [pc, #128]	; (8007204 <USBD_LL_Init+0x94>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <USBD_LL_Init+0x94>)
 800718c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007190:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <USBD_LL_Init+0x94>)
 8007192:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007196:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007198:	4b1a      	ldr	r3, [pc, #104]	; (8007204 <USBD_LL_Init+0x94>)
 800719a:	2204      	movs	r2, #4
 800719c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800719e:	4b19      	ldr	r3, [pc, #100]	; (8007204 <USBD_LL_Init+0x94>)
 80071a0:	2202      	movs	r2, #2
 80071a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071a4:	4b17      	ldr	r3, [pc, #92]	; (8007204 <USBD_LL_Init+0x94>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071aa:	4b16      	ldr	r3, [pc, #88]	; (8007204 <USBD_LL_Init+0x94>)
 80071ac:	2202      	movs	r2, #2
 80071ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80071b0:	4b14      	ldr	r3, [pc, #80]	; (8007204 <USBD_LL_Init+0x94>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <USBD_LL_Init+0x94>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071bc:	4b11      	ldr	r3, [pc, #68]	; (8007204 <USBD_LL_Init+0x94>)
 80071be:	2200      	movs	r2, #0
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80071c2:	4b10      	ldr	r3, [pc, #64]	; (8007204 <USBD_LL_Init+0x94>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80071c8:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <USBD_LL_Init+0x94>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80071ce:	480d      	ldr	r0, [pc, #52]	; (8007204 <USBD_LL_Init+0x94>)
 80071d0:	f7fa fdc7 	bl	8001d62 <HAL_PCD_Init>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80071da:	f7fa f91b 	bl	8001414 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80071de:	2180      	movs	r1, #128	; 0x80
 80071e0:	4808      	ldr	r0, [pc, #32]	; (8007204 <USBD_LL_Init+0x94>)
 80071e2:	f7fb ff0c 	bl	8002ffe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80071e6:	2240      	movs	r2, #64	; 0x40
 80071e8:	2100      	movs	r1, #0
 80071ea:	4806      	ldr	r0, [pc, #24]	; (8007204 <USBD_LL_Init+0x94>)
 80071ec:	f7fb fec0 	bl	8002f70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80071f0:	2280      	movs	r2, #128	; 0x80
 80071f2:	2101      	movs	r1, #1
 80071f4:	4803      	ldr	r0, [pc, #12]	; (8007204 <USBD_LL_Init+0x94>)
 80071f6:	f7fb febb 	bl	8002f70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000708 	.word	0x20000708

08007208 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800721e:	4618      	mov	r0, r3
 8007220:	f7fa febc 	bl	8001f9c <HAL_PCD_Start>
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f918 	bl	8007460 <USBD_Get_USB_Status>
 8007230:	4603      	mov	r3, r0
 8007232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007234:	7bbb      	ldrb	r3, [r7, #14]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	4608      	mov	r0, r1
 8007248:	4611      	mov	r1, r2
 800724a:	461a      	mov	r2, r3
 800724c:	4603      	mov	r3, r0
 800724e:	70fb      	strb	r3, [r7, #3]
 8007250:	460b      	mov	r3, r1
 8007252:	70bb      	strb	r3, [r7, #2]
 8007254:	4613      	mov	r3, r2
 8007256:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007266:	78bb      	ldrb	r3, [r7, #2]
 8007268:	883a      	ldrh	r2, [r7, #0]
 800726a:	78f9      	ldrb	r1, [r7, #3]
 800726c:	f7fb faa0 	bl	80027b0 <HAL_PCD_EP_Open>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f8f2 	bl	8007460 <USBD_Get_USB_Status>
 800727c:	4603      	mov	r3, r0
 800727e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007280:	7bbb      	ldrb	r3, [r7, #14]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fb fae9 	bl	8002880 <HAL_PCD_EP_Close>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f8d3 	bl	8007460 <USBD_Get_USB_Status>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072be:	7bbb      	ldrb	r3, [r7, #14]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072e2:	78fa      	ldrb	r2, [r7, #3]
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fb fba9 	bl	8002a3e <HAL_PCD_EP_SetStall>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f8b4 	bl	8007460 <USBD_Get_USB_Status>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f7fb fbee 	bl	8002b06 <HAL_PCD_EP_ClrStall>
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	4618      	mov	r0, r3
 8007332:	f000 f895 	bl	8007460 <USBD_Get_USB_Status>
 8007336:	4603      	mov	r3, r0
 8007338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800733a:	7bbb      	ldrb	r3, [r7, #14]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007356:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800735c:	2b00      	cmp	r3, #0
 800735e:	da0b      	bge.n	8007378 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	4613      	mov	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	333e      	adds	r3, #62	; 0x3e
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	e00b      	b.n	8007390 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800738e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073b6:	78fa      	ldrb	r2, [r7, #3]
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fb f9d3 	bl	8002766 <HAL_PCD_SetAddress>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 f84a 	bl	8007460 <USBD_Get_USB_Status>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	460b      	mov	r3, r1
 80073e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073f8:	7af9      	ldrb	r1, [r7, #11]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	f7fb fad4 	bl	80029aa <HAL_PCD_EP_Transmit>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f829 	bl	8007460 <USBD_Get_USB_Status>
 800740e:	4603      	mov	r3, r0
 8007410:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007412:	7dbb      	ldrb	r3, [r7, #22]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	460b      	mov	r3, r1
 800742a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800743a:	7af9      	ldrb	r1, [r7, #11]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	f7fb fa68 	bl	8002914 <HAL_PCD_EP_Receive>
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f808 	bl	8007460 <USBD_Get_USB_Status>
 8007450:	4603      	mov	r3, r0
 8007452:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007454:	7dbb      	ldrb	r3, [r7, #22]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	2b03      	cmp	r3, #3
 8007472:	d817      	bhi.n	80074a4 <USBD_Get_USB_Status+0x44>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <USBD_Get_USB_Status+0x1c>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	0800748d 	.word	0x0800748d
 8007480:	08007493 	.word	0x08007493
 8007484:	08007499 	.word	0x08007499
 8007488:	0800749f 	.word	0x0800749f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
    break;
 8007490:	e00b      	b.n	80074aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007492:	2303      	movs	r3, #3
 8007494:	73fb      	strb	r3, [r7, #15]
    break;
 8007496:	e008      	b.n	80074aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
    break;
 800749c:	e005      	b.n	80074aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800749e:	2303      	movs	r3, #3
 80074a0:	73fb      	strb	r3, [r7, #15]
    break;
 80074a2:	e002      	b.n	80074aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074a4:	2303      	movs	r3, #3
 80074a6:	73fb      	strb	r3, [r7, #15]
    break;
 80074a8:	bf00      	nop
  }
  return usb_status;
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <__errno>:
 80074b8:	4b01      	ldr	r3, [pc, #4]	; (80074c0 <__errno+0x8>)
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	20000164 	.word	0x20000164

080074c4 <__libc_init_array>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	4e0d      	ldr	r6, [pc, #52]	; (80074fc <__libc_init_array+0x38>)
 80074c8:	4c0d      	ldr	r4, [pc, #52]	; (8007500 <__libc_init_array+0x3c>)
 80074ca:	1ba4      	subs	r4, r4, r6
 80074cc:	10a4      	asrs	r4, r4, #2
 80074ce:	2500      	movs	r5, #0
 80074d0:	42a5      	cmp	r5, r4
 80074d2:	d109      	bne.n	80074e8 <__libc_init_array+0x24>
 80074d4:	4e0b      	ldr	r6, [pc, #44]	; (8007504 <__libc_init_array+0x40>)
 80074d6:	4c0c      	ldr	r4, [pc, #48]	; (8007508 <__libc_init_array+0x44>)
 80074d8:	f001 f940 	bl	800875c <_init>
 80074dc:	1ba4      	subs	r4, r4, r6
 80074de:	10a4      	asrs	r4, r4, #2
 80074e0:	2500      	movs	r5, #0
 80074e2:	42a5      	cmp	r5, r4
 80074e4:	d105      	bne.n	80074f2 <__libc_init_array+0x2e>
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074ec:	4798      	blx	r3
 80074ee:	3501      	adds	r5, #1
 80074f0:	e7ee      	b.n	80074d0 <__libc_init_array+0xc>
 80074f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074f6:	4798      	blx	r3
 80074f8:	3501      	adds	r5, #1
 80074fa:	e7f2      	b.n	80074e2 <__libc_init_array+0x1e>
 80074fc:	080089b8 	.word	0x080089b8
 8007500:	080089b8 	.word	0x080089b8
 8007504:	080089b8 	.word	0x080089b8
 8007508:	080089bc 	.word	0x080089bc

0800750c <malloc>:
 800750c:	4b02      	ldr	r3, [pc, #8]	; (8007518 <malloc+0xc>)
 800750e:	4601      	mov	r1, r0
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f000 b861 	b.w	80075d8 <_malloc_r>
 8007516:	bf00      	nop
 8007518:	20000164 	.word	0x20000164

0800751c <free>:
 800751c:	4b02      	ldr	r3, [pc, #8]	; (8007528 <free+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f000 b80b 	b.w	800753c <_free_r>
 8007526:	bf00      	nop
 8007528:	20000164 	.word	0x20000164

0800752c <memset>:
 800752c:	4402      	add	r2, r0
 800752e:	4603      	mov	r3, r0
 8007530:	4293      	cmp	r3, r2
 8007532:	d100      	bne.n	8007536 <memset+0xa>
 8007534:	4770      	bx	lr
 8007536:	f803 1b01 	strb.w	r1, [r3], #1
 800753a:	e7f9      	b.n	8007530 <memset+0x4>

0800753c <_free_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4605      	mov	r5, r0
 8007540:	2900      	cmp	r1, #0
 8007542:	d045      	beq.n	80075d0 <_free_r+0x94>
 8007544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007548:	1f0c      	subs	r4, r1, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	bfb8      	it	lt
 800754e:	18e4      	addlt	r4, r4, r3
 8007550:	f000 f8ac 	bl	80076ac <__malloc_lock>
 8007554:	4a1f      	ldr	r2, [pc, #124]	; (80075d4 <_free_r+0x98>)
 8007556:	6813      	ldr	r3, [r2, #0]
 8007558:	4610      	mov	r0, r2
 800755a:	b933      	cbnz	r3, 800756a <_free_r+0x2e>
 800755c:	6063      	str	r3, [r4, #4]
 800755e:	6014      	str	r4, [r2, #0]
 8007560:	4628      	mov	r0, r5
 8007562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007566:	f000 b8a2 	b.w	80076ae <__malloc_unlock>
 800756a:	42a3      	cmp	r3, r4
 800756c:	d90c      	bls.n	8007588 <_free_r+0x4c>
 800756e:	6821      	ldr	r1, [r4, #0]
 8007570:	1862      	adds	r2, r4, r1
 8007572:	4293      	cmp	r3, r2
 8007574:	bf04      	itt	eq
 8007576:	681a      	ldreq	r2, [r3, #0]
 8007578:	685b      	ldreq	r3, [r3, #4]
 800757a:	6063      	str	r3, [r4, #4]
 800757c:	bf04      	itt	eq
 800757e:	1852      	addeq	r2, r2, r1
 8007580:	6022      	streq	r2, [r4, #0]
 8007582:	6004      	str	r4, [r0, #0]
 8007584:	e7ec      	b.n	8007560 <_free_r+0x24>
 8007586:	4613      	mov	r3, r2
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	b10a      	cbz	r2, 8007590 <_free_r+0x54>
 800758c:	42a2      	cmp	r2, r4
 800758e:	d9fa      	bls.n	8007586 <_free_r+0x4a>
 8007590:	6819      	ldr	r1, [r3, #0]
 8007592:	1858      	adds	r0, r3, r1
 8007594:	42a0      	cmp	r0, r4
 8007596:	d10b      	bne.n	80075b0 <_free_r+0x74>
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	4401      	add	r1, r0
 800759c:	1858      	adds	r0, r3, r1
 800759e:	4282      	cmp	r2, r0
 80075a0:	6019      	str	r1, [r3, #0]
 80075a2:	d1dd      	bne.n	8007560 <_free_r+0x24>
 80075a4:	6810      	ldr	r0, [r2, #0]
 80075a6:	6852      	ldr	r2, [r2, #4]
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	4401      	add	r1, r0
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	e7d7      	b.n	8007560 <_free_r+0x24>
 80075b0:	d902      	bls.n	80075b8 <_free_r+0x7c>
 80075b2:	230c      	movs	r3, #12
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	e7d3      	b.n	8007560 <_free_r+0x24>
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	1821      	adds	r1, r4, r0
 80075bc:	428a      	cmp	r2, r1
 80075be:	bf04      	itt	eq
 80075c0:	6811      	ldreq	r1, [r2, #0]
 80075c2:	6852      	ldreq	r2, [r2, #4]
 80075c4:	6062      	str	r2, [r4, #4]
 80075c6:	bf04      	itt	eq
 80075c8:	1809      	addeq	r1, r1, r0
 80075ca:	6021      	streq	r1, [r4, #0]
 80075cc:	605c      	str	r4, [r3, #4]
 80075ce:	e7c7      	b.n	8007560 <_free_r+0x24>
 80075d0:	bd38      	pop	{r3, r4, r5, pc}
 80075d2:	bf00      	nop
 80075d4:	200001ec 	.word	0x200001ec

080075d8 <_malloc_r>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	1ccd      	adds	r5, r1, #3
 80075dc:	f025 0503 	bic.w	r5, r5, #3
 80075e0:	3508      	adds	r5, #8
 80075e2:	2d0c      	cmp	r5, #12
 80075e4:	bf38      	it	cc
 80075e6:	250c      	movcc	r5, #12
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	4606      	mov	r6, r0
 80075ec:	db01      	blt.n	80075f2 <_malloc_r+0x1a>
 80075ee:	42a9      	cmp	r1, r5
 80075f0:	d903      	bls.n	80075fa <_malloc_r+0x22>
 80075f2:	230c      	movs	r3, #12
 80075f4:	6033      	str	r3, [r6, #0]
 80075f6:	2000      	movs	r0, #0
 80075f8:	bd70      	pop	{r4, r5, r6, pc}
 80075fa:	f000 f857 	bl	80076ac <__malloc_lock>
 80075fe:	4a21      	ldr	r2, [pc, #132]	; (8007684 <_malloc_r+0xac>)
 8007600:	6814      	ldr	r4, [r2, #0]
 8007602:	4621      	mov	r1, r4
 8007604:	b991      	cbnz	r1, 800762c <_malloc_r+0x54>
 8007606:	4c20      	ldr	r4, [pc, #128]	; (8007688 <_malloc_r+0xb0>)
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	b91b      	cbnz	r3, 8007614 <_malloc_r+0x3c>
 800760c:	4630      	mov	r0, r6
 800760e:	f000 f83d 	bl	800768c <_sbrk_r>
 8007612:	6020      	str	r0, [r4, #0]
 8007614:	4629      	mov	r1, r5
 8007616:	4630      	mov	r0, r6
 8007618:	f000 f838 	bl	800768c <_sbrk_r>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d124      	bne.n	800766a <_malloc_r+0x92>
 8007620:	230c      	movs	r3, #12
 8007622:	6033      	str	r3, [r6, #0]
 8007624:	4630      	mov	r0, r6
 8007626:	f000 f842 	bl	80076ae <__malloc_unlock>
 800762a:	e7e4      	b.n	80075f6 <_malloc_r+0x1e>
 800762c:	680b      	ldr	r3, [r1, #0]
 800762e:	1b5b      	subs	r3, r3, r5
 8007630:	d418      	bmi.n	8007664 <_malloc_r+0x8c>
 8007632:	2b0b      	cmp	r3, #11
 8007634:	d90f      	bls.n	8007656 <_malloc_r+0x7e>
 8007636:	600b      	str	r3, [r1, #0]
 8007638:	50cd      	str	r5, [r1, r3]
 800763a:	18cc      	adds	r4, r1, r3
 800763c:	4630      	mov	r0, r6
 800763e:	f000 f836 	bl	80076ae <__malloc_unlock>
 8007642:	f104 000b 	add.w	r0, r4, #11
 8007646:	1d23      	adds	r3, r4, #4
 8007648:	f020 0007 	bic.w	r0, r0, #7
 800764c:	1ac3      	subs	r3, r0, r3
 800764e:	d0d3      	beq.n	80075f8 <_malloc_r+0x20>
 8007650:	425a      	negs	r2, r3
 8007652:	50e2      	str	r2, [r4, r3]
 8007654:	e7d0      	b.n	80075f8 <_malloc_r+0x20>
 8007656:	428c      	cmp	r4, r1
 8007658:	684b      	ldr	r3, [r1, #4]
 800765a:	bf16      	itet	ne
 800765c:	6063      	strne	r3, [r4, #4]
 800765e:	6013      	streq	r3, [r2, #0]
 8007660:	460c      	movne	r4, r1
 8007662:	e7eb      	b.n	800763c <_malloc_r+0x64>
 8007664:	460c      	mov	r4, r1
 8007666:	6849      	ldr	r1, [r1, #4]
 8007668:	e7cc      	b.n	8007604 <_malloc_r+0x2c>
 800766a:	1cc4      	adds	r4, r0, #3
 800766c:	f024 0403 	bic.w	r4, r4, #3
 8007670:	42a0      	cmp	r0, r4
 8007672:	d005      	beq.n	8007680 <_malloc_r+0xa8>
 8007674:	1a21      	subs	r1, r4, r0
 8007676:	4630      	mov	r0, r6
 8007678:	f000 f808 	bl	800768c <_sbrk_r>
 800767c:	3001      	adds	r0, #1
 800767e:	d0cf      	beq.n	8007620 <_malloc_r+0x48>
 8007680:	6025      	str	r5, [r4, #0]
 8007682:	e7db      	b.n	800763c <_malloc_r+0x64>
 8007684:	200001ec 	.word	0x200001ec
 8007688:	200001f0 	.word	0x200001f0

0800768c <_sbrk_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4c06      	ldr	r4, [pc, #24]	; (80076a8 <_sbrk_r+0x1c>)
 8007690:	2300      	movs	r3, #0
 8007692:	4605      	mov	r5, r0
 8007694:	4608      	mov	r0, r1
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	f7f9 ff6c 	bl	8001574 <_sbrk>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_sbrk_r+0x1a>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_sbrk_r+0x1a>
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20000b10 	.word	0x20000b10

080076ac <__malloc_lock>:
 80076ac:	4770      	bx	lr

080076ae <__malloc_unlock>:
 80076ae:	4770      	bx	lr

080076b0 <cos>:
 80076b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076b2:	ec51 0b10 	vmov	r0, r1, d0
 80076b6:	4a1e      	ldr	r2, [pc, #120]	; (8007730 <cos+0x80>)
 80076b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076bc:	4293      	cmp	r3, r2
 80076be:	dc06      	bgt.n	80076ce <cos+0x1e>
 80076c0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007728 <cos+0x78>
 80076c4:	f000 fa74 	bl	8007bb0 <__kernel_cos>
 80076c8:	ec51 0b10 	vmov	r0, r1, d0
 80076cc:	e007      	b.n	80076de <cos+0x2e>
 80076ce:	4a19      	ldr	r2, [pc, #100]	; (8007734 <cos+0x84>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	dd09      	ble.n	80076e8 <cos+0x38>
 80076d4:	ee10 2a10 	vmov	r2, s0
 80076d8:	460b      	mov	r3, r1
 80076da:	f7f8 fd8d 	bl	80001f8 <__aeabi_dsub>
 80076de:	ec41 0b10 	vmov	d0, r0, r1
 80076e2:	b005      	add	sp, #20
 80076e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80076e8:	4668      	mov	r0, sp
 80076ea:	f000 f86d 	bl	80077c8 <__ieee754_rem_pio2>
 80076ee:	f000 0003 	and.w	r0, r0, #3
 80076f2:	2801      	cmp	r0, #1
 80076f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076f8:	ed9d 0b00 	vldr	d0, [sp]
 80076fc:	d007      	beq.n	800770e <cos+0x5e>
 80076fe:	2802      	cmp	r0, #2
 8007700:	d00e      	beq.n	8007720 <cos+0x70>
 8007702:	2800      	cmp	r0, #0
 8007704:	d0de      	beq.n	80076c4 <cos+0x14>
 8007706:	2001      	movs	r0, #1
 8007708:	f000 fe5a 	bl	80083c0 <__kernel_sin>
 800770c:	e7dc      	b.n	80076c8 <cos+0x18>
 800770e:	f000 fe57 	bl	80083c0 <__kernel_sin>
 8007712:	ec53 2b10 	vmov	r2, r3, d0
 8007716:	ee10 0a10 	vmov	r0, s0
 800771a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800771e:	e7de      	b.n	80076de <cos+0x2e>
 8007720:	f000 fa46 	bl	8007bb0 <__kernel_cos>
 8007724:	e7f5      	b.n	8007712 <cos+0x62>
 8007726:	bf00      	nop
	...
 8007730:	3fe921fb 	.word	0x3fe921fb
 8007734:	7fefffff 	.word	0x7fefffff

08007738 <sin>:
 8007738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800773a:	ec51 0b10 	vmov	r0, r1, d0
 800773e:	4a20      	ldr	r2, [pc, #128]	; (80077c0 <sin+0x88>)
 8007740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007744:	4293      	cmp	r3, r2
 8007746:	dc07      	bgt.n	8007758 <sin+0x20>
 8007748:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80077b8 <sin+0x80>
 800774c:	2000      	movs	r0, #0
 800774e:	f000 fe37 	bl	80083c0 <__kernel_sin>
 8007752:	ec51 0b10 	vmov	r0, r1, d0
 8007756:	e007      	b.n	8007768 <sin+0x30>
 8007758:	4a1a      	ldr	r2, [pc, #104]	; (80077c4 <sin+0x8c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	dd09      	ble.n	8007772 <sin+0x3a>
 800775e:	ee10 2a10 	vmov	r2, s0
 8007762:	460b      	mov	r3, r1
 8007764:	f7f8 fd48 	bl	80001f8 <__aeabi_dsub>
 8007768:	ec41 0b10 	vmov	d0, r0, r1
 800776c:	b005      	add	sp, #20
 800776e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007772:	4668      	mov	r0, sp
 8007774:	f000 f828 	bl	80077c8 <__ieee754_rem_pio2>
 8007778:	f000 0003 	and.w	r0, r0, #3
 800777c:	2801      	cmp	r0, #1
 800777e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007782:	ed9d 0b00 	vldr	d0, [sp]
 8007786:	d004      	beq.n	8007792 <sin+0x5a>
 8007788:	2802      	cmp	r0, #2
 800778a:	d005      	beq.n	8007798 <sin+0x60>
 800778c:	b970      	cbnz	r0, 80077ac <sin+0x74>
 800778e:	2001      	movs	r0, #1
 8007790:	e7dd      	b.n	800774e <sin+0x16>
 8007792:	f000 fa0d 	bl	8007bb0 <__kernel_cos>
 8007796:	e7dc      	b.n	8007752 <sin+0x1a>
 8007798:	2001      	movs	r0, #1
 800779a:	f000 fe11 	bl	80083c0 <__kernel_sin>
 800779e:	ec53 2b10 	vmov	r2, r3, d0
 80077a2:	ee10 0a10 	vmov	r0, s0
 80077a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077aa:	e7dd      	b.n	8007768 <sin+0x30>
 80077ac:	f000 fa00 	bl	8007bb0 <__kernel_cos>
 80077b0:	e7f5      	b.n	800779e <sin+0x66>
 80077b2:	bf00      	nop
 80077b4:	f3af 8000 	nop.w
	...
 80077c0:	3fe921fb 	.word	0x3fe921fb
 80077c4:	7fefffff 	.word	0x7fefffff

080077c8 <__ieee754_rem_pio2>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	ec57 6b10 	vmov	r6, r7, d0
 80077d0:	4bc3      	ldr	r3, [pc, #780]	; (8007ae0 <__ieee754_rem_pio2+0x318>)
 80077d2:	b08d      	sub	sp, #52	; 0x34
 80077d4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80077d8:	4598      	cmp	r8, r3
 80077da:	4604      	mov	r4, r0
 80077dc:	9704      	str	r7, [sp, #16]
 80077de:	dc07      	bgt.n	80077f0 <__ieee754_rem_pio2+0x28>
 80077e0:	2200      	movs	r2, #0
 80077e2:	2300      	movs	r3, #0
 80077e4:	ed84 0b00 	vstr	d0, [r4]
 80077e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80077ec:	2500      	movs	r5, #0
 80077ee:	e027      	b.n	8007840 <__ieee754_rem_pio2+0x78>
 80077f0:	4bbc      	ldr	r3, [pc, #752]	; (8007ae4 <__ieee754_rem_pio2+0x31c>)
 80077f2:	4598      	cmp	r8, r3
 80077f4:	dc75      	bgt.n	80078e2 <__ieee754_rem_pio2+0x11a>
 80077f6:	9b04      	ldr	r3, [sp, #16]
 80077f8:	4dbb      	ldr	r5, [pc, #748]	; (8007ae8 <__ieee754_rem_pio2+0x320>)
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	ee10 0a10 	vmov	r0, s0
 8007800:	a3a9      	add	r3, pc, #676	; (adr r3, 8007aa8 <__ieee754_rem_pio2+0x2e0>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	4639      	mov	r1, r7
 8007808:	dd36      	ble.n	8007878 <__ieee754_rem_pio2+0xb0>
 800780a:	f7f8 fcf5 	bl	80001f8 <__aeabi_dsub>
 800780e:	45a8      	cmp	r8, r5
 8007810:	4606      	mov	r6, r0
 8007812:	460f      	mov	r7, r1
 8007814:	d018      	beq.n	8007848 <__ieee754_rem_pio2+0x80>
 8007816:	a3a6      	add	r3, pc, #664	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x2e8>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f7f8 fcec 	bl	80001f8 <__aeabi_dsub>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	e9c4 2300 	strd	r2, r3, [r4]
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f8 fce4 	bl	80001f8 <__aeabi_dsub>
 8007830:	a39f      	add	r3, pc, #636	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x2e8>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fcdf 	bl	80001f8 <__aeabi_dsub>
 800783a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800783e:	2501      	movs	r5, #1
 8007840:	4628      	mov	r0, r5
 8007842:	b00d      	add	sp, #52	; 0x34
 8007844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007848:	a39b      	add	r3, pc, #620	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x2f0>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fcd3 	bl	80001f8 <__aeabi_dsub>
 8007852:	a39b      	add	r3, pc, #620	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x2f8>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	4606      	mov	r6, r0
 800785a:	460f      	mov	r7, r1
 800785c:	f7f8 fccc 	bl	80001f8 <__aeabi_dsub>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	e9c4 2300 	strd	r2, r3, [r4]
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f8 fcc4 	bl	80001f8 <__aeabi_dsub>
 8007870:	a393      	add	r3, pc, #588	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x2f8>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	e7de      	b.n	8007836 <__ieee754_rem_pio2+0x6e>
 8007878:	f7f8 fcc0 	bl	80001fc <__adddf3>
 800787c:	45a8      	cmp	r8, r5
 800787e:	4606      	mov	r6, r0
 8007880:	460f      	mov	r7, r1
 8007882:	d016      	beq.n	80078b2 <__ieee754_rem_pio2+0xea>
 8007884:	a38a      	add	r3, pc, #552	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x2e8>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fcb7 	bl	80001fc <__adddf3>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	e9c4 2300 	strd	r2, r3, [r4]
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	f7f8 fcad 	bl	80001f8 <__aeabi_dsub>
 800789e:	a384      	add	r3, pc, #528	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x2e8>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 fcaa 	bl	80001fc <__adddf3>
 80078a8:	f04f 35ff 	mov.w	r5, #4294967295
 80078ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80078b0:	e7c6      	b.n	8007840 <__ieee754_rem_pio2+0x78>
 80078b2:	a381      	add	r3, pc, #516	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x2f0>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fca0 	bl	80001fc <__adddf3>
 80078bc:	a380      	add	r3, pc, #512	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x2f8>)
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	4606      	mov	r6, r0
 80078c4:	460f      	mov	r7, r1
 80078c6:	f7f8 fc99 	bl	80001fc <__adddf3>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	e9c4 2300 	strd	r2, r3, [r4]
 80078d2:	4630      	mov	r0, r6
 80078d4:	4639      	mov	r1, r7
 80078d6:	f7f8 fc8f 	bl	80001f8 <__aeabi_dsub>
 80078da:	a379      	add	r3, pc, #484	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x2f8>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	e7e0      	b.n	80078a4 <__ieee754_rem_pio2+0xdc>
 80078e2:	4b82      	ldr	r3, [pc, #520]	; (8007aec <__ieee754_rem_pio2+0x324>)
 80078e4:	4598      	cmp	r8, r3
 80078e6:	f300 80d0 	bgt.w	8007a8a <__ieee754_rem_pio2+0x2c2>
 80078ea:	f000 fe23 	bl	8008534 <fabs>
 80078ee:	ec57 6b10 	vmov	r6, r7, d0
 80078f2:	ee10 0a10 	vmov	r0, s0
 80078f6:	a374      	add	r3, pc, #464	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x300>)
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f8 fe33 	bl	8000568 <__aeabi_dmul>
 8007902:	2200      	movs	r2, #0
 8007904:	4b7a      	ldr	r3, [pc, #488]	; (8007af0 <__ieee754_rem_pio2+0x328>)
 8007906:	f7f8 fc79 	bl	80001fc <__adddf3>
 800790a:	f7f9 f8c7 	bl	8000a9c <__aeabi_d2iz>
 800790e:	4605      	mov	r5, r0
 8007910:	f7f8 fdc0 	bl	8000494 <__aeabi_i2d>
 8007914:	a364      	add	r3, pc, #400	; (adr r3, 8007aa8 <__ieee754_rem_pio2+0x2e0>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800791e:	f7f8 fe23 	bl	8000568 <__aeabi_dmul>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4630      	mov	r0, r6
 8007928:	4639      	mov	r1, r7
 800792a:	f7f8 fc65 	bl	80001f8 <__aeabi_dsub>
 800792e:	a360      	add	r3, pc, #384	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x2e8>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	4682      	mov	sl, r0
 8007936:	468b      	mov	fp, r1
 8007938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793c:	f7f8 fe14 	bl	8000568 <__aeabi_dmul>
 8007940:	2d1f      	cmp	r5, #31
 8007942:	4606      	mov	r6, r0
 8007944:	460f      	mov	r7, r1
 8007946:	dc0c      	bgt.n	8007962 <__ieee754_rem_pio2+0x19a>
 8007948:	1e6a      	subs	r2, r5, #1
 800794a:	4b6a      	ldr	r3, [pc, #424]	; (8007af4 <__ieee754_rem_pio2+0x32c>)
 800794c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007950:	4543      	cmp	r3, r8
 8007952:	d006      	beq.n	8007962 <__ieee754_rem_pio2+0x19a>
 8007954:	4632      	mov	r2, r6
 8007956:	463b      	mov	r3, r7
 8007958:	4650      	mov	r0, sl
 800795a:	4659      	mov	r1, fp
 800795c:	f7f8 fc4c 	bl	80001f8 <__aeabi_dsub>
 8007960:	e00e      	b.n	8007980 <__ieee754_rem_pio2+0x1b8>
 8007962:	4632      	mov	r2, r6
 8007964:	463b      	mov	r3, r7
 8007966:	4650      	mov	r0, sl
 8007968:	4659      	mov	r1, fp
 800796a:	f7f8 fc45 	bl	80001f8 <__aeabi_dsub>
 800796e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	9a05      	ldr	r2, [sp, #20]
 8007976:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b10      	cmp	r3, #16
 800797e:	dc02      	bgt.n	8007986 <__ieee754_rem_pio2+0x1be>
 8007980:	e9c4 0100 	strd	r0, r1, [r4]
 8007984:	e039      	b.n	80079fa <__ieee754_rem_pio2+0x232>
 8007986:	a34c      	add	r3, pc, #304	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x2f0>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007990:	f7f8 fdea 	bl	8000568 <__aeabi_dmul>
 8007994:	4606      	mov	r6, r0
 8007996:	460f      	mov	r7, r1
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4650      	mov	r0, sl
 800799e:	4659      	mov	r1, fp
 80079a0:	f7f8 fc2a 	bl	80001f8 <__aeabi_dsub>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4680      	mov	r8, r0
 80079aa:	4689      	mov	r9, r1
 80079ac:	4650      	mov	r0, sl
 80079ae:	4659      	mov	r1, fp
 80079b0:	f7f8 fc22 	bl	80001f8 <__aeabi_dsub>
 80079b4:	4632      	mov	r2, r6
 80079b6:	463b      	mov	r3, r7
 80079b8:	f7f8 fc1e 	bl	80001f8 <__aeabi_dsub>
 80079bc:	a340      	add	r3, pc, #256	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x2f8>)
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	4606      	mov	r6, r0
 80079c4:	460f      	mov	r7, r1
 80079c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ca:	f7f8 fdcd 	bl	8000568 <__aeabi_dmul>
 80079ce:	4632      	mov	r2, r6
 80079d0:	463b      	mov	r3, r7
 80079d2:	f7f8 fc11 	bl	80001f8 <__aeabi_dsub>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	4606      	mov	r6, r0
 80079dc:	460f      	mov	r7, r1
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fc09 	bl	80001f8 <__aeabi_dsub>
 80079e6:	9a05      	ldr	r2, [sp, #20]
 80079e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b31      	cmp	r3, #49	; 0x31
 80079f0:	dc20      	bgt.n	8007a34 <__ieee754_rem_pio2+0x26c>
 80079f2:	e9c4 0100 	strd	r0, r1, [r4]
 80079f6:	46c2      	mov	sl, r8
 80079f8:	46cb      	mov	fp, r9
 80079fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80079fe:	4650      	mov	r0, sl
 8007a00:	4642      	mov	r2, r8
 8007a02:	464b      	mov	r3, r9
 8007a04:	4659      	mov	r1, fp
 8007a06:	f7f8 fbf7 	bl	80001f8 <__aeabi_dsub>
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	4632      	mov	r2, r6
 8007a0e:	f7f8 fbf3 	bl	80001f8 <__aeabi_dsub>
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a1a:	f6bf af11 	bge.w	8007840 <__ieee754_rem_pio2+0x78>
 8007a1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a22:	6063      	str	r3, [r4, #4]
 8007a24:	f8c4 8000 	str.w	r8, [r4]
 8007a28:	60a0      	str	r0, [r4, #8]
 8007a2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a2e:	60e3      	str	r3, [r4, #12]
 8007a30:	426d      	negs	r5, r5
 8007a32:	e705      	b.n	8007840 <__ieee754_rem_pio2+0x78>
 8007a34:	a326      	add	r3, pc, #152	; (adr r3, 8007ad0 <__ieee754_rem_pio2+0x308>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a3e:	f7f8 fd93 	bl	8000568 <__aeabi_dmul>
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	f7f8 fbd3 	bl	80001f8 <__aeabi_dsub>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4682      	mov	sl, r0
 8007a58:	468b      	mov	fp, r1
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	f7f8 fbcb 	bl	80001f8 <__aeabi_dsub>
 8007a62:	4632      	mov	r2, r6
 8007a64:	463b      	mov	r3, r7
 8007a66:	f7f8 fbc7 	bl	80001f8 <__aeabi_dsub>
 8007a6a:	a31b      	add	r3, pc, #108	; (adr r3, 8007ad8 <__ieee754_rem_pio2+0x310>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	4606      	mov	r6, r0
 8007a72:	460f      	mov	r7, r1
 8007a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a78:	f7f8 fd76 	bl	8000568 <__aeabi_dmul>
 8007a7c:	4632      	mov	r2, r6
 8007a7e:	463b      	mov	r3, r7
 8007a80:	f7f8 fbba 	bl	80001f8 <__aeabi_dsub>
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	e764      	b.n	8007954 <__ieee754_rem_pio2+0x18c>
 8007a8a:	4b1b      	ldr	r3, [pc, #108]	; (8007af8 <__ieee754_rem_pio2+0x330>)
 8007a8c:	4598      	cmp	r8, r3
 8007a8e:	dd35      	ble.n	8007afc <__ieee754_rem_pio2+0x334>
 8007a90:	ee10 2a10 	vmov	r2, s0
 8007a94:	463b      	mov	r3, r7
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	f7f8 fbad 	bl	80001f8 <__aeabi_dsub>
 8007a9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007aa2:	e9c4 0100 	strd	r0, r1, [r4]
 8007aa6:	e6a1      	b.n	80077ec <__ieee754_rem_pio2+0x24>
 8007aa8:	54400000 	.word	0x54400000
 8007aac:	3ff921fb 	.word	0x3ff921fb
 8007ab0:	1a626331 	.word	0x1a626331
 8007ab4:	3dd0b461 	.word	0x3dd0b461
 8007ab8:	1a600000 	.word	0x1a600000
 8007abc:	3dd0b461 	.word	0x3dd0b461
 8007ac0:	2e037073 	.word	0x2e037073
 8007ac4:	3ba3198a 	.word	0x3ba3198a
 8007ac8:	6dc9c883 	.word	0x6dc9c883
 8007acc:	3fe45f30 	.word	0x3fe45f30
 8007ad0:	2e000000 	.word	0x2e000000
 8007ad4:	3ba3198a 	.word	0x3ba3198a
 8007ad8:	252049c1 	.word	0x252049c1
 8007adc:	397b839a 	.word	0x397b839a
 8007ae0:	3fe921fb 	.word	0x3fe921fb
 8007ae4:	4002d97b 	.word	0x4002d97b
 8007ae8:	3ff921fb 	.word	0x3ff921fb
 8007aec:	413921fb 	.word	0x413921fb
 8007af0:	3fe00000 	.word	0x3fe00000
 8007af4:	080087d8 	.word	0x080087d8
 8007af8:	7fefffff 	.word	0x7fefffff
 8007afc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007b00:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007b04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007b08:	4630      	mov	r0, r6
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	f7f8 ffc6 	bl	8000a9c <__aeabi_d2iz>
 8007b10:	f7f8 fcc0 	bl	8000494 <__aeabi_i2d>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4630      	mov	r0, r6
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b20:	f7f8 fb6a 	bl	80001f8 <__aeabi_dsub>
 8007b24:	2200      	movs	r2, #0
 8007b26:	4b1f      	ldr	r3, [pc, #124]	; (8007ba4 <__ieee754_rem_pio2+0x3dc>)
 8007b28:	f7f8 fd1e 	bl	8000568 <__aeabi_dmul>
 8007b2c:	460f      	mov	r7, r1
 8007b2e:	4606      	mov	r6, r0
 8007b30:	f7f8 ffb4 	bl	8000a9c <__aeabi_d2iz>
 8007b34:	f7f8 fcae 	bl	8000494 <__aeabi_i2d>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4639      	mov	r1, r7
 8007b40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b44:	f7f8 fb58 	bl	80001f8 <__aeabi_dsub>
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4b16      	ldr	r3, [pc, #88]	; (8007ba4 <__ieee754_rem_pio2+0x3dc>)
 8007b4c:	f7f8 fd0c 	bl	8000568 <__aeabi_dmul>
 8007b50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b54:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007b58:	f04f 0803 	mov.w	r8, #3
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	2700      	movs	r7, #0
 8007b60:	4632      	mov	r2, r6
 8007b62:	463b      	mov	r3, r7
 8007b64:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007b68:	f108 3aff 	add.w	sl, r8, #4294967295
 8007b6c:	f7f8 ff64 	bl	8000a38 <__aeabi_dcmpeq>
 8007b70:	b9b0      	cbnz	r0, 8007ba0 <__ieee754_rem_pio2+0x3d8>
 8007b72:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <__ieee754_rem_pio2+0x3e0>)
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	2302      	movs	r3, #2
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	462a      	mov	r2, r5
 8007b7c:	4643      	mov	r3, r8
 8007b7e:	4621      	mov	r1, r4
 8007b80:	a806      	add	r0, sp, #24
 8007b82:	f000 f8dd 	bl	8007d40 <__kernel_rem_pio2>
 8007b86:	9b04      	ldr	r3, [sp, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	f6bf ae58 	bge.w	8007840 <__ieee754_rem_pio2+0x78>
 8007b90:	6863      	ldr	r3, [r4, #4]
 8007b92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b96:	6063      	str	r3, [r4, #4]
 8007b98:	68e3      	ldr	r3, [r4, #12]
 8007b9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b9e:	e746      	b.n	8007a2e <__ieee754_rem_pio2+0x266>
 8007ba0:	46d0      	mov	r8, sl
 8007ba2:	e7dd      	b.n	8007b60 <__ieee754_rem_pio2+0x398>
 8007ba4:	41700000 	.word	0x41700000
 8007ba8:	08008858 	.word	0x08008858
 8007bac:	00000000 	.word	0x00000000

08007bb0 <__kernel_cos>:
 8007bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	ec59 8b10 	vmov	r8, r9, d0
 8007bb8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007bbc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007bc0:	ed2d 8b02 	vpush	{d8}
 8007bc4:	eeb0 8a41 	vmov.f32	s16, s2
 8007bc8:	eef0 8a61 	vmov.f32	s17, s3
 8007bcc:	da07      	bge.n	8007bde <__kernel_cos+0x2e>
 8007bce:	ee10 0a10 	vmov	r0, s0
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	f7f8 ff62 	bl	8000a9c <__aeabi_d2iz>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f000 8089 	beq.w	8007cf0 <__kernel_cos+0x140>
 8007bde:	4642      	mov	r2, r8
 8007be0:	464b      	mov	r3, r9
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f8 fcbf 	bl	8000568 <__aeabi_dmul>
 8007bea:	2200      	movs	r2, #0
 8007bec:	4b4e      	ldr	r3, [pc, #312]	; (8007d28 <__kernel_cos+0x178>)
 8007bee:	4604      	mov	r4, r0
 8007bf0:	460d      	mov	r5, r1
 8007bf2:	f7f8 fcb9 	bl	8000568 <__aeabi_dmul>
 8007bf6:	a340      	add	r3, pc, #256	; (adr r3, 8007cf8 <__kernel_cos+0x148>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	468b      	mov	fp, r1
 8007c00:	4620      	mov	r0, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	f7f8 fcb0 	bl	8000568 <__aeabi_dmul>
 8007c08:	a33d      	add	r3, pc, #244	; (adr r3, 8007d00 <__kernel_cos+0x150>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 faf5 	bl	80001fc <__adddf3>
 8007c12:	4622      	mov	r2, r4
 8007c14:	462b      	mov	r3, r5
 8007c16:	f7f8 fca7 	bl	8000568 <__aeabi_dmul>
 8007c1a:	a33b      	add	r3, pc, #236	; (adr r3, 8007d08 <__kernel_cos+0x158>)
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f7f8 faea 	bl	80001f8 <__aeabi_dsub>
 8007c24:	4622      	mov	r2, r4
 8007c26:	462b      	mov	r3, r5
 8007c28:	f7f8 fc9e 	bl	8000568 <__aeabi_dmul>
 8007c2c:	a338      	add	r3, pc, #224	; (adr r3, 8007d10 <__kernel_cos+0x160>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fae3 	bl	80001fc <__adddf3>
 8007c36:	4622      	mov	r2, r4
 8007c38:	462b      	mov	r3, r5
 8007c3a:	f7f8 fc95 	bl	8000568 <__aeabi_dmul>
 8007c3e:	a336      	add	r3, pc, #216	; (adr r3, 8007d18 <__kernel_cos+0x168>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f7f8 fad8 	bl	80001f8 <__aeabi_dsub>
 8007c48:	4622      	mov	r2, r4
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	f7f8 fc8c 	bl	8000568 <__aeabi_dmul>
 8007c50:	a333      	add	r3, pc, #204	; (adr r3, 8007d20 <__kernel_cos+0x170>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fad1 	bl	80001fc <__adddf3>
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	f7f8 fc83 	bl	8000568 <__aeabi_dmul>
 8007c62:	4622      	mov	r2, r4
 8007c64:	462b      	mov	r3, r5
 8007c66:	f7f8 fc7f 	bl	8000568 <__aeabi_dmul>
 8007c6a:	ec53 2b18 	vmov	r2, r3, d8
 8007c6e:	4604      	mov	r4, r0
 8007c70:	460d      	mov	r5, r1
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	f7f8 fc77 	bl	8000568 <__aeabi_dmul>
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4620      	mov	r0, r4
 8007c82:	f7f8 fab9 	bl	80001f8 <__aeabi_dsub>
 8007c86:	4b29      	ldr	r3, [pc, #164]	; (8007d2c <__kernel_cos+0x17c>)
 8007c88:	429e      	cmp	r6, r3
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	4689      	mov	r9, r1
 8007c8e:	dc11      	bgt.n	8007cb4 <__kernel_cos+0x104>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4650      	mov	r0, sl
 8007c96:	4659      	mov	r1, fp
 8007c98:	f7f8 faae 	bl	80001f8 <__aeabi_dsub>
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4924      	ldr	r1, [pc, #144]	; (8007d30 <__kernel_cos+0x180>)
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f7f8 faa8 	bl	80001f8 <__aeabi_dsub>
 8007ca8:	ecbd 8b02 	vpop	{d8}
 8007cac:	ec41 0b10 	vmov	d0, r0, r1
 8007cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <__kernel_cos+0x184>)
 8007cb6:	491e      	ldr	r1, [pc, #120]	; (8007d30 <__kernel_cos+0x180>)
 8007cb8:	429e      	cmp	r6, r3
 8007cba:	bfcc      	ite	gt
 8007cbc:	4d1e      	ldrgt	r5, [pc, #120]	; (8007d38 <__kernel_cos+0x188>)
 8007cbe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007cc2:	2400      	movs	r4, #0
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	2000      	movs	r0, #0
 8007cca:	f7f8 fa95 	bl	80001f8 <__aeabi_dsub>
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	4650      	mov	r0, sl
 8007cd8:	4659      	mov	r1, fp
 8007cda:	f7f8 fa8d 	bl	80001f8 <__aeabi_dsub>
 8007cde:	4642      	mov	r2, r8
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	f7f8 fa89 	bl	80001f8 <__aeabi_dsub>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4630      	mov	r0, r6
 8007cec:	4639      	mov	r1, r7
 8007cee:	e7d9      	b.n	8007ca4 <__kernel_cos+0xf4>
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	490f      	ldr	r1, [pc, #60]	; (8007d30 <__kernel_cos+0x180>)
 8007cf4:	e7d8      	b.n	8007ca8 <__kernel_cos+0xf8>
 8007cf6:	bf00      	nop
 8007cf8:	be8838d4 	.word	0xbe8838d4
 8007cfc:	bda8fae9 	.word	0xbda8fae9
 8007d00:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d04:	3e21ee9e 	.word	0x3e21ee9e
 8007d08:	809c52ad 	.word	0x809c52ad
 8007d0c:	3e927e4f 	.word	0x3e927e4f
 8007d10:	19cb1590 	.word	0x19cb1590
 8007d14:	3efa01a0 	.word	0x3efa01a0
 8007d18:	16c15177 	.word	0x16c15177
 8007d1c:	3f56c16c 	.word	0x3f56c16c
 8007d20:	5555554c 	.word	0x5555554c
 8007d24:	3fa55555 	.word	0x3fa55555
 8007d28:	3fe00000 	.word	0x3fe00000
 8007d2c:	3fd33332 	.word	0x3fd33332
 8007d30:	3ff00000 	.word	0x3ff00000
 8007d34:	3fe90000 	.word	0x3fe90000
 8007d38:	3fd20000 	.word	0x3fd20000
 8007d3c:	00000000 	.word	0x00000000

08007d40 <__kernel_rem_pio2>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	ed2d 8b02 	vpush	{d8}
 8007d48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007d4c:	1ed4      	subs	r4, r2, #3
 8007d4e:	9308      	str	r3, [sp, #32]
 8007d50:	9101      	str	r1, [sp, #4]
 8007d52:	4bc5      	ldr	r3, [pc, #788]	; (8008068 <__kernel_rem_pio2+0x328>)
 8007d54:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007d56:	9009      	str	r0, [sp, #36]	; 0x24
 8007d58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	9b08      	ldr	r3, [sp, #32]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	9307      	str	r3, [sp, #28]
 8007d64:	2318      	movs	r3, #24
 8007d66:	fb94 f4f3 	sdiv	r4, r4, r3
 8007d6a:	f06f 0317 	mvn.w	r3, #23
 8007d6e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007d72:	fb04 3303 	mla	r3, r4, r3, r3
 8007d76:	eb03 0a02 	add.w	sl, r3, r2
 8007d7a:	9b04      	ldr	r3, [sp, #16]
 8007d7c:	9a07      	ldr	r2, [sp, #28]
 8007d7e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008058 <__kernel_rem_pio2+0x318>
 8007d82:	eb03 0802 	add.w	r8, r3, r2
 8007d86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007d88:	1aa7      	subs	r7, r4, r2
 8007d8a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007d8e:	ae22      	add	r6, sp, #136	; 0x88
 8007d90:	2500      	movs	r5, #0
 8007d92:	4545      	cmp	r5, r8
 8007d94:	dd13      	ble.n	8007dbe <__kernel_rem_pio2+0x7e>
 8007d96:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008058 <__kernel_rem_pio2+0x318>
 8007d9a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007d9e:	2600      	movs	r6, #0
 8007da0:	9b04      	ldr	r3, [sp, #16]
 8007da2:	429e      	cmp	r6, r3
 8007da4:	dc32      	bgt.n	8007e0c <__kernel_rem_pio2+0xcc>
 8007da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	9b08      	ldr	r3, [sp, #32]
 8007dac:	199d      	adds	r5, r3, r6
 8007dae:	ab22      	add	r3, sp, #136	; 0x88
 8007db0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007db4:	9306      	str	r3, [sp, #24]
 8007db6:	ec59 8b18 	vmov	r8, r9, d8
 8007dba:	2700      	movs	r7, #0
 8007dbc:	e01f      	b.n	8007dfe <__kernel_rem_pio2+0xbe>
 8007dbe:	42ef      	cmn	r7, r5
 8007dc0:	d407      	bmi.n	8007dd2 <__kernel_rem_pio2+0x92>
 8007dc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007dc6:	f7f8 fb65 	bl	8000494 <__aeabi_i2d>
 8007dca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007dce:	3501      	adds	r5, #1
 8007dd0:	e7df      	b.n	8007d92 <__kernel_rem_pio2+0x52>
 8007dd2:	ec51 0b18 	vmov	r0, r1, d8
 8007dd6:	e7f8      	b.n	8007dca <__kernel_rem_pio2+0x8a>
 8007dd8:	9906      	ldr	r1, [sp, #24]
 8007dda:	9d02      	ldr	r5, [sp, #8]
 8007ddc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007de0:	9106      	str	r1, [sp, #24]
 8007de2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007de6:	9502      	str	r5, [sp, #8]
 8007de8:	f7f8 fbbe 	bl	8000568 <__aeabi_dmul>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4640      	mov	r0, r8
 8007df2:	4649      	mov	r1, r9
 8007df4:	f7f8 fa02 	bl	80001fc <__adddf3>
 8007df8:	3701      	adds	r7, #1
 8007dfa:	4680      	mov	r8, r0
 8007dfc:	4689      	mov	r9, r1
 8007dfe:	9b07      	ldr	r3, [sp, #28]
 8007e00:	429f      	cmp	r7, r3
 8007e02:	dde9      	ble.n	8007dd8 <__kernel_rem_pio2+0x98>
 8007e04:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7c9      	b.n	8007da0 <__kernel_rem_pio2+0x60>
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	aa0e      	add	r2, sp, #56	; 0x38
 8007e10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e14:	930c      	str	r3, [sp, #48]	; 0x30
 8007e16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007e18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e1c:	9c04      	ldr	r4, [sp, #16]
 8007e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e20:	ab9a      	add	r3, sp, #616	; 0x268
 8007e22:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007e26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e2e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007e32:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007e36:	ab9a      	add	r3, sp, #616	; 0x268
 8007e38:	445b      	add	r3, fp
 8007e3a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007e3e:	2500      	movs	r5, #0
 8007e40:	1b63      	subs	r3, r4, r5
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	dc78      	bgt.n	8007f38 <__kernel_rem_pio2+0x1f8>
 8007e46:	4650      	mov	r0, sl
 8007e48:	ec49 8b10 	vmov	d0, r8, r9
 8007e4c:	f000 fc00 	bl	8008650 <scalbn>
 8007e50:	ec57 6b10 	vmov	r6, r7, d0
 8007e54:	2200      	movs	r2, #0
 8007e56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007e5a:	ee10 0a10 	vmov	r0, s0
 8007e5e:	4639      	mov	r1, r7
 8007e60:	f7f8 fb82 	bl	8000568 <__aeabi_dmul>
 8007e64:	ec41 0b10 	vmov	d0, r0, r1
 8007e68:	f000 fb6e 	bl	8008548 <floor>
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	ec51 0b10 	vmov	r0, r1, d0
 8007e72:	4b7e      	ldr	r3, [pc, #504]	; (800806c <__kernel_rem_pio2+0x32c>)
 8007e74:	f7f8 fb78 	bl	8000568 <__aeabi_dmul>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 f9ba 	bl	80001f8 <__aeabi_dsub>
 8007e84:	460f      	mov	r7, r1
 8007e86:	4606      	mov	r6, r0
 8007e88:	f7f8 fe08 	bl	8000a9c <__aeabi_d2iz>
 8007e8c:	9006      	str	r0, [sp, #24]
 8007e8e:	f7f8 fb01 	bl	8000494 <__aeabi_i2d>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 f9ad 	bl	80001f8 <__aeabi_dsub>
 8007e9e:	f1ba 0f00 	cmp.w	sl, #0
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	dd6c      	ble.n	8007f82 <__kernel_rem_pio2+0x242>
 8007ea8:	1e62      	subs	r2, r4, #1
 8007eaa:	ab0e      	add	r3, sp, #56	; 0x38
 8007eac:	f1ca 0118 	rsb	r1, sl, #24
 8007eb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007eb4:	9d06      	ldr	r5, [sp, #24]
 8007eb6:	fa40 f301 	asr.w	r3, r0, r1
 8007eba:	441d      	add	r5, r3
 8007ebc:	408b      	lsls	r3, r1
 8007ebe:	1ac0      	subs	r0, r0, r3
 8007ec0:	ab0e      	add	r3, sp, #56	; 0x38
 8007ec2:	9506      	str	r5, [sp, #24]
 8007ec4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007ec8:	f1ca 0317 	rsb	r3, sl, #23
 8007ecc:	fa40 f303 	asr.w	r3, r0, r3
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dd62      	ble.n	8007f9e <__kernel_rem_pio2+0x25e>
 8007ed8:	9b06      	ldr	r3, [sp, #24]
 8007eda:	2200      	movs	r2, #0
 8007edc:	3301      	adds	r3, #1
 8007ede:	9306      	str	r3, [sp, #24]
 8007ee0:	4615      	mov	r5, r2
 8007ee2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007ee6:	4294      	cmp	r4, r2
 8007ee8:	f300 8095 	bgt.w	8008016 <__kernel_rem_pio2+0x2d6>
 8007eec:	f1ba 0f00 	cmp.w	sl, #0
 8007ef0:	dd07      	ble.n	8007f02 <__kernel_rem_pio2+0x1c2>
 8007ef2:	f1ba 0f01 	cmp.w	sl, #1
 8007ef6:	f000 80a2 	beq.w	800803e <__kernel_rem_pio2+0x2fe>
 8007efa:	f1ba 0f02 	cmp.w	sl, #2
 8007efe:	f000 80c1 	beq.w	8008084 <__kernel_rem_pio2+0x344>
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d14a      	bne.n	8007f9e <__kernel_rem_pio2+0x25e>
 8007f08:	4632      	mov	r2, r6
 8007f0a:	463b      	mov	r3, r7
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	4958      	ldr	r1, [pc, #352]	; (8008070 <__kernel_rem_pio2+0x330>)
 8007f10:	f7f8 f972 	bl	80001f8 <__aeabi_dsub>
 8007f14:	4606      	mov	r6, r0
 8007f16:	460f      	mov	r7, r1
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	d040      	beq.n	8007f9e <__kernel_rem_pio2+0x25e>
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008060 <__kernel_rem_pio2+0x320>
 8007f22:	f000 fb95 	bl	8008650 <scalbn>
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	ec53 2b10 	vmov	r2, r3, d0
 8007f2e:	f7f8 f963 	bl	80001f8 <__aeabi_dsub>
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	e032      	b.n	8007f9e <__kernel_rem_pio2+0x25e>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4b4e      	ldr	r3, [pc, #312]	; (8008074 <__kernel_rem_pio2+0x334>)
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	4649      	mov	r1, r9
 8007f40:	f7f8 fb12 	bl	8000568 <__aeabi_dmul>
 8007f44:	f7f8 fdaa 	bl	8000a9c <__aeabi_d2iz>
 8007f48:	f7f8 faa4 	bl	8000494 <__aeabi_i2d>
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4b4a      	ldr	r3, [pc, #296]	; (8008078 <__kernel_rem_pio2+0x338>)
 8007f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f54:	f7f8 fb08 	bl	8000568 <__aeabi_dmul>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	4649      	mov	r1, r9
 8007f60:	f7f8 f94a 	bl	80001f8 <__aeabi_dsub>
 8007f64:	f7f8 fd9a 	bl	8000a9c <__aeabi_d2iz>
 8007f68:	ab0e      	add	r3, sp, #56	; 0x38
 8007f6a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007f6e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f76:	f7f8 f941 	bl	80001fc <__adddf3>
 8007f7a:	3501      	adds	r5, #1
 8007f7c:	4680      	mov	r8, r0
 8007f7e:	4689      	mov	r9, r1
 8007f80:	e75e      	b.n	8007e40 <__kernel_rem_pio2+0x100>
 8007f82:	d105      	bne.n	8007f90 <__kernel_rem_pio2+0x250>
 8007f84:	1e63      	subs	r3, r4, #1
 8007f86:	aa0e      	add	r2, sp, #56	; 0x38
 8007f88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007f8c:	15c3      	asrs	r3, r0, #23
 8007f8e:	e79f      	b.n	8007ed0 <__kernel_rem_pio2+0x190>
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b3a      	ldr	r3, [pc, #232]	; (800807c <__kernel_rem_pio2+0x33c>)
 8007f94:	f7f8 fd6e 	bl	8000a74 <__aeabi_dcmpge>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d139      	bne.n	8008010 <__kernel_rem_pio2+0x2d0>
 8007f9c:	9002      	str	r0, [sp, #8]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f7f8 fd47 	bl	8000a38 <__aeabi_dcmpeq>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f000 80c7 	beq.w	800813e <__kernel_rem_pio2+0x3fe>
 8007fb0:	1e65      	subs	r5, r4, #1
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	9904      	ldr	r1, [sp, #16]
 8007fb8:	428b      	cmp	r3, r1
 8007fba:	da6a      	bge.n	8008092 <__kernel_rem_pio2+0x352>
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	f000 8088 	beq.w	80080d2 <__kernel_rem_pio2+0x392>
 8007fc2:	ab0e      	add	r3, sp, #56	; 0x38
 8007fc4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007fc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80b4 	beq.w	800813a <__kernel_rem_pio2+0x3fa>
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008060 <__kernel_rem_pio2+0x320>
 8007fd8:	f000 fb3a 	bl	8008650 <scalbn>
 8007fdc:	00ec      	lsls	r4, r5, #3
 8007fde:	ab72      	add	r3, sp, #456	; 0x1c8
 8007fe0:	191e      	adds	r6, r3, r4
 8007fe2:	ec59 8b10 	vmov	r8, r9, d0
 8007fe6:	f106 0a08 	add.w	sl, r6, #8
 8007fea:	462f      	mov	r7, r5
 8007fec:	2f00      	cmp	r7, #0
 8007fee:	f280 80df 	bge.w	80081b0 <__kernel_rem_pio2+0x470>
 8007ff2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008058 <__kernel_rem_pio2+0x318>
 8007ff6:	f04f 0a00 	mov.w	sl, #0
 8007ffa:	eba5 030a 	sub.w	r3, r5, sl
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f2c0 810a 	blt.w	8008218 <__kernel_rem_pio2+0x4d8>
 8008004:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008080 <__kernel_rem_pio2+0x340>
 8008008:	ec59 8b18 	vmov	r8, r9, d8
 800800c:	2700      	movs	r7, #0
 800800e:	e0f5      	b.n	80081fc <__kernel_rem_pio2+0x4bc>
 8008010:	2302      	movs	r3, #2
 8008012:	9302      	str	r3, [sp, #8]
 8008014:	e760      	b.n	8007ed8 <__kernel_rem_pio2+0x198>
 8008016:	ab0e      	add	r3, sp, #56	; 0x38
 8008018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801c:	b94d      	cbnz	r5, 8008032 <__kernel_rem_pio2+0x2f2>
 800801e:	b12b      	cbz	r3, 800802c <__kernel_rem_pio2+0x2ec>
 8008020:	a80e      	add	r0, sp, #56	; 0x38
 8008022:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008026:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800802a:	2301      	movs	r3, #1
 800802c:	3201      	adds	r2, #1
 800802e:	461d      	mov	r5, r3
 8008030:	e759      	b.n	8007ee6 <__kernel_rem_pio2+0x1a6>
 8008032:	a80e      	add	r0, sp, #56	; 0x38
 8008034:	1acb      	subs	r3, r1, r3
 8008036:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800803a:	462b      	mov	r3, r5
 800803c:	e7f6      	b.n	800802c <__kernel_rem_pio2+0x2ec>
 800803e:	1e62      	subs	r2, r4, #1
 8008040:	ab0e      	add	r3, sp, #56	; 0x38
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800804a:	a90e      	add	r1, sp, #56	; 0x38
 800804c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008050:	e757      	b.n	8007f02 <__kernel_rem_pio2+0x1c2>
 8008052:	bf00      	nop
 8008054:	f3af 8000 	nop.w
	...
 8008064:	3ff00000 	.word	0x3ff00000
 8008068:	080089a0 	.word	0x080089a0
 800806c:	40200000 	.word	0x40200000
 8008070:	3ff00000 	.word	0x3ff00000
 8008074:	3e700000 	.word	0x3e700000
 8008078:	41700000 	.word	0x41700000
 800807c:	3fe00000 	.word	0x3fe00000
 8008080:	08008960 	.word	0x08008960
 8008084:	1e62      	subs	r2, r4, #1
 8008086:	ab0e      	add	r3, sp, #56	; 0x38
 8008088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008090:	e7db      	b.n	800804a <__kernel_rem_pio2+0x30a>
 8008092:	a90e      	add	r1, sp, #56	; 0x38
 8008094:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008098:	3b01      	subs	r3, #1
 800809a:	430a      	orrs	r2, r1
 800809c:	e78b      	b.n	8007fb6 <__kernel_rem_pio2+0x276>
 800809e:	3301      	adds	r3, #1
 80080a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80080a4:	2900      	cmp	r1, #0
 80080a6:	d0fa      	beq.n	800809e <__kernel_rem_pio2+0x35e>
 80080a8:	9a08      	ldr	r2, [sp, #32]
 80080aa:	4422      	add	r2, r4
 80080ac:	00d2      	lsls	r2, r2, #3
 80080ae:	a922      	add	r1, sp, #136	; 0x88
 80080b0:	18e3      	adds	r3, r4, r3
 80080b2:	9206      	str	r2, [sp, #24]
 80080b4:	440a      	add	r2, r1
 80080b6:	9302      	str	r3, [sp, #8]
 80080b8:	f10b 0108 	add.w	r1, fp, #8
 80080bc:	f102 0308 	add.w	r3, r2, #8
 80080c0:	1c66      	adds	r6, r4, #1
 80080c2:	910a      	str	r1, [sp, #40]	; 0x28
 80080c4:	2500      	movs	r5, #0
 80080c6:	930d      	str	r3, [sp, #52]	; 0x34
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	42b3      	cmp	r3, r6
 80080cc:	da04      	bge.n	80080d8 <__kernel_rem_pio2+0x398>
 80080ce:	461c      	mov	r4, r3
 80080d0:	e6a6      	b.n	8007e20 <__kernel_rem_pio2+0xe0>
 80080d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080d4:	2301      	movs	r3, #1
 80080d6:	e7e3      	b.n	80080a0 <__kernel_rem_pio2+0x360>
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	18ef      	adds	r7, r5, r3
 80080dc:	ab22      	add	r3, sp, #136	; 0x88
 80080de:	441f      	add	r7, r3
 80080e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80080e6:	f7f8 f9d5 	bl	8000494 <__aeabi_i2d>
 80080ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ec:	461c      	mov	r4, r3
 80080ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080f0:	e9c7 0100 	strd	r0, r1, [r7]
 80080f4:	eb03 0b05 	add.w	fp, r3, r5
 80080f8:	2700      	movs	r7, #0
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	f04f 0900 	mov.w	r9, #0
 8008102:	9b07      	ldr	r3, [sp, #28]
 8008104:	429f      	cmp	r7, r3
 8008106:	dd08      	ble.n	800811a <__kernel_rem_pio2+0x3da>
 8008108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800810a:	aa72      	add	r2, sp, #456	; 0x1c8
 800810c:	18eb      	adds	r3, r5, r3
 800810e:	4413      	add	r3, r2
 8008110:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8008114:	3601      	adds	r6, #1
 8008116:	3508      	adds	r5, #8
 8008118:	e7d6      	b.n	80080c8 <__kernel_rem_pio2+0x388>
 800811a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800811e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008122:	f7f8 fa21 	bl	8000568 <__aeabi_dmul>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4640      	mov	r0, r8
 800812c:	4649      	mov	r1, r9
 800812e:	f7f8 f865 	bl	80001fc <__adddf3>
 8008132:	3701      	adds	r7, #1
 8008134:	4680      	mov	r8, r0
 8008136:	4689      	mov	r9, r1
 8008138:	e7e3      	b.n	8008102 <__kernel_rem_pio2+0x3c2>
 800813a:	3d01      	subs	r5, #1
 800813c:	e741      	b.n	8007fc2 <__kernel_rem_pio2+0x282>
 800813e:	f1ca 0000 	rsb	r0, sl, #0
 8008142:	ec47 6b10 	vmov	d0, r6, r7
 8008146:	f000 fa83 	bl	8008650 <scalbn>
 800814a:	ec57 6b10 	vmov	r6, r7, d0
 800814e:	2200      	movs	r2, #0
 8008150:	4b99      	ldr	r3, [pc, #612]	; (80083b8 <__kernel_rem_pio2+0x678>)
 8008152:	ee10 0a10 	vmov	r0, s0
 8008156:	4639      	mov	r1, r7
 8008158:	f7f8 fc8c 	bl	8000a74 <__aeabi_dcmpge>
 800815c:	b1f8      	cbz	r0, 800819e <__kernel_rem_pio2+0x45e>
 800815e:	2200      	movs	r2, #0
 8008160:	4b96      	ldr	r3, [pc, #600]	; (80083bc <__kernel_rem_pio2+0x67c>)
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	f7f8 f9ff 	bl	8000568 <__aeabi_dmul>
 800816a:	f7f8 fc97 	bl	8000a9c <__aeabi_d2iz>
 800816e:	4680      	mov	r8, r0
 8008170:	f7f8 f990 	bl	8000494 <__aeabi_i2d>
 8008174:	2200      	movs	r2, #0
 8008176:	4b90      	ldr	r3, [pc, #576]	; (80083b8 <__kernel_rem_pio2+0x678>)
 8008178:	f7f8 f9f6 	bl	8000568 <__aeabi_dmul>
 800817c:	460b      	mov	r3, r1
 800817e:	4602      	mov	r2, r0
 8008180:	4639      	mov	r1, r7
 8008182:	4630      	mov	r0, r6
 8008184:	f7f8 f838 	bl	80001f8 <__aeabi_dsub>
 8008188:	f7f8 fc88 	bl	8000a9c <__aeabi_d2iz>
 800818c:	1c65      	adds	r5, r4, #1
 800818e:	ab0e      	add	r3, sp, #56	; 0x38
 8008190:	f10a 0a18 	add.w	sl, sl, #24
 8008194:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008198:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800819c:	e719      	b.n	8007fd2 <__kernel_rem_pio2+0x292>
 800819e:	4630      	mov	r0, r6
 80081a0:	4639      	mov	r1, r7
 80081a2:	f7f8 fc7b 	bl	8000a9c <__aeabi_d2iz>
 80081a6:	ab0e      	add	r3, sp, #56	; 0x38
 80081a8:	4625      	mov	r5, r4
 80081aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081ae:	e710      	b.n	8007fd2 <__kernel_rem_pio2+0x292>
 80081b0:	ab0e      	add	r3, sp, #56	; 0x38
 80081b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80081b6:	f7f8 f96d 	bl	8000494 <__aeabi_i2d>
 80081ba:	4642      	mov	r2, r8
 80081bc:	464b      	mov	r3, r9
 80081be:	f7f8 f9d3 	bl	8000568 <__aeabi_dmul>
 80081c2:	2200      	movs	r2, #0
 80081c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80081c8:	4b7c      	ldr	r3, [pc, #496]	; (80083bc <__kernel_rem_pio2+0x67c>)
 80081ca:	4640      	mov	r0, r8
 80081cc:	4649      	mov	r1, r9
 80081ce:	f7f8 f9cb 	bl	8000568 <__aeabi_dmul>
 80081d2:	3f01      	subs	r7, #1
 80081d4:	4680      	mov	r8, r0
 80081d6:	4689      	mov	r9, r1
 80081d8:	e708      	b.n	8007fec <__kernel_rem_pio2+0x2ac>
 80081da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80081e6:	f7f8 f9bf 	bl	8000568 <__aeabi_dmul>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4640      	mov	r0, r8
 80081f0:	4649      	mov	r1, r9
 80081f2:	f7f8 f803 	bl	80001fc <__adddf3>
 80081f6:	3701      	adds	r7, #1
 80081f8:	4680      	mov	r8, r0
 80081fa:	4689      	mov	r9, r1
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	429f      	cmp	r7, r3
 8008200:	dc01      	bgt.n	8008206 <__kernel_rem_pio2+0x4c6>
 8008202:	45ba      	cmp	sl, r7
 8008204:	dae9      	bge.n	80081da <__kernel_rem_pio2+0x49a>
 8008206:	ab4a      	add	r3, sp, #296	; 0x128
 8008208:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800820c:	e9c3 8900 	strd	r8, r9, [r3]
 8008210:	f10a 0a01 	add.w	sl, sl, #1
 8008214:	3e08      	subs	r6, #8
 8008216:	e6f0      	b.n	8007ffa <__kernel_rem_pio2+0x2ba>
 8008218:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800821a:	2b03      	cmp	r3, #3
 800821c:	d85b      	bhi.n	80082d6 <__kernel_rem_pio2+0x596>
 800821e:	e8df f003 	tbb	[pc, r3]
 8008222:	264a      	.short	0x264a
 8008224:	0226      	.short	0x0226
 8008226:	ab9a      	add	r3, sp, #616	; 0x268
 8008228:	441c      	add	r4, r3
 800822a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800822e:	46a2      	mov	sl, r4
 8008230:	46ab      	mov	fp, r5
 8008232:	f1bb 0f00 	cmp.w	fp, #0
 8008236:	dc6c      	bgt.n	8008312 <__kernel_rem_pio2+0x5d2>
 8008238:	46a2      	mov	sl, r4
 800823a:	46ab      	mov	fp, r5
 800823c:	f1bb 0f01 	cmp.w	fp, #1
 8008240:	f300 8086 	bgt.w	8008350 <__kernel_rem_pio2+0x610>
 8008244:	2000      	movs	r0, #0
 8008246:	2100      	movs	r1, #0
 8008248:	2d01      	cmp	r5, #1
 800824a:	f300 80a0 	bgt.w	800838e <__kernel_rem_pio2+0x64e>
 800824e:	9b02      	ldr	r3, [sp, #8]
 8008250:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008254:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008258:	2b00      	cmp	r3, #0
 800825a:	f040 809e 	bne.w	800839a <__kernel_rem_pio2+0x65a>
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	e9c3 7800 	strd	r7, r8, [r3]
 8008264:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008268:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800826c:	e033      	b.n	80082d6 <__kernel_rem_pio2+0x596>
 800826e:	3408      	adds	r4, #8
 8008270:	ab4a      	add	r3, sp, #296	; 0x128
 8008272:	441c      	add	r4, r3
 8008274:	462e      	mov	r6, r5
 8008276:	2000      	movs	r0, #0
 8008278:	2100      	movs	r1, #0
 800827a:	2e00      	cmp	r6, #0
 800827c:	da3a      	bge.n	80082f4 <__kernel_rem_pio2+0x5b4>
 800827e:	9b02      	ldr	r3, [sp, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d03d      	beq.n	8008300 <__kernel_rem_pio2+0x5c0>
 8008284:	4602      	mov	r2, r0
 8008286:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800828a:	9c01      	ldr	r4, [sp, #4]
 800828c:	e9c4 2300 	strd	r2, r3, [r4]
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008298:	f7f7 ffae 	bl	80001f8 <__aeabi_dsub>
 800829c:	ae4c      	add	r6, sp, #304	; 0x130
 800829e:	2401      	movs	r4, #1
 80082a0:	42a5      	cmp	r5, r4
 80082a2:	da30      	bge.n	8008306 <__kernel_rem_pio2+0x5c6>
 80082a4:	9b02      	ldr	r3, [sp, #8]
 80082a6:	b113      	cbz	r3, 80082ae <__kernel_rem_pio2+0x56e>
 80082a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ac:	4619      	mov	r1, r3
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80082b4:	e00f      	b.n	80082d6 <__kernel_rem_pio2+0x596>
 80082b6:	ab9a      	add	r3, sp, #616	; 0x268
 80082b8:	441c      	add	r4, r3
 80082ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80082be:	2000      	movs	r0, #0
 80082c0:	2100      	movs	r1, #0
 80082c2:	2d00      	cmp	r5, #0
 80082c4:	da10      	bge.n	80082e8 <__kernel_rem_pio2+0x5a8>
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	b113      	cbz	r3, 80082d0 <__kernel_rem_pio2+0x590>
 80082ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ce:	4619      	mov	r1, r3
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	e9c3 0100 	strd	r0, r1, [r3]
 80082d6:	9b06      	ldr	r3, [sp, #24]
 80082d8:	f003 0007 	and.w	r0, r3, #7
 80082dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80082e0:	ecbd 8b02 	vpop	{d8}
 80082e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80082ec:	f7f7 ff86 	bl	80001fc <__adddf3>
 80082f0:	3d01      	subs	r5, #1
 80082f2:	e7e6      	b.n	80082c2 <__kernel_rem_pio2+0x582>
 80082f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80082f8:	f7f7 ff80 	bl	80001fc <__adddf3>
 80082fc:	3e01      	subs	r6, #1
 80082fe:	e7bc      	b.n	800827a <__kernel_rem_pio2+0x53a>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	e7c1      	b.n	800828a <__kernel_rem_pio2+0x54a>
 8008306:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800830a:	f7f7 ff77 	bl	80001fc <__adddf3>
 800830e:	3401      	adds	r4, #1
 8008310:	e7c6      	b.n	80082a0 <__kernel_rem_pio2+0x560>
 8008312:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008316:	ed3a 7b02 	vldmdb	sl!, {d7}
 800831a:	4640      	mov	r0, r8
 800831c:	ec53 2b17 	vmov	r2, r3, d7
 8008320:	4649      	mov	r1, r9
 8008322:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008326:	f7f7 ff69 	bl	80001fc <__adddf3>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ff5f 	bl	80001f8 <__aeabi_dsub>
 800833a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800833e:	f7f7 ff5d 	bl	80001fc <__adddf3>
 8008342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008346:	e9ca 0100 	strd	r0, r1, [sl]
 800834a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800834e:	e770      	b.n	8008232 <__kernel_rem_pio2+0x4f2>
 8008350:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008354:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008358:	4630      	mov	r0, r6
 800835a:	ec53 2b17 	vmov	r2, r3, d7
 800835e:	4639      	mov	r1, r7
 8008360:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008364:	f7f7 ff4a 	bl	80001fc <__adddf3>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4680      	mov	r8, r0
 800836e:	4689      	mov	r9, r1
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f7 ff40 	bl	80001f8 <__aeabi_dsub>
 8008378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800837c:	f7f7 ff3e 	bl	80001fc <__adddf3>
 8008380:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008384:	e9ca 0100 	strd	r0, r1, [sl]
 8008388:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800838c:	e756      	b.n	800823c <__kernel_rem_pio2+0x4fc>
 800838e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008392:	f7f7 ff33 	bl	80001fc <__adddf3>
 8008396:	3d01      	subs	r5, #1
 8008398:	e756      	b.n	8008248 <__kernel_rem_pio2+0x508>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	9a01      	ldr	r2, [sp, #4]
 800839e:	601f      	str	r7, [r3, #0]
 80083a0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80083a4:	605c      	str	r4, [r3, #4]
 80083a6:	609d      	str	r5, [r3, #8]
 80083a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083ac:	60d3      	str	r3, [r2, #12]
 80083ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083b2:	6110      	str	r0, [r2, #16]
 80083b4:	6153      	str	r3, [r2, #20]
 80083b6:	e78e      	b.n	80082d6 <__kernel_rem_pio2+0x596>
 80083b8:	41700000 	.word	0x41700000
 80083bc:	3e700000 	.word	0x3e700000

080083c0 <__kernel_sin>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	ec55 4b10 	vmov	r4, r5, d0
 80083c8:	b085      	sub	sp, #20
 80083ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80083d2:	ed8d 1b00 	vstr	d1, [sp]
 80083d6:	9002      	str	r0, [sp, #8]
 80083d8:	da06      	bge.n	80083e8 <__kernel_sin+0x28>
 80083da:	ee10 0a10 	vmov	r0, s0
 80083de:	4629      	mov	r1, r5
 80083e0:	f7f8 fb5c 	bl	8000a9c <__aeabi_d2iz>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d051      	beq.n	800848c <__kernel_sin+0xcc>
 80083e8:	4622      	mov	r2, r4
 80083ea:	462b      	mov	r3, r5
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f8 f8ba 	bl	8000568 <__aeabi_dmul>
 80083f4:	4682      	mov	sl, r0
 80083f6:	468b      	mov	fp, r1
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4620      	mov	r0, r4
 80083fe:	4629      	mov	r1, r5
 8008400:	f7f8 f8b2 	bl	8000568 <__aeabi_dmul>
 8008404:	a341      	add	r3, pc, #260	; (adr r3, 800850c <__kernel_sin+0x14c>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	4680      	mov	r8, r0
 800840c:	4689      	mov	r9, r1
 800840e:	4650      	mov	r0, sl
 8008410:	4659      	mov	r1, fp
 8008412:	f7f8 f8a9 	bl	8000568 <__aeabi_dmul>
 8008416:	a33f      	add	r3, pc, #252	; (adr r3, 8008514 <__kernel_sin+0x154>)
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f7f7 feec 	bl	80001f8 <__aeabi_dsub>
 8008420:	4652      	mov	r2, sl
 8008422:	465b      	mov	r3, fp
 8008424:	f7f8 f8a0 	bl	8000568 <__aeabi_dmul>
 8008428:	a33c      	add	r3, pc, #240	; (adr r3, 800851c <__kernel_sin+0x15c>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f7 fee5 	bl	80001fc <__adddf3>
 8008432:	4652      	mov	r2, sl
 8008434:	465b      	mov	r3, fp
 8008436:	f7f8 f897 	bl	8000568 <__aeabi_dmul>
 800843a:	a33a      	add	r3, pc, #232	; (adr r3, 8008524 <__kernel_sin+0x164>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f7 feda 	bl	80001f8 <__aeabi_dsub>
 8008444:	4652      	mov	r2, sl
 8008446:	465b      	mov	r3, fp
 8008448:	f7f8 f88e 	bl	8000568 <__aeabi_dmul>
 800844c:	a337      	add	r3, pc, #220	; (adr r3, 800852c <__kernel_sin+0x16c>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f7f7 fed3 	bl	80001fc <__adddf3>
 8008456:	9b02      	ldr	r3, [sp, #8]
 8008458:	4606      	mov	r6, r0
 800845a:	460f      	mov	r7, r1
 800845c:	b9db      	cbnz	r3, 8008496 <__kernel_sin+0xd6>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4650      	mov	r0, sl
 8008464:	4659      	mov	r1, fp
 8008466:	f7f8 f87f 	bl	8000568 <__aeabi_dmul>
 800846a:	a325      	add	r3, pc, #148	; (adr r3, 8008500 <__kernel_sin+0x140>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 fec2 	bl	80001f8 <__aeabi_dsub>
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	f7f8 f876 	bl	8000568 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4620      	mov	r0, r4
 8008482:	4629      	mov	r1, r5
 8008484:	f7f7 feba 	bl	80001fc <__adddf3>
 8008488:	4604      	mov	r4, r0
 800848a:	460d      	mov	r5, r1
 800848c:	ec45 4b10 	vmov	d0, r4, r5
 8008490:	b005      	add	sp, #20
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008496:	2200      	movs	r2, #0
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <__kernel_sin+0x148>)
 800849a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800849e:	f7f8 f863 	bl	8000568 <__aeabi_dmul>
 80084a2:	4632      	mov	r2, r6
 80084a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a8:	463b      	mov	r3, r7
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	f7f8 f85b 	bl	8000568 <__aeabi_dmul>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ba:	f7f7 fe9d 	bl	80001f8 <__aeabi_dsub>
 80084be:	4652      	mov	r2, sl
 80084c0:	465b      	mov	r3, fp
 80084c2:	f7f8 f851 	bl	8000568 <__aeabi_dmul>
 80084c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ca:	f7f7 fe95 	bl	80001f8 <__aeabi_dsub>
 80084ce:	a30c      	add	r3, pc, #48	; (adr r3, 8008500 <__kernel_sin+0x140>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	4640      	mov	r0, r8
 80084da:	4649      	mov	r1, r9
 80084dc:	f7f8 f844 	bl	8000568 <__aeabi_dmul>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	4630      	mov	r0, r6
 80084e6:	4639      	mov	r1, r7
 80084e8:	f7f7 fe88 	bl	80001fc <__adddf3>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4620      	mov	r0, r4
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7f7 fe80 	bl	80001f8 <__aeabi_dsub>
 80084f8:	e7c6      	b.n	8008488 <__kernel_sin+0xc8>
 80084fa:	bf00      	nop
 80084fc:	f3af 8000 	nop.w
 8008500:	55555549 	.word	0x55555549
 8008504:	3fc55555 	.word	0x3fc55555
 8008508:	3fe00000 	.word	0x3fe00000
 800850c:	5acfd57c 	.word	0x5acfd57c
 8008510:	3de5d93a 	.word	0x3de5d93a
 8008514:	8a2b9ceb 	.word	0x8a2b9ceb
 8008518:	3e5ae5e6 	.word	0x3e5ae5e6
 800851c:	57b1fe7d 	.word	0x57b1fe7d
 8008520:	3ec71de3 	.word	0x3ec71de3
 8008524:	19c161d5 	.word	0x19c161d5
 8008528:	3f2a01a0 	.word	0x3f2a01a0
 800852c:	1110f8a6 	.word	0x1110f8a6
 8008530:	3f811111 	.word	0x3f811111

08008534 <fabs>:
 8008534:	ec51 0b10 	vmov	r0, r1, d0
 8008538:	ee10 2a10 	vmov	r2, s0
 800853c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008540:	ec43 2b10 	vmov	d0, r2, r3
 8008544:	4770      	bx	lr
	...

08008548 <floor>:
 8008548:	ec51 0b10 	vmov	r0, r1, d0
 800854c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008550:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008554:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008558:	2e13      	cmp	r6, #19
 800855a:	460c      	mov	r4, r1
 800855c:	ee10 5a10 	vmov	r5, s0
 8008560:	4680      	mov	r8, r0
 8008562:	dc34      	bgt.n	80085ce <floor+0x86>
 8008564:	2e00      	cmp	r6, #0
 8008566:	da16      	bge.n	8008596 <floor+0x4e>
 8008568:	a335      	add	r3, pc, #212	; (adr r3, 8008640 <floor+0xf8>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f7 fe45 	bl	80001fc <__adddf3>
 8008572:	2200      	movs	r2, #0
 8008574:	2300      	movs	r3, #0
 8008576:	f7f8 fa87 	bl	8000a88 <__aeabi_dcmpgt>
 800857a:	b148      	cbz	r0, 8008590 <floor+0x48>
 800857c:	2c00      	cmp	r4, #0
 800857e:	da59      	bge.n	8008634 <floor+0xec>
 8008580:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008584:	4a30      	ldr	r2, [pc, #192]	; (8008648 <floor+0x100>)
 8008586:	432b      	orrs	r3, r5
 8008588:	2500      	movs	r5, #0
 800858a:	42ab      	cmp	r3, r5
 800858c:	bf18      	it	ne
 800858e:	4614      	movne	r4, r2
 8008590:	4621      	mov	r1, r4
 8008592:	4628      	mov	r0, r5
 8008594:	e025      	b.n	80085e2 <floor+0x9a>
 8008596:	4f2d      	ldr	r7, [pc, #180]	; (800864c <floor+0x104>)
 8008598:	4137      	asrs	r7, r6
 800859a:	ea01 0307 	and.w	r3, r1, r7
 800859e:	4303      	orrs	r3, r0
 80085a0:	d01f      	beq.n	80085e2 <floor+0x9a>
 80085a2:	a327      	add	r3, pc, #156	; (adr r3, 8008640 <floor+0xf8>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f7f7 fe28 	bl	80001fc <__adddf3>
 80085ac:	2200      	movs	r2, #0
 80085ae:	2300      	movs	r3, #0
 80085b0:	f7f8 fa6a 	bl	8000a88 <__aeabi_dcmpgt>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d0eb      	beq.n	8008590 <floor+0x48>
 80085b8:	2c00      	cmp	r4, #0
 80085ba:	bfbe      	ittt	lt
 80085bc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80085c0:	fa43 f606 	asrlt.w	r6, r3, r6
 80085c4:	19a4      	addlt	r4, r4, r6
 80085c6:	ea24 0407 	bic.w	r4, r4, r7
 80085ca:	2500      	movs	r5, #0
 80085cc:	e7e0      	b.n	8008590 <floor+0x48>
 80085ce:	2e33      	cmp	r6, #51	; 0x33
 80085d0:	dd0b      	ble.n	80085ea <floor+0xa2>
 80085d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80085d6:	d104      	bne.n	80085e2 <floor+0x9a>
 80085d8:	ee10 2a10 	vmov	r2, s0
 80085dc:	460b      	mov	r3, r1
 80085de:	f7f7 fe0d 	bl	80001fc <__adddf3>
 80085e2:	ec41 0b10 	vmov	d0, r0, r1
 80085e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80085ee:	f04f 33ff 	mov.w	r3, #4294967295
 80085f2:	fa23 f707 	lsr.w	r7, r3, r7
 80085f6:	4207      	tst	r7, r0
 80085f8:	d0f3      	beq.n	80085e2 <floor+0x9a>
 80085fa:	a311      	add	r3, pc, #68	; (adr r3, 8008640 <floor+0xf8>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f7f7 fdfc 	bl	80001fc <__adddf3>
 8008604:	2200      	movs	r2, #0
 8008606:	2300      	movs	r3, #0
 8008608:	f7f8 fa3e 	bl	8000a88 <__aeabi_dcmpgt>
 800860c:	2800      	cmp	r0, #0
 800860e:	d0bf      	beq.n	8008590 <floor+0x48>
 8008610:	2c00      	cmp	r4, #0
 8008612:	da02      	bge.n	800861a <floor+0xd2>
 8008614:	2e14      	cmp	r6, #20
 8008616:	d103      	bne.n	8008620 <floor+0xd8>
 8008618:	3401      	adds	r4, #1
 800861a:	ea25 0507 	bic.w	r5, r5, r7
 800861e:	e7b7      	b.n	8008590 <floor+0x48>
 8008620:	2301      	movs	r3, #1
 8008622:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008626:	fa03 f606 	lsl.w	r6, r3, r6
 800862a:	4435      	add	r5, r6
 800862c:	4545      	cmp	r5, r8
 800862e:	bf38      	it	cc
 8008630:	18e4      	addcc	r4, r4, r3
 8008632:	e7f2      	b.n	800861a <floor+0xd2>
 8008634:	2500      	movs	r5, #0
 8008636:	462c      	mov	r4, r5
 8008638:	e7aa      	b.n	8008590 <floor+0x48>
 800863a:	bf00      	nop
 800863c:	f3af 8000 	nop.w
 8008640:	8800759c 	.word	0x8800759c
 8008644:	7e37e43c 	.word	0x7e37e43c
 8008648:	bff00000 	.word	0xbff00000
 800864c:	000fffff 	.word	0x000fffff

08008650 <scalbn>:
 8008650:	b570      	push	{r4, r5, r6, lr}
 8008652:	ec55 4b10 	vmov	r4, r5, d0
 8008656:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800865a:	4606      	mov	r6, r0
 800865c:	462b      	mov	r3, r5
 800865e:	b9aa      	cbnz	r2, 800868c <scalbn+0x3c>
 8008660:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008664:	4323      	orrs	r3, r4
 8008666:	d03b      	beq.n	80086e0 <scalbn+0x90>
 8008668:	4b31      	ldr	r3, [pc, #196]	; (8008730 <scalbn+0xe0>)
 800866a:	4629      	mov	r1, r5
 800866c:	2200      	movs	r2, #0
 800866e:	ee10 0a10 	vmov	r0, s0
 8008672:	f7f7 ff79 	bl	8000568 <__aeabi_dmul>
 8008676:	4b2f      	ldr	r3, [pc, #188]	; (8008734 <scalbn+0xe4>)
 8008678:	429e      	cmp	r6, r3
 800867a:	4604      	mov	r4, r0
 800867c:	460d      	mov	r5, r1
 800867e:	da12      	bge.n	80086a6 <scalbn+0x56>
 8008680:	a327      	add	r3, pc, #156	; (adr r3, 8008720 <scalbn+0xd0>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 ff6f 	bl	8000568 <__aeabi_dmul>
 800868a:	e009      	b.n	80086a0 <scalbn+0x50>
 800868c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008690:	428a      	cmp	r2, r1
 8008692:	d10c      	bne.n	80086ae <scalbn+0x5e>
 8008694:	ee10 2a10 	vmov	r2, s0
 8008698:	4620      	mov	r0, r4
 800869a:	4629      	mov	r1, r5
 800869c:	f7f7 fdae 	bl	80001fc <__adddf3>
 80086a0:	4604      	mov	r4, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	e01c      	b.n	80086e0 <scalbn+0x90>
 80086a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086aa:	460b      	mov	r3, r1
 80086ac:	3a36      	subs	r2, #54	; 0x36
 80086ae:	4432      	add	r2, r6
 80086b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80086b4:	428a      	cmp	r2, r1
 80086b6:	dd0b      	ble.n	80086d0 <scalbn+0x80>
 80086b8:	ec45 4b11 	vmov	d1, r4, r5
 80086bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008728 <scalbn+0xd8>
 80086c0:	f000 f83c 	bl	800873c <copysign>
 80086c4:	a318      	add	r3, pc, #96	; (adr r3, 8008728 <scalbn+0xd8>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	ec51 0b10 	vmov	r0, r1, d0
 80086ce:	e7da      	b.n	8008686 <scalbn+0x36>
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	dd08      	ble.n	80086e6 <scalbn+0x96>
 80086d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80086e0:	ec45 4b10 	vmov	d0, r4, r5
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80086ea:	da0d      	bge.n	8008708 <scalbn+0xb8>
 80086ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80086f0:	429e      	cmp	r6, r3
 80086f2:	ec45 4b11 	vmov	d1, r4, r5
 80086f6:	dce1      	bgt.n	80086bc <scalbn+0x6c>
 80086f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008720 <scalbn+0xd0>
 80086fc:	f000 f81e 	bl	800873c <copysign>
 8008700:	a307      	add	r3, pc, #28	; (adr r3, 8008720 <scalbn+0xd0>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	e7e0      	b.n	80086ca <scalbn+0x7a>
 8008708:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800870c:	3236      	adds	r2, #54	; 0x36
 800870e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008712:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008716:	4620      	mov	r0, r4
 8008718:	4629      	mov	r1, r5
 800871a:	2200      	movs	r2, #0
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <scalbn+0xe8>)
 800871e:	e7b2      	b.n	8008686 <scalbn+0x36>
 8008720:	c2f8f359 	.word	0xc2f8f359
 8008724:	01a56e1f 	.word	0x01a56e1f
 8008728:	8800759c 	.word	0x8800759c
 800872c:	7e37e43c 	.word	0x7e37e43c
 8008730:	43500000 	.word	0x43500000
 8008734:	ffff3cb0 	.word	0xffff3cb0
 8008738:	3c900000 	.word	0x3c900000

0800873c <copysign>:
 800873c:	ec51 0b10 	vmov	r0, r1, d0
 8008740:	ee11 0a90 	vmov	r0, s3
 8008744:	ee10 2a10 	vmov	r2, s0
 8008748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800874c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008750:	ea41 0300 	orr.w	r3, r1, r0
 8008754:	ec43 2b10 	vmov	d0, r2, r3
 8008758:	4770      	bx	lr
	...

0800875c <_init>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	bf00      	nop
 8008760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008762:	bc08      	pop	{r3}
 8008764:	469e      	mov	lr, r3
 8008766:	4770      	bx	lr

08008768 <_fini>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr
